
CV07.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dcc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08005e8c  08005e8c  00015e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800601c  0800601c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  0800601c  0800601c  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800601c  0800601c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800601c  0800601c  0001601c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006020  08006020  00016020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010e4  2000007c  080060a0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001160  080060a0  00021160  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001969f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000334e  00000000  00000000  00039743  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001828  00000000  00000000  0003ca98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001690  00000000  00000000  0003e2c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010218  00000000  00000000  0003f950  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013442  00000000  00000000  0004fb68  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005918e  00000000  00000000  00062faa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bc138  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ea8  00000000  00000000  000bc1b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005e74 	.word	0x08005e74

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	08005e74 	.word	0x08005e74

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	4a06      	ldr	r2, [pc, #24]	; (8000248 <vApplicationGetIdleTaskMemory+0x28>)
 8000230:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	4a05      	ldr	r2, [pc, #20]	; (800024c <vApplicationGetIdleTaskMemory+0x2c>)
 8000236:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2280      	movs	r2, #128	; 0x80
 800023c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	46bd      	mov	sp, r7
 8000242:	b004      	add	sp, #16
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	20000098 	.word	0x20000098
 800024c:	200000ec 	.word	0x200000ec

08000250 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8000250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000252:	b087      	sub	sp, #28
 8000254:	af00      	add	r7, sp, #0
 8000256:	60f8      	str	r0, [r7, #12]
 8000258:	0008      	movs	r0, r1
 800025a:	607a      	str	r2, [r7, #4]
 800025c:	0019      	movs	r1, r3
 800025e:	260b      	movs	r6, #11
 8000260:	19bb      	adds	r3, r7, r6
 8000262:	1c02      	adds	r2, r0, #0
 8000264:	701a      	strb	r2, [r3, #0]
 8000266:	2508      	movs	r5, #8
 8000268:	197b      	adds	r3, r7, r5
 800026a:	1c0a      	adds	r2, r1, #0
 800026c:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	685c      	ldr	r4, [r3, #4]
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	6898      	ldr	r0, [r3, #8]
 8000276:	197b      	adds	r3, r7, r5
 8000278:	881d      	ldrh	r5, [r3, #0]
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	19bb      	adds	r3, r7, r6
 800027e:	7819      	ldrb	r1, [r3, #0]
 8000280:	002b      	movs	r3, r5
 8000282:	47a0      	blx	r4
 8000284:	0003      	movs	r3, r0
 8000286:	617b      	str	r3, [r7, #20]
  return ret;
 8000288:	697b      	ldr	r3, [r7, #20]
}
 800028a:	0018      	movs	r0, r3
 800028c:	46bd      	mov	sp, r7
 800028e:	b007      	add	sp, #28
 8000290:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000292 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8000292:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000294:	b087      	sub	sp, #28
 8000296:	af00      	add	r7, sp, #0
 8000298:	60f8      	str	r0, [r7, #12]
 800029a:	0008      	movs	r0, r1
 800029c:	607a      	str	r2, [r7, #4]
 800029e:	0019      	movs	r1, r3
 80002a0:	260b      	movs	r6, #11
 80002a2:	19bb      	adds	r3, r7, r6
 80002a4:	1c02      	adds	r2, r0, #0
 80002a6:	701a      	strb	r2, [r3, #0]
 80002a8:	2508      	movs	r5, #8
 80002aa:	197b      	adds	r3, r7, r5
 80002ac:	1c0a      	adds	r2, r1, #0
 80002ae:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	681c      	ldr	r4, [r3, #0]
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	6898      	ldr	r0, [r3, #8]
 80002b8:	197b      	adds	r3, r7, r5
 80002ba:	881d      	ldrh	r5, [r3, #0]
 80002bc:	687a      	ldr	r2, [r7, #4]
 80002be:	19bb      	adds	r3, r7, r6
 80002c0:	7819      	ldrb	r1, [r3, #0]
 80002c2:	002b      	movs	r3, r5
 80002c4:	47a0      	blx	r4
 80002c6:	0003      	movs	r3, r0
 80002c8:	617b      	str	r3, [r7, #20]
  return ret;
 80002ca:	697b      	ldr	r3, [r7, #20]
}
 80002cc:	0018      	movs	r0, r3
 80002ce:	46bd      	mov	sp, r7
 80002d0:	b007      	add	sp, #28
 80002d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002d4 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 80002d4:	b590      	push	{r4, r7, lr}
 80002d6:	b087      	sub	sp, #28
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	000a      	movs	r2, r1
 80002de:	1cfb      	adds	r3, r7, #3
 80002e0:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80002e2:	2310      	movs	r3, #16
 80002e4:	18fa      	adds	r2, r7, r3
 80002e6:	6878      	ldr	r0, [r7, #4]
 80002e8:	2301      	movs	r3, #1
 80002ea:	2120      	movs	r1, #32
 80002ec:	f7ff ffb0 	bl	8000250 <lis2dw12_read_reg>
 80002f0:	0003      	movs	r3, r0
 80002f2:	617b      	str	r3, [r7, #20]

  if (ret == 0) {
 80002f4:	697b      	ldr	r3, [r7, #20]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d12a      	bne.n	8000350 <lis2dw12_power_mode_set+0x7c>
    ctrl1.mode = ( (uint8_t) val & 0x0CU ) >> 2;
 80002fa:	1cfb      	adds	r3, r7, #3
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	089b      	lsrs	r3, r3, #2
 8000300:	1c1a      	adds	r2, r3, #0
 8000302:	2303      	movs	r3, #3
 8000304:	4013      	ands	r3, r2
 8000306:	b2da      	uxtb	r2, r3
 8000308:	2410      	movs	r4, #16
 800030a:	193b      	adds	r3, r7, r4
 800030c:	2103      	movs	r1, #3
 800030e:	400a      	ands	r2, r1
 8000310:	0090      	lsls	r0, r2, #2
 8000312:	781a      	ldrb	r2, [r3, #0]
 8000314:	210c      	movs	r1, #12
 8000316:	438a      	bics	r2, r1
 8000318:	1c11      	adds	r1, r2, #0
 800031a:	1c02      	adds	r2, r0, #0
 800031c:	430a      	orrs	r2, r1
 800031e:	701a      	strb	r2, [r3, #0]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8000320:	1cfb      	adds	r3, r7, #3
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2203      	movs	r2, #3
 8000326:	4013      	ands	r3, r2
 8000328:	b2da      	uxtb	r2, r3
 800032a:	193b      	adds	r3, r7, r4
 800032c:	2103      	movs	r1, #3
 800032e:	400a      	ands	r2, r1
 8000330:	0010      	movs	r0, r2
 8000332:	781a      	ldrb	r2, [r3, #0]
 8000334:	2103      	movs	r1, #3
 8000336:	438a      	bics	r2, r1
 8000338:	1c11      	adds	r1, r2, #0
 800033a:	1c02      	adds	r2, r0, #0
 800033c:	430a      	orrs	r2, r1
 800033e:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8000340:	193a      	adds	r2, r7, r4
 8000342:	6878      	ldr	r0, [r7, #4]
 8000344:	2301      	movs	r3, #1
 8000346:	2120      	movs	r1, #32
 8000348:	f7ff ffa3 	bl	8000292 <lis2dw12_write_reg>
 800034c:	0003      	movs	r3, r0
 800034e:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0) {
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d108      	bne.n	8000368 <lis2dw12_power_mode_set+0x94>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8000356:	230c      	movs	r3, #12
 8000358:	18fa      	adds	r2, r7, r3
 800035a:	6878      	ldr	r0, [r7, #4]
 800035c:	2301      	movs	r3, #1
 800035e:	2125      	movs	r1, #37	; 0x25
 8000360:	f7ff ff76 	bl	8000250 <lis2dw12_read_reg>
 8000364:	0003      	movs	r3, r0
 8000366:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0) {
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d11a      	bne.n	80003a4 <lis2dw12_power_mode_set+0xd0>
    ctrl6.low_noise = ( (uint8_t) val & 0x10U ) >> 4;
 800036e:	1cfb      	adds	r3, r7, #3
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	091b      	lsrs	r3, r3, #4
 8000374:	1c1a      	adds	r2, r3, #0
 8000376:	2301      	movs	r3, #1
 8000378:	4013      	ands	r3, r2
 800037a:	b2da      	uxtb	r2, r3
 800037c:	240c      	movs	r4, #12
 800037e:	193b      	adds	r3, r7, r4
 8000380:	2101      	movs	r1, #1
 8000382:	400a      	ands	r2, r1
 8000384:	0090      	lsls	r0, r2, #2
 8000386:	781a      	ldrb	r2, [r3, #0]
 8000388:	2104      	movs	r1, #4
 800038a:	438a      	bics	r2, r1
 800038c:	1c11      	adds	r1, r2, #0
 800038e:	1c02      	adds	r2, r0, #0
 8000390:	430a      	orrs	r2, r1
 8000392:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8000394:	193a      	adds	r2, r7, r4
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	2301      	movs	r3, #1
 800039a:	2125      	movs	r1, #37	; 0x25
 800039c:	f7ff ff79 	bl	8000292 <lis2dw12_write_reg>
 80003a0:	0003      	movs	r3, r0
 80003a2:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80003a4:	697b      	ldr	r3, [r7, #20]
}
 80003a6:	0018      	movs	r0, r3
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b007      	add	sp, #28
 80003ac:	bd90      	pop	{r4, r7, pc}

080003ae <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 80003ae:	b590      	push	{r4, r7, lr}
 80003b0:	b087      	sub	sp, #28
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	6078      	str	r0, [r7, #4]
 80003b6:	000a      	movs	r2, r1
 80003b8:	1cfb      	adds	r3, r7, #3
 80003ba:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80003bc:	2310      	movs	r3, #16
 80003be:	18fa      	adds	r2, r7, r3
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	2301      	movs	r3, #1
 80003c4:	2120      	movs	r1, #32
 80003c6:	f7ff ff43 	bl	8000250 <lis2dw12_read_reg>
 80003ca:	0003      	movs	r3, r0
 80003cc:	617b      	str	r3, [r7, #20]

  if (ret == 0) {
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d116      	bne.n	8000402 <lis2dw12_data_rate_set+0x54>
    ctrl1.odr = (uint8_t) val;
 80003d4:	1cfb      	adds	r3, r7, #3
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	220f      	movs	r2, #15
 80003da:	4013      	ands	r3, r2
 80003dc:	b2da      	uxtb	r2, r3
 80003de:	2410      	movs	r4, #16
 80003e0:	193b      	adds	r3, r7, r4
 80003e2:	0110      	lsls	r0, r2, #4
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	210f      	movs	r1, #15
 80003e8:	400a      	ands	r2, r1
 80003ea:	1c11      	adds	r1, r2, #0
 80003ec:	1c02      	adds	r2, r0, #0
 80003ee:	430a      	orrs	r2, r1
 80003f0:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80003f2:	193a      	adds	r2, r7, r4
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	2301      	movs	r3, #1
 80003f8:	2120      	movs	r1, #32
 80003fa:	f7ff ff4a 	bl	8000292 <lis2dw12_write_reg>
 80003fe:	0003      	movs	r3, r0
 8000400:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0) {
 8000402:	697b      	ldr	r3, [r7, #20]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d108      	bne.n	800041a <lis2dw12_data_rate_set+0x6c>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8000408:	230c      	movs	r3, #12
 800040a:	18fa      	adds	r2, r7, r3
 800040c:	6878      	ldr	r0, [r7, #4]
 800040e:	2301      	movs	r3, #1
 8000410:	2122      	movs	r1, #34	; 0x22
 8000412:	f7ff ff1d 	bl	8000250 <lis2dw12_read_reg>
 8000416:	0003      	movs	r3, r0
 8000418:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0) {
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d11a      	bne.n	8000456 <lis2dw12_data_rate_set+0xa8>
    ctrl3.slp_mode = ( (uint8_t) val & 0x30U ) >> 4;
 8000420:	1cfb      	adds	r3, r7, #3
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	1c1a      	adds	r2, r3, #0
 8000428:	2303      	movs	r3, #3
 800042a:	4013      	ands	r3, r2
 800042c:	b2da      	uxtb	r2, r3
 800042e:	240c      	movs	r4, #12
 8000430:	193b      	adds	r3, r7, r4
 8000432:	2103      	movs	r1, #3
 8000434:	400a      	ands	r2, r1
 8000436:	0010      	movs	r0, r2
 8000438:	781a      	ldrb	r2, [r3, #0]
 800043a:	2103      	movs	r1, #3
 800043c:	438a      	bics	r2, r1
 800043e:	1c11      	adds	r1, r2, #0
 8000440:	1c02      	adds	r2, r0, #0
 8000442:	430a      	orrs	r2, r1
 8000444:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8000446:	193a      	adds	r2, r7, r4
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	2301      	movs	r3, #1
 800044c:	2122      	movs	r1, #34	; 0x22
 800044e:	f7ff ff20 	bl	8000292 <lis2dw12_write_reg>
 8000452:	0003      	movs	r3, r0
 8000454:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8000456:	697b      	ldr	r3, [r7, #20]
}
 8000458:	0018      	movs	r0, r3
 800045a:	46bd      	mov	sp, r7
 800045c:	b007      	add	sp, #28
 800045e:	bd90      	pop	{r4, r7, pc}

08000460 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000460:	b590      	push	{r4, r7, lr}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	000a      	movs	r2, r1
 800046a:	1cfb      	adds	r3, r7, #3
 800046c:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800046e:	2308      	movs	r3, #8
 8000470:	18fa      	adds	r2, r7, r3
 8000472:	6878      	ldr	r0, [r7, #4]
 8000474:	2301      	movs	r3, #1
 8000476:	2121      	movs	r1, #33	; 0x21
 8000478:	f7ff feea 	bl	8000250 <lis2dw12_read_reg>
 800047c:	0003      	movs	r3, r0
 800047e:	60fb      	str	r3, [r7, #12]

  if (ret == 0) {
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d118      	bne.n	80004b8 <lis2dw12_block_data_update_set+0x58>
    reg.bdu = val;
 8000486:	1cfb      	adds	r3, r7, #3
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	2201      	movs	r2, #1
 800048c:	4013      	ands	r3, r2
 800048e:	b2da      	uxtb	r2, r3
 8000490:	2408      	movs	r4, #8
 8000492:	193b      	adds	r3, r7, r4
 8000494:	2101      	movs	r1, #1
 8000496:	400a      	ands	r2, r1
 8000498:	00d0      	lsls	r0, r2, #3
 800049a:	781a      	ldrb	r2, [r3, #0]
 800049c:	2108      	movs	r1, #8
 800049e:	438a      	bics	r2, r1
 80004a0:	1c11      	adds	r1, r2, #0
 80004a2:	1c02      	adds	r2, r0, #0
 80004a4:	430a      	orrs	r2, r1
 80004a6:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80004a8:	193a      	adds	r2, r7, r4
 80004aa:	6878      	ldr	r0, [r7, #4]
 80004ac:	2301      	movs	r3, #1
 80004ae:	2121      	movs	r1, #33	; 0x21
 80004b0:	f7ff feef 	bl	8000292 <lis2dw12_write_reg>
 80004b4:	0003      	movs	r3, r0
 80004b6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80004b8:	68fb      	ldr	r3, [r7, #12]
}
 80004ba:	0018      	movs	r0, r3
 80004bc:	46bd      	mov	sp, r7
 80004be:	b005      	add	sp, #20
 80004c0:	bd90      	pop	{r4, r7, pc}

080004c2 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 80004c2:	b590      	push	{r4, r7, lr}
 80004c4:	b085      	sub	sp, #20
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
 80004ca:	000a      	movs	r2, r1
 80004cc:	1cfb      	adds	r3, r7, #3
 80004ce:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80004d0:	2308      	movs	r3, #8
 80004d2:	18fa      	adds	r2, r7, r3
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	2301      	movs	r3, #1
 80004d8:	2125      	movs	r1, #37	; 0x25
 80004da:	f7ff feb9 	bl	8000250 <lis2dw12_read_reg>
 80004de:	0003      	movs	r3, r0
 80004e0:	60fb      	str	r3, [r7, #12]

  if (ret == 0) {
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d118      	bne.n	800051a <lis2dw12_full_scale_set+0x58>
    reg.fs = (uint8_t) val;
 80004e8:	1cfb      	adds	r3, r7, #3
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2203      	movs	r2, #3
 80004ee:	4013      	ands	r3, r2
 80004f0:	b2da      	uxtb	r2, r3
 80004f2:	2408      	movs	r4, #8
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	2103      	movs	r1, #3
 80004f8:	400a      	ands	r2, r1
 80004fa:	0110      	lsls	r0, r2, #4
 80004fc:	781a      	ldrb	r2, [r3, #0]
 80004fe:	2130      	movs	r1, #48	; 0x30
 8000500:	438a      	bics	r2, r1
 8000502:	1c11      	adds	r1, r2, #0
 8000504:	1c02      	adds	r2, r0, #0
 8000506:	430a      	orrs	r2, r1
 8000508:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800050a:	193a      	adds	r2, r7, r4
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	2301      	movs	r3, #1
 8000510:	2125      	movs	r1, #37	; 0x25
 8000512:	f7ff febe 	bl	8000292 <lis2dw12_write_reg>
 8000516:	0003      	movs	r3, r0
 8000518:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800051a:	68fb      	ldr	r3, [r7, #12]
}
 800051c:	0018      	movs	r0, r3
 800051e:	46bd      	mov	sp, r7
 8000520:	b005      	add	sp, #20
 8000522:	bd90      	pop	{r4, r7, pc}

08000524 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8000524:	b590      	push	{r4, r7, lr}
 8000526:	b087      	sub	sp, #28
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 800052e:	210c      	movs	r1, #12
 8000530:	000c      	movs	r4, r1
 8000532:	187a      	adds	r2, r7, r1
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	2306      	movs	r3, #6
 8000538:	2128      	movs	r1, #40	; 0x28
 800053a:	f7ff fe89 	bl	8000250 <lis2dw12_read_reg>
 800053e:	0003      	movs	r3, r0
 8000540:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 8000542:	0021      	movs	r1, r4
 8000544:	187b      	adds	r3, r7, r1
 8000546:	785b      	ldrb	r3, [r3, #1]
 8000548:	b21a      	sxth	r2, r3
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	2200      	movs	r2, #0
 8000552:	5e9b      	ldrsh	r3, [r3, r2]
 8000554:	b29b      	uxth	r3, r3
 8000556:	021b      	lsls	r3, r3, #8
 8000558:	b29a      	uxth	r2, r3
 800055a:	187b      	adds	r3, r7, r1
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	b29b      	uxth	r3, r3
 8000560:	18d3      	adds	r3, r2, r3
 8000562:	b29b      	uxth	r3, r3
 8000564:	b21a      	sxth	r2, r3
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800056a:	187b      	adds	r3, r7, r1
 800056c:	78da      	ldrb	r2, [r3, #3]
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	3302      	adds	r3, #2
 8000572:	b212      	sxth	r2, r2
 8000574:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	3302      	adds	r3, #2
 800057a:	2200      	movs	r2, #0
 800057c:	5e9b      	ldrsh	r3, [r3, r2]
 800057e:	b29b      	uxth	r3, r3
 8000580:	021b      	lsls	r3, r3, #8
 8000582:	b29a      	uxth	r2, r3
 8000584:	187b      	adds	r3, r7, r1
 8000586:	789b      	ldrb	r3, [r3, #2]
 8000588:	b29b      	uxth	r3, r3
 800058a:	18d3      	adds	r3, r2, r3
 800058c:	b29a      	uxth	r2, r3
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	3302      	adds	r3, #2
 8000592:	b212      	sxth	r2, r2
 8000594:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8000596:	187b      	adds	r3, r7, r1
 8000598:	795a      	ldrb	r2, [r3, #5]
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	3304      	adds	r3, #4
 800059e:	b212      	sxth	r2, r2
 80005a0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	3304      	adds	r3, #4
 80005a6:	2200      	movs	r2, #0
 80005a8:	5e9b      	ldrsh	r3, [r3, r2]
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	021b      	lsls	r3, r3, #8
 80005ae:	b29a      	uxth	r2, r3
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	791b      	ldrb	r3, [r3, #4]
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	18d3      	adds	r3, r2, r3
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	3304      	adds	r3, #4
 80005be:	b212      	sxth	r2, r2
 80005c0:	801a      	strh	r2, [r3, #0]
  return ret;
 80005c2:	697b      	ldr	r3, [r7, #20]
}
 80005c4:	0018      	movs	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	b007      	add	sp, #28
 80005ca:	bd90      	pop	{r4, r7, pc}

080005cc <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 80005d6:	683a      	ldr	r2, [r7, #0]
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	2301      	movs	r3, #1
 80005dc:	210f      	movs	r1, #15
 80005de:	f7ff fe37 	bl	8000250 <lis2dw12_read_reg>
 80005e2:	0003      	movs	r3, r0
 80005e4:	60fb      	str	r3, [r7, #12]
  return ret;
 80005e6:	68fb      	ldr	r3, [r7, #12]
}
 80005e8:	0018      	movs	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b004      	add	sp, #16
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	000a      	movs	r2, r1
 80005fa:	1cfb      	adds	r3, r7, #3
 80005fc:	701a      	strb	r2, [r3, #0]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80005fe:	2308      	movs	r3, #8
 8000600:	18fa      	adds	r2, r7, r3
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	2301      	movs	r3, #1
 8000606:	212e      	movs	r1, #46	; 0x2e
 8000608:	f7ff fe22 	bl	8000250 <lis2dw12_read_reg>
 800060c:	0003      	movs	r3, r0
 800060e:	60fb      	str	r3, [r7, #12]

  if (ret == 0) {
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d116      	bne.n	8000644 <lis2dw12_fifo_mode_set+0x54>
    reg.fmode = (uint8_t) val;
 8000616:	1cfb      	adds	r3, r7, #3
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2207      	movs	r2, #7
 800061c:	4013      	ands	r3, r2
 800061e:	b2da      	uxtb	r2, r3
 8000620:	2408      	movs	r4, #8
 8000622:	193b      	adds	r3, r7, r4
 8000624:	0150      	lsls	r0, r2, #5
 8000626:	781a      	ldrb	r2, [r3, #0]
 8000628:	211f      	movs	r1, #31
 800062a:	400a      	ands	r2, r1
 800062c:	1c11      	adds	r1, r2, #0
 800062e:	1c02      	adds	r2, r0, #0
 8000630:	430a      	orrs	r2, r1
 8000632:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg,
 8000634:	193a      	adds	r2, r7, r4
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	2301      	movs	r3, #1
 800063a:	212e      	movs	r1, #46	; 0x2e
 800063c:	f7ff fe29 	bl	8000292 <lis2dw12_write_reg>
 8000640:	0003      	movs	r3, r0
 8000642:	60fb      	str	r3, [r7, #12]
                             1);
  }

  return ret;
 8000644:	68fb      	ldr	r3, [r7, #12]
}
 8000646:	0018      	movs	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	b005      	add	sp, #20
 800064c:	bd90      	pop	{r4, r7, pc}

0800064e <lis2dw12_fifo_data_level_get>:
  * @param  val      change the values of diff in reg FIFO_SAMPLES
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_data_level_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800064e:	b590      	push	{r4, r7, lr}
 8000650:	b085      	sub	sp, #20
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	6039      	str	r1, [r7, #0]
  lis2dw12_fifo_samples_t reg;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_SAMPLES, (uint8_t *) &reg,
 8000658:	2408      	movs	r4, #8
 800065a:	193a      	adds	r2, r7, r4
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	2301      	movs	r3, #1
 8000660:	212f      	movs	r1, #47	; 0x2f
 8000662:	f7ff fdf5 	bl	8000250 <lis2dw12_read_reg>
 8000666:	0003      	movs	r3, r0
 8000668:	60fb      	str	r3, [r7, #12]
                          1);
  *val = reg.diff;
 800066a:	193b      	adds	r3, r7, r4
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	069b      	lsls	r3, r3, #26
 8000670:	0e9b      	lsrs	r3, r3, #26
 8000672:	b2db      	uxtb	r3, r3
 8000674:	001a      	movs	r2, r3
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	701a      	strb	r2, [r3, #0]
  return ret;
 800067a:	68fb      	ldr	r3, [r7, #12]
}
 800067c:	0018      	movs	r0, r3
 800067e:	46bd      	mov	sp, r7
 8000680:	b005      	add	sp, #20
 8000682:	bd90      	pop	{r4, r7, pc}

08000684 <platform_write>:
/*
 * Replace the functions "platform_write" and "platform_read" with your
 * platform specific read and write function.
 */
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
	{
 8000684:	b5b0      	push	{r4, r5, r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af04      	add	r7, sp, #16
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	0008      	movs	r0, r1
 800068e:	607a      	str	r2, [r7, #4]
 8000690:	0019      	movs	r1, r3
 8000692:	240b      	movs	r4, #11
 8000694:	193b      	adds	r3, r7, r4
 8000696:	1c02      	adds	r2, r0, #0
 8000698:	701a      	strb	r2, [r3, #0]
 800069a:	2508      	movs	r5, #8
 800069c:	197b      	adds	r3, r7, r5
 800069e:	1c0a      	adds	r2, r1, #0
 80006a0:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Mem_Write(handle, LIS2DW12_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	68f8      	ldr	r0, [r7, #12]
 80006aa:	23fa      	movs	r3, #250	; 0xfa
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	9302      	str	r3, [sp, #8]
 80006b0:	197b      	adds	r3, r7, r5
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	9301      	str	r3, [sp, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	2301      	movs	r3, #1
 80006bc:	2133      	movs	r1, #51	; 0x33
 80006be:	f000 ffc1 	bl	8001644 <HAL_I2C_Mem_Write>
		return 0;
 80006c2:	2300      	movs	r3, #0
	}
 80006c4:	0018      	movs	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b004      	add	sp, #16
 80006ca:	bdb0      	pop	{r4, r5, r7, pc}

080006cc <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
	{
 80006cc:	b5b0      	push	{r4, r5, r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af04      	add	r7, sp, #16
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	0008      	movs	r0, r1
 80006d6:	607a      	str	r2, [r7, #4]
 80006d8:	0019      	movs	r1, r3
 80006da:	240b      	movs	r4, #11
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	1c02      	adds	r2, r0, #0
 80006e0:	701a      	strb	r2, [r3, #0]
 80006e2:	2508      	movs	r5, #8
 80006e4:	197b      	adds	r3, r7, r5
 80006e6:	1c0a      	adds	r2, r1, #0
 80006e8:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Mem_Read(handle, LIS2DW12_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	68f8      	ldr	r0, [r7, #12]
 80006f2:	23fa      	movs	r3, #250	; 0xfa
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	9302      	str	r3, [sp, #8]
 80006f8:	197b      	adds	r3, r7, r5
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	9301      	str	r3, [sp, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	2301      	movs	r3, #1
 8000704:	2133      	movs	r1, #51	; 0x33
 8000706:	f001 f8cb 	bl	80018a0 <HAL_I2C_Mem_Read>
		return 0;
 800070a:	2300      	movs	r3, #0
	}
 800070c:	0018      	movs	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	b004      	add	sp, #16
 8000712:	bdb0      	pop	{r4, r5, r7, pc}

08000714 <_write>:

int _write(int file, char const *buf, int n)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
	/* stdout redirection to UART2 */
	HAL_UART_Transmit(&huart2, (uint8_t*) (buf), n, HAL_MAX_DELAY);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	b29a      	uxth	r2, r3
 8000724:	2301      	movs	r3, #1
 8000726:	425b      	negs	r3, r3
 8000728:	68b9      	ldr	r1, [r7, #8]
 800072a:	4804      	ldr	r0, [pc, #16]	; (800073c <_write+0x28>)
 800072c:	f002 fc8e 	bl	800304c <HAL_UART_Transmit>
	return n;
 8000730:	687b      	ldr	r3, [r7, #4]
}
 8000732:	0018      	movs	r0, r3
 8000734:	46bd      	mov	sp, r7
 8000736:	b004      	add	sp, #16
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	20001098 	.word	0x20001098

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b5b0      	push	{r4, r5, r7, lr}
 8000742:	b09a      	sub	sp, #104	; 0x68
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000746:	f000 fc7b 	bl	8001040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074a:	f000 f85b 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074e:	f000 f92b 	bl	80009a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000752:	f000 f8f9 	bl	8000948 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000756:	f000 f8b7 	bl	80008c8 <MX_I2C1_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of xVisualQueue */
  osMessageQDef(xVisualQueue, 16, int16_t);
 800075a:	2158      	movs	r1, #88	; 0x58
 800075c:	187b      	adds	r3, r7, r1
 800075e:	4a21      	ldr	r2, [pc, #132]	; (80007e4 <main+0xa4>)
 8000760:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000762:	c331      	stmia	r3!, {r0, r4, r5}
 8000764:	6812      	ldr	r2, [r2, #0]
 8000766:	601a      	str	r2, [r3, #0]
  xVisualQueueHandle = osMessageCreate(osMessageQ(xVisualQueue), NULL);
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2100      	movs	r1, #0
 800076c:	0018      	movs	r0, r3
 800076e:	f003 f895 	bl	800389c <osMessageCreate>
 8000772:	0002      	movs	r2, r0
 8000774:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <main+0xa8>)
 8000776:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000778:	213c      	movs	r1, #60	; 0x3c
 800077a:	187b      	adds	r3, r7, r1
 800077c:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <main+0xac>)
 800077e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000780:	c331      	stmia	r3!, {r0, r4, r5}
 8000782:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000784:	c331      	stmia	r3!, {r0, r4, r5}
 8000786:	6812      	ldr	r2, [r2, #0]
 8000788:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2100      	movs	r1, #0
 800078e:	0018      	movs	r0, r3
 8000790:	f003 f823 	bl	80037da <osThreadCreate>
 8000794:	0002      	movs	r2, r0
 8000796:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <main+0xb0>)
 8000798:	601a      	str	r2, [r3, #0]

  /* definition and creation of VisualTask */
  osThreadDef(VisualTask, StartVisualTask, osPriorityIdle, 0, 128);
 800079a:	2120      	movs	r1, #32
 800079c:	187b      	adds	r3, r7, r1
 800079e:	4a15      	ldr	r2, [pc, #84]	; (80007f4 <main+0xb4>)
 80007a0:	ca31      	ldmia	r2!, {r0, r4, r5}
 80007a2:	c331      	stmia	r3!, {r0, r4, r5}
 80007a4:	ca31      	ldmia	r2!, {r0, r4, r5}
 80007a6:	c331      	stmia	r3!, {r0, r4, r5}
 80007a8:	6812      	ldr	r2, [r2, #0]
 80007aa:	601a      	str	r2, [r3, #0]
  VisualTaskHandle = osThreadCreate(osThread(VisualTask), NULL);
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2100      	movs	r1, #0
 80007b0:	0018      	movs	r0, r3
 80007b2:	f003 f812 	bl	80037da <osThreadCreate>
 80007b6:	0002      	movs	r2, r0
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <main+0xb8>)
 80007ba:	601a      	str	r2, [r3, #0]

  /* definition and creation of AcceleroTask */
  osThreadDef(AcceleroTask, StartAcceleroTask, osPriorityIdle, 0, 128);
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <main+0xbc>)
 80007c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007c2:	c313      	stmia	r3!, {r0, r1, r4}
 80007c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007c6:	c313      	stmia	r3!, {r0, r1, r4}
 80007c8:	6812      	ldr	r2, [r2, #0]
 80007ca:	601a      	str	r2, [r3, #0]
  AcceleroTaskHandle = osThreadCreate(osThread(AcceleroTask), NULL);
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2100      	movs	r1, #0
 80007d0:	0018      	movs	r0, r3
 80007d2:	f003 f802 	bl	80037da <osThreadCreate>
 80007d6:	0002      	movs	r2, r0
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <main+0xc0>)
 80007da:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007dc:	f002 fff5 	bl	80037ca <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <main+0xa0>
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	08005e8c 	.word	0x08005e8c
 80007e8:	20001094 	.word	0x20001094
 80007ec:	08005ea8 	.word	0x08005ea8
 80007f0:	2000103c 	.word	0x2000103c
 80007f4:	08005ed0 	.word	0x08005ed0
 80007f8:	20001090 	.word	0x20001090
 80007fc:	08005efc 	.word	0x08005efc
 8000800:	2000108c 	.word	0x2000108c

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b095      	sub	sp, #84	; 0x54
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	2420      	movs	r4, #32
 800080c:	193b      	adds	r3, r7, r4
 800080e:	0018      	movs	r0, r3
 8000810:	2330      	movs	r3, #48	; 0x30
 8000812:	001a      	movs	r2, r3
 8000814:	2100      	movs	r1, #0
 8000816:	f004 fc0c 	bl	8005032 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081a:	2310      	movs	r3, #16
 800081c:	18fb      	adds	r3, r7, r3
 800081e:	0018      	movs	r0, r3
 8000820:	2310      	movs	r3, #16
 8000822:	001a      	movs	r2, r3
 8000824:	2100      	movs	r1, #0
 8000826:	f004 fc04 	bl	8005032 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800082a:	003b      	movs	r3, r7
 800082c:	0018      	movs	r0, r3
 800082e:	2310      	movs	r3, #16
 8000830:	001a      	movs	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	f004 fbfd 	bl	8005032 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000838:	0021      	movs	r1, r4
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2202      	movs	r2, #2
 800083e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2201      	movs	r2, #1
 8000844:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2210      	movs	r2, #16
 800084a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2202      	movs	r2, #2
 8000850:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2200      	movs	r2, #0
 8000856:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	22a0      	movs	r2, #160	; 0xa0
 800085c:	0392      	lsls	r2, r2, #14
 800085e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2200      	movs	r2, #0
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000866:	187b      	adds	r3, r7, r1
 8000868:	0018      	movs	r0, r3
 800086a:	f001 fc23 	bl	80020b4 <HAL_RCC_OscConfig>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000872:	f000 f9ff 	bl	8000c74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000876:	2110      	movs	r1, #16
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2207      	movs	r2, #7
 800087c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2202      	movs	r2, #2
 8000882:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2101      	movs	r1, #1
 8000894:	0018      	movs	r0, r3
 8000896:	f001 ff29 	bl	80026ec <HAL_RCC_ClockConfig>
 800089a:	1e03      	subs	r3, r0, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800089e:	f000 f9e9 	bl	8000c74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008a2:	003b      	movs	r3, r7
 80008a4:	2220      	movs	r2, #32
 80008a6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80008a8:	003b      	movs	r3, r7
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ae:	003b      	movs	r3, r7
 80008b0:	0018      	movs	r0, r3
 80008b2:	f002 f897 	bl	80029e4 <HAL_RCCEx_PeriphCLKConfig>
 80008b6:	1e03      	subs	r3, r0, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0xba>
  {
    Error_Handler();
 80008ba:	f000 f9db 	bl	8000c74 <Error_Handler>
  }
}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b015      	add	sp, #84	; 0x54
 80008c4:	bd90      	pop	{r4, r7, pc}
	...

080008c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <MX_I2C1_Init+0x74>)
 80008ce:	4a1c      	ldr	r2, [pc, #112]	; (8000940 <MX_I2C1_Init+0x78>)
 80008d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_I2C1_Init+0x74>)
 80008d4:	4a1b      	ldr	r2, [pc, #108]	; (8000944 <MX_I2C1_Init+0x7c>)
 80008d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_I2C1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008de:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_I2C1_Init+0x74>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e4:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_I2C1_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_I2C1_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_I2C1_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_I2C1_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_I2C1_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_I2C1_Init+0x74>)
 8000904:	0018      	movs	r0, r3
 8000906:	f000 fe07 	bl	8001518 <HAL_I2C_Init>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d001      	beq.n	8000912 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800090e:	f000 f9b1 	bl	8000c74 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <MX_I2C1_Init+0x74>)
 8000914:	2100      	movs	r1, #0
 8000916:	0018      	movs	r0, r3
 8000918:	f001 fb34 	bl	8001f84 <HAL_I2CEx_ConfigAnalogFilter>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d001      	beq.n	8000924 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000920:	f000 f9a8 	bl	8000c74 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000924:	4b05      	ldr	r3, [pc, #20]	; (800093c <MX_I2C1_Init+0x74>)
 8000926:	2100      	movs	r1, #0
 8000928:	0018      	movs	r0, r3
 800092a:	f001 fb77 	bl	800201c <HAL_I2CEx_ConfigDigitalFilter>
 800092e:	1e03      	subs	r3, r0, #0
 8000930:	d001      	beq.n	8000936 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000932:	f000 f99f 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20001040 	.word	0x20001040
 8000940:	40005400 	.word	0x40005400
 8000944:	2000090e 	.word	0x2000090e

08000948 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 800094e:	4a15      	ldr	r2, [pc, #84]	; (80009a4 <MX_USART2_UART_Init+0x5c>)
 8000950:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 8000954:	2296      	movs	r2, #150	; 0x96
 8000956:	0212      	lsls	r2, r2, #8
 8000958:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800098a:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 800098c:	0018      	movs	r0, r3
 800098e:	f002 fb09 	bl	8002fa4 <HAL_UART_Init>
 8000992:	1e03      	subs	r3, r0, #0
 8000994:	d001      	beq.n	800099a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000996:	f000 f96d 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20001098 	.word	0x20001098
 80009a4:	40004400 	.word	0x40004400

080009a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b08b      	sub	sp, #44	; 0x2c
 80009ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ae:	2414      	movs	r4, #20
 80009b0:	193b      	adds	r3, r7, r4
 80009b2:	0018      	movs	r0, r3
 80009b4:	2314      	movs	r3, #20
 80009b6:	001a      	movs	r2, r3
 80009b8:	2100      	movs	r1, #0
 80009ba:	f004 fb3a 	bl	8005032 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009be:	4b3f      	ldr	r3, [pc, #252]	; (8000abc <MX_GPIO_Init+0x114>)
 80009c0:	695a      	ldr	r2, [r3, #20]
 80009c2:	4b3e      	ldr	r3, [pc, #248]	; (8000abc <MX_GPIO_Init+0x114>)
 80009c4:	2180      	movs	r1, #128	; 0x80
 80009c6:	0309      	lsls	r1, r1, #12
 80009c8:	430a      	orrs	r2, r1
 80009ca:	615a      	str	r2, [r3, #20]
 80009cc:	4b3b      	ldr	r3, [pc, #236]	; (8000abc <MX_GPIO_Init+0x114>)
 80009ce:	695a      	ldr	r2, [r3, #20]
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	031b      	lsls	r3, r3, #12
 80009d4:	4013      	ands	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009da:	4b38      	ldr	r3, [pc, #224]	; (8000abc <MX_GPIO_Init+0x114>)
 80009dc:	695a      	ldr	r2, [r3, #20]
 80009de:	4b37      	ldr	r3, [pc, #220]	; (8000abc <MX_GPIO_Init+0x114>)
 80009e0:	2180      	movs	r1, #128	; 0x80
 80009e2:	03c9      	lsls	r1, r1, #15
 80009e4:	430a      	orrs	r2, r1
 80009e6:	615a      	str	r2, [r3, #20]
 80009e8:	4b34      	ldr	r3, [pc, #208]	; (8000abc <MX_GPIO_Init+0x114>)
 80009ea:	695a      	ldr	r2, [r3, #20]
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	03db      	lsls	r3, r3, #15
 80009f0:	4013      	ands	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	4b31      	ldr	r3, [pc, #196]	; (8000abc <MX_GPIO_Init+0x114>)
 80009f8:	695a      	ldr	r2, [r3, #20]
 80009fa:	4b30      	ldr	r3, [pc, #192]	; (8000abc <MX_GPIO_Init+0x114>)
 80009fc:	2180      	movs	r1, #128	; 0x80
 80009fe:	0289      	lsls	r1, r1, #10
 8000a00:	430a      	orrs	r2, r1
 8000a02:	615a      	str	r2, [r3, #20]
 8000a04:	4b2d      	ldr	r3, [pc, #180]	; (8000abc <MX_GPIO_Init+0x114>)
 8000a06:	695a      	ldr	r2, [r3, #20]
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	029b      	lsls	r3, r3, #10
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	4b2a      	ldr	r3, [pc, #168]	; (8000abc <MX_GPIO_Init+0x114>)
 8000a14:	695a      	ldr	r2, [r3, #20]
 8000a16:	4b29      	ldr	r3, [pc, #164]	; (8000abc <MX_GPIO_Init+0x114>)
 8000a18:	2180      	movs	r1, #128	; 0x80
 8000a1a:	02c9      	lsls	r1, r1, #11
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	615a      	str	r2, [r3, #20]
 8000a20:	4b26      	ldr	r3, [pc, #152]	; (8000abc <MX_GPIO_Init+0x114>)
 8000a22:	695a      	ldr	r2, [r3, #20]
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	02db      	lsls	r3, r3, #11
 8000a28:	4013      	ands	r3, r2
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a2e:	2390      	movs	r3, #144	; 0x90
 8000a30:	05db      	lsls	r3, r3, #23
 8000a32:	2200      	movs	r2, #0
 8000a34:	2130      	movs	r1, #48	; 0x30
 8000a36:	0018      	movs	r0, r3
 8000a38:	f000 fd50 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000a3c:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <MX_GPIO_Init+0x118>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2101      	movs	r1, #1
 8000a42:	0018      	movs	r0, r3
 8000a44:	f000 fd4a 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	2280      	movs	r2, #128	; 0x80
 8000a4c:	0192      	lsls	r2, r2, #6
 8000a4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a50:	193b      	adds	r3, r7, r4
 8000a52:	4a1c      	ldr	r2, [pc, #112]	; (8000ac4 <MX_GPIO_Init+0x11c>)
 8000a54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	4a1a      	ldr	r2, [pc, #104]	; (8000ac8 <MX_GPIO_Init+0x120>)
 8000a60:	0019      	movs	r1, r3
 8000a62:	0010      	movs	r0, r2
 8000a64:	f000 fbca 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LD2_Pin;
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	2230      	movs	r2, #48	; 0x30
 8000a6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	2201      	movs	r2, #1
 8000a72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	193b      	adds	r3, r7, r4
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	193b      	adds	r3, r7, r4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	193a      	adds	r2, r7, r4
 8000a82:	2390      	movs	r3, #144	; 0x90
 8000a84:	05db      	lsls	r3, r3, #23
 8000a86:	0011      	movs	r1, r2
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f000 fbb7 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000a8e:	0021      	movs	r1, r4
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2201      	movs	r2, #1
 8000a94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2201      	movs	r2, #1
 8000a9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <MX_GPIO_Init+0x118>)
 8000aac:	0019      	movs	r1, r3
 8000aae:	0010      	movs	r0, r2
 8000ab0:	f000 fba4 	bl	80011fc <HAL_GPIO_Init>

}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b00b      	add	sp, #44	; 0x2c
 8000aba:	bd90      	pop	{r4, r7, pc}
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	48000400 	.word	0x48000400
 8000ac4:	10210000 	.word	0x10210000
 8000ac8:	48000800 	.word	0x48000800

08000acc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f002 fecd 	bl	8003874 <osDelay>
 8000ada:	e7fb      	b.n	8000ad4 <StartDefaultTask+0x8>

08000adc <StartVisualTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartVisualTask */
void StartVisualTask(void const * argument)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  int16_t msg;

	  	  if (xQueueReceive(xVisualQueueHandle, &msg, portMAX_DELAY))
 8000ae4:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <StartVisualTask+0x7c>)
 8000ae6:	6818      	ldr	r0, [r3, #0]
 8000ae8:	2301      	movs	r3, #1
 8000aea:	425a      	negs	r2, r3
 8000aec:	230e      	movs	r3, #14
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	0019      	movs	r1, r3
 8000af2:	f003 f89c 	bl	8003c2e <xQueueReceive>
 8000af6:	1e03      	subs	r3, r0, #0
 8000af8:	d02a      	beq.n	8000b50 <StartVisualTask+0x74>
	  	  {
	  		  if(msg<-1000) HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000afa:	230e      	movs	r3, #14
 8000afc:	18fb      	adds	r3, r7, r3
 8000afe:	2200      	movs	r2, #0
 8000b00:	5e9b      	ldrsh	r3, [r3, r2]
 8000b02:	4a16      	ldr	r2, [pc, #88]	; (8000b5c <StartVisualTask+0x80>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	da07      	bge.n	8000b18 <StartVisualTask+0x3c>
 8000b08:	2390      	movs	r3, #144	; 0x90
 8000b0a:	05db      	lsls	r3, r3, #23
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2110      	movs	r1, #16
 8000b10:	0018      	movs	r0, r3
 8000b12:	f000 fce3 	bl	80014dc <HAL_GPIO_WritePin>
 8000b16:	e006      	b.n	8000b26 <StartVisualTask+0x4a>
	  		  else HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000b18:	2390      	movs	r3, #144	; 0x90
 8000b1a:	05db      	lsls	r3, r3, #23
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2110      	movs	r1, #16
 8000b20:	0018      	movs	r0, r3
 8000b22:	f000 fcdb 	bl	80014dc <HAL_GPIO_WritePin>


	  		  if(msg > +1000) HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000b26:	230e      	movs	r3, #14
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	5e9a      	ldrsh	r2, [r3, r2]
 8000b2e:	23fa      	movs	r3, #250	; 0xfa
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	429a      	cmp	r2, r3
 8000b34:	dd06      	ble.n	8000b44 <StartVisualTask+0x68>
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <StartVisualTask+0x84>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f000 fccd 	bl	80014dc <HAL_GPIO_WritePin>
 8000b42:	e005      	b.n	8000b50 <StartVisualTask+0x74>
	  		  else HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <StartVisualTask+0x84>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	2101      	movs	r1, #1
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f000 fcc6 	bl	80014dc <HAL_GPIO_WritePin>

	  	  }
    osDelay(1);
 8000b50:	2001      	movs	r0, #1
 8000b52:	f002 fe8f 	bl	8003874 <osDelay>
  {
 8000b56:	e7c5      	b.n	8000ae4 <StartVisualTask+0x8>
 8000b58:	20001094 	.word	0x20001094
 8000b5c:	fffffc18 	.word	0xfffffc18
 8000b60:	48000400 	.word	0x48000400

08000b64 <StartAcceleroTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAcceleroTask */
void StartAcceleroTask(void const * argument)
{
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b087      	sub	sp, #28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAcceleroTask */

	// Check device ID
	uint8_t whoamI = 0;
 8000b6c:	2116      	movs	r1, #22
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	2200      	movs	r2, #0
 8000b72:	701a      	strb	r2, [r3, #0]
	lis2dw12_device_id_get(&lis2dw12, &whoamI);
 8000b74:	000c      	movs	r4, r1
 8000b76:	187a      	adds	r2, r7, r1
 8000b78:	4b30      	ldr	r3, [pc, #192]	; (8000c3c <StartAcceleroTask+0xd8>)
 8000b7a:	0011      	movs	r1, r2
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f7ff fd25 	bl	80005cc <lis2dw12_device_id_get>
	printf("LIS2DW12_ID %s\n", (whoamI == LIS2DW12_ID) ? "OK" : "FAIL");
 8000b82:	0021      	movs	r1, r4
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b44      	cmp	r3, #68	; 0x44
 8000b8a:	d101      	bne.n	8000b90 <StartAcceleroTask+0x2c>
 8000b8c:	4b2c      	ldr	r3, [pc, #176]	; (8000c40 <StartAcceleroTask+0xdc>)
 8000b8e:	e000      	b.n	8000b92 <StartAcceleroTask+0x2e>
 8000b90:	4b2c      	ldr	r3, [pc, #176]	; (8000c44 <StartAcceleroTask+0xe0>)
 8000b92:	4a2d      	ldr	r2, [pc, #180]	; (8000c48 <StartAcceleroTask+0xe4>)
 8000b94:	0019      	movs	r1, r3
 8000b96:	0010      	movs	r0, r2
 8000b98:	f004 fa54 	bl	8005044 <iprintf>

	lis2dw12_full_scale_set(&lis2dw12, LIS2DW12_2g);
 8000b9c:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <StartAcceleroTask+0xd8>)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f7ff fc8e 	bl	80004c2 <lis2dw12_full_scale_set>
	lis2dw12_power_mode_set(&lis2dw12, LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2);
 8000ba6:	4b25      	ldr	r3, [pc, #148]	; (8000c3c <StartAcceleroTask+0xd8>)
 8000ba8:	2111      	movs	r1, #17
 8000baa:	0018      	movs	r0, r3
 8000bac:	f7ff fb92 	bl	80002d4 <lis2dw12_power_mode_set>
	lis2dw12_block_data_update_set(&lis2dw12, PROPERTY_ENABLE);
 8000bb0:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <StartAcceleroTask+0xd8>)
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f7ff fc53 	bl	8000460 <lis2dw12_block_data_update_set>
	lis2dw12_fifo_mode_set(&lis2dw12, LIS2DW12_STREAM_MODE); // enable continuous FIFO
 8000bba:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <StartAcceleroTask+0xd8>)
 8000bbc:	2106      	movs	r1, #6
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f7ff fd16 	bl	80005f0 <lis2dw12_fifo_mode_set>
	lis2dw12_data_rate_set(&lis2dw12, LIS2DW12_XL_ODR_25Hz); // enable part from power-down
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <StartAcceleroTask+0xd8>)
 8000bc6:	2103      	movs	r1, #3
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f7ff fbf0 	bl	80003ae <lis2dw12_data_rate_set>
  for(;;)
  {
	  uint8_t samples;
	  int16_t raw_acceleration[3];

	  lis2dw12_fifo_data_level_get(&lis2dw12, &samples);
 8000bce:	2315      	movs	r3, #21
 8000bd0:	18fa      	adds	r2, r7, r3
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <StartAcceleroTask+0xd8>)
 8000bd4:	0011      	movs	r1, r2
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f7ff fd39 	bl	800064e <lis2dw12_fifo_data_level_get>
	  for (uint8_t i = 0; i < samples; i++)
 8000bdc:	2317      	movs	r3, #23
 8000bde:	18fb      	adds	r3, r7, r3
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
 8000be4:	e00c      	b.n	8000c00 <StartAcceleroTask+0x9c>
	  	  {
		  	  // Read acceleration data
		  	  lis2dw12_acceleration_raw_get(&lis2dw12, raw_acceleration);
 8000be6:	230c      	movs	r3, #12
 8000be8:	18fa      	adds	r2, r7, r3
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <StartAcceleroTask+0xd8>)
 8000bec:	0011      	movs	r1, r2
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f7ff fc98 	bl	8000524 <lis2dw12_acceleration_raw_get>
	  for (uint8_t i = 0; i < samples; i++)
 8000bf4:	2117      	movs	r1, #23
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	781a      	ldrb	r2, [r3, #0]
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	3201      	adds	r2, #1
 8000bfe:	701a      	strb	r2, [r3, #0]
 8000c00:	2315      	movs	r3, #21
 8000c02:	18fb      	adds	r3, r7, r3
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2217      	movs	r2, #23
 8000c08:	18ba      	adds	r2, r7, r2
 8000c0a:	7812      	ldrb	r2, [r2, #0]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d3ea      	bcc.n	8000be6 <StartAcceleroTask+0x82>
	  {
		  xQueueSend(xVisualQueueHandle, &msg[i], 0);
		  osDelay(300);
	  }
*/
	   printf("X=%d Y=%d Z=%d\n", raw_acceleration[0], raw_acceleration[1], raw_acceleration[2]);
 8000c10:	200c      	movs	r0, #12
 8000c12:	183b      	adds	r3, r7, r0
 8000c14:	2200      	movs	r2, #0
 8000c16:	5e9b      	ldrsh	r3, [r3, r2]
 8000c18:	0019      	movs	r1, r3
 8000c1a:	183b      	adds	r3, r7, r0
 8000c1c:	2202      	movs	r2, #2
 8000c1e:	5e9b      	ldrsh	r3, [r3, r2]
 8000c20:	001a      	movs	r2, r3
 8000c22:	183b      	adds	r3, r7, r0
 8000c24:	2004      	movs	r0, #4
 8000c26:	5e1b      	ldrsh	r3, [r3, r0]
 8000c28:	4808      	ldr	r0, [pc, #32]	; (8000c4c <StartAcceleroTask+0xe8>)
 8000c2a:	f004 fa0b 	bl	8005044 <iprintf>
	   osDelay(500);
 8000c2e:	23fa      	movs	r3, #250	; 0xfa
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	0018      	movs	r0, r3
 8000c34:	f002 fe1e 	bl	8003874 <osDelay>
  {
 8000c38:	e7c9      	b.n	8000bce <StartAcceleroTask+0x6a>
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	08005f18 	.word	0x08005f18
 8000c44:	08005f1c 	.word	0x08005f1c
 8000c48:	08005f24 	.word	0x08005f24
 8000c4c:	08005f34 	.word	0x08005f34

08000c50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d101      	bne.n	8000c66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c62:	f000 fa01 	bl	8001068 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	b002      	add	sp, #8
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	40002000 	.word	0x40002000

08000c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c86:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <HAL_MspInit+0x44>)
 8000c88:	699a      	ldr	r2, [r3, #24]
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_MspInit+0x44>)
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	619a      	str	r2, [r3, #24]
 8000c92:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <HAL_MspInit+0x44>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	2201      	movs	r2, #1
 8000c98:	4013      	ands	r3, r2
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <HAL_MspInit+0x44>)
 8000ca0:	69da      	ldr	r2, [r3, #28]
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <HAL_MspInit+0x44>)
 8000ca4:	2180      	movs	r1, #128	; 0x80
 8000ca6:	0549      	lsls	r1, r1, #21
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	61da      	str	r2, [r3, #28]
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <HAL_MspInit+0x44>)
 8000cae:	69da      	ldr	r2, [r3, #28]
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	055b      	lsls	r3, r3, #21
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b002      	add	sp, #8
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	2314      	movs	r3, #20
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	2314      	movs	r3, #20
 8000cd8:	001a      	movs	r2, r3
 8000cda:	2100      	movs	r1, #0
 8000cdc:	f004 f9a9 	bl	8005032 <memset>
  if(hi2c->Instance==I2C1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a1c      	ldr	r2, [pc, #112]	; (8000d58 <HAL_I2C_MspInit+0x90>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d132      	bne.n	8000d50 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <HAL_I2C_MspInit+0x94>)
 8000cec:	695a      	ldr	r2, [r3, #20]
 8000cee:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <HAL_I2C_MspInit+0x94>)
 8000cf0:	2180      	movs	r1, #128	; 0x80
 8000cf2:	02c9      	lsls	r1, r1, #11
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	615a      	str	r2, [r3, #20]
 8000cf8:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <HAL_I2C_MspInit+0x94>)
 8000cfa:	695a      	ldr	r2, [r3, #20]
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	02db      	lsls	r3, r3, #11
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d06:	2114      	movs	r1, #20
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	22c0      	movs	r2, #192	; 0xc0
 8000d0c:	0092      	lsls	r2, r2, #2
 8000d0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	2212      	movs	r2, #18
 8000d14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	2201      	movs	r2, #1
 8000d1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	2203      	movs	r2, #3
 8000d20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000d22:	187b      	adds	r3, r7, r1
 8000d24:	2201      	movs	r2, #1
 8000d26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	4a0d      	ldr	r2, [pc, #52]	; (8000d60 <HAL_I2C_MspInit+0x98>)
 8000d2c:	0019      	movs	r1, r3
 8000d2e:	0010      	movs	r0, r2
 8000d30:	f000 fa64 	bl	80011fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <HAL_I2C_MspInit+0x94>)
 8000d36:	69da      	ldr	r2, [r3, #28]
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_I2C_MspInit+0x94>)
 8000d3a:	2180      	movs	r1, #128	; 0x80
 8000d3c:	0389      	lsls	r1, r1, #14
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	61da      	str	r2, [r3, #28]
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_I2C_MspInit+0x94>)
 8000d44:	69da      	ldr	r2, [r3, #28]
 8000d46:	2380      	movs	r3, #128	; 0x80
 8000d48:	039b      	lsls	r3, r3, #14
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d50:	46c0      	nop			; (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b00a      	add	sp, #40	; 0x28
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40005400 	.word	0x40005400
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	48000400 	.word	0x48000400

08000d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	; 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	2314      	movs	r3, #20
 8000d6e:	18fb      	adds	r3, r7, r3
 8000d70:	0018      	movs	r0, r3
 8000d72:	2314      	movs	r3, #20
 8000d74:	001a      	movs	r2, r3
 8000d76:	2100      	movs	r1, #0
 8000d78:	f004 f95b 	bl	8005032 <memset>
  if(huart->Instance==USART2)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a1c      	ldr	r2, [pc, #112]	; (8000df4 <HAL_UART_MspInit+0x90>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d132      	bne.n	8000dec <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d86:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <HAL_UART_MspInit+0x94>)
 8000d88:	69da      	ldr	r2, [r3, #28]
 8000d8a:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <HAL_UART_MspInit+0x94>)
 8000d8c:	2180      	movs	r1, #128	; 0x80
 8000d8e:	0289      	lsls	r1, r1, #10
 8000d90:	430a      	orrs	r2, r1
 8000d92:	61da      	str	r2, [r3, #28]
 8000d94:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <HAL_UART_MspInit+0x94>)
 8000d96:	69da      	ldr	r2, [r3, #28]
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	029b      	lsls	r3, r3, #10
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <HAL_UART_MspInit+0x94>)
 8000da4:	695a      	ldr	r2, [r3, #20]
 8000da6:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <HAL_UART_MspInit+0x94>)
 8000da8:	2180      	movs	r1, #128	; 0x80
 8000daa:	0289      	lsls	r1, r1, #10
 8000dac:	430a      	orrs	r2, r1
 8000dae:	615a      	str	r2, [r3, #20]
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <HAL_UART_MspInit+0x94>)
 8000db2:	695a      	ldr	r2, [r3, #20]
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	029b      	lsls	r3, r3, #10
 8000db8:	4013      	ands	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dbe:	2114      	movs	r1, #20
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2202      	movs	r2, #2
 8000dca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2201      	movs	r2, #1
 8000ddc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	187a      	adds	r2, r7, r1
 8000de0:	2390      	movs	r3, #144	; 0x90
 8000de2:	05db      	lsls	r3, r3, #23
 8000de4:	0011      	movs	r1, r2
 8000de6:	0018      	movs	r0, r3
 8000de8:	f000 fa08 	bl	80011fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dec:	46c0      	nop			; (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	b00a      	add	sp, #40	; 0x28
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40004400 	.word	0x40004400
 8000df8:	40021000 	.word	0x40021000

08000dfc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM14_IRQn, TickPriority ,0);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	0019      	movs	r1, r3
 8000e12:	2013      	movs	r0, #19
 8000e14:	f000 f9cc 	bl	80011b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000e18:	2013      	movs	r0, #19
 8000e1a:	f000 f9de 	bl	80011da <HAL_NVIC_EnableIRQ>
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000e1e:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <HAL_InitTick+0xa8>)
 8000e20:	69da      	ldr	r2, [r3, #28]
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <HAL_InitTick+0xa8>)
 8000e24:	2180      	movs	r1, #128	; 0x80
 8000e26:	0049      	lsls	r1, r1, #1
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	61da      	str	r2, [r3, #28]
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <HAL_InitTick+0xa8>)
 8000e2e:	69da      	ldr	r2, [r3, #28]
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	4013      	ands	r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e3a:	230c      	movs	r3, #12
 8000e3c:	18fa      	adds	r2, r7, r3
 8000e3e:	2310      	movs	r3, #16
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	0011      	movs	r1, r2
 8000e44:	0018      	movs	r0, r3
 8000e46:	f001 fda3 	bl	8002990 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e4a:	f001 fd8b 	bl	8002964 <HAL_RCC_GetPCLK1Freq>
 8000e4e:	0003      	movs	r3, r0
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e54:	4914      	ldr	r1, [pc, #80]	; (8000ea8 <HAL_InitTick+0xac>)
 8000e56:	0018      	movs	r0, r3
 8000e58:	f7ff f956 	bl	8000108 <__udivsi3>
 8000e5c:	0003      	movs	r3, r0
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	623b      	str	r3, [r7, #32]

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000e62:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_InitTick+0xb0>)
 8000e64:	4a12      	ldr	r2, [pc, #72]	; (8000eb0 <HAL_InitTick+0xb4>)
 8000e66:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8000e68:	4b10      	ldr	r3, [pc, #64]	; (8000eac <HAL_InitTick+0xb0>)
 8000e6a:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <HAL_InitTick+0xb8>)
 8000e6c:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <HAL_InitTick+0xb0>)
 8000e70:	6a3a      	ldr	r2, [r7, #32]
 8000e72:	605a      	str	r2, [r3, #4]
  htim14.Init.ClockDivision = 0;
 8000e74:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <HAL_InitTick+0xb0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <HAL_InitTick+0xb0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_InitTick+0xb0>)
 8000e82:	0018      	movs	r0, r3
 8000e84:	f001 fe7c 	bl	8002b80 <HAL_TIM_Base_Init>
 8000e88:	1e03      	subs	r3, r0, #0
 8000e8a:	d105      	bne.n	8000e98 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <HAL_InitTick+0xb0>)
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f001 feaa 	bl	8002be8 <HAL_TIM_Base_Start_IT>
 8000e94:	0003      	movs	r3, r0
 8000e96:	e000      	b.n	8000e9a <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
}
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b00a      	add	sp, #40	; 0x28
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	000f4240 	.word	0x000f4240
 8000eac:	20001118 	.word	0x20001118
 8000eb0:	40002000 	.word	0x40002000
 8000eb4:	000003e7 	.word	0x000003e7

08000eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ebc:	46c0      	nop			; (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <HardFault_Handler+0x4>

08000ec8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <TIM14_IRQHandler+0x14>)
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f001 feac 	bl	8002c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	20001118 	.word	0x20001118

08000ee0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	e00a      	b.n	8000f08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ef2:	e000      	b.n	8000ef6 <_read+0x16>
 8000ef4:	bf00      	nop
 8000ef6:	0001      	movs	r1, r0
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	60ba      	str	r2, [r7, #8]
 8000efe:	b2ca      	uxtb	r2, r1
 8000f00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3301      	adds	r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	dbf0      	blt.n	8000ef2 <_read+0x12>
	}

return len;
 8000f10:	687b      	ldr	r3, [r7, #4]
}
 8000f12:	0018      	movs	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b006      	add	sp, #24
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
	return -1;
 8000f22:	2301      	movs	r3, #1
 8000f24:	425b      	negs	r3, r3
}
 8000f26:	0018      	movs	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b002      	add	sp, #8
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	2280      	movs	r2, #128	; 0x80
 8000f3c:	0192      	lsls	r2, r2, #6
 8000f3e:	605a      	str	r2, [r3, #4]
	return 0;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	0018      	movs	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b002      	add	sp, #8
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <_isatty>:

int _isatty(int file)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
	return 1;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	0018      	movs	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b002      	add	sp, #8
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
	return 0;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b004      	add	sp, #16
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f7c:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <_sbrk+0x5c>)
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <_sbrk+0x60>)
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <_sbrk+0x64>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d102      	bne.n	8000f96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <_sbrk+0x64>)
 8000f92:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <_sbrk+0x68>)
 8000f94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <_sbrk+0x64>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	18d3      	adds	r3, r2, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d207      	bcs.n	8000fb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa4:	f004 f812 	bl	8004fcc <__errno>
 8000fa8:	0003      	movs	r3, r0
 8000faa:	220c      	movs	r2, #12
 8000fac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	425b      	negs	r3, r3
 8000fb2:	e009      	b.n	8000fc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fba:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	18d2      	adds	r2, r2, r3
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <_sbrk+0x64>)
 8000fc4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
}
 8000fc8:	0018      	movs	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b006      	add	sp, #24
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20002000 	.word	0x20002000
 8000fd4:	00000400 	.word	0x00000400
 8000fd8:	200002ec 	.word	0x200002ec
 8000fdc:	20001160 	.word	0x20001160

08000fe0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff0:	480d      	ldr	r0, [pc, #52]	; (8001028 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ff2:	490e      	ldr	r1, [pc, #56]	; (800102c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff4:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <LoopForever+0xe>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff8:	e002      	b.n	8001000 <LoopCopyDataInit>

08000ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffe:	3304      	adds	r3, #4

08001000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001004:	d3f9      	bcc.n	8000ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001006:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001008:	4c0b      	ldr	r4, [pc, #44]	; (8001038 <LoopForever+0x16>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800100c:	e001      	b.n	8001012 <LoopFillZerobss>

0800100e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001010:	3204      	adds	r2, #4

08001012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001014:	d3fb      	bcc.n	800100e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001016:	f7ff ffe3 	bl	8000fe0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800101a:	f003 ffdd 	bl	8004fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800101e:	f7ff fb8f 	bl	8000740 <main>

08001022 <LoopForever>:

LoopForever:
    b LoopForever
 8001022:	e7fe      	b.n	8001022 <LoopForever>
  ldr   r0, =_estack
 8001024:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800102c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001030:	08006024 	.word	0x08006024
  ldr r2, =_sbss
 8001034:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001038:	20001160 	.word	0x20001160

0800103c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC1_IRQHandler>
	...

08001040 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <HAL_Init+0x24>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_Init+0x24>)
 800104a:	2110      	movs	r1, #16
 800104c:	430a      	orrs	r2, r1
 800104e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001050:	2000      	movs	r0, #0
 8001052:	f7ff fed3 	bl	8000dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001056:	f7ff fe13 	bl	8000c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	0018      	movs	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	40022000 	.word	0x40022000

08001068 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <HAL_IncTick+0x1c>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	001a      	movs	r2, r3
 8001072:	4b05      	ldr	r3, [pc, #20]	; (8001088 <HAL_IncTick+0x20>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	18d2      	adds	r2, r2, r3
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <HAL_IncTick+0x20>)
 800107a:	601a      	str	r2, [r3, #0]
}
 800107c:	46c0      	nop			; (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	20000010 	.word	0x20000010
 8001088:	20001158 	.word	0x20001158

0800108c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  return uwTick;
 8001090:	4b02      	ldr	r3, [pc, #8]	; (800109c <HAL_GetTick+0x10>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	0018      	movs	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	20001158 	.word	0x20001158

080010a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	0002      	movs	r2, r0
 80010a8:	1dfb      	adds	r3, r7, #7
 80010aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010ac:	1dfb      	adds	r3, r7, #7
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b7f      	cmp	r3, #127	; 0x7f
 80010b2:	d809      	bhi.n	80010c8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b4:	1dfb      	adds	r3, r7, #7
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	001a      	movs	r2, r3
 80010ba:	231f      	movs	r3, #31
 80010bc:	401a      	ands	r2, r3
 80010be:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <__NVIC_EnableIRQ+0x30>)
 80010c0:	2101      	movs	r1, #1
 80010c2:	4091      	lsls	r1, r2
 80010c4:	000a      	movs	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]
  }
}
 80010c8:	46c0      	nop			; (mov r8, r8)
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b002      	add	sp, #8
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	e000e100 	.word	0xe000e100

080010d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	0002      	movs	r2, r0
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b7f      	cmp	r3, #127	; 0x7f
 80010e8:	d828      	bhi.n	800113c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010ea:	4a2f      	ldr	r2, [pc, #188]	; (80011a8 <__NVIC_SetPriority+0xd4>)
 80010ec:	1dfb      	adds	r3, r7, #7
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b25b      	sxtb	r3, r3
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	33c0      	adds	r3, #192	; 0xc0
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	589b      	ldr	r3, [r3, r2]
 80010fa:	1dfa      	adds	r2, r7, #7
 80010fc:	7812      	ldrb	r2, [r2, #0]
 80010fe:	0011      	movs	r1, r2
 8001100:	2203      	movs	r2, #3
 8001102:	400a      	ands	r2, r1
 8001104:	00d2      	lsls	r2, r2, #3
 8001106:	21ff      	movs	r1, #255	; 0xff
 8001108:	4091      	lsls	r1, r2
 800110a:	000a      	movs	r2, r1
 800110c:	43d2      	mvns	r2, r2
 800110e:	401a      	ands	r2, r3
 8001110:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	019b      	lsls	r3, r3, #6
 8001116:	22ff      	movs	r2, #255	; 0xff
 8001118:	401a      	ands	r2, r3
 800111a:	1dfb      	adds	r3, r7, #7
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	0018      	movs	r0, r3
 8001120:	2303      	movs	r3, #3
 8001122:	4003      	ands	r3, r0
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001128:	481f      	ldr	r0, [pc, #124]	; (80011a8 <__NVIC_SetPriority+0xd4>)
 800112a:	1dfb      	adds	r3, r7, #7
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	b25b      	sxtb	r3, r3
 8001130:	089b      	lsrs	r3, r3, #2
 8001132:	430a      	orrs	r2, r1
 8001134:	33c0      	adds	r3, #192	; 0xc0
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800113a:	e031      	b.n	80011a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800113c:	4a1b      	ldr	r2, [pc, #108]	; (80011ac <__NVIC_SetPriority+0xd8>)
 800113e:	1dfb      	adds	r3, r7, #7
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	0019      	movs	r1, r3
 8001144:	230f      	movs	r3, #15
 8001146:	400b      	ands	r3, r1
 8001148:	3b08      	subs	r3, #8
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	3306      	adds	r3, #6
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	18d3      	adds	r3, r2, r3
 8001152:	3304      	adds	r3, #4
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	1dfa      	adds	r2, r7, #7
 8001158:	7812      	ldrb	r2, [r2, #0]
 800115a:	0011      	movs	r1, r2
 800115c:	2203      	movs	r2, #3
 800115e:	400a      	ands	r2, r1
 8001160:	00d2      	lsls	r2, r2, #3
 8001162:	21ff      	movs	r1, #255	; 0xff
 8001164:	4091      	lsls	r1, r2
 8001166:	000a      	movs	r2, r1
 8001168:	43d2      	mvns	r2, r2
 800116a:	401a      	ands	r2, r3
 800116c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	019b      	lsls	r3, r3, #6
 8001172:	22ff      	movs	r2, #255	; 0xff
 8001174:	401a      	ands	r2, r3
 8001176:	1dfb      	adds	r3, r7, #7
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	0018      	movs	r0, r3
 800117c:	2303      	movs	r3, #3
 800117e:	4003      	ands	r3, r0
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001184:	4809      	ldr	r0, [pc, #36]	; (80011ac <__NVIC_SetPriority+0xd8>)
 8001186:	1dfb      	adds	r3, r7, #7
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	001c      	movs	r4, r3
 800118c:	230f      	movs	r3, #15
 800118e:	4023      	ands	r3, r4
 8001190:	3b08      	subs	r3, #8
 8001192:	089b      	lsrs	r3, r3, #2
 8001194:	430a      	orrs	r2, r1
 8001196:	3306      	adds	r3, #6
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	18c3      	adds	r3, r0, r3
 800119c:	3304      	adds	r3, #4
 800119e:	601a      	str	r2, [r3, #0]
}
 80011a0:	46c0      	nop			; (mov r8, r8)
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b003      	add	sp, #12
 80011a6:	bd90      	pop	{r4, r7, pc}
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	210f      	movs	r1, #15
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	1c02      	adds	r2, r0, #0
 80011c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	187b      	adds	r3, r7, r1
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	0011      	movs	r1, r2
 80011cc:	0018      	movs	r0, r3
 80011ce:	f7ff ff81 	bl	80010d4 <__NVIC_SetPriority>
}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b004      	add	sp, #16
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	0002      	movs	r2, r0
 80011e2:	1dfb      	adds	r3, r7, #7
 80011e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	0018      	movs	r0, r3
 80011ee:	f7ff ff57 	bl	80010a0 <__NVIC_EnableIRQ>
}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b002      	add	sp, #8
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800120a:	e14f      	b.n	80014ac <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2101      	movs	r1, #1
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	4091      	lsls	r1, r2
 8001216:	000a      	movs	r2, r1
 8001218:	4013      	ands	r3, r2
 800121a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d100      	bne.n	8001224 <HAL_GPIO_Init+0x28>
 8001222:	e140      	b.n	80014a6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d00b      	beq.n	8001244 <HAL_GPIO_Init+0x48>
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d007      	beq.n	8001244 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001238:	2b11      	cmp	r3, #17
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b12      	cmp	r3, #18
 8001242:	d130      	bne.n	80012a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	409a      	lsls	r2, r3
 8001252:	0013      	movs	r3, r2
 8001254:	43da      	mvns	r2, r3
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	68da      	ldr	r2, [r3, #12]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	409a      	lsls	r2, r3
 8001266:	0013      	movs	r3, r2
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800127a:	2201      	movs	r2, #1
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
 8001280:	0013      	movs	r3, r2
 8001282:	43da      	mvns	r2, r3
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	091b      	lsrs	r3, r3, #4
 8001290:	2201      	movs	r2, #1
 8001292:	401a      	ands	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
 8001298:	0013      	movs	r3, r2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	2203      	movs	r2, #3
 80012b2:	409a      	lsls	r2, r3
 80012b4:	0013      	movs	r3, r2
 80012b6:	43da      	mvns	r2, r3
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	409a      	lsls	r2, r3
 80012c8:	0013      	movs	r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_Init+0xea>
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b12      	cmp	r3, #18
 80012e4:	d123      	bne.n	800132e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	08da      	lsrs	r2, r3, #3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3208      	adds	r2, #8
 80012ee:	0092      	lsls	r2, r2, #2
 80012f0:	58d3      	ldr	r3, [r2, r3]
 80012f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	2207      	movs	r2, #7
 80012f8:	4013      	ands	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	220f      	movs	r2, #15
 80012fe:	409a      	lsls	r2, r3
 8001300:	0013      	movs	r3, r2
 8001302:	43da      	mvns	r2, r3
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	691a      	ldr	r2, [r3, #16]
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	2107      	movs	r1, #7
 8001312:	400b      	ands	r3, r1
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	409a      	lsls	r2, r3
 8001318:	0013      	movs	r3, r2
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	08da      	lsrs	r2, r3, #3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3208      	adds	r2, #8
 8001328:	0092      	lsls	r2, r2, #2
 800132a:	6939      	ldr	r1, [r7, #16]
 800132c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	2203      	movs	r2, #3
 800133a:	409a      	lsls	r2, r3
 800133c:	0013      	movs	r3, r2
 800133e:	43da      	mvns	r2, r3
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2203      	movs	r2, #3
 800134c:	401a      	ands	r2, r3
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	409a      	lsls	r2, r3
 8001354:	0013      	movs	r3, r2
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	2380      	movs	r3, #128	; 0x80
 8001368:	055b      	lsls	r3, r3, #21
 800136a:	4013      	ands	r3, r2
 800136c:	d100      	bne.n	8001370 <HAL_GPIO_Init+0x174>
 800136e:	e09a      	b.n	80014a6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001370:	4b54      	ldr	r3, [pc, #336]	; (80014c4 <HAL_GPIO_Init+0x2c8>)
 8001372:	699a      	ldr	r2, [r3, #24]
 8001374:	4b53      	ldr	r3, [pc, #332]	; (80014c4 <HAL_GPIO_Init+0x2c8>)
 8001376:	2101      	movs	r1, #1
 8001378:	430a      	orrs	r2, r1
 800137a:	619a      	str	r2, [r3, #24]
 800137c:	4b51      	ldr	r3, [pc, #324]	; (80014c4 <HAL_GPIO_Init+0x2c8>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	2201      	movs	r2, #1
 8001382:	4013      	ands	r3, r2
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001388:	4a4f      	ldr	r2, [pc, #316]	; (80014c8 <HAL_GPIO_Init+0x2cc>)
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	089b      	lsrs	r3, r3, #2
 800138e:	3302      	adds	r3, #2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	589b      	ldr	r3, [r3, r2]
 8001394:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	2203      	movs	r2, #3
 800139a:	4013      	ands	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	220f      	movs	r2, #15
 80013a0:	409a      	lsls	r2, r3
 80013a2:	0013      	movs	r3, r2
 80013a4:	43da      	mvns	r2, r3
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	2390      	movs	r3, #144	; 0x90
 80013b0:	05db      	lsls	r3, r3, #23
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d013      	beq.n	80013de <HAL_GPIO_Init+0x1e2>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a44      	ldr	r2, [pc, #272]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d00d      	beq.n	80013da <HAL_GPIO_Init+0x1de>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a43      	ldr	r2, [pc, #268]	; (80014d0 <HAL_GPIO_Init+0x2d4>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d007      	beq.n	80013d6 <HAL_GPIO_Init+0x1da>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a42      	ldr	r2, [pc, #264]	; (80014d4 <HAL_GPIO_Init+0x2d8>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d101      	bne.n	80013d2 <HAL_GPIO_Init+0x1d6>
 80013ce:	2303      	movs	r3, #3
 80013d0:	e006      	b.n	80013e0 <HAL_GPIO_Init+0x1e4>
 80013d2:	2305      	movs	r3, #5
 80013d4:	e004      	b.n	80013e0 <HAL_GPIO_Init+0x1e4>
 80013d6:	2302      	movs	r3, #2
 80013d8:	e002      	b.n	80013e0 <HAL_GPIO_Init+0x1e4>
 80013da:	2301      	movs	r3, #1
 80013dc:	e000      	b.n	80013e0 <HAL_GPIO_Init+0x1e4>
 80013de:	2300      	movs	r3, #0
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	2103      	movs	r1, #3
 80013e4:	400a      	ands	r2, r1
 80013e6:	0092      	lsls	r2, r2, #2
 80013e8:	4093      	lsls	r3, r2
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013f0:	4935      	ldr	r1, [pc, #212]	; (80014c8 <HAL_GPIO_Init+0x2cc>)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	089b      	lsrs	r3, r3, #2
 80013f6:	3302      	adds	r3, #2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013fe:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <HAL_GPIO_Init+0x2dc>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	43da      	mvns	r2, r3
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	025b      	lsls	r3, r3, #9
 8001416:	4013      	ands	r3, r2
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001422:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <HAL_GPIO_Init+0x2dc>)
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001428:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <HAL_GPIO_Init+0x2dc>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	43da      	mvns	r2, r3
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	2380      	movs	r3, #128	; 0x80
 800143e:	029b      	lsls	r3, r3, #10
 8001440:	4013      	ands	r3, r2
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800144c:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <HAL_GPIO_Init+0x2dc>)
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001452:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <HAL_GPIO_Init+0x2dc>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	43da      	mvns	r2, r3
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	2380      	movs	r3, #128	; 0x80
 8001468:	035b      	lsls	r3, r3, #13
 800146a:	4013      	ands	r3, r2
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4313      	orrs	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001476:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <HAL_GPIO_Init+0x2dc>)
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <HAL_GPIO_Init+0x2dc>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	43da      	mvns	r2, r3
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	039b      	lsls	r3, r3, #14
 8001494:	4013      	ands	r3, r2
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014a0:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <HAL_GPIO_Init+0x2dc>)
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3301      	adds	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	40da      	lsrs	r2, r3
 80014b4:	1e13      	subs	r3, r2, #0
 80014b6:	d000      	beq.n	80014ba <HAL_GPIO_Init+0x2be>
 80014b8:	e6a8      	b.n	800120c <HAL_GPIO_Init+0x10>
  } 
}
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	46bd      	mov	sp, r7
 80014be:	b006      	add	sp, #24
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40010000 	.word	0x40010000
 80014cc:	48000400 	.word	0x48000400
 80014d0:	48000800 	.word	0x48000800
 80014d4:	48000c00 	.word	0x48000c00
 80014d8:	40010400 	.word	0x40010400

080014dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	0008      	movs	r0, r1
 80014e6:	0011      	movs	r1, r2
 80014e8:	1cbb      	adds	r3, r7, #2
 80014ea:	1c02      	adds	r2, r0, #0
 80014ec:	801a      	strh	r2, [r3, #0]
 80014ee:	1c7b      	adds	r3, r7, #1
 80014f0:	1c0a      	adds	r2, r1, #0
 80014f2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014f4:	1c7b      	adds	r3, r7, #1
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d004      	beq.n	8001506 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014fc:	1cbb      	adds	r3, r7, #2
 80014fe:	881a      	ldrh	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001504:	e003      	b.n	800150e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001506:	1cbb      	adds	r3, r7, #2
 8001508:	881a      	ldrh	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	46bd      	mov	sp, r7
 8001512:	b002      	add	sp, #8
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e082      	b.n	8001630 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2241      	movs	r2, #65	; 0x41
 800152e:	5c9b      	ldrb	r3, [r3, r2]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d107      	bne.n	8001546 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2240      	movs	r2, #64	; 0x40
 800153a:	2100      	movs	r1, #0
 800153c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	0018      	movs	r0, r3
 8001542:	f7ff fbc1 	bl	8000cc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2241      	movs	r2, #65	; 0x41
 800154a:	2124      	movs	r1, #36	; 0x24
 800154c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2101      	movs	r1, #1
 800155a:	438a      	bics	r2, r1
 800155c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4934      	ldr	r1, [pc, #208]	; (8001638 <HAL_I2C_Init+0x120>)
 8001568:	400a      	ands	r2, r1
 800156a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4931      	ldr	r1, [pc, #196]	; (800163c <HAL_I2C_Init+0x124>)
 8001578:	400a      	ands	r2, r1
 800157a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d108      	bne.n	8001596 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2180      	movs	r1, #128	; 0x80
 800158e:	0209      	lsls	r1, r1, #8
 8001590:	430a      	orrs	r2, r1
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	e007      	b.n	80015a6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2184      	movs	r1, #132	; 0x84
 80015a0:	0209      	lsls	r1, r1, #8
 80015a2:	430a      	orrs	r2, r1
 80015a4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d104      	bne.n	80015b8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2280      	movs	r2, #128	; 0x80
 80015b4:	0112      	lsls	r2, r2, #4
 80015b6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	491f      	ldr	r1, [pc, #124]	; (8001640 <HAL_I2C_Init+0x128>)
 80015c4:	430a      	orrs	r2, r1
 80015c6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68da      	ldr	r2, [r3, #12]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	491a      	ldr	r1, [pc, #104]	; (800163c <HAL_I2C_Init+0x124>)
 80015d4:	400a      	ands	r2, r1
 80015d6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691a      	ldr	r2, [r3, #16]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	431a      	orrs	r2, r3
 80015e2:	0011      	movs	r1, r2
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	021a      	lsls	r2, r3, #8
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69d9      	ldr	r1, [r3, #28]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a1a      	ldr	r2, [r3, #32]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2101      	movs	r1, #1
 800160e:	430a      	orrs	r2, r1
 8001610:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2241      	movs	r2, #65	; 0x41
 800161c:	2120      	movs	r1, #32
 800161e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2242      	movs	r2, #66	; 0x42
 800162a:	2100      	movs	r1, #0
 800162c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	0018      	movs	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	b002      	add	sp, #8
 8001636:	bd80      	pop	{r7, pc}
 8001638:	f0ffffff 	.word	0xf0ffffff
 800163c:	ffff7fff 	.word	0xffff7fff
 8001640:	02008000 	.word	0x02008000

08001644 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b089      	sub	sp, #36	; 0x24
 8001648:	af02      	add	r7, sp, #8
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	000c      	movs	r4, r1
 800164e:	0010      	movs	r0, r2
 8001650:	0019      	movs	r1, r3
 8001652:	230a      	movs	r3, #10
 8001654:	18fb      	adds	r3, r7, r3
 8001656:	1c22      	adds	r2, r4, #0
 8001658:	801a      	strh	r2, [r3, #0]
 800165a:	2308      	movs	r3, #8
 800165c:	18fb      	adds	r3, r7, r3
 800165e:	1c02      	adds	r2, r0, #0
 8001660:	801a      	strh	r2, [r3, #0]
 8001662:	1dbb      	adds	r3, r7, #6
 8001664:	1c0a      	adds	r2, r1, #0
 8001666:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2241      	movs	r2, #65	; 0x41
 800166c:	5c9b      	ldrb	r3, [r3, r2]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b20      	cmp	r3, #32
 8001672:	d000      	beq.n	8001676 <HAL_I2C_Mem_Write+0x32>
 8001674:	e10c      	b.n	8001890 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001678:	2b00      	cmp	r3, #0
 800167a:	d004      	beq.n	8001686 <HAL_I2C_Mem_Write+0x42>
 800167c:	232c      	movs	r3, #44	; 0x2c
 800167e:	18fb      	adds	r3, r7, r3
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d105      	bne.n	8001692 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2280      	movs	r2, #128	; 0x80
 800168a:	0092      	lsls	r2, r2, #2
 800168c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e0ff      	b.n	8001892 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2240      	movs	r2, #64	; 0x40
 8001696:	5c9b      	ldrb	r3, [r3, r2]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <HAL_I2C_Mem_Write+0x5c>
 800169c:	2302      	movs	r3, #2
 800169e:	e0f8      	b.n	8001892 <HAL_I2C_Mem_Write+0x24e>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2240      	movs	r2, #64	; 0x40
 80016a4:	2101      	movs	r1, #1
 80016a6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016a8:	f7ff fcf0 	bl	800108c <HAL_GetTick>
 80016ac:	0003      	movs	r3, r0
 80016ae:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	0219      	lsls	r1, r3, #8
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2319      	movs	r3, #25
 80016bc:	2201      	movs	r2, #1
 80016be:	f000 fb0b 	bl	8001cd8 <I2C_WaitOnFlagUntilTimeout>
 80016c2:	1e03      	subs	r3, r0, #0
 80016c4:	d001      	beq.n	80016ca <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e0e3      	b.n	8001892 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2241      	movs	r2, #65	; 0x41
 80016ce:	2121      	movs	r1, #33	; 0x21
 80016d0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2242      	movs	r2, #66	; 0x42
 80016d6:	2140      	movs	r1, #64	; 0x40
 80016d8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	222c      	movs	r2, #44	; 0x2c
 80016ea:	18ba      	adds	r2, r7, r2
 80016ec:	8812      	ldrh	r2, [r2, #0]
 80016ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2200      	movs	r2, #0
 80016f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016f6:	1dbb      	adds	r3, r7, #6
 80016f8:	881c      	ldrh	r4, [r3, #0]
 80016fa:	2308      	movs	r3, #8
 80016fc:	18fb      	adds	r3, r7, r3
 80016fe:	881a      	ldrh	r2, [r3, #0]
 8001700:	230a      	movs	r3, #10
 8001702:	18fb      	adds	r3, r7, r3
 8001704:	8819      	ldrh	r1, [r3, #0]
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	0023      	movs	r3, r4
 8001712:	f000 f9f9 	bl	8001b08 <I2C_RequestMemoryWrite>
 8001716:	1e03      	subs	r3, r0, #0
 8001718:	d005      	beq.n	8001726 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2240      	movs	r2, #64	; 0x40
 800171e:	2100      	movs	r1, #0
 8001720:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e0b5      	b.n	8001892 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800172a:	b29b      	uxth	r3, r3
 800172c:	2bff      	cmp	r3, #255	; 0xff
 800172e:	d911      	bls.n	8001754 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	22ff      	movs	r2, #255	; 0xff
 8001734:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173a:	b2da      	uxtb	r2, r3
 800173c:	2380      	movs	r3, #128	; 0x80
 800173e:	045c      	lsls	r4, r3, #17
 8001740:	230a      	movs	r3, #10
 8001742:	18fb      	adds	r3, r7, r3
 8001744:	8819      	ldrh	r1, [r3, #0]
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	2300      	movs	r3, #0
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	0023      	movs	r3, r4
 800174e:	f000 fbe3 	bl	8001f18 <I2C_TransferConfig>
 8001752:	e012      	b.n	800177a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001758:	b29a      	uxth	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001762:	b2da      	uxtb	r2, r3
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	049c      	lsls	r4, r3, #18
 8001768:	230a      	movs	r3, #10
 800176a:	18fb      	adds	r3, r7, r3
 800176c:	8819      	ldrh	r1, [r3, #0]
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	2300      	movs	r3, #0
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	0023      	movs	r3, r4
 8001776:	f000 fbcf 	bl	8001f18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	0018      	movs	r0, r3
 8001782:	f000 fae8 	bl	8001d56 <I2C_WaitOnTXISFlagUntilTimeout>
 8001786:	1e03      	subs	r3, r0, #0
 8001788:	d001      	beq.n	800178e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e081      	b.n	8001892 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	781a      	ldrb	r2, [r3, #0]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	3b01      	subs	r3, #1
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b6:	3b01      	subs	r3, #1
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d03a      	beq.n	800183e <HAL_I2C_Mem_Write+0x1fa>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d136      	bne.n	800183e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	0013      	movs	r3, r2
 80017da:	2200      	movs	r2, #0
 80017dc:	2180      	movs	r1, #128	; 0x80
 80017de:	f000 fa7b 	bl	8001cd8 <I2C_WaitOnFlagUntilTimeout>
 80017e2:	1e03      	subs	r3, r0, #0
 80017e4:	d001      	beq.n	80017ea <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e053      	b.n	8001892 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	2bff      	cmp	r3, #255	; 0xff
 80017f2:	d911      	bls.n	8001818 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	22ff      	movs	r2, #255	; 0xff
 80017f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	045c      	lsls	r4, r3, #17
 8001804:	230a      	movs	r3, #10
 8001806:	18fb      	adds	r3, r7, r3
 8001808:	8819      	ldrh	r1, [r3, #0]
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	2300      	movs	r3, #0
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	0023      	movs	r3, r4
 8001812:	f000 fb81 	bl	8001f18 <I2C_TransferConfig>
 8001816:	e012      	b.n	800183e <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800181c:	b29a      	uxth	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001826:	b2da      	uxtb	r2, r3
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	049c      	lsls	r4, r3, #18
 800182c:	230a      	movs	r3, #10
 800182e:	18fb      	adds	r3, r7, r3
 8001830:	8819      	ldrh	r1, [r3, #0]
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	2300      	movs	r3, #0
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	0023      	movs	r3, r4
 800183a:	f000 fb6d 	bl	8001f18 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001842:	b29b      	uxth	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d198      	bne.n	800177a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	0018      	movs	r0, r3
 8001850:	f000 fac0 	bl	8001dd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001854:	1e03      	subs	r3, r0, #0
 8001856:	d001      	beq.n	800185c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e01a      	b.n	8001892 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2220      	movs	r2, #32
 8001862:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	490b      	ldr	r1, [pc, #44]	; (800189c <HAL_I2C_Mem_Write+0x258>)
 8001870:	400a      	ands	r2, r1
 8001872:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2241      	movs	r2, #65	; 0x41
 8001878:	2120      	movs	r1, #32
 800187a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2242      	movs	r2, #66	; 0x42
 8001880:	2100      	movs	r1, #0
 8001882:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2240      	movs	r2, #64	; 0x40
 8001888:	2100      	movs	r1, #0
 800188a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800188c:	2300      	movs	r3, #0
 800188e:	e000      	b.n	8001892 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001890:	2302      	movs	r3, #2
  }
}
 8001892:	0018      	movs	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	b007      	add	sp, #28
 8001898:	bd90      	pop	{r4, r7, pc}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	fe00e800 	.word	0xfe00e800

080018a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	b089      	sub	sp, #36	; 0x24
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	000c      	movs	r4, r1
 80018aa:	0010      	movs	r0, r2
 80018ac:	0019      	movs	r1, r3
 80018ae:	230a      	movs	r3, #10
 80018b0:	18fb      	adds	r3, r7, r3
 80018b2:	1c22      	adds	r2, r4, #0
 80018b4:	801a      	strh	r2, [r3, #0]
 80018b6:	2308      	movs	r3, #8
 80018b8:	18fb      	adds	r3, r7, r3
 80018ba:	1c02      	adds	r2, r0, #0
 80018bc:	801a      	strh	r2, [r3, #0]
 80018be:	1dbb      	adds	r3, r7, #6
 80018c0:	1c0a      	adds	r2, r1, #0
 80018c2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2241      	movs	r2, #65	; 0x41
 80018c8:	5c9b      	ldrb	r3, [r3, r2]
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b20      	cmp	r3, #32
 80018ce:	d000      	beq.n	80018d2 <HAL_I2C_Mem_Read+0x32>
 80018d0:	e110      	b.n	8001af4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80018d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d004      	beq.n	80018e2 <HAL_I2C_Mem_Read+0x42>
 80018d8:	232c      	movs	r3, #44	; 0x2c
 80018da:	18fb      	adds	r3, r7, r3
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d105      	bne.n	80018ee <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2280      	movs	r2, #128	; 0x80
 80018e6:	0092      	lsls	r2, r2, #2
 80018e8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e103      	b.n	8001af6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2240      	movs	r2, #64	; 0x40
 80018f2:	5c9b      	ldrb	r3, [r3, r2]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d101      	bne.n	80018fc <HAL_I2C_Mem_Read+0x5c>
 80018f8:	2302      	movs	r3, #2
 80018fa:	e0fc      	b.n	8001af6 <HAL_I2C_Mem_Read+0x256>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2240      	movs	r2, #64	; 0x40
 8001900:	2101      	movs	r1, #1
 8001902:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001904:	f7ff fbc2 	bl	800108c <HAL_GetTick>
 8001908:	0003      	movs	r3, r0
 800190a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	0219      	lsls	r1, r3, #8
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2319      	movs	r3, #25
 8001918:	2201      	movs	r2, #1
 800191a:	f000 f9dd 	bl	8001cd8 <I2C_WaitOnFlagUntilTimeout>
 800191e:	1e03      	subs	r3, r0, #0
 8001920:	d001      	beq.n	8001926 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e0e7      	b.n	8001af6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2241      	movs	r2, #65	; 0x41
 800192a:	2122      	movs	r1, #34	; 0x22
 800192c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2242      	movs	r2, #66	; 0x42
 8001932:	2140      	movs	r1, #64	; 0x40
 8001934:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001940:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	222c      	movs	r2, #44	; 0x2c
 8001946:	18ba      	adds	r2, r7, r2
 8001948:	8812      	ldrh	r2, [r2, #0]
 800194a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001952:	1dbb      	adds	r3, r7, #6
 8001954:	881c      	ldrh	r4, [r3, #0]
 8001956:	2308      	movs	r3, #8
 8001958:	18fb      	adds	r3, r7, r3
 800195a:	881a      	ldrh	r2, [r3, #0]
 800195c:	230a      	movs	r3, #10
 800195e:	18fb      	adds	r3, r7, r3
 8001960:	8819      	ldrh	r1, [r3, #0]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	9301      	str	r3, [sp, #4]
 8001968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	0023      	movs	r3, r4
 800196e:	f000 f92f 	bl	8001bd0 <I2C_RequestMemoryRead>
 8001972:	1e03      	subs	r3, r0, #0
 8001974:	d005      	beq.n	8001982 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2240      	movs	r2, #64	; 0x40
 800197a:	2100      	movs	r1, #0
 800197c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e0b9      	b.n	8001af6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001986:	b29b      	uxth	r3, r3
 8001988:	2bff      	cmp	r3, #255	; 0xff
 800198a:	d911      	bls.n	80019b0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	22ff      	movs	r2, #255	; 0xff
 8001990:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001996:	b2da      	uxtb	r2, r3
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	045c      	lsls	r4, r3, #17
 800199c:	230a      	movs	r3, #10
 800199e:	18fb      	adds	r3, r7, r3
 80019a0:	8819      	ldrh	r1, [r3, #0]
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	4b56      	ldr	r3, [pc, #344]	; (8001b00 <HAL_I2C_Mem_Read+0x260>)
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	0023      	movs	r3, r4
 80019aa:	f000 fab5 	bl	8001f18 <I2C_TransferConfig>
 80019ae:	e012      	b.n	80019d6 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	049c      	lsls	r4, r3, #18
 80019c4:	230a      	movs	r3, #10
 80019c6:	18fb      	adds	r3, r7, r3
 80019c8:	8819      	ldrh	r1, [r3, #0]
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	4b4c      	ldr	r3, [pc, #304]	; (8001b00 <HAL_I2C_Mem_Read+0x260>)
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	0023      	movs	r3, r4
 80019d2:	f000 faa1 	bl	8001f18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80019d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	0013      	movs	r3, r2
 80019e0:	2200      	movs	r2, #0
 80019e2:	2104      	movs	r1, #4
 80019e4:	f000 f978 	bl	8001cd8 <I2C_WaitOnFlagUntilTimeout>
 80019e8:	1e03      	subs	r3, r0, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e082      	b.n	8001af6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d03a      	beq.n	8001aa2 <HAL_I2C_Mem_Read+0x202>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d136      	bne.n	8001aa2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	0013      	movs	r3, r2
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2180      	movs	r1, #128	; 0x80
 8001a42:	f000 f949 	bl	8001cd8 <I2C_WaitOnFlagUntilTimeout>
 8001a46:	1e03      	subs	r3, r0, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e053      	b.n	8001af6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	2bff      	cmp	r3, #255	; 0xff
 8001a56:	d911      	bls.n	8001a7c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	22ff      	movs	r2, #255	; 0xff
 8001a5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	045c      	lsls	r4, r3, #17
 8001a68:	230a      	movs	r3, #10
 8001a6a:	18fb      	adds	r3, r7, r3
 8001a6c:	8819      	ldrh	r1, [r3, #0]
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	2300      	movs	r3, #0
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	0023      	movs	r3, r4
 8001a76:	f000 fa4f 	bl	8001f18 <I2C_TransferConfig>
 8001a7a:	e012      	b.n	8001aa2 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	049c      	lsls	r4, r3, #18
 8001a90:	230a      	movs	r3, #10
 8001a92:	18fb      	adds	r3, r7, r3
 8001a94:	8819      	ldrh	r1, [r3, #0]
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	0023      	movs	r3, r4
 8001a9e:	f000 fa3b 	bl	8001f18 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d194      	bne.n	80019d6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	f000 f98e 	bl	8001dd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ab8:	1e03      	subs	r3, r0, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e01a      	b.n	8001af6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	490c      	ldr	r1, [pc, #48]	; (8001b04 <HAL_I2C_Mem_Read+0x264>)
 8001ad4:	400a      	ands	r2, r1
 8001ad6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2241      	movs	r2, #65	; 0x41
 8001adc:	2120      	movs	r1, #32
 8001ade:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2242      	movs	r2, #66	; 0x42
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2240      	movs	r2, #64	; 0x40
 8001aec:	2100      	movs	r1, #0
 8001aee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	e000      	b.n	8001af6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001af4:	2302      	movs	r3, #2
  }
}
 8001af6:	0018      	movs	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	b007      	add	sp, #28
 8001afc:	bd90      	pop	{r4, r7, pc}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	80002400 	.word	0x80002400
 8001b04:	fe00e800 	.word	0xfe00e800

08001b08 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001b08:	b5b0      	push	{r4, r5, r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	000c      	movs	r4, r1
 8001b12:	0010      	movs	r0, r2
 8001b14:	0019      	movs	r1, r3
 8001b16:	250a      	movs	r5, #10
 8001b18:	197b      	adds	r3, r7, r5
 8001b1a:	1c22      	adds	r2, r4, #0
 8001b1c:	801a      	strh	r2, [r3, #0]
 8001b1e:	2308      	movs	r3, #8
 8001b20:	18fb      	adds	r3, r7, r3
 8001b22:	1c02      	adds	r2, r0, #0
 8001b24:	801a      	strh	r2, [r3, #0]
 8001b26:	1dbb      	adds	r3, r7, #6
 8001b28:	1c0a      	adds	r2, r1, #0
 8001b2a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001b2c:	1dbb      	adds	r3, r7, #6
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	045c      	lsls	r4, r3, #17
 8001b36:	197b      	adds	r3, r7, r5
 8001b38:	8819      	ldrh	r1, [r3, #0]
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <I2C_RequestMemoryWrite+0xc4>)
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	0023      	movs	r3, r4
 8001b42:	f000 f9e9 	bl	8001f18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b48:	6a39      	ldr	r1, [r7, #32]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f000 f902 	bl	8001d56 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b52:	1e03      	subs	r3, r0, #0
 8001b54:	d001      	beq.n	8001b5a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e033      	b.n	8001bc2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b5a:	1dbb      	adds	r3, r7, #6
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d107      	bne.n	8001b72 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b62:	2308      	movs	r3, #8
 8001b64:	18fb      	adds	r3, r7, r3
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	629a      	str	r2, [r3, #40]	; 0x28
 8001b70:	e019      	b.n	8001ba6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b72:	2308      	movs	r3, #8
 8001b74:	18fb      	adds	r3, r7, r3
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b86:	6a39      	ldr	r1, [r7, #32]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f000 f8e3 	bl	8001d56 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b90:	1e03      	subs	r3, r0, #0
 8001b92:	d001      	beq.n	8001b98 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e014      	b.n	8001bc2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b98:	2308      	movs	r3, #8
 8001b9a:	18fb      	adds	r3, r7, r3
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001ba6:	6a3a      	ldr	r2, [r7, #32]
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	0013      	movs	r3, r2
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2180      	movs	r1, #128	; 0x80
 8001bb4:	f000 f890 	bl	8001cd8 <I2C_WaitOnFlagUntilTimeout>
 8001bb8:	1e03      	subs	r3, r0, #0
 8001bba:	d001      	beq.n	8001bc0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e000      	b.n	8001bc2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	b004      	add	sp, #16
 8001bc8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	80002000 	.word	0x80002000

08001bd0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001bd0:	b5b0      	push	{r4, r5, r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af02      	add	r7, sp, #8
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	000c      	movs	r4, r1
 8001bda:	0010      	movs	r0, r2
 8001bdc:	0019      	movs	r1, r3
 8001bde:	250a      	movs	r5, #10
 8001be0:	197b      	adds	r3, r7, r5
 8001be2:	1c22      	adds	r2, r4, #0
 8001be4:	801a      	strh	r2, [r3, #0]
 8001be6:	2308      	movs	r3, #8
 8001be8:	18fb      	adds	r3, r7, r3
 8001bea:	1c02      	adds	r2, r0, #0
 8001bec:	801a      	strh	r2, [r3, #0]
 8001bee:	1dbb      	adds	r3, r7, #6
 8001bf0:	1c0a      	adds	r2, r1, #0
 8001bf2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001bf4:	1dbb      	adds	r3, r7, #6
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	197b      	adds	r3, r7, r5
 8001bfc:	8819      	ldrh	r1, [r3, #0]
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	4b23      	ldr	r3, [pc, #140]	; (8001c90 <I2C_RequestMemoryRead+0xc0>)
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	2300      	movs	r3, #0
 8001c06:	f000 f987 	bl	8001f18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c0c:	6a39      	ldr	r1, [r7, #32]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	0018      	movs	r0, r3
 8001c12:	f000 f8a0 	bl	8001d56 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c16:	1e03      	subs	r3, r0, #0
 8001c18:	d001      	beq.n	8001c1e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e033      	b.n	8001c86 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c1e:	1dbb      	adds	r3, r7, #6
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d107      	bne.n	8001c36 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c26:	2308      	movs	r3, #8
 8001c28:	18fb      	adds	r3, r7, r3
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	629a      	str	r2, [r3, #40]	; 0x28
 8001c34:	e019      	b.n	8001c6a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c36:	2308      	movs	r3, #8
 8001c38:	18fb      	adds	r3, r7, r3
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c4a:	6a39      	ldr	r1, [r7, #32]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f000 f881 	bl	8001d56 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c54:	1e03      	subs	r3, r0, #0
 8001c56:	d001      	beq.n	8001c5c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e014      	b.n	8001c86 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c5c:	2308      	movs	r3, #8
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001c6a:	6a3a      	ldr	r2, [r7, #32]
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	0013      	movs	r3, r2
 8001c74:	2200      	movs	r2, #0
 8001c76:	2140      	movs	r1, #64	; 0x40
 8001c78:	f000 f82e 	bl	8001cd8 <I2C_WaitOnFlagUntilTimeout>
 8001c7c:	1e03      	subs	r3, r0, #0
 8001c7e:	d001      	beq.n	8001c84 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e000      	b.n	8001c86 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	0018      	movs	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	b004      	add	sp, #16
 8001c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	80002000 	.word	0x80002000

08001c94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d103      	bne.n	8001cb2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d007      	beq.n	8001cd0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	699a      	ldr	r2, [r3, #24]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2101      	movs	r1, #1
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	619a      	str	r2, [r3, #24]
  }
}
 8001cd0:	46c0      	nop			; (mov r8, r8)
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	b002      	add	sp, #8
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	1dfb      	adds	r3, r7, #7
 8001ce6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ce8:	e021      	b.n	8001d2e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	3301      	adds	r3, #1
 8001cee:	d01e      	beq.n	8001d2e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cf0:	f7ff f9cc 	bl	800108c <HAL_GetTick>
 8001cf4:	0002      	movs	r2, r0
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d302      	bcc.n	8001d06 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d113      	bne.n	8001d2e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2241      	movs	r2, #65	; 0x41
 8001d16:	2120      	movs	r1, #32
 8001d18:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2242      	movs	r2, #66	; 0x42
 8001d1e:	2100      	movs	r1, #0
 8001d20:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2240      	movs	r2, #64	; 0x40
 8001d26:	2100      	movs	r1, #0
 8001d28:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e00f      	b.n	8001d4e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	68ba      	ldr	r2, [r7, #8]
 8001d36:	4013      	ands	r3, r2
 8001d38:	68ba      	ldr	r2, [r7, #8]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	425a      	negs	r2, r3
 8001d3e:	4153      	adcs	r3, r2
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	001a      	movs	r2, r3
 8001d44:	1dfb      	adds	r3, r7, #7
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d0ce      	beq.n	8001cea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	0018      	movs	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	b004      	add	sp, #16
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b084      	sub	sp, #16
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d62:	e02b      	b.n	8001dbc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	68b9      	ldr	r1, [r7, #8]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f000 f86e 	bl	8001e4c <I2C_IsAcknowledgeFailed>
 8001d70:	1e03      	subs	r3, r0, #0
 8001d72:	d001      	beq.n	8001d78 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e029      	b.n	8001dcc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	d01e      	beq.n	8001dbc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d7e:	f7ff f985 	bl	800108c <HAL_GetTick>
 8001d82:	0002      	movs	r2, r0
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d302      	bcc.n	8001d94 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d113      	bne.n	8001dbc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d98:	2220      	movs	r2, #32
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2241      	movs	r2, #65	; 0x41
 8001da4:	2120      	movs	r1, #32
 8001da6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2242      	movs	r2, #66	; 0x42
 8001dac:	2100      	movs	r1, #0
 8001dae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2240      	movs	r2, #64	; 0x40
 8001db4:	2100      	movs	r1, #0
 8001db6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e007      	b.n	8001dcc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d1cc      	bne.n	8001d64 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	0018      	movs	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b004      	add	sp, #16
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001de0:	e028      	b.n	8001e34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	0018      	movs	r0, r3
 8001dea:	f000 f82f 	bl	8001e4c <I2C_IsAcknowledgeFailed>
 8001dee:	1e03      	subs	r3, r0, #0
 8001df0:	d001      	beq.n	8001df6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e026      	b.n	8001e44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001df6:	f7ff f949 	bl	800108c <HAL_GetTick>
 8001dfa:	0002      	movs	r2, r0
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d302      	bcc.n	8001e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d113      	bne.n	8001e34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e10:	2220      	movs	r2, #32
 8001e12:	431a      	orrs	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2241      	movs	r2, #65	; 0x41
 8001e1c:	2120      	movs	r1, #32
 8001e1e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2242      	movs	r2, #66	; 0x42
 8001e24:	2100      	movs	r1, #0
 8001e26:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2240      	movs	r2, #64	; 0x40
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e007      	b.n	8001e44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b20      	cmp	r3, #32
 8001e40:	d1cf      	bne.n	8001de2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	0018      	movs	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	b004      	add	sp, #16
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	2210      	movs	r2, #16
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b10      	cmp	r3, #16
 8001e64:	d151      	bne.n	8001f0a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e66:	e021      	b.n	8001eac <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	d01e      	beq.n	8001eac <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e6e:	f7ff f90d 	bl	800108c <HAL_GetTick>
 8001e72:	0002      	movs	r2, r0
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d302      	bcc.n	8001e84 <I2C_IsAcknowledgeFailed+0x38>
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d113      	bne.n	8001eac <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e88:	2220      	movs	r2, #32
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2241      	movs	r2, #65	; 0x41
 8001e94:	2120      	movs	r1, #32
 8001e96:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2242      	movs	r2, #66	; 0x42
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2240      	movs	r2, #64	; 0x40
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e02f      	b.n	8001f0c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b20      	cmp	r3, #32
 8001eb8:	d1d6      	bne.n	8001e68 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2210      	movs	r2, #16
 8001ec0:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f7ff fee1 	bl	8001c94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	490d      	ldr	r1, [pc, #52]	; (8001f14 <I2C_IsAcknowledgeFailed+0xc8>)
 8001ede:	400a      	ands	r2, r1
 8001ee0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	2204      	movs	r2, #4
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2241      	movs	r2, #65	; 0x41
 8001ef2:	2120      	movs	r1, #32
 8001ef4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2242      	movs	r2, #66	; 0x42
 8001efa:	2100      	movs	r1, #0
 8001efc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2240      	movs	r2, #64	; 0x40
 8001f02:	2100      	movs	r1, #0
 8001f04:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b004      	add	sp, #16
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	fe00e800 	.word	0xfe00e800

08001f18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f18:	b590      	push	{r4, r7, lr}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	0008      	movs	r0, r1
 8001f22:	0011      	movs	r1, r2
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	240a      	movs	r4, #10
 8001f28:	193b      	adds	r3, r7, r4
 8001f2a:	1c02      	adds	r2, r0, #0
 8001f2c:	801a      	strh	r2, [r3, #0]
 8001f2e:	2009      	movs	r0, #9
 8001f30:	183b      	adds	r3, r7, r0
 8001f32:	1c0a      	adds	r2, r1, #0
 8001f34:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	6a3a      	ldr	r2, [r7, #32]
 8001f3e:	0d51      	lsrs	r1, r2, #21
 8001f40:	2280      	movs	r2, #128	; 0x80
 8001f42:	00d2      	lsls	r2, r2, #3
 8001f44:	400a      	ands	r2, r1
 8001f46:	490e      	ldr	r1, [pc, #56]	; (8001f80 <I2C_TransferConfig+0x68>)
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	43d2      	mvns	r2, r2
 8001f4c:	401a      	ands	r2, r3
 8001f4e:	0011      	movs	r1, r2
 8001f50:	193b      	adds	r3, r7, r4
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	059b      	lsls	r3, r3, #22
 8001f56:	0d9a      	lsrs	r2, r3, #22
 8001f58:	183b      	adds	r3, r7, r0
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	0418      	lsls	r0, r3, #16
 8001f5e:	23ff      	movs	r3, #255	; 0xff
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	4003      	ands	r3, r0
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	b005      	add	sp, #20
 8001f7c:	bd90      	pop	{r4, r7, pc}
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	03ff63ff 	.word	0x03ff63ff

08001f84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2241      	movs	r2, #65	; 0x41
 8001f92:	5c9b      	ldrb	r3, [r3, r2]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b20      	cmp	r3, #32
 8001f98:	d138      	bne.n	800200c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2240      	movs	r2, #64	; 0x40
 8001f9e:	5c9b      	ldrb	r3, [r3, r2]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e032      	b.n	800200e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2240      	movs	r2, #64	; 0x40
 8001fac:	2101      	movs	r1, #1
 8001fae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2241      	movs	r2, #65	; 0x41
 8001fb4:	2124      	movs	r1, #36	; 0x24
 8001fb6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	438a      	bics	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4911      	ldr	r1, [pc, #68]	; (8002018 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001fd4:	400a      	ands	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6819      	ldr	r1, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2241      	movs	r2, #65	; 0x41
 8001ffc:	2120      	movs	r1, #32
 8001ffe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2240      	movs	r2, #64	; 0x40
 8002004:	2100      	movs	r1, #0
 8002006:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	e000      	b.n	800200e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800200c:	2302      	movs	r3, #2
  }
}
 800200e:	0018      	movs	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	b002      	add	sp, #8
 8002014:	bd80      	pop	{r7, pc}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	ffffefff 	.word	0xffffefff

0800201c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2241      	movs	r2, #65	; 0x41
 800202a:	5c9b      	ldrb	r3, [r3, r2]
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b20      	cmp	r3, #32
 8002030:	d139      	bne.n	80020a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2240      	movs	r2, #64	; 0x40
 8002036:	5c9b      	ldrb	r3, [r3, r2]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800203c:	2302      	movs	r3, #2
 800203e:	e033      	b.n	80020a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2240      	movs	r2, #64	; 0x40
 8002044:	2101      	movs	r1, #1
 8002046:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2241      	movs	r2, #65	; 0x41
 800204c:	2124      	movs	r1, #36	; 0x24
 800204e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2101      	movs	r1, #1
 800205c:	438a      	bics	r2, r1
 800205e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4a11      	ldr	r2, [pc, #68]	; (80020b0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800206c:	4013      	ands	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2101      	movs	r1, #1
 800208e:	430a      	orrs	r2, r1
 8002090:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2241      	movs	r2, #65	; 0x41
 8002096:	2120      	movs	r1, #32
 8002098:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2240      	movs	r2, #64	; 0x40
 800209e:	2100      	movs	r1, #0
 80020a0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e000      	b.n	80020a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020a6:	2302      	movs	r3, #2
  }
}
 80020a8:	0018      	movs	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b004      	add	sp, #16
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	fffff0ff 	.word	0xfffff0ff

080020b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e303      	b.n	80026ce <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2201      	movs	r2, #1
 80020cc:	4013      	ands	r3, r2
 80020ce:	d100      	bne.n	80020d2 <HAL_RCC_OscConfig+0x1e>
 80020d0:	e08d      	b.n	80021ee <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020d2:	4bc4      	ldr	r3, [pc, #784]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	220c      	movs	r2, #12
 80020d8:	4013      	ands	r3, r2
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d00e      	beq.n	80020fc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020de:	4bc1      	ldr	r3, [pc, #772]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	220c      	movs	r2, #12
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d116      	bne.n	8002118 <HAL_RCC_OscConfig+0x64>
 80020ea:	4bbe      	ldr	r3, [pc, #760]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	2380      	movs	r3, #128	; 0x80
 80020f0:	025b      	lsls	r3, r3, #9
 80020f2:	401a      	ands	r2, r3
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	025b      	lsls	r3, r3, #9
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d10d      	bne.n	8002118 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fc:	4bb9      	ldr	r3, [pc, #740]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	029b      	lsls	r3, r3, #10
 8002104:	4013      	ands	r3, r2
 8002106:	d100      	bne.n	800210a <HAL_RCC_OscConfig+0x56>
 8002108:	e070      	b.n	80021ec <HAL_RCC_OscConfig+0x138>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d000      	beq.n	8002114 <HAL_RCC_OscConfig+0x60>
 8002112:	e06b      	b.n	80021ec <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e2da      	b.n	80026ce <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d107      	bne.n	8002130 <HAL_RCC_OscConfig+0x7c>
 8002120:	4bb0      	ldr	r3, [pc, #704]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4baf      	ldr	r3, [pc, #700]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 8002126:	2180      	movs	r1, #128	; 0x80
 8002128:	0249      	lsls	r1, r1, #9
 800212a:	430a      	orrs	r2, r1
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	e02f      	b.n	8002190 <HAL_RCC_OscConfig+0xdc>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10c      	bne.n	8002152 <HAL_RCC_OscConfig+0x9e>
 8002138:	4baa      	ldr	r3, [pc, #680]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4ba9      	ldr	r3, [pc, #676]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 800213e:	49aa      	ldr	r1, [pc, #680]	; (80023e8 <HAL_RCC_OscConfig+0x334>)
 8002140:	400a      	ands	r2, r1
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	4ba7      	ldr	r3, [pc, #668]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4ba6      	ldr	r3, [pc, #664]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 800214a:	49a8      	ldr	r1, [pc, #672]	; (80023ec <HAL_RCC_OscConfig+0x338>)
 800214c:	400a      	ands	r2, r1
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	e01e      	b.n	8002190 <HAL_RCC_OscConfig+0xdc>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b05      	cmp	r3, #5
 8002158:	d10e      	bne.n	8002178 <HAL_RCC_OscConfig+0xc4>
 800215a:	4ba2      	ldr	r3, [pc, #648]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	4ba1      	ldr	r3, [pc, #644]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 8002160:	2180      	movs	r1, #128	; 0x80
 8002162:	02c9      	lsls	r1, r1, #11
 8002164:	430a      	orrs	r2, r1
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	4b9e      	ldr	r3, [pc, #632]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b9d      	ldr	r3, [pc, #628]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 800216e:	2180      	movs	r1, #128	; 0x80
 8002170:	0249      	lsls	r1, r1, #9
 8002172:	430a      	orrs	r2, r1
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	e00b      	b.n	8002190 <HAL_RCC_OscConfig+0xdc>
 8002178:	4b9a      	ldr	r3, [pc, #616]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b99      	ldr	r3, [pc, #612]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 800217e:	499a      	ldr	r1, [pc, #616]	; (80023e8 <HAL_RCC_OscConfig+0x334>)
 8002180:	400a      	ands	r2, r1
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	4b97      	ldr	r3, [pc, #604]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4b96      	ldr	r3, [pc, #600]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 800218a:	4998      	ldr	r1, [pc, #608]	; (80023ec <HAL_RCC_OscConfig+0x338>)
 800218c:	400a      	ands	r2, r1
 800218e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d014      	beq.n	80021c2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002198:	f7fe ff78 	bl	800108c <HAL_GetTick>
 800219c:	0003      	movs	r3, r0
 800219e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a2:	f7fe ff73 	bl	800108c <HAL_GetTick>
 80021a6:	0002      	movs	r2, r0
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b64      	cmp	r3, #100	; 0x64
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e28c      	b.n	80026ce <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b4:	4b8b      	ldr	r3, [pc, #556]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	2380      	movs	r3, #128	; 0x80
 80021ba:	029b      	lsls	r3, r3, #10
 80021bc:	4013      	ands	r3, r2
 80021be:	d0f0      	beq.n	80021a2 <HAL_RCC_OscConfig+0xee>
 80021c0:	e015      	b.n	80021ee <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c2:	f7fe ff63 	bl	800108c <HAL_GetTick>
 80021c6:	0003      	movs	r3, r0
 80021c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021cc:	f7fe ff5e 	bl	800108c <HAL_GetTick>
 80021d0:	0002      	movs	r2, r0
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b64      	cmp	r3, #100	; 0x64
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e277      	b.n	80026ce <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021de:	4b81      	ldr	r3, [pc, #516]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	029b      	lsls	r3, r3, #10
 80021e6:	4013      	ands	r3, r2
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x118>
 80021ea:	e000      	b.n	80021ee <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ec:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2202      	movs	r2, #2
 80021f4:	4013      	ands	r3, r2
 80021f6:	d100      	bne.n	80021fa <HAL_RCC_OscConfig+0x146>
 80021f8:	e069      	b.n	80022ce <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80021fa:	4b7a      	ldr	r3, [pc, #488]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	220c      	movs	r2, #12
 8002200:	4013      	ands	r3, r2
 8002202:	d00b      	beq.n	800221c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002204:	4b77      	ldr	r3, [pc, #476]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	220c      	movs	r2, #12
 800220a:	4013      	ands	r3, r2
 800220c:	2b08      	cmp	r3, #8
 800220e:	d11c      	bne.n	800224a <HAL_RCC_OscConfig+0x196>
 8002210:	4b74      	ldr	r3, [pc, #464]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	2380      	movs	r3, #128	; 0x80
 8002216:	025b      	lsls	r3, r3, #9
 8002218:	4013      	ands	r3, r2
 800221a:	d116      	bne.n	800224a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221c:	4b71      	ldr	r3, [pc, #452]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2202      	movs	r2, #2
 8002222:	4013      	ands	r3, r2
 8002224:	d005      	beq.n	8002232 <HAL_RCC_OscConfig+0x17e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d001      	beq.n	8002232 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e24d      	b.n	80026ce <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002232:	4b6c      	ldr	r3, [pc, #432]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	22f8      	movs	r2, #248	; 0xf8
 8002238:	4393      	bics	r3, r2
 800223a:	0019      	movs	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	00da      	lsls	r2, r3, #3
 8002242:	4b68      	ldr	r3, [pc, #416]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 8002244:	430a      	orrs	r2, r1
 8002246:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002248:	e041      	b.n	80022ce <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d024      	beq.n	800229c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002252:	4b64      	ldr	r3, [pc, #400]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	4b63      	ldr	r3, [pc, #396]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 8002258:	2101      	movs	r1, #1
 800225a:	430a      	orrs	r2, r1
 800225c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225e:	f7fe ff15 	bl	800108c <HAL_GetTick>
 8002262:	0003      	movs	r3, r0
 8002264:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002268:	f7fe ff10 	bl	800108c <HAL_GetTick>
 800226c:	0002      	movs	r2, r0
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e229      	b.n	80026ce <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227a:	4b5a      	ldr	r3, [pc, #360]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2202      	movs	r2, #2
 8002280:	4013      	ands	r3, r2
 8002282:	d0f1      	beq.n	8002268 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002284:	4b57      	ldr	r3, [pc, #348]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	22f8      	movs	r2, #248	; 0xf8
 800228a:	4393      	bics	r3, r2
 800228c:	0019      	movs	r1, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	00da      	lsls	r2, r3, #3
 8002294:	4b53      	ldr	r3, [pc, #332]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 8002296:	430a      	orrs	r2, r1
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	e018      	b.n	80022ce <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800229c:	4b51      	ldr	r3, [pc, #324]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b50      	ldr	r3, [pc, #320]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 80022a2:	2101      	movs	r1, #1
 80022a4:	438a      	bics	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7fe fef0 	bl	800108c <HAL_GetTick>
 80022ac:	0003      	movs	r3, r0
 80022ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022b2:	f7fe feeb 	bl	800108c <HAL_GetTick>
 80022b6:	0002      	movs	r2, r0
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e204      	b.n	80026ce <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c4:	4b47      	ldr	r3, [pc, #284]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2202      	movs	r2, #2
 80022ca:	4013      	ands	r3, r2
 80022cc:	d1f1      	bne.n	80022b2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2208      	movs	r2, #8
 80022d4:	4013      	ands	r3, r2
 80022d6:	d036      	beq.n	8002346 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d019      	beq.n	8002314 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e0:	4b40      	ldr	r3, [pc, #256]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 80022e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022e4:	4b3f      	ldr	r3, [pc, #252]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 80022e6:	2101      	movs	r1, #1
 80022e8:	430a      	orrs	r2, r1
 80022ea:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ec:	f7fe fece 	bl	800108c <HAL_GetTick>
 80022f0:	0003      	movs	r3, r0
 80022f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022f6:	f7fe fec9 	bl	800108c <HAL_GetTick>
 80022fa:	0002      	movs	r2, r0
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e1e2      	b.n	80026ce <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002308:	4b36      	ldr	r3, [pc, #216]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	2202      	movs	r2, #2
 800230e:	4013      	ands	r3, r2
 8002310:	d0f1      	beq.n	80022f6 <HAL_RCC_OscConfig+0x242>
 8002312:	e018      	b.n	8002346 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002314:	4b33      	ldr	r3, [pc, #204]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 8002316:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002318:	4b32      	ldr	r3, [pc, #200]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 800231a:	2101      	movs	r1, #1
 800231c:	438a      	bics	r2, r1
 800231e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002320:	f7fe feb4 	bl	800108c <HAL_GetTick>
 8002324:	0003      	movs	r3, r0
 8002326:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800232a:	f7fe feaf 	bl	800108c <HAL_GetTick>
 800232e:	0002      	movs	r2, r0
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e1c8      	b.n	80026ce <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800233c:	4b29      	ldr	r3, [pc, #164]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	2202      	movs	r2, #2
 8002342:	4013      	ands	r3, r2
 8002344:	d1f1      	bne.n	800232a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2204      	movs	r2, #4
 800234c:	4013      	ands	r3, r2
 800234e:	d100      	bne.n	8002352 <HAL_RCC_OscConfig+0x29e>
 8002350:	e0b6      	b.n	80024c0 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002352:	231f      	movs	r3, #31
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800235a:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 800235c:	69da      	ldr	r2, [r3, #28]
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	055b      	lsls	r3, r3, #21
 8002362:	4013      	ands	r3, r2
 8002364:	d111      	bne.n	800238a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002366:	4b1f      	ldr	r3, [pc, #124]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 8002368:	69da      	ldr	r2, [r3, #28]
 800236a:	4b1e      	ldr	r3, [pc, #120]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 800236c:	2180      	movs	r1, #128	; 0x80
 800236e:	0549      	lsls	r1, r1, #21
 8002370:	430a      	orrs	r2, r1
 8002372:	61da      	str	r2, [r3, #28]
 8002374:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 8002376:	69da      	ldr	r2, [r3, #28]
 8002378:	2380      	movs	r3, #128	; 0x80
 800237a:	055b      	lsls	r3, r3, #21
 800237c:	4013      	ands	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002382:	231f      	movs	r3, #31
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	2201      	movs	r2, #1
 8002388:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238a:	4b19      	ldr	r3, [pc, #100]	; (80023f0 <HAL_RCC_OscConfig+0x33c>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	4013      	ands	r3, r2
 8002394:	d11a      	bne.n	80023cc <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002396:	4b16      	ldr	r3, [pc, #88]	; (80023f0 <HAL_RCC_OscConfig+0x33c>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <HAL_RCC_OscConfig+0x33c>)
 800239c:	2180      	movs	r1, #128	; 0x80
 800239e:	0049      	lsls	r1, r1, #1
 80023a0:	430a      	orrs	r2, r1
 80023a2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a4:	f7fe fe72 	bl	800108c <HAL_GetTick>
 80023a8:	0003      	movs	r3, r0
 80023aa:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ae:	f7fe fe6d 	bl	800108c <HAL_GetTick>
 80023b2:	0002      	movs	r2, r0
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b64      	cmp	r3, #100	; 0x64
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e186      	b.n	80026ce <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c0:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <HAL_RCC_OscConfig+0x33c>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	2380      	movs	r3, #128	; 0x80
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4013      	ands	r3, r2
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d10f      	bne.n	80023f4 <HAL_RCC_OscConfig+0x340>
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 80023d6:	6a1a      	ldr	r2, [r3, #32]
 80023d8:	4b02      	ldr	r3, [pc, #8]	; (80023e4 <HAL_RCC_OscConfig+0x330>)
 80023da:	2101      	movs	r1, #1
 80023dc:	430a      	orrs	r2, r1
 80023de:	621a      	str	r2, [r3, #32]
 80023e0:	e036      	b.n	8002450 <HAL_RCC_OscConfig+0x39c>
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	40021000 	.word	0x40021000
 80023e8:	fffeffff 	.word	0xfffeffff
 80023ec:	fffbffff 	.word	0xfffbffff
 80023f0:	40007000 	.word	0x40007000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10c      	bne.n	8002416 <HAL_RCC_OscConfig+0x362>
 80023fc:	4bb6      	ldr	r3, [pc, #728]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 80023fe:	6a1a      	ldr	r2, [r3, #32]
 8002400:	4bb5      	ldr	r3, [pc, #724]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 8002402:	2101      	movs	r1, #1
 8002404:	438a      	bics	r2, r1
 8002406:	621a      	str	r2, [r3, #32]
 8002408:	4bb3      	ldr	r3, [pc, #716]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 800240a:	6a1a      	ldr	r2, [r3, #32]
 800240c:	4bb2      	ldr	r3, [pc, #712]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 800240e:	2104      	movs	r1, #4
 8002410:	438a      	bics	r2, r1
 8002412:	621a      	str	r2, [r3, #32]
 8002414:	e01c      	b.n	8002450 <HAL_RCC_OscConfig+0x39c>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2b05      	cmp	r3, #5
 800241c:	d10c      	bne.n	8002438 <HAL_RCC_OscConfig+0x384>
 800241e:	4bae      	ldr	r3, [pc, #696]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 8002420:	6a1a      	ldr	r2, [r3, #32]
 8002422:	4bad      	ldr	r3, [pc, #692]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 8002424:	2104      	movs	r1, #4
 8002426:	430a      	orrs	r2, r1
 8002428:	621a      	str	r2, [r3, #32]
 800242a:	4bab      	ldr	r3, [pc, #684]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 800242c:	6a1a      	ldr	r2, [r3, #32]
 800242e:	4baa      	ldr	r3, [pc, #680]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 8002430:	2101      	movs	r1, #1
 8002432:	430a      	orrs	r2, r1
 8002434:	621a      	str	r2, [r3, #32]
 8002436:	e00b      	b.n	8002450 <HAL_RCC_OscConfig+0x39c>
 8002438:	4ba7      	ldr	r3, [pc, #668]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 800243a:	6a1a      	ldr	r2, [r3, #32]
 800243c:	4ba6      	ldr	r3, [pc, #664]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 800243e:	2101      	movs	r1, #1
 8002440:	438a      	bics	r2, r1
 8002442:	621a      	str	r2, [r3, #32]
 8002444:	4ba4      	ldr	r3, [pc, #656]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 8002446:	6a1a      	ldr	r2, [r3, #32]
 8002448:	4ba3      	ldr	r3, [pc, #652]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 800244a:	2104      	movs	r1, #4
 800244c:	438a      	bics	r2, r1
 800244e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d014      	beq.n	8002482 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002458:	f7fe fe18 	bl	800108c <HAL_GetTick>
 800245c:	0003      	movs	r3, r0
 800245e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002460:	e009      	b.n	8002476 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7fe fe13 	bl	800108c <HAL_GetTick>
 8002466:	0002      	movs	r2, r0
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	4a9b      	ldr	r2, [pc, #620]	; (80026dc <HAL_RCC_OscConfig+0x628>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e12b      	b.n	80026ce <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002476:	4b98      	ldr	r3, [pc, #608]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	2202      	movs	r2, #2
 800247c:	4013      	ands	r3, r2
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x3ae>
 8002480:	e013      	b.n	80024aa <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002482:	f7fe fe03 	bl	800108c <HAL_GetTick>
 8002486:	0003      	movs	r3, r0
 8002488:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800248a:	e009      	b.n	80024a0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800248c:	f7fe fdfe 	bl	800108c <HAL_GetTick>
 8002490:	0002      	movs	r2, r0
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	4a91      	ldr	r2, [pc, #580]	; (80026dc <HAL_RCC_OscConfig+0x628>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e116      	b.n	80026ce <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a0:	4b8d      	ldr	r3, [pc, #564]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	2202      	movs	r2, #2
 80024a6:	4013      	ands	r3, r2
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024aa:	231f      	movs	r3, #31
 80024ac:	18fb      	adds	r3, r7, r3
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d105      	bne.n	80024c0 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b4:	4b88      	ldr	r3, [pc, #544]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 80024b6:	69da      	ldr	r2, [r3, #28]
 80024b8:	4b87      	ldr	r3, [pc, #540]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 80024ba:	4989      	ldr	r1, [pc, #548]	; (80026e0 <HAL_RCC_OscConfig+0x62c>)
 80024bc:	400a      	ands	r2, r1
 80024be:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2210      	movs	r2, #16
 80024c6:	4013      	ands	r3, r2
 80024c8:	d063      	beq.n	8002592 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d12a      	bne.n	8002528 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80024d2:	4b81      	ldr	r3, [pc, #516]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 80024d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024d6:	4b80      	ldr	r3, [pc, #512]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 80024d8:	2104      	movs	r1, #4
 80024da:	430a      	orrs	r2, r1
 80024dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80024de:	4b7e      	ldr	r3, [pc, #504]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 80024e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024e2:	4b7d      	ldr	r3, [pc, #500]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 80024e4:	2101      	movs	r1, #1
 80024e6:	430a      	orrs	r2, r1
 80024e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ea:	f7fe fdcf 	bl	800108c <HAL_GetTick>
 80024ee:	0003      	movs	r3, r0
 80024f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80024f4:	f7fe fdca 	bl	800108c <HAL_GetTick>
 80024f8:	0002      	movs	r2, r0
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e0e3      	b.n	80026ce <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002506:	4b74      	ldr	r3, [pc, #464]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 8002508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800250a:	2202      	movs	r2, #2
 800250c:	4013      	ands	r3, r2
 800250e:	d0f1      	beq.n	80024f4 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002510:	4b71      	ldr	r3, [pc, #452]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 8002512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002514:	22f8      	movs	r2, #248	; 0xf8
 8002516:	4393      	bics	r3, r2
 8002518:	0019      	movs	r1, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	00da      	lsls	r2, r3, #3
 8002520:	4b6d      	ldr	r3, [pc, #436]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 8002522:	430a      	orrs	r2, r1
 8002524:	635a      	str	r2, [r3, #52]	; 0x34
 8002526:	e034      	b.n	8002592 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	3305      	adds	r3, #5
 800252e:	d111      	bne.n	8002554 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002530:	4b69      	ldr	r3, [pc, #420]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 8002532:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002534:	4b68      	ldr	r3, [pc, #416]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 8002536:	2104      	movs	r1, #4
 8002538:	438a      	bics	r2, r1
 800253a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800253c:	4b66      	ldr	r3, [pc, #408]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 800253e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002540:	22f8      	movs	r2, #248	; 0xf8
 8002542:	4393      	bics	r3, r2
 8002544:	0019      	movs	r1, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	00da      	lsls	r2, r3, #3
 800254c:	4b62      	ldr	r3, [pc, #392]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 800254e:	430a      	orrs	r2, r1
 8002550:	635a      	str	r2, [r3, #52]	; 0x34
 8002552:	e01e      	b.n	8002592 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002554:	4b60      	ldr	r3, [pc, #384]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 8002556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002558:	4b5f      	ldr	r3, [pc, #380]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 800255a:	2104      	movs	r1, #4
 800255c:	430a      	orrs	r2, r1
 800255e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002560:	4b5d      	ldr	r3, [pc, #372]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 8002562:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002564:	4b5c      	ldr	r3, [pc, #368]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 8002566:	2101      	movs	r1, #1
 8002568:	438a      	bics	r2, r1
 800256a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256c:	f7fe fd8e 	bl	800108c <HAL_GetTick>
 8002570:	0003      	movs	r3, r0
 8002572:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002576:	f7fe fd89 	bl	800108c <HAL_GetTick>
 800257a:	0002      	movs	r2, r0
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e0a2      	b.n	80026ce <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002588:	4b53      	ldr	r3, [pc, #332]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 800258a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800258c:	2202      	movs	r2, #2
 800258e:	4013      	ands	r3, r2
 8002590:	d1f1      	bne.n	8002576 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d100      	bne.n	800259c <HAL_RCC_OscConfig+0x4e8>
 800259a:	e097      	b.n	80026cc <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800259c:	4b4e      	ldr	r3, [pc, #312]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	220c      	movs	r2, #12
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d100      	bne.n	80025aa <HAL_RCC_OscConfig+0x4f6>
 80025a8:	e06b      	b.n	8002682 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d14c      	bne.n	800264c <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b2:	4b49      	ldr	r3, [pc, #292]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	4b48      	ldr	r3, [pc, #288]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 80025b8:	494a      	ldr	r1, [pc, #296]	; (80026e4 <HAL_RCC_OscConfig+0x630>)
 80025ba:	400a      	ands	r2, r1
 80025bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025be:	f7fe fd65 	bl	800108c <HAL_GetTick>
 80025c2:	0003      	movs	r3, r0
 80025c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c8:	f7fe fd60 	bl	800108c <HAL_GetTick>
 80025cc:	0002      	movs	r2, r0
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e079      	b.n	80026ce <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025da:	4b3f      	ldr	r3, [pc, #252]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	2380      	movs	r3, #128	; 0x80
 80025e0:	049b      	lsls	r3, r3, #18
 80025e2:	4013      	ands	r3, r2
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025e6:	4b3c      	ldr	r3, [pc, #240]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ea:	220f      	movs	r2, #15
 80025ec:	4393      	bics	r3, r2
 80025ee:	0019      	movs	r1, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f4:	4b38      	ldr	r3, [pc, #224]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 80025f6:	430a      	orrs	r2, r1
 80025f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80025fa:	4b37      	ldr	r3, [pc, #220]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4a3a      	ldr	r2, [pc, #232]	; (80026e8 <HAL_RCC_OscConfig+0x634>)
 8002600:	4013      	ands	r3, r2
 8002602:	0019      	movs	r1, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	431a      	orrs	r2, r3
 800260e:	4b32      	ldr	r3, [pc, #200]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 8002610:	430a      	orrs	r2, r1
 8002612:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002614:	4b30      	ldr	r3, [pc, #192]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4b2f      	ldr	r3, [pc, #188]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 800261a:	2180      	movs	r1, #128	; 0x80
 800261c:	0449      	lsls	r1, r1, #17
 800261e:	430a      	orrs	r2, r1
 8002620:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002622:	f7fe fd33 	bl	800108c <HAL_GetTick>
 8002626:	0003      	movs	r3, r0
 8002628:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800262c:	f7fe fd2e 	bl	800108c <HAL_GetTick>
 8002630:	0002      	movs	r2, r0
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e047      	b.n	80026ce <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800263e:	4b26      	ldr	r3, [pc, #152]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	2380      	movs	r3, #128	; 0x80
 8002644:	049b      	lsls	r3, r3, #18
 8002646:	4013      	ands	r3, r2
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0x578>
 800264a:	e03f      	b.n	80026cc <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264c:	4b22      	ldr	r3, [pc, #136]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b21      	ldr	r3, [pc, #132]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 8002652:	4924      	ldr	r1, [pc, #144]	; (80026e4 <HAL_RCC_OscConfig+0x630>)
 8002654:	400a      	ands	r2, r1
 8002656:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7fe fd18 	bl	800108c <HAL_GetTick>
 800265c:	0003      	movs	r3, r0
 800265e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002662:	f7fe fd13 	bl	800108c <HAL_GetTick>
 8002666:	0002      	movs	r2, r0
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e02c      	b.n	80026ce <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002674:	4b18      	ldr	r3, [pc, #96]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	2380      	movs	r3, #128	; 0x80
 800267a:	049b      	lsls	r3, r3, #18
 800267c:	4013      	ands	r3, r2
 800267e:	d1f0      	bne.n	8002662 <HAL_RCC_OscConfig+0x5ae>
 8002680:	e024      	b.n	80026cc <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e01f      	b.n	80026ce <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800268e:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002694:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <HAL_RCC_OscConfig+0x624>)
 8002696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002698:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	025b      	lsls	r3, r3, #9
 80026a0:	401a      	ands	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d10e      	bne.n	80026c8 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	220f      	movs	r2, #15
 80026ae:	401a      	ands	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d107      	bne.n	80026c8 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	23f0      	movs	r3, #240	; 0xf0
 80026bc:	039b      	lsls	r3, r3, #14
 80026be:	401a      	ands	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	0018      	movs	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b008      	add	sp, #32
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	40021000 	.word	0x40021000
 80026dc:	00001388 	.word	0x00001388
 80026e0:	efffffff 	.word	0xefffffff
 80026e4:	feffffff 	.word	0xfeffffff
 80026e8:	ffc2ffff 	.word	0xffc2ffff

080026ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0b3      	b.n	8002868 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002700:	4b5b      	ldr	r3, [pc, #364]	; (8002870 <HAL_RCC_ClockConfig+0x184>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2201      	movs	r2, #1
 8002706:	4013      	ands	r3, r2
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	429a      	cmp	r2, r3
 800270c:	d911      	bls.n	8002732 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270e:	4b58      	ldr	r3, [pc, #352]	; (8002870 <HAL_RCC_ClockConfig+0x184>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2201      	movs	r2, #1
 8002714:	4393      	bics	r3, r2
 8002716:	0019      	movs	r1, r3
 8002718:	4b55      	ldr	r3, [pc, #340]	; (8002870 <HAL_RCC_ClockConfig+0x184>)
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002720:	4b53      	ldr	r3, [pc, #332]	; (8002870 <HAL_RCC_ClockConfig+0x184>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2201      	movs	r2, #1
 8002726:	4013      	ands	r3, r2
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d001      	beq.n	8002732 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e09a      	b.n	8002868 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2202      	movs	r2, #2
 8002738:	4013      	ands	r3, r2
 800273a:	d015      	beq.n	8002768 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2204      	movs	r2, #4
 8002742:	4013      	ands	r3, r2
 8002744:	d006      	beq.n	8002754 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002746:	4b4b      	ldr	r3, [pc, #300]	; (8002874 <HAL_RCC_ClockConfig+0x188>)
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	4b4a      	ldr	r3, [pc, #296]	; (8002874 <HAL_RCC_ClockConfig+0x188>)
 800274c:	21e0      	movs	r1, #224	; 0xe0
 800274e:	00c9      	lsls	r1, r1, #3
 8002750:	430a      	orrs	r2, r1
 8002752:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002754:	4b47      	ldr	r3, [pc, #284]	; (8002874 <HAL_RCC_ClockConfig+0x188>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	22f0      	movs	r2, #240	; 0xf0
 800275a:	4393      	bics	r3, r2
 800275c:	0019      	movs	r1, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	4b44      	ldr	r3, [pc, #272]	; (8002874 <HAL_RCC_ClockConfig+0x188>)
 8002764:	430a      	orrs	r2, r1
 8002766:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2201      	movs	r2, #1
 800276e:	4013      	ands	r3, r2
 8002770:	d040      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d107      	bne.n	800278a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277a:	4b3e      	ldr	r3, [pc, #248]	; (8002874 <HAL_RCC_ClockConfig+0x188>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	029b      	lsls	r3, r3, #10
 8002782:	4013      	ands	r3, r2
 8002784:	d114      	bne.n	80027b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e06e      	b.n	8002868 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d107      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002792:	4b38      	ldr	r3, [pc, #224]	; (8002874 <HAL_RCC_ClockConfig+0x188>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	049b      	lsls	r3, r3, #18
 800279a:	4013      	ands	r3, r2
 800279c:	d108      	bne.n	80027b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e062      	b.n	8002868 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a2:	4b34      	ldr	r3, [pc, #208]	; (8002874 <HAL_RCC_ClockConfig+0x188>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2202      	movs	r2, #2
 80027a8:	4013      	ands	r3, r2
 80027aa:	d101      	bne.n	80027b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e05b      	b.n	8002868 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027b0:	4b30      	ldr	r3, [pc, #192]	; (8002874 <HAL_RCC_ClockConfig+0x188>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2203      	movs	r2, #3
 80027b6:	4393      	bics	r3, r2
 80027b8:	0019      	movs	r1, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	4b2d      	ldr	r3, [pc, #180]	; (8002874 <HAL_RCC_ClockConfig+0x188>)
 80027c0:	430a      	orrs	r2, r1
 80027c2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027c4:	f7fe fc62 	bl	800108c <HAL_GetTick>
 80027c8:	0003      	movs	r3, r0
 80027ca:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027cc:	e009      	b.n	80027e2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ce:	f7fe fc5d 	bl	800108c <HAL_GetTick>
 80027d2:	0002      	movs	r2, r0
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	4a27      	ldr	r2, [pc, #156]	; (8002878 <HAL_RCC_ClockConfig+0x18c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e042      	b.n	8002868 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e2:	4b24      	ldr	r3, [pc, #144]	; (8002874 <HAL_RCC_ClockConfig+0x188>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	220c      	movs	r2, #12
 80027e8:	401a      	ands	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d1ec      	bne.n	80027ce <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027f4:	4b1e      	ldr	r3, [pc, #120]	; (8002870 <HAL_RCC_ClockConfig+0x184>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2201      	movs	r2, #1
 80027fa:	4013      	ands	r3, r2
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d211      	bcs.n	8002826 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002802:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <HAL_RCC_ClockConfig+0x184>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2201      	movs	r2, #1
 8002808:	4393      	bics	r3, r2
 800280a:	0019      	movs	r1, r3
 800280c:	4b18      	ldr	r3, [pc, #96]	; (8002870 <HAL_RCC_ClockConfig+0x184>)
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002814:	4b16      	ldr	r3, [pc, #88]	; (8002870 <HAL_RCC_ClockConfig+0x184>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2201      	movs	r2, #1
 800281a:	4013      	ands	r3, r2
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d001      	beq.n	8002826 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e020      	b.n	8002868 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2204      	movs	r2, #4
 800282c:	4013      	ands	r3, r2
 800282e:	d009      	beq.n	8002844 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002830:	4b10      	ldr	r3, [pc, #64]	; (8002874 <HAL_RCC_ClockConfig+0x188>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4a11      	ldr	r2, [pc, #68]	; (800287c <HAL_RCC_ClockConfig+0x190>)
 8002836:	4013      	ands	r3, r2
 8002838:	0019      	movs	r1, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <HAL_RCC_ClockConfig+0x188>)
 8002840:	430a      	orrs	r2, r1
 8002842:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002844:	f000 f820 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 8002848:	0001      	movs	r1, r0
 800284a:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <HAL_RCC_ClockConfig+0x188>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	091b      	lsrs	r3, r3, #4
 8002850:	220f      	movs	r2, #15
 8002852:	4013      	ands	r3, r2
 8002854:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <HAL_RCC_ClockConfig+0x194>)
 8002856:	5cd3      	ldrb	r3, [r2, r3]
 8002858:	000a      	movs	r2, r1
 800285a:	40da      	lsrs	r2, r3
 800285c:	4b09      	ldr	r3, [pc, #36]	; (8002884 <HAL_RCC_ClockConfig+0x198>)
 800285e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002860:	2000      	movs	r0, #0
 8002862:	f7fe facb 	bl	8000dfc <HAL_InitTick>
  
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	0018      	movs	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	b004      	add	sp, #16
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40022000 	.word	0x40022000
 8002874:	40021000 	.word	0x40021000
 8002878:	00001388 	.word	0x00001388
 800287c:	fffff8ff 	.word	0xfffff8ff
 8002880:	08005f6c 	.word	0x08005f6c
 8002884:	2000000c 	.word	0x2000000c

08002888 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b08f      	sub	sp, #60	; 0x3c
 800288c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800288e:	2314      	movs	r3, #20
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	4a2b      	ldr	r2, [pc, #172]	; (8002940 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002894:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002896:	c313      	stmia	r3!, {r0, r1, r4}
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800289c:	1d3b      	adds	r3, r7, #4
 800289e:	4a29      	ldr	r2, [pc, #164]	; (8002944 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80028a2:	c313      	stmia	r3!, {r0, r1, r4}
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ac:	2300      	movs	r3, #0
 80028ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80028b0:	2300      	movs	r3, #0
 80028b2:	637b      	str	r3, [r7, #52]	; 0x34
 80028b4:	2300      	movs	r3, #0
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80028bc:	4b22      	ldr	r3, [pc, #136]	; (8002948 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c4:	220c      	movs	r2, #12
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d002      	beq.n	80028d2 <HAL_RCC_GetSysClockFreq+0x4a>
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d003      	beq.n	80028d8 <HAL_RCC_GetSysClockFreq+0x50>
 80028d0:	e02d      	b.n	800292e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028d2:	4b1e      	ldr	r3, [pc, #120]	; (800294c <HAL_RCC_GetSysClockFreq+0xc4>)
 80028d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028d6:	e02d      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80028d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028da:	0c9b      	lsrs	r3, r3, #18
 80028dc:	220f      	movs	r2, #15
 80028de:	4013      	ands	r3, r2
 80028e0:	2214      	movs	r2, #20
 80028e2:	18ba      	adds	r2, r7, r2
 80028e4:	5cd3      	ldrb	r3, [r2, r3]
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80028e8:	4b17      	ldr	r3, [pc, #92]	; (8002948 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ec:	220f      	movs	r2, #15
 80028ee:	4013      	ands	r3, r2
 80028f0:	1d3a      	adds	r2, r7, #4
 80028f2:	5cd3      	ldrb	r3, [r2, r3]
 80028f4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80028f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	025b      	lsls	r3, r3, #9
 80028fc:	4013      	ands	r3, r2
 80028fe:	d009      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002900:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002902:	4812      	ldr	r0, [pc, #72]	; (800294c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002904:	f7fd fc00 	bl	8000108 <__udivsi3>
 8002908:	0003      	movs	r3, r0
 800290a:	001a      	movs	r2, r3
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	4353      	muls	r3, r2
 8002910:	637b      	str	r3, [r7, #52]	; 0x34
 8002912:	e009      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002914:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002916:	000a      	movs	r2, r1
 8002918:	0152      	lsls	r2, r2, #5
 800291a:	1a52      	subs	r2, r2, r1
 800291c:	0193      	lsls	r3, r2, #6
 800291e:	1a9b      	subs	r3, r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	185b      	adds	r3, r3, r1
 8002924:	021b      	lsls	r3, r3, #8
 8002926:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800292c:	e002      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800292e:	4b07      	ldr	r3, [pc, #28]	; (800294c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002930:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002932:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002936:	0018      	movs	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	b00f      	add	sp, #60	; 0x3c
 800293c:	bd90      	pop	{r4, r7, pc}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	08005f44 	.word	0x08005f44
 8002944:	08005f54 	.word	0x08005f54
 8002948:	40021000 	.word	0x40021000
 800294c:	007a1200 	.word	0x007a1200

08002950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002954:	4b02      	ldr	r3, [pc, #8]	; (8002960 <HAL_RCC_GetHCLKFreq+0x10>)
 8002956:	681b      	ldr	r3, [r3, #0]
}
 8002958:	0018      	movs	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	2000000c 	.word	0x2000000c

08002964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002968:	f7ff fff2 	bl	8002950 <HAL_RCC_GetHCLKFreq>
 800296c:	0001      	movs	r1, r0
 800296e:	4b06      	ldr	r3, [pc, #24]	; (8002988 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	0a1b      	lsrs	r3, r3, #8
 8002974:	2207      	movs	r2, #7
 8002976:	4013      	ands	r3, r2
 8002978:	4a04      	ldr	r2, [pc, #16]	; (800298c <HAL_RCC_GetPCLK1Freq+0x28>)
 800297a:	5cd3      	ldrb	r3, [r2, r3]
 800297c:	40d9      	lsrs	r1, r3
 800297e:	000b      	movs	r3, r1
}    
 8002980:	0018      	movs	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	40021000 	.word	0x40021000
 800298c:	08005f7c 	.word	0x08005f7c

08002990 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2207      	movs	r2, #7
 800299e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029a0:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <HAL_RCC_GetClockConfig+0x4c>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2203      	movs	r2, #3
 80029a6:	401a      	ands	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80029ac:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_RCC_GetClockConfig+0x4c>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	22f0      	movs	r2, #240	; 0xf0
 80029b2:	401a      	ands	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80029b8:	4b08      	ldr	r3, [pc, #32]	; (80029dc <HAL_RCC_GetClockConfig+0x4c>)
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	23e0      	movs	r3, #224	; 0xe0
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	401a      	ands	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 80029c6:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <HAL_RCC_GetClockConfig+0x50>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2201      	movs	r2, #1
 80029cc:	401a      	ands	r2, r3
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	601a      	str	r2, [r3, #0]
}
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	46bd      	mov	sp, r7
 80029d6:	b002      	add	sp, #8
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	40021000 	.word	0x40021000
 80029e0:	40022000 	.word	0x40022000

080029e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	025b      	lsls	r3, r3, #9
 80029fc:	4013      	ands	r3, r2
 80029fe:	d100      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002a00:	e08f      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002a02:	2317      	movs	r3, #23
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	2200      	movs	r2, #0
 8002a08:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a0a:	4b57      	ldr	r3, [pc, #348]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a0c:	69da      	ldr	r2, [r3, #28]
 8002a0e:	2380      	movs	r3, #128	; 0x80
 8002a10:	055b      	lsls	r3, r3, #21
 8002a12:	4013      	ands	r3, r2
 8002a14:	d111      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a16:	4b54      	ldr	r3, [pc, #336]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a18:	69da      	ldr	r2, [r3, #28]
 8002a1a:	4b53      	ldr	r3, [pc, #332]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a1c:	2180      	movs	r1, #128	; 0x80
 8002a1e:	0549      	lsls	r1, r1, #21
 8002a20:	430a      	orrs	r2, r1
 8002a22:	61da      	str	r2, [r3, #28]
 8002a24:	4b50      	ldr	r3, [pc, #320]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a26:	69da      	ldr	r2, [r3, #28]
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	055b      	lsls	r3, r3, #21
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a32:	2317      	movs	r3, #23
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	2201      	movs	r2, #1
 8002a38:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3a:	4b4c      	ldr	r3, [pc, #304]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	2380      	movs	r3, #128	; 0x80
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	4013      	ands	r3, r2
 8002a44:	d11a      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a46:	4b49      	ldr	r3, [pc, #292]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	4b48      	ldr	r3, [pc, #288]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a4c:	2180      	movs	r1, #128	; 0x80
 8002a4e:	0049      	lsls	r1, r1, #1
 8002a50:	430a      	orrs	r2, r1
 8002a52:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a54:	f7fe fb1a 	bl	800108c <HAL_GetTick>
 8002a58:	0003      	movs	r3, r0
 8002a5a:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5c:	e008      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5e:	f7fe fb15 	bl	800108c <HAL_GetTick>
 8002a62:	0002      	movs	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b64      	cmp	r3, #100	; 0x64
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e077      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a70:	4b3e      	ldr	r3, [pc, #248]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	2380      	movs	r3, #128	; 0x80
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a7c:	4b3a      	ldr	r3, [pc, #232]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a7e:	6a1a      	ldr	r2, [r3, #32]
 8002a80:	23c0      	movs	r3, #192	; 0xc0
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4013      	ands	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d034      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	23c0      	movs	r3, #192	; 0xc0
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4013      	ands	r3, r2
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d02c      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a9e:	4b32      	ldr	r3, [pc, #200]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	4a33      	ldr	r2, [pc, #204]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002aa8:	4b2f      	ldr	r3, [pc, #188]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002aaa:	6a1a      	ldr	r2, [r3, #32]
 8002aac:	4b2e      	ldr	r3, [pc, #184]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002aae:	2180      	movs	r1, #128	; 0x80
 8002ab0:	0249      	lsls	r1, r1, #9
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ab6:	4b2c      	ldr	r3, [pc, #176]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ab8:	6a1a      	ldr	r2, [r3, #32]
 8002aba:	4b2b      	ldr	r3, [pc, #172]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002abc:	492d      	ldr	r1, [pc, #180]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002abe:	400a      	ands	r2, r1
 8002ac0:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ac2:	4b29      	ldr	r3, [pc, #164]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2201      	movs	r2, #1
 8002acc:	4013      	ands	r3, r2
 8002ace:	d013      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad0:	f7fe fadc 	bl	800108c <HAL_GetTick>
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad8:	e009      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ada:	f7fe fad7 	bl	800108c <HAL_GetTick>
 8002ade:	0002      	movs	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	4a24      	ldr	r2, [pc, #144]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e038      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aee:	4b1e      	ldr	r3, [pc, #120]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	2202      	movs	r2, #2
 8002af4:	4013      	ands	r3, r2
 8002af6:	d0f0      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002af8:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	4a1c      	ldr	r2, [pc, #112]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	0019      	movs	r1, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	4b18      	ldr	r3, [pc, #96]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b0c:	2317      	movs	r3, #23
 8002b0e:	18fb      	adds	r3, r7, r3
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d105      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b16:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b18:	69da      	ldr	r2, [r3, #28]
 8002b1a:	4b13      	ldr	r3, [pc, #76]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b1c:	4917      	ldr	r1, [pc, #92]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002b1e:	400a      	ands	r2, r1
 8002b20:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2201      	movs	r2, #1
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d009      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b2c:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	2203      	movs	r2, #3
 8002b32:	4393      	bics	r3, r2
 8002b34:	0019      	movs	r1, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2220      	movs	r2, #32
 8002b46:	4013      	ands	r3, r2
 8002b48:	d009      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b4a:	4b07      	ldr	r3, [pc, #28]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	2210      	movs	r2, #16
 8002b50:	4393      	bics	r3, r2
 8002b52:	0019      	movs	r1, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	4b03      	ldr	r3, [pc, #12]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	0018      	movs	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b006      	add	sp, #24
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	40007000 	.word	0x40007000
 8002b70:	fffffcff 	.word	0xfffffcff
 8002b74:	fffeffff 	.word	0xfffeffff
 8002b78:	00001388 	.word	0x00001388
 8002b7c:	efffffff 	.word	0xefffffff

08002b80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e01e      	b.n	8002bd0 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	223d      	movs	r2, #61	; 0x3d
 8002b96:	5c9b      	ldrb	r3, [r3, r2]
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d107      	bne.n	8002bae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	223c      	movs	r2, #60	; 0x3c
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f000 f815 	bl	8002bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	223d      	movs	r2, #61	; 0x3d
 8002bb2:	2102      	movs	r1, #2
 8002bb4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	0019      	movs	r1, r3
 8002bc0:	0010      	movs	r0, r2
 8002bc2:	f000 f969 	bl	8002e98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	223d      	movs	r2, #61	; 0x3d
 8002bca:	2101      	movs	r1, #1
 8002bcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b002      	add	sp, #8
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002be0:	46c0      	nop			; (mov r8, r8)
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b002      	add	sp, #8
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	2207      	movs	r2, #7
 8002c08:	4013      	ands	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2b06      	cmp	r3, #6
 8002c10:	d007      	beq.n	8002c22 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	0018      	movs	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b004      	add	sp, #16
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d124      	bne.n	8002c8c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	2202      	movs	r2, #2
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d11d      	bne.n	8002c8c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2203      	movs	r2, #3
 8002c56:	4252      	negs	r2, r2
 8002c58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	2203      	movs	r2, #3
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d004      	beq.n	8002c76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f000 f8fa 	bl	8002e68 <HAL_TIM_IC_CaptureCallback>
 8002c74:	e007      	b.n	8002c86 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f000 f8ed 	bl	8002e58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	0018      	movs	r0, r3
 8002c82:	f000 f8f9 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2204      	movs	r2, #4
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d125      	bne.n	8002ce6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d11e      	bne.n	8002ce6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2205      	movs	r2, #5
 8002cae:	4252      	negs	r2, r2
 8002cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	23c0      	movs	r3, #192	; 0xc0
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d004      	beq.n	8002cd0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f000 f8cd 	bl	8002e68 <HAL_TIM_IC_CaptureCallback>
 8002cce:	e007      	b.n	8002ce0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f000 f8c0 	bl	8002e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f000 f8cc 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	2208      	movs	r2, #8
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d124      	bne.n	8002d3e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	2208      	movs	r2, #8
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d11d      	bne.n	8002d3e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2209      	movs	r2, #9
 8002d08:	4252      	negs	r2, r2
 8002d0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2204      	movs	r2, #4
 8002d10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	2203      	movs	r2, #3
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d004      	beq.n	8002d28 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	0018      	movs	r0, r3
 8002d22:	f000 f8a1 	bl	8002e68 <HAL_TIM_IC_CaptureCallback>
 8002d26:	e007      	b.n	8002d38 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f000 f894 	bl	8002e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	0018      	movs	r0, r3
 8002d34:	f000 f8a0 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	2210      	movs	r2, #16
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b10      	cmp	r3, #16
 8002d4a:	d125      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	2210      	movs	r2, #16
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b10      	cmp	r3, #16
 8002d58:	d11e      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2211      	movs	r2, #17
 8002d60:	4252      	negs	r2, r2
 8002d62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2208      	movs	r2, #8
 8002d68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	69da      	ldr	r2, [r3, #28]
 8002d70:	23c0      	movs	r3, #192	; 0xc0
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4013      	ands	r3, r2
 8002d76:	d004      	beq.n	8002d82 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f000 f874 	bl	8002e68 <HAL_TIM_IC_CaptureCallback>
 8002d80:	e007      	b.n	8002d92 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	0018      	movs	r0, r3
 8002d86:	f000 f867 	bl	8002e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f000 f873 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d10f      	bne.n	8002dc6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	4013      	ands	r3, r2
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d108      	bne.n	8002dc6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2202      	movs	r2, #2
 8002dba:	4252      	negs	r2, r2
 8002dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f7fd ff45 	bl	8000c50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	2280      	movs	r2, #128	; 0x80
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b80      	cmp	r3, #128	; 0x80
 8002dd2:	d10f      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	2280      	movs	r2, #128	; 0x80
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b80      	cmp	r3, #128	; 0x80
 8002de0:	d108      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2281      	movs	r2, #129	; 0x81
 8002de8:	4252      	negs	r2, r2
 8002dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	0018      	movs	r0, r3
 8002df0:	f000 f8d0 	bl	8002f94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	2240      	movs	r2, #64	; 0x40
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b40      	cmp	r3, #64	; 0x40
 8002e00:	d10f      	bne.n	8002e22 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	2240      	movs	r2, #64	; 0x40
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b40      	cmp	r3, #64	; 0x40
 8002e0e:	d108      	bne.n	8002e22 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2241      	movs	r2, #65	; 0x41
 8002e16:	4252      	negs	r2, r2
 8002e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f000 f833 	bl	8002e88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b20      	cmp	r3, #32
 8002e2e:	d10f      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2220      	movs	r2, #32
 8002e38:	4013      	ands	r3, r2
 8002e3a:	2b20      	cmp	r3, #32
 8002e3c:	d108      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2221      	movs	r2, #33	; 0x21
 8002e44:	4252      	negs	r2, r2
 8002e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f000 f89a 	bl	8002f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e50:	46c0      	nop			; (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b002      	add	sp, #8
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e60:	46c0      	nop			; (mov r8, r8)
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b002      	add	sp, #8
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e70:	46c0      	nop			; (mov r8, r8)
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b002      	add	sp, #8
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e80:	46c0      	nop			; (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b002      	add	sp, #8
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e90:	46c0      	nop			; (mov r8, r8)
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b002      	add	sp, #8
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a2f      	ldr	r2, [pc, #188]	; (8002f68 <TIM_Base_SetConfig+0xd0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d003      	beq.n	8002eb8 <TIM_Base_SetConfig+0x20>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a2e      	ldr	r2, [pc, #184]	; (8002f6c <TIM_Base_SetConfig+0xd4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d108      	bne.n	8002eca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2270      	movs	r2, #112	; 0x70
 8002ebc:	4393      	bics	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a26      	ldr	r2, [pc, #152]	; (8002f68 <TIM_Base_SetConfig+0xd0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d013      	beq.n	8002efa <TIM_Base_SetConfig+0x62>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a25      	ldr	r2, [pc, #148]	; (8002f6c <TIM_Base_SetConfig+0xd4>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d00f      	beq.n	8002efa <TIM_Base_SetConfig+0x62>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a24      	ldr	r2, [pc, #144]	; (8002f70 <TIM_Base_SetConfig+0xd8>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d00b      	beq.n	8002efa <TIM_Base_SetConfig+0x62>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a23      	ldr	r2, [pc, #140]	; (8002f74 <TIM_Base_SetConfig+0xdc>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d007      	beq.n	8002efa <TIM_Base_SetConfig+0x62>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a22      	ldr	r2, [pc, #136]	; (8002f78 <TIM_Base_SetConfig+0xe0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d003      	beq.n	8002efa <TIM_Base_SetConfig+0x62>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a21      	ldr	r2, [pc, #132]	; (8002f7c <TIM_Base_SetConfig+0xe4>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d108      	bne.n	8002f0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4a20      	ldr	r2, [pc, #128]	; (8002f80 <TIM_Base_SetConfig+0xe8>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2280      	movs	r2, #128	; 0x80
 8002f10:	4393      	bics	r3, r2
 8002f12:	001a      	movs	r2, r3
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a0c      	ldr	r2, [pc, #48]	; (8002f68 <TIM_Base_SetConfig+0xd0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d00b      	beq.n	8002f52 <TIM_Base_SetConfig+0xba>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a0d      	ldr	r2, [pc, #52]	; (8002f74 <TIM_Base_SetConfig+0xdc>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d007      	beq.n	8002f52 <TIM_Base_SetConfig+0xba>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a0c      	ldr	r2, [pc, #48]	; (8002f78 <TIM_Base_SetConfig+0xe0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d003      	beq.n	8002f52 <TIM_Base_SetConfig+0xba>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a0b      	ldr	r2, [pc, #44]	; (8002f7c <TIM_Base_SetConfig+0xe4>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d103      	bne.n	8002f5a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	691a      	ldr	r2, [r3, #16]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	615a      	str	r2, [r3, #20]
}
 8002f60:	46c0      	nop			; (mov r8, r8)
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b004      	add	sp, #16
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40012c00 	.word	0x40012c00
 8002f6c:	40000400 	.word	0x40000400
 8002f70:	40002000 	.word	0x40002000
 8002f74:	40014000 	.word	0x40014000
 8002f78:	40014400 	.word	0x40014400
 8002f7c:	40014800 	.word	0x40014800
 8002f80:	fffffcff 	.word	0xfffffcff

08002f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b002      	add	sp, #8
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f9c:	46c0      	nop			; (mov r8, r8)
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b002      	add	sp, #8
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e044      	b.n	8003040 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d107      	bne.n	8002fce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2270      	movs	r2, #112	; 0x70
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f7fd fecb 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2224      	movs	r2, #36	; 0x24
 8002fd2:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2101      	movs	r1, #1
 8002fe0:	438a      	bics	r2, r1
 8002fe2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f000 f8d8 	bl	800319c <UART_SetConfig>
 8002fec:	0003      	movs	r3, r0
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d101      	bne.n	8002ff6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e024      	b.n	8003040 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	0018      	movs	r0, r3
 8003002:	f000 fa51 	bl	80034a8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	490d      	ldr	r1, [pc, #52]	; (8003048 <HAL_UART_Init+0xa4>)
 8003012:	400a      	ands	r2, r1
 8003014:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2108      	movs	r1, #8
 8003022:	438a      	bics	r2, r1
 8003024:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2101      	movs	r1, #1
 8003032:	430a      	orrs	r2, r1
 8003034:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	0018      	movs	r0, r3
 800303a:	f000 fae9 	bl	8003610 <UART_CheckIdleState>
 800303e:	0003      	movs	r3, r0
}
 8003040:	0018      	movs	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	b002      	add	sp, #8
 8003046:	bd80      	pop	{r7, pc}
 8003048:	fffff7ff 	.word	0xfffff7ff

0800304c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08a      	sub	sp, #40	; 0x28
 8003050:	af02      	add	r7, sp, #8
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	1dbb      	adds	r3, r7, #6
 800305a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003060:	2b20      	cmp	r3, #32
 8003062:	d000      	beq.n	8003066 <HAL_UART_Transmit+0x1a>
 8003064:	e095      	b.n	8003192 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <HAL_UART_Transmit+0x28>
 800306c:	1dbb      	adds	r3, r7, #6
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e08d      	b.n	8003194 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	2380      	movs	r3, #128	; 0x80
 800307e:	015b      	lsls	r3, r3, #5
 8003080:	429a      	cmp	r2, r3
 8003082:	d109      	bne.n	8003098 <HAL_UART_Transmit+0x4c>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d105      	bne.n	8003098 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2201      	movs	r2, #1
 8003090:	4013      	ands	r3, r2
 8003092:	d001      	beq.n	8003098 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e07d      	b.n	8003194 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2270      	movs	r2, #112	; 0x70
 800309c:	5c9b      	ldrb	r3, [r3, r2]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <HAL_UART_Transmit+0x5a>
 80030a2:	2302      	movs	r3, #2
 80030a4:	e076      	b.n	8003194 <HAL_UART_Transmit+0x148>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2270      	movs	r2, #112	; 0x70
 80030aa:	2101      	movs	r1, #1
 80030ac:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2221      	movs	r2, #33	; 0x21
 80030b8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80030ba:	f7fd ffe7 	bl	800108c <HAL_GetTick>
 80030be:	0003      	movs	r3, r0
 80030c0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	1dba      	adds	r2, r7, #6
 80030c6:	2150      	movs	r1, #80	; 0x50
 80030c8:	8812      	ldrh	r2, [r2, #0]
 80030ca:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	1dba      	adds	r2, r7, #6
 80030d0:	2152      	movs	r1, #82	; 0x52
 80030d2:	8812      	ldrh	r2, [r2, #0]
 80030d4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	2380      	movs	r3, #128	; 0x80
 80030dc:	015b      	lsls	r3, r3, #5
 80030de:	429a      	cmp	r2, r3
 80030e0:	d108      	bne.n	80030f4 <HAL_UART_Transmit+0xa8>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d104      	bne.n	80030f4 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	61bb      	str	r3, [r7, #24]
 80030f2:	e003      	b.n	80030fc <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030fc:	e02d      	b.n	800315a <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	0013      	movs	r3, r2
 8003108:	2200      	movs	r2, #0
 800310a:	2180      	movs	r1, #128	; 0x80
 800310c:	f000 fac6 	bl	800369c <UART_WaitOnFlagUntilTimeout>
 8003110:	1e03      	subs	r3, r0, #0
 8003112:	d001      	beq.n	8003118 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e03d      	b.n	8003194 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10b      	bne.n	8003136 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	881a      	ldrh	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	05d2      	lsls	r2, r2, #23
 8003128:	0dd2      	lsrs	r2, r2, #23
 800312a:	b292      	uxth	r2, r2
 800312c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	3302      	adds	r3, #2
 8003132:	61bb      	str	r3, [r7, #24]
 8003134:	e008      	b.n	8003148 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	781a      	ldrb	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	b292      	uxth	r2, r2
 8003140:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3301      	adds	r3, #1
 8003146:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2252      	movs	r2, #82	; 0x52
 800314c:	5a9b      	ldrh	r3, [r3, r2]
 800314e:	b29b      	uxth	r3, r3
 8003150:	3b01      	subs	r3, #1
 8003152:	b299      	uxth	r1, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2252      	movs	r2, #82	; 0x52
 8003158:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2252      	movs	r2, #82	; 0x52
 800315e:	5a9b      	ldrh	r3, [r3, r2]
 8003160:	b29b      	uxth	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1cb      	bne.n	80030fe <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	0013      	movs	r3, r2
 8003170:	2200      	movs	r2, #0
 8003172:	2140      	movs	r1, #64	; 0x40
 8003174:	f000 fa92 	bl	800369c <UART_WaitOnFlagUntilTimeout>
 8003178:	1e03      	subs	r3, r0, #0
 800317a:	d001      	beq.n	8003180 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e009      	b.n	8003194 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2270      	movs	r2, #112	; 0x70
 800318a:	2100      	movs	r1, #0
 800318c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	e000      	b.n	8003194 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8003192:	2302      	movs	r3, #2
  }
}
 8003194:	0018      	movs	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	b008      	add	sp, #32
 800319a:	bd80      	pop	{r7, pc}

0800319c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80031a8:	2317      	movs	r3, #23
 80031aa:	18fb      	adds	r3, r7, r3
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	431a      	orrs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4aad      	ldr	r2, [pc, #692]	; (8003484 <UART_SetConfig+0x2e8>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	0019      	movs	r1, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	430a      	orrs	r2, r1
 80031dc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	4aa8      	ldr	r2, [pc, #672]	; (8003488 <UART_SetConfig+0x2ec>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	0019      	movs	r1, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	4313      	orrs	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	4a9f      	ldr	r2, [pc, #636]	; (800348c <UART_SetConfig+0x2f0>)
 800320e:	4013      	ands	r3, r2
 8003210:	0019      	movs	r1, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	430a      	orrs	r2, r1
 800321a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a9b      	ldr	r2, [pc, #620]	; (8003490 <UART_SetConfig+0x2f4>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d125      	bne.n	8003272 <UART_SetConfig+0xd6>
 8003226:	4b9b      	ldr	r3, [pc, #620]	; (8003494 <UART_SetConfig+0x2f8>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	2203      	movs	r2, #3
 800322c:	4013      	ands	r3, r2
 800322e:	2b01      	cmp	r3, #1
 8003230:	d00f      	beq.n	8003252 <UART_SetConfig+0xb6>
 8003232:	d304      	bcc.n	800323e <UART_SetConfig+0xa2>
 8003234:	2b02      	cmp	r3, #2
 8003236:	d011      	beq.n	800325c <UART_SetConfig+0xc0>
 8003238:	2b03      	cmp	r3, #3
 800323a:	d005      	beq.n	8003248 <UART_SetConfig+0xac>
 800323c:	e013      	b.n	8003266 <UART_SetConfig+0xca>
 800323e:	231f      	movs	r3, #31
 8003240:	18fb      	adds	r3, r7, r3
 8003242:	2200      	movs	r2, #0
 8003244:	701a      	strb	r2, [r3, #0]
 8003246:	e022      	b.n	800328e <UART_SetConfig+0xf2>
 8003248:	231f      	movs	r3, #31
 800324a:	18fb      	adds	r3, r7, r3
 800324c:	2202      	movs	r2, #2
 800324e:	701a      	strb	r2, [r3, #0]
 8003250:	e01d      	b.n	800328e <UART_SetConfig+0xf2>
 8003252:	231f      	movs	r3, #31
 8003254:	18fb      	adds	r3, r7, r3
 8003256:	2204      	movs	r2, #4
 8003258:	701a      	strb	r2, [r3, #0]
 800325a:	e018      	b.n	800328e <UART_SetConfig+0xf2>
 800325c:	231f      	movs	r3, #31
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	2208      	movs	r2, #8
 8003262:	701a      	strb	r2, [r3, #0]
 8003264:	e013      	b.n	800328e <UART_SetConfig+0xf2>
 8003266:	231f      	movs	r3, #31
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	2210      	movs	r2, #16
 800326c:	701a      	strb	r2, [r3, #0]
 800326e:	46c0      	nop			; (mov r8, r8)
 8003270:	e00d      	b.n	800328e <UART_SetConfig+0xf2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a88      	ldr	r2, [pc, #544]	; (8003498 <UART_SetConfig+0x2fc>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d104      	bne.n	8003286 <UART_SetConfig+0xea>
 800327c:	231f      	movs	r3, #31
 800327e:	18fb      	adds	r3, r7, r3
 8003280:	2200      	movs	r2, #0
 8003282:	701a      	strb	r2, [r3, #0]
 8003284:	e003      	b.n	800328e <UART_SetConfig+0xf2>
 8003286:	231f      	movs	r3, #31
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	2210      	movs	r2, #16
 800328c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69da      	ldr	r2, [r3, #28]
 8003292:	2380      	movs	r3, #128	; 0x80
 8003294:	021b      	lsls	r3, r3, #8
 8003296:	429a      	cmp	r2, r3
 8003298:	d000      	beq.n	800329c <UART_SetConfig+0x100>
 800329a:	e07d      	b.n	8003398 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 800329c:	231f      	movs	r3, #31
 800329e:	18fb      	adds	r3, r7, r3
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d01c      	beq.n	80032e0 <UART_SetConfig+0x144>
 80032a6:	dc02      	bgt.n	80032ae <UART_SetConfig+0x112>
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <UART_SetConfig+0x11c>
 80032ac:	e04b      	b.n	8003346 <UART_SetConfig+0x1aa>
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d025      	beq.n	80032fe <UART_SetConfig+0x162>
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d037      	beq.n	8003326 <UART_SetConfig+0x18a>
 80032b6:	e046      	b.n	8003346 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032b8:	f7ff fb54 	bl	8002964 <HAL_RCC_GetPCLK1Freq>
 80032bc:	0003      	movs	r3, r0
 80032be:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	005a      	lsls	r2, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	085b      	lsrs	r3, r3, #1
 80032ca:	18d2      	adds	r2, r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	0019      	movs	r1, r3
 80032d2:	0010      	movs	r0, r2
 80032d4:	f7fc ff18 	bl	8000108 <__udivsi3>
 80032d8:	0003      	movs	r3, r0
 80032da:	b29b      	uxth	r3, r3
 80032dc:	61bb      	str	r3, [r7, #24]
        break;
 80032de:	e037      	b.n	8003350 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	4a6d      	ldr	r2, [pc, #436]	; (800349c <UART_SetConfig+0x300>)
 80032e8:	189a      	adds	r2, r3, r2
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	0019      	movs	r1, r3
 80032f0:	0010      	movs	r0, r2
 80032f2:	f7fc ff09 	bl	8000108 <__udivsi3>
 80032f6:	0003      	movs	r3, r0
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	61bb      	str	r3, [r7, #24]
        break;
 80032fc:	e028      	b.n	8003350 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032fe:	f7ff fac3 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 8003302:	0003      	movs	r3, r0
 8003304:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	005a      	lsls	r2, r3, #1
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	085b      	lsrs	r3, r3, #1
 8003310:	18d2      	adds	r2, r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	0019      	movs	r1, r3
 8003318:	0010      	movs	r0, r2
 800331a:	f7fc fef5 	bl	8000108 <__udivsi3>
 800331e:	0003      	movs	r3, r0
 8003320:	b29b      	uxth	r3, r3
 8003322:	61bb      	str	r3, [r7, #24]
        break;
 8003324:	e014      	b.n	8003350 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	085b      	lsrs	r3, r3, #1
 800332c:	2280      	movs	r2, #128	; 0x80
 800332e:	0252      	lsls	r2, r2, #9
 8003330:	189a      	adds	r2, r3, r2
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	0019      	movs	r1, r3
 8003338:	0010      	movs	r0, r2
 800333a:	f7fc fee5 	bl	8000108 <__udivsi3>
 800333e:	0003      	movs	r3, r0
 8003340:	b29b      	uxth	r3, r3
 8003342:	61bb      	str	r3, [r7, #24]
        break;
 8003344:	e004      	b.n	8003350 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8003346:	2317      	movs	r3, #23
 8003348:	18fb      	adds	r3, r7, r3
 800334a:	2201      	movs	r2, #1
 800334c:	701a      	strb	r2, [r3, #0]
        break;
 800334e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	2b0f      	cmp	r3, #15
 8003354:	d91b      	bls.n	800338e <UART_SetConfig+0x1f2>
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	4a51      	ldr	r2, [pc, #324]	; (80034a0 <UART_SetConfig+0x304>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d817      	bhi.n	800338e <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	b29a      	uxth	r2, r3
 8003362:	200a      	movs	r0, #10
 8003364:	183b      	adds	r3, r7, r0
 8003366:	210f      	movs	r1, #15
 8003368:	438a      	bics	r2, r1
 800336a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	085b      	lsrs	r3, r3, #1
 8003370:	b29b      	uxth	r3, r3
 8003372:	2207      	movs	r2, #7
 8003374:	4013      	ands	r3, r2
 8003376:	b299      	uxth	r1, r3
 8003378:	183b      	adds	r3, r7, r0
 800337a:	183a      	adds	r2, r7, r0
 800337c:	8812      	ldrh	r2, [r2, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	183a      	adds	r2, r7, r0
 8003388:	8812      	ldrh	r2, [r2, #0]
 800338a:	60da      	str	r2, [r3, #12]
 800338c:	e06c      	b.n	8003468 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 800338e:	2317      	movs	r3, #23
 8003390:	18fb      	adds	r3, r7, r3
 8003392:	2201      	movs	r2, #1
 8003394:	701a      	strb	r2, [r3, #0]
 8003396:	e067      	b.n	8003468 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8003398:	231f      	movs	r3, #31
 800339a:	18fb      	adds	r3, r7, r3
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d01b      	beq.n	80033da <UART_SetConfig+0x23e>
 80033a2:	dc02      	bgt.n	80033aa <UART_SetConfig+0x20e>
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <UART_SetConfig+0x218>
 80033a8:	e049      	b.n	800343e <UART_SetConfig+0x2a2>
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d024      	beq.n	80033f8 <UART_SetConfig+0x25c>
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d035      	beq.n	800341e <UART_SetConfig+0x282>
 80033b2:	e044      	b.n	800343e <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033b4:	f7ff fad6 	bl	8002964 <HAL_RCC_GetPCLK1Freq>
 80033b8:	0003      	movs	r3, r0
 80033ba:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	085a      	lsrs	r2, r3, #1
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	18d2      	adds	r2, r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	0019      	movs	r1, r3
 80033cc:	0010      	movs	r0, r2
 80033ce:	f7fc fe9b 	bl	8000108 <__udivsi3>
 80033d2:	0003      	movs	r3, r0
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	61bb      	str	r3, [r7, #24]
        break;
 80033d8:	e036      	b.n	8003448 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	085b      	lsrs	r3, r3, #1
 80033e0:	4a30      	ldr	r2, [pc, #192]	; (80034a4 <UART_SetConfig+0x308>)
 80033e2:	189a      	adds	r2, r3, r2
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	0019      	movs	r1, r3
 80033ea:	0010      	movs	r0, r2
 80033ec:	f7fc fe8c 	bl	8000108 <__udivsi3>
 80033f0:	0003      	movs	r3, r0
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	61bb      	str	r3, [r7, #24]
        break;
 80033f6:	e027      	b.n	8003448 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033f8:	f7ff fa46 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 80033fc:	0003      	movs	r3, r0
 80033fe:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	085a      	lsrs	r2, r3, #1
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	18d2      	adds	r2, r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	0019      	movs	r1, r3
 8003410:	0010      	movs	r0, r2
 8003412:	f7fc fe79 	bl	8000108 <__udivsi3>
 8003416:	0003      	movs	r3, r0
 8003418:	b29b      	uxth	r3, r3
 800341a:	61bb      	str	r3, [r7, #24]
        break;
 800341c:	e014      	b.n	8003448 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	085b      	lsrs	r3, r3, #1
 8003424:	2280      	movs	r2, #128	; 0x80
 8003426:	0212      	lsls	r2, r2, #8
 8003428:	189a      	adds	r2, r3, r2
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	0019      	movs	r1, r3
 8003430:	0010      	movs	r0, r2
 8003432:	f7fc fe69 	bl	8000108 <__udivsi3>
 8003436:	0003      	movs	r3, r0
 8003438:	b29b      	uxth	r3, r3
 800343a:	61bb      	str	r3, [r7, #24]
        break;
 800343c:	e004      	b.n	8003448 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 800343e:	2317      	movs	r3, #23
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	2201      	movs	r2, #1
 8003444:	701a      	strb	r2, [r3, #0]
        break;
 8003446:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	2b0f      	cmp	r3, #15
 800344c:	d908      	bls.n	8003460 <UART_SetConfig+0x2c4>
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	4a13      	ldr	r2, [pc, #76]	; (80034a0 <UART_SetConfig+0x304>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d804      	bhi.n	8003460 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	e003      	b.n	8003468 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003460:	2317      	movs	r3, #23
 8003462:	18fb      	adds	r3, r7, r3
 8003464:	2201      	movs	r2, #1
 8003466:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003474:	2317      	movs	r3, #23
 8003476:	18fb      	adds	r3, r7, r3
 8003478:	781b      	ldrb	r3, [r3, #0]
}
 800347a:	0018      	movs	r0, r3
 800347c:	46bd      	mov	sp, r7
 800347e:	b008      	add	sp, #32
 8003480:	bd80      	pop	{r7, pc}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	ffff69f3 	.word	0xffff69f3
 8003488:	ffffcfff 	.word	0xffffcfff
 800348c:	fffff4ff 	.word	0xfffff4ff
 8003490:	40013800 	.word	0x40013800
 8003494:	40021000 	.word	0x40021000
 8003498:	40004400 	.word	0x40004400
 800349c:	00f42400 	.word	0x00f42400
 80034a0:	0000ffff 	.word	0x0000ffff
 80034a4:	007a1200 	.word	0x007a1200

080034a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	2201      	movs	r2, #1
 80034b6:	4013      	ands	r3, r2
 80034b8:	d00b      	beq.n	80034d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	4a4a      	ldr	r2, [pc, #296]	; (80035ec <UART_AdvFeatureConfig+0x144>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	0019      	movs	r1, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	2202      	movs	r2, #2
 80034d8:	4013      	ands	r3, r2
 80034da:	d00b      	beq.n	80034f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	4a43      	ldr	r2, [pc, #268]	; (80035f0 <UART_AdvFeatureConfig+0x148>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	0019      	movs	r1, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	2204      	movs	r2, #4
 80034fa:	4013      	ands	r3, r2
 80034fc:	d00b      	beq.n	8003516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	4a3b      	ldr	r2, [pc, #236]	; (80035f4 <UART_AdvFeatureConfig+0x14c>)
 8003506:	4013      	ands	r3, r2
 8003508:	0019      	movs	r1, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	2208      	movs	r2, #8
 800351c:	4013      	ands	r3, r2
 800351e:	d00b      	beq.n	8003538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	4a34      	ldr	r2, [pc, #208]	; (80035f8 <UART_AdvFeatureConfig+0x150>)
 8003528:	4013      	ands	r3, r2
 800352a:	0019      	movs	r1, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	2210      	movs	r2, #16
 800353e:	4013      	ands	r3, r2
 8003540:	d00b      	beq.n	800355a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	4a2c      	ldr	r2, [pc, #176]	; (80035fc <UART_AdvFeatureConfig+0x154>)
 800354a:	4013      	ands	r3, r2
 800354c:	0019      	movs	r1, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	2220      	movs	r2, #32
 8003560:	4013      	ands	r3, r2
 8003562:	d00b      	beq.n	800357c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	4a25      	ldr	r2, [pc, #148]	; (8003600 <UART_AdvFeatureConfig+0x158>)
 800356c:	4013      	ands	r3, r2
 800356e:	0019      	movs	r1, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	2240      	movs	r2, #64	; 0x40
 8003582:	4013      	ands	r3, r2
 8003584:	d01d      	beq.n	80035c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	4a1d      	ldr	r2, [pc, #116]	; (8003604 <UART_AdvFeatureConfig+0x15c>)
 800358e:	4013      	ands	r3, r2
 8003590:	0019      	movs	r1, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035a2:	2380      	movs	r3, #128	; 0x80
 80035a4:	035b      	lsls	r3, r3, #13
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d10b      	bne.n	80035c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	4a15      	ldr	r2, [pc, #84]	; (8003608 <UART_AdvFeatureConfig+0x160>)
 80035b2:	4013      	ands	r3, r2
 80035b4:	0019      	movs	r1, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	2280      	movs	r2, #128	; 0x80
 80035c8:	4013      	ands	r3, r2
 80035ca:	d00b      	beq.n	80035e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	4a0e      	ldr	r2, [pc, #56]	; (800360c <UART_AdvFeatureConfig+0x164>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	0019      	movs	r1, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	605a      	str	r2, [r3, #4]
  }
}
 80035e4:	46c0      	nop			; (mov r8, r8)
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b002      	add	sp, #8
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	fffdffff 	.word	0xfffdffff
 80035f0:	fffeffff 	.word	0xfffeffff
 80035f4:	fffbffff 	.word	0xfffbffff
 80035f8:	ffff7fff 	.word	0xffff7fff
 80035fc:	ffffefff 	.word	0xffffefff
 8003600:	ffffdfff 	.word	0xffffdfff
 8003604:	ffefffff 	.word	0xffefffff
 8003608:	ff9fffff 	.word	0xff9fffff
 800360c:	fff7ffff 	.word	0xfff7ffff

08003610 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af02      	add	r7, sp, #8
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800361e:	f7fd fd35 	bl	800108c <HAL_GetTick>
 8003622:	0003      	movs	r3, r0
 8003624:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2208      	movs	r2, #8
 800362e:	4013      	ands	r3, r2
 8003630:	2b08      	cmp	r3, #8
 8003632:	d10d      	bne.n	8003650 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	2380      	movs	r3, #128	; 0x80
 8003638:	0399      	lsls	r1, r3, #14
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	4b16      	ldr	r3, [pc, #88]	; (8003698 <UART_CheckIdleState+0x88>)
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	0013      	movs	r3, r2
 8003642:	2200      	movs	r2, #0
 8003644:	f000 f82a 	bl	800369c <UART_WaitOnFlagUntilTimeout>
 8003648:	1e03      	subs	r3, r0, #0
 800364a:	d001      	beq.n	8003650 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e01f      	b.n	8003690 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2204      	movs	r2, #4
 8003658:	4013      	ands	r3, r2
 800365a:	2b04      	cmp	r3, #4
 800365c:	d10d      	bne.n	800367a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	2380      	movs	r3, #128	; 0x80
 8003662:	03d9      	lsls	r1, r3, #15
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	4b0c      	ldr	r3, [pc, #48]	; (8003698 <UART_CheckIdleState+0x88>)
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	0013      	movs	r3, r2
 800366c:	2200      	movs	r2, #0
 800366e:	f000 f815 	bl	800369c <UART_WaitOnFlagUntilTimeout>
 8003672:	1e03      	subs	r3, r0, #0
 8003674:	d001      	beq.n	800367a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e00a      	b.n	8003690 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2220      	movs	r2, #32
 800367e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2220      	movs	r2, #32
 8003684:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2270      	movs	r2, #112	; 0x70
 800368a:	2100      	movs	r1, #0
 800368c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	0018      	movs	r0, r3
 8003692:	46bd      	mov	sp, r7
 8003694:	b004      	add	sp, #16
 8003696:	bd80      	pop	{r7, pc}
 8003698:	01ffffff 	.word	0x01ffffff

0800369c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	1dfb      	adds	r3, r7, #7
 80036aa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ac:	e05d      	b.n	800376a <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	3301      	adds	r3, #1
 80036b2:	d05a      	beq.n	800376a <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b4:	f7fd fcea 	bl	800108c <HAL_GetTick>
 80036b8:	0002      	movs	r2, r0
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d302      	bcc.n	80036ca <UART_WaitOnFlagUntilTimeout+0x2e>
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d11b      	bne.n	8003702 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	492f      	ldr	r1, [pc, #188]	; (8003794 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80036d6:	400a      	ands	r2, r1
 80036d8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2101      	movs	r1, #1
 80036e6:	438a      	bics	r2, r1
 80036e8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2220      	movs	r2, #32
 80036ee:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2270      	movs	r2, #112	; 0x70
 80036fa:	2100      	movs	r1, #0
 80036fc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e043      	b.n	800378a <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2204      	movs	r2, #4
 800370a:	4013      	ands	r3, r2
 800370c:	d02d      	beq.n	800376a <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69da      	ldr	r2, [r3, #28]
 8003714:	2380      	movs	r3, #128	; 0x80
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	401a      	ands	r2, r3
 800371a:	2380      	movs	r3, #128	; 0x80
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	429a      	cmp	r2, r3
 8003720:	d123      	bne.n	800376a <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2280      	movs	r2, #128	; 0x80
 8003728:	0112      	lsls	r2, r2, #4
 800372a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4917      	ldr	r1, [pc, #92]	; (8003794 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003738:	400a      	ands	r2, r1
 800373a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2101      	movs	r1, #1
 8003748:	438a      	bics	r2, r1
 800374a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2220      	movs	r2, #32
 8003750:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2220      	movs	r2, #32
 8003756:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2220      	movs	r2, #32
 800375c:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2270      	movs	r2, #112	; 0x70
 8003762:	2100      	movs	r1, #0
 8003764:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e00f      	b.n	800378a <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	4013      	ands	r3, r2
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	425a      	negs	r2, r3
 800377a:	4153      	adcs	r3, r2
 800377c:	b2db      	uxtb	r3, r3
 800377e:	001a      	movs	r2, r3
 8003780:	1dfb      	adds	r3, r7, #7
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	429a      	cmp	r2, r3
 8003786:	d092      	beq.n	80036ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	0018      	movs	r0, r3
 800378c:	46bd      	mov	sp, r7
 800378e:	b004      	add	sp, #16
 8003790:	bd80      	pop	{r7, pc}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	fffffe5f 	.word	0xfffffe5f

08003798 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	0002      	movs	r2, r0
 80037a0:	1dbb      	adds	r3, r7, #6
 80037a2:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80037a4:	2300      	movs	r3, #0
 80037a6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80037a8:	1dbb      	adds	r3, r7, #6
 80037aa:	2200      	movs	r2, #0
 80037ac:	5e9b      	ldrsh	r3, [r3, r2]
 80037ae:	2b84      	cmp	r3, #132	; 0x84
 80037b0:	d006      	beq.n	80037c0 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80037b2:	1dbb      	adds	r3, r7, #6
 80037b4:	2200      	movs	r2, #0
 80037b6:	5e9a      	ldrsh	r2, [r3, r2]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	18d3      	adds	r3, r2, r3
 80037bc:	3303      	adds	r3, #3
 80037be:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80037c0:	68fb      	ldr	r3, [r7, #12]
}
 80037c2:	0018      	movs	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b004      	add	sp, #16
 80037c8:	bd80      	pop	{r7, pc}

080037ca <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80037ce:	f000 fd11 	bl	80041f4 <vTaskStartScheduler>
  
  return osOK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	0018      	movs	r0, r3
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80037da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037dc:	b089      	sub	sp, #36	; 0x24
 80037de:	af04      	add	r7, sp, #16
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d020      	beq.n	800382e <osThreadCreate+0x54>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d01c      	beq.n	800382e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685c      	ldr	r4, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681d      	ldr	r5, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691e      	ldr	r6, [r3, #16]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2208      	movs	r2, #8
 8003804:	5e9b      	ldrsh	r3, [r3, r2]
 8003806:	0018      	movs	r0, r3
 8003808:	f7ff ffc6 	bl	8003798 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	695a      	ldr	r2, [r3, #20]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003814:	6839      	ldr	r1, [r7, #0]
 8003816:	9302      	str	r3, [sp, #8]
 8003818:	9201      	str	r2, [sp, #4]
 800381a:	9000      	str	r0, [sp, #0]
 800381c:	000b      	movs	r3, r1
 800381e:	0032      	movs	r2, r6
 8003820:	0029      	movs	r1, r5
 8003822:	0020      	movs	r0, r4
 8003824:	f000 fb52 	bl	8003ecc <xTaskCreateStatic>
 8003828:	0003      	movs	r3, r0
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	e01d      	b.n	800386a <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685c      	ldr	r4, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800383a:	b29e      	uxth	r6, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2208      	movs	r2, #8
 8003840:	5e9b      	ldrsh	r3, [r3, r2]
 8003842:	0018      	movs	r0, r3
 8003844:	f7ff ffa8 	bl	8003798 <makeFreeRtosPriority>
 8003848:	0001      	movs	r1, r0
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	230c      	movs	r3, #12
 800384e:	18fb      	adds	r3, r7, r3
 8003850:	9301      	str	r3, [sp, #4]
 8003852:	9100      	str	r1, [sp, #0]
 8003854:	0013      	movs	r3, r2
 8003856:	0032      	movs	r2, r6
 8003858:	0029      	movs	r1, r5
 800385a:	0020      	movs	r0, r4
 800385c:	f000 fb79 	bl	8003f52 <xTaskCreate>
 8003860:	0003      	movs	r3, r0
 8003862:	2b01      	cmp	r3, #1
 8003864:	d001      	beq.n	800386a <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8003866:	2300      	movs	r3, #0
 8003868:	e000      	b.n	800386c <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800386a:	68fb      	ldr	r3, [r7, #12]
}
 800386c:	0018      	movs	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	b005      	add	sp, #20
 8003872:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003874 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <osDelay+0x16>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	e000      	b.n	800388c <osDelay+0x18>
 800388a:	2301      	movs	r3, #1
 800388c:	0018      	movs	r0, r3
 800388e:	f000 fc8b 	bl	80041a8 <vTaskDelay>
  
  return osOK;
 8003892:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003894:	0018      	movs	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	b004      	add	sp, #16
 800389a:	bd80      	pop	{r7, pc}

0800389c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800389c:	b590      	push	{r4, r7, lr}
 800389e:	b085      	sub	sp, #20
 80038a0:	af02      	add	r7, sp, #8
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d012      	beq.n	80038d4 <osMessageCreate+0x38>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00e      	beq.n	80038d4 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6859      	ldr	r1, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68dc      	ldr	r4, [r3, #12]
 80038c6:	2300      	movs	r3, #0
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	0023      	movs	r3, r4
 80038cc:	f000 f90c 	bl	8003ae8 <xQueueGenericCreateStatic>
 80038d0:	0003      	movs	r3, r0
 80038d2:	e008      	b.n	80038e6 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6818      	ldr	r0, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	0019      	movs	r1, r3
 80038e0:	f000 f94d 	bl	8003b7e <xQueueGenericCreate>
 80038e4:	0003      	movs	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80038e6:	0018      	movs	r0, r3
 80038e8:	46bd      	mov	sp, r7
 80038ea:	b003      	add	sp, #12
 80038ec:	bd90      	pop	{r4, r7, pc}

080038ee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b082      	sub	sp, #8
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3308      	adds	r3, #8
 80038fa:	001a      	movs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	4252      	negs	r2, r2
 8003906:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3308      	adds	r3, #8
 800390c:	001a      	movs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3308      	adds	r3, #8
 8003916:	001a      	movs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	46bd      	mov	sp, r7
 8003926:	b002      	add	sp, #8
 8003928:	bd80      	pop	{r7, pc}

0800392a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b082      	sub	sp, #8
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003938:	46c0      	nop			; (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b002      	add	sp, #8
 800393e:	bd80      	pop	{r7, pc}

08003940 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	601a      	str	r2, [r3, #0]
}
 800397c:	46c0      	nop			; (mov r8, r8)
 800397e:	46bd      	mov	sp, r7
 8003980:	b004      	add	sp, #16
 8003982:	bd80      	pop	{r7, pc}

08003984 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	3301      	adds	r3, #1
 8003998:	d103      	bne.n	80039a2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	e00c      	b.n	80039bc <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3308      	adds	r3, #8
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	e002      	b.n	80039b0 <vListInsert+0x2c>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d2f6      	bcs.n	80039aa <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	601a      	str	r2, [r3, #0]
}
 80039e8:	46c0      	nop			; (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b004      	add	sp, #16
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6892      	ldr	r2, [r2, #8]
 8003a06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6852      	ldr	r2, [r2, #4]
 8003a10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d103      	bne.n	8003a24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	1e5a      	subs	r2, r3, #1
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
}
 8003a38:	0018      	movs	r0, r3
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	b004      	add	sp, #16
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <xQueueGenericReset+0x18>
 8003a54:	b672      	cpsid	i
 8003a56:	e7fe      	b.n	8003a56 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8003a58:	f001 f87a 	bl	8004b50 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	434b      	muls	r3, r1
 8003a6a:	18d2      	adds	r2, r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a86:	1e59      	subs	r1, r3, #1
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	434b      	muls	r3, r1
 8003a8e:	18d2      	adds	r2, r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2244      	movs	r2, #68	; 0x44
 8003a98:	21ff      	movs	r1, #255	; 0xff
 8003a9a:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2245      	movs	r2, #69	; 0x45
 8003aa0:	21ff      	movs	r1, #255	; 0xff
 8003aa2:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10d      	bne.n	8003ac6 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d013      	beq.n	8003ada <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	3310      	adds	r3, #16
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f000 fda6 	bl	8004608 <xTaskRemoveFromEventList>
 8003abc:	1e03      	subs	r3, r0, #0
 8003abe:	d00c      	beq.n	8003ada <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ac0:	f001 f836 	bl	8004b30 <vPortYield>
 8003ac4:	e009      	b.n	8003ada <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	3310      	adds	r3, #16
 8003aca:	0018      	movs	r0, r3
 8003acc:	f7ff ff0f 	bl	80038ee <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	3324      	adds	r3, #36	; 0x24
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f7ff ff0a 	bl	80038ee <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ada:	f001 f84b 	bl	8004b74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003ade:	2301      	movs	r3, #1
}
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b004      	add	sp, #16
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003ae8:	b590      	push	{r4, r7, lr}
 8003aea:	b089      	sub	sp, #36	; 0x24
 8003aec:	af02      	add	r7, sp, #8
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <xQueueGenericCreateStatic+0x18>
 8003afc:	b672      	cpsid	i
 8003afe:	e7fe      	b.n	8003afe <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <xQueueGenericCreateStatic+0x22>
 8003b06:	b672      	cpsid	i
 8003b08:	e7fe      	b.n	8003b08 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <xQueueGenericCreateStatic+0x2e>
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <xQueueGenericCreateStatic+0x32>
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <xQueueGenericCreateStatic+0x34>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <xQueueGenericCreateStatic+0x3c>
 8003b20:	b672      	cpsid	i
 8003b22:	e7fe      	b.n	8003b22 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d102      	bne.n	8003b30 <xQueueGenericCreateStatic+0x48>
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <xQueueGenericCreateStatic+0x4c>
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <xQueueGenericCreateStatic+0x4e>
 8003b34:	2300      	movs	r3, #0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <xQueueGenericCreateStatic+0x56>
 8003b3a:	b672      	cpsid	i
 8003b3c:	e7fe      	b.n	8003b3c <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003b3e:	2348      	movs	r3, #72	; 0x48
 8003b40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2b48      	cmp	r3, #72	; 0x48
 8003b46:	d001      	beq.n	8003b4c <xQueueGenericCreateStatic+0x64>
 8003b48:	b672      	cpsid	i
 8003b4a:	e7fe      	b.n	8003b4a <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00e      	beq.n	8003b74 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2246      	movs	r2, #70	; 0x46
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b5e:	2328      	movs	r3, #40	; 0x28
 8003b60:	18fb      	adds	r3, r7, r3
 8003b62:	781c      	ldrb	r4, [r3, #0]
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	68b9      	ldr	r1, [r7, #8]
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	0023      	movs	r3, r4
 8003b70:	f000 f83b 	bl	8003bea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003b74:	697b      	ldr	r3, [r7, #20]
	}
 8003b76:	0018      	movs	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b007      	add	sp, #28
 8003b7c:	bd90      	pop	{r4, r7, pc}

08003b7e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003b7e:	b590      	push	{r4, r7, lr}
 8003b80:	b08b      	sub	sp, #44	; 0x2c
 8003b82:	af02      	add	r7, sp, #8
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	1dfb      	adds	r3, r7, #7
 8003b8a:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <xQueueGenericCreate+0x18>
 8003b92:	b672      	cpsid	i
 8003b94:	e7fe      	b.n	8003b94 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d102      	bne.n	8003ba2 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	61fb      	str	r3, [r7, #28]
 8003ba0:	e003      	b.n	8003baa <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	4353      	muls	r3, r2
 8003ba8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	3348      	adds	r3, #72	; 0x48
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f001 f866 	bl	8004c80 <pvPortMalloc>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d010      	beq.n	8003be0 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	3348      	adds	r3, #72	; 0x48
 8003bc2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2246      	movs	r2, #70	; 0x46
 8003bc8:	2100      	movs	r1, #0
 8003bca:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003bcc:	1dfb      	adds	r3, r7, #7
 8003bce:	781c      	ldrb	r4, [r3, #0]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	68b9      	ldr	r1, [r7, #8]
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	0023      	movs	r3, r4
 8003bdc:	f000 f805 	bl	8003bea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003be0:	69bb      	ldr	r3, [r7, #24]
	}
 8003be2:	0018      	movs	r0, r3
 8003be4:	46bd      	mov	sp, r7
 8003be6:	b009      	add	sp, #36	; 0x24
 8003be8:	bd90      	pop	{r4, r7, pc}

08003bea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b084      	sub	sp, #16
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	607a      	str	r2, [r7, #4]
 8003bf6:	001a      	movs	r2, r3
 8003bf8:	1cfb      	adds	r3, r7, #3
 8003bfa:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d103      	bne.n	8003c0a <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	e002      	b.n	8003c10 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	2101      	movs	r1, #1
 8003c20:	0018      	movs	r0, r3
 8003c22:	f7ff ff0d 	bl	8003a40 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	b004      	add	sp, #16
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b08a      	sub	sp, #40	; 0x28
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <xQueueReceive+0x1e>
 8003c48:	b672      	cpsid	i
 8003c4a:	e7fe      	b.n	8003c4a <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d103      	bne.n	8003c5a <xQueueReceive+0x2c>
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <xQueueReceive+0x30>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <xQueueReceive+0x32>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <xQueueReceive+0x3a>
 8003c64:	b672      	cpsid	i
 8003c66:	e7fe      	b.n	8003c66 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c68:	f000 fe66 	bl	8004938 <xTaskGetSchedulerState>
 8003c6c:	1e03      	subs	r3, r0, #0
 8003c6e:	d102      	bne.n	8003c76 <xQueueReceive+0x48>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <xQueueReceive+0x4c>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <xQueueReceive+0x4e>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <xQueueReceive+0x56>
 8003c80:	b672      	cpsid	i
 8003c82:	e7fe      	b.n	8003c82 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c84:	f000 ff64 	bl	8004b50 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d01a      	beq.n	8003cca <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	0011      	movs	r1, r2
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f000 f87c 	bl	8003d98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	1e5a      	subs	r2, r3, #1
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	3310      	adds	r3, #16
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	f000 fca7 	bl	8004608 <xTaskRemoveFromEventList>
 8003cba:	1e03      	subs	r3, r0, #0
 8003cbc:	d001      	beq.n	8003cc2 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003cbe:	f000 ff37 	bl	8004b30 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003cc2:	f000 ff57 	bl	8004b74 <vPortExitCritical>
				return pdPASS;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e062      	b.n	8003d90 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d103      	bne.n	8003cd8 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003cd0:	f000 ff50 	bl	8004b74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	e05b      	b.n	8003d90 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cde:	2314      	movs	r3, #20
 8003ce0:	18fb      	adds	r3, r7, r3
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f000 fcec 	bl	80046c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cec:	f000 ff42 	bl	8004b74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cf0:	f000 face 	bl	8004290 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cf4:	f000 ff2c 	bl	8004b50 <vPortEnterCritical>
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	2244      	movs	r2, #68	; 0x44
 8003cfc:	5c9b      	ldrb	r3, [r3, r2]
 8003cfe:	b25b      	sxtb	r3, r3
 8003d00:	3301      	adds	r3, #1
 8003d02:	d103      	bne.n	8003d0c <xQueueReceive+0xde>
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	2244      	movs	r2, #68	; 0x44
 8003d08:	2100      	movs	r1, #0
 8003d0a:	5499      	strb	r1, [r3, r2]
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	2245      	movs	r2, #69	; 0x45
 8003d10:	5c9b      	ldrb	r3, [r3, r2]
 8003d12:	b25b      	sxtb	r3, r3
 8003d14:	3301      	adds	r3, #1
 8003d16:	d103      	bne.n	8003d20 <xQueueReceive+0xf2>
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	2245      	movs	r2, #69	; 0x45
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	5499      	strb	r1, [r3, r2]
 8003d20:	f000 ff28 	bl	8004b74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d24:	1d3a      	adds	r2, r7, #4
 8003d26:	2314      	movs	r3, #20
 8003d28:	18fb      	adds	r3, r7, r3
 8003d2a:	0011      	movs	r1, r2
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f000 fcdb 	bl	80046e8 <xTaskCheckForTimeOut>
 8003d32:	1e03      	subs	r3, r0, #0
 8003d34:	d11e      	bne.n	8003d74 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	0018      	movs	r0, r3
 8003d3a:	f000 f8b1 	bl	8003ea0 <prvIsQueueEmpty>
 8003d3e:	1e03      	subs	r3, r0, #0
 8003d40:	d011      	beq.n	8003d66 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	3324      	adds	r3, #36	; 0x24
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	0011      	movs	r1, r2
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f000 fc3e 	bl	80045cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	0018      	movs	r0, r3
 8003d54:	f000 f846 	bl	8003de4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d58:	f000 faa6 	bl	80042a8 <xTaskResumeAll>
 8003d5c:	1e03      	subs	r3, r0, #0
 8003d5e:	d191      	bne.n	8003c84 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8003d60:	f000 fee6 	bl	8004b30 <vPortYield>
 8003d64:	e78e      	b.n	8003c84 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f000 f83b 	bl	8003de4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d6e:	f000 fa9b 	bl	80042a8 <xTaskResumeAll>
 8003d72:	e787      	b.n	8003c84 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	0018      	movs	r0, r3
 8003d78:	f000 f834 	bl	8003de4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d7c:	f000 fa94 	bl	80042a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	0018      	movs	r0, r3
 8003d84:	f000 f88c 	bl	8003ea0 <prvIsQueueEmpty>
 8003d88:	1e03      	subs	r3, r0, #0
 8003d8a:	d100      	bne.n	8003d8e <xQueueReceive+0x160>
 8003d8c:	e77a      	b.n	8003c84 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d8e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003d90:	0018      	movs	r0, r3
 8003d92:	46bd      	mov	sp, r7
 8003d94:	b00a      	add	sp, #40	; 0x28
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d018      	beq.n	8003ddc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	18d2      	adds	r2, r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d303      	bcc.n	8003dcc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68d9      	ldr	r1, [r3, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f001 f922 	bl	8005020 <memcpy>
	}
}
 8003ddc:	46c0      	nop			; (mov r8, r8)
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b002      	add	sp, #8
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003dec:	f000 feb0 	bl	8004b50 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003df0:	230f      	movs	r3, #15
 8003df2:	18fb      	adds	r3, r7, r3
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	2145      	movs	r1, #69	; 0x45
 8003df8:	5c52      	ldrb	r2, [r2, r1]
 8003dfa:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003dfc:	e013      	b.n	8003e26 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d016      	beq.n	8003e34 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3324      	adds	r3, #36	; 0x24
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f000 fbfc 	bl	8004608 <xTaskRemoveFromEventList>
 8003e10:	1e03      	subs	r3, r0, #0
 8003e12:	d001      	beq.n	8003e18 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e14:	f000 fcb8 	bl	8004788 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e18:	210f      	movs	r1, #15
 8003e1a:	187b      	adds	r3, r7, r1
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	187b      	adds	r3, r7, r1
 8003e24:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e26:	230f      	movs	r3, #15
 8003e28:	18fb      	adds	r3, r7, r3
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	b25b      	sxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	dce5      	bgt.n	8003dfe <prvUnlockQueue+0x1a>
 8003e32:	e000      	b.n	8003e36 <prvUnlockQueue+0x52>
					break;
 8003e34:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2245      	movs	r2, #69	; 0x45
 8003e3a:	21ff      	movs	r1, #255	; 0xff
 8003e3c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003e3e:	f000 fe99 	bl	8004b74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e42:	f000 fe85 	bl	8004b50 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e46:	230e      	movs	r3, #14
 8003e48:	18fb      	adds	r3, r7, r3
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	2144      	movs	r1, #68	; 0x44
 8003e4e:	5c52      	ldrb	r2, [r2, r1]
 8003e50:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e52:	e013      	b.n	8003e7c <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d016      	beq.n	8003e8a <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3310      	adds	r3, #16
 8003e60:	0018      	movs	r0, r3
 8003e62:	f000 fbd1 	bl	8004608 <xTaskRemoveFromEventList>
 8003e66:	1e03      	subs	r3, r0, #0
 8003e68:	d001      	beq.n	8003e6e <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8003e6a:	f000 fc8d 	bl	8004788 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e6e:	210e      	movs	r1, #14
 8003e70:	187b      	adds	r3, r7, r1
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	187b      	adds	r3, r7, r1
 8003e7a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e7c:	230e      	movs	r3, #14
 8003e7e:	18fb      	adds	r3, r7, r3
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	b25b      	sxtb	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	dce5      	bgt.n	8003e54 <prvUnlockQueue+0x70>
 8003e88:	e000      	b.n	8003e8c <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8003e8a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2244      	movs	r2, #68	; 0x44
 8003e90:	21ff      	movs	r1, #255	; 0xff
 8003e92:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003e94:	f000 fe6e 	bl	8004b74 <vPortExitCritical>
}
 8003e98:	46c0      	nop			; (mov r8, r8)
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b004      	add	sp, #16
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ea8:	f000 fe52 	bl	8004b50 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d102      	bne.n	8003eba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	e001      	b.n	8003ebe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ebe:	f000 fe59 	bl	8004b74 <vPortExitCritical>

	return xReturn;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
}
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	b004      	add	sp, #16
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ecc:	b590      	push	{r4, r7, lr}
 8003ece:	b08d      	sub	sp, #52	; 0x34
 8003ed0:	af04      	add	r7, sp, #16
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <xTaskCreateStatic+0x18>
 8003ee0:	b672      	cpsid	i
 8003ee2:	e7fe      	b.n	8003ee2 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8003ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <xTaskCreateStatic+0x22>
 8003eea:	b672      	cpsid	i
 8003eec:	e7fe      	b.n	8003eec <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003eee:	2354      	movs	r3, #84	; 0x54
 8003ef0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2b54      	cmp	r3, #84	; 0x54
 8003ef6:	d001      	beq.n	8003efc <xTaskCreateStatic+0x30>
 8003ef8:	b672      	cpsid	i
 8003efa:	e7fe      	b.n	8003efa <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d020      	beq.n	8003f44 <xTaskCreateStatic+0x78>
 8003f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d01d      	beq.n	8003f44 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0a:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	2251      	movs	r2, #81	; 0x51
 8003f16:	2102      	movs	r1, #2
 8003f18:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f1a:	683c      	ldr	r4, [r7, #0]
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	68b9      	ldr	r1, [r7, #8]
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	2300      	movs	r3, #0
 8003f24:	9303      	str	r3, [sp, #12]
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	9302      	str	r3, [sp, #8]
 8003f2a:	2318      	movs	r3, #24
 8003f2c:	18fb      	adds	r3, r7, r3
 8003f2e:	9301      	str	r3, [sp, #4]
 8003f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	0023      	movs	r3, r4
 8003f36:	f000 f859 	bl	8003fec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f000 f8cf 	bl	80040e0 <prvAddNewTaskToReadyList>
 8003f42:	e001      	b.n	8003f48 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8003f44:	2300      	movs	r3, #0
 8003f46:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f48:	69bb      	ldr	r3, [r7, #24]
	}
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b009      	add	sp, #36	; 0x24
 8003f50:	bd90      	pop	{r4, r7, pc}

08003f52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f52:	b590      	push	{r4, r7, lr}
 8003f54:	b08d      	sub	sp, #52	; 0x34
 8003f56:	af04      	add	r7, sp, #16
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	603b      	str	r3, [r7, #0]
 8003f5e:	1dbb      	adds	r3, r7, #6
 8003f60:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f62:	1dbb      	adds	r3, r7, #6
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f000 fe89 	bl	8004c80 <pvPortMalloc>
 8003f6e:	0003      	movs	r3, r0
 8003f70:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d010      	beq.n	8003f9a <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003f78:	2054      	movs	r0, #84	; 0x54
 8003f7a:	f000 fe81 	bl	8004c80 <pvPortMalloc>
 8003f7e:	0003      	movs	r3, r0
 8003f80:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	631a      	str	r2, [r3, #48]	; 0x30
 8003f8e:	e006      	b.n	8003f9e <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	0018      	movs	r0, r3
 8003f94:	f000 ff1a 	bl	8004dcc <vPortFree>
 8003f98:	e001      	b.n	8003f9e <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d01a      	beq.n	8003fda <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	2251      	movs	r2, #81	; 0x51
 8003fa8:	2100      	movs	r1, #0
 8003faa:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fac:	1dbb      	adds	r3, r7, #6
 8003fae:	881a      	ldrh	r2, [r3, #0]
 8003fb0:	683c      	ldr	r4, [r7, #0]
 8003fb2:	68b9      	ldr	r1, [r7, #8]
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	9303      	str	r3, [sp, #12]
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	9302      	str	r3, [sp, #8]
 8003fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc0:	9301      	str	r3, [sp, #4]
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	0023      	movs	r3, r4
 8003fc8:	f000 f810 	bl	8003fec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f000 f886 	bl	80040e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	61bb      	str	r3, [r7, #24]
 8003fd8:	e002      	b.n	8003fe0 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	425b      	negs	r3, r3
 8003fde:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003fe0:	69bb      	ldr	r3, [r7, #24]
	}
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	b009      	add	sp, #36	; 0x24
 8003fe8:	bd90      	pop	{r4, r7, pc}
	...

08003fec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
 8003ff8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4936      	ldr	r1, [pc, #216]	; (80040dc <prvInitialiseNewTask+0xf0>)
 8004002:	468c      	mov	ip, r1
 8004004:	4463      	add	r3, ip
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	18d3      	adds	r3, r2, r3
 800400a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	2207      	movs	r2, #7
 8004010:	4393      	bics	r3, r2
 8004012:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	2207      	movs	r2, #7
 8004018:	4013      	ands	r3, r2
 800401a:	d001      	beq.n	8004020 <prvInitialiseNewTask+0x34>
 800401c:	b672      	cpsid	i
 800401e:	e7fe      	b.n	800401e <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004020:	2300      	movs	r3, #0
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	e013      	b.n	800404e <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	18d3      	adds	r3, r2, r3
 800402c:	7818      	ldrb	r0, [r3, #0]
 800402e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004030:	2134      	movs	r1, #52	; 0x34
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	18d3      	adds	r3, r2, r3
 8004036:	185b      	adds	r3, r3, r1
 8004038:	1c02      	adds	r2, r0, #0
 800403a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	18d3      	adds	r3, r2, r3
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d006      	beq.n	8004056 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	3301      	adds	r3, #1
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2b0f      	cmp	r3, #15
 8004052:	d9e8      	bls.n	8004026 <prvInitialiseNewTask+0x3a>
 8004054:	e000      	b.n	8004058 <prvInitialiseNewTask+0x6c>
		{
			break;
 8004056:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405a:	2243      	movs	r2, #67	; 0x43
 800405c:	2100      	movs	r1, #0
 800405e:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004060:	6a3b      	ldr	r3, [r7, #32]
 8004062:	2b06      	cmp	r3, #6
 8004064:	d901      	bls.n	800406a <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004066:	2306      	movs	r3, #6
 8004068:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800406a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406c:	6a3a      	ldr	r2, [r7, #32]
 800406e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004072:	6a3a      	ldr	r2, [r7, #32]
 8004074:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004078:	2200      	movs	r2, #0
 800407a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407e:	3304      	adds	r3, #4
 8004080:	0018      	movs	r0, r3
 8004082:	f7ff fc52 	bl	800392a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004088:	3318      	adds	r3, #24
 800408a:	0018      	movs	r0, r3
 800408c:	f7ff fc4d 	bl	800392a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004094:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	2207      	movs	r2, #7
 800409a:	1ad2      	subs	r2, r2, r3
 800409c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040a4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80040a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a8:	2200      	movs	r2, #0
 80040aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80040ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ae:	2250      	movs	r2, #80	; 0x50
 80040b0:	2100      	movs	r1, #0
 80040b2:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	68f9      	ldr	r1, [r7, #12]
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	0018      	movs	r0, r3
 80040bc:	f000 fcac 	bl	8004a18 <pxPortInitialiseStack>
 80040c0:	0002      	movs	r2, r0
 80040c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	46bd      	mov	sp, r7
 80040d6:	b006      	add	sp, #24
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	3fffffff 	.word	0x3fffffff

080040e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80040e8:	f000 fd32 	bl	8004b50 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80040ec:	4b28      	ldr	r3, [pc, #160]	; (8004190 <prvAddNewTaskToReadyList+0xb0>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	4b27      	ldr	r3, [pc, #156]	; (8004190 <prvAddNewTaskToReadyList+0xb0>)
 80040f4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80040f6:	4b27      	ldr	r3, [pc, #156]	; (8004194 <prvAddNewTaskToReadyList+0xb4>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d109      	bne.n	8004112 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80040fe:	4b25      	ldr	r3, [pc, #148]	; (8004194 <prvAddNewTaskToReadyList+0xb4>)
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004104:	4b22      	ldr	r3, [pc, #136]	; (8004190 <prvAddNewTaskToReadyList+0xb0>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d110      	bne.n	800412e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800410c:	f000 fb56 	bl	80047bc <prvInitialiseTaskLists>
 8004110:	e00d      	b.n	800412e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004112:	4b21      	ldr	r3, [pc, #132]	; (8004198 <prvAddNewTaskToReadyList+0xb8>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d109      	bne.n	800412e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800411a:	4b1e      	ldr	r3, [pc, #120]	; (8004194 <prvAddNewTaskToReadyList+0xb4>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	429a      	cmp	r2, r3
 8004126:	d802      	bhi.n	800412e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004128:	4b1a      	ldr	r3, [pc, #104]	; (8004194 <prvAddNewTaskToReadyList+0xb4>)
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800412e:	4b1b      	ldr	r3, [pc, #108]	; (800419c <prvAddNewTaskToReadyList+0xbc>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	4b19      	ldr	r3, [pc, #100]	; (800419c <prvAddNewTaskToReadyList+0xbc>)
 8004136:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800413c:	4b18      	ldr	r3, [pc, #96]	; (80041a0 <prvAddNewTaskToReadyList+0xc0>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d903      	bls.n	800414c <prvAddNewTaskToReadyList+0x6c>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004148:	4b15      	ldr	r3, [pc, #84]	; (80041a0 <prvAddNewTaskToReadyList+0xc0>)
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004150:	0013      	movs	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	189b      	adds	r3, r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4a12      	ldr	r2, [pc, #72]	; (80041a4 <prvAddNewTaskToReadyList+0xc4>)
 800415a:	189a      	adds	r2, r3, r2
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3304      	adds	r3, #4
 8004160:	0019      	movs	r1, r3
 8004162:	0010      	movs	r0, r2
 8004164:	f7ff fbec 	bl	8003940 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004168:	f000 fd04 	bl	8004b74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800416c:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <prvAddNewTaskToReadyList+0xb8>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004174:	4b07      	ldr	r3, [pc, #28]	; (8004194 <prvAddNewTaskToReadyList+0xb4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417e:	429a      	cmp	r2, r3
 8004180:	d201      	bcs.n	8004186 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004182:	f000 fcd5 	bl	8004b30 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004186:	46c0      	nop			; (mov r8, r8)
 8004188:	46bd      	mov	sp, r7
 800418a:	b002      	add	sp, #8
 800418c:	bd80      	pop	{r7, pc}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	200003f0 	.word	0x200003f0
 8004194:	200002f0 	.word	0x200002f0
 8004198:	200003fc 	.word	0x200003fc
 800419c:	2000040c 	.word	0x2000040c
 80041a0:	200003f8 	.word	0x200003f8
 80041a4:	200002f4 	.word	0x200002f4

080041a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80041b0:	2300      	movs	r3, #0
 80041b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d010      	beq.n	80041dc <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80041ba:	4b0d      	ldr	r3, [pc, #52]	; (80041f0 <vTaskDelay+0x48>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <vTaskDelay+0x1e>
 80041c2:	b672      	cpsid	i
 80041c4:	e7fe      	b.n	80041c4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80041c6:	f000 f863 	bl	8004290 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2100      	movs	r1, #0
 80041ce:	0018      	movs	r0, r3
 80041d0:	f000 fbce 	bl	8004970 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80041d4:	f000 f868 	bl	80042a8 <xTaskResumeAll>
 80041d8:	0003      	movs	r3, r0
 80041da:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80041e2:	f000 fca5 	bl	8004b30 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	46bd      	mov	sp, r7
 80041ea:	b004      	add	sp, #16
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	20000418 	.word	0x20000418

080041f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041f4:	b590      	push	{r4, r7, lr}
 80041f6:	b089      	sub	sp, #36	; 0x24
 80041f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80041fe:	2300      	movs	r3, #0
 8004200:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004202:	003a      	movs	r2, r7
 8004204:	1d39      	adds	r1, r7, #4
 8004206:	2308      	movs	r3, #8
 8004208:	18fb      	adds	r3, r7, r3
 800420a:	0018      	movs	r0, r3
 800420c:	f7fc f808 	bl	8000220 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004210:	683c      	ldr	r4, [r7, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	4918      	ldr	r1, [pc, #96]	; (8004278 <vTaskStartScheduler+0x84>)
 8004218:	4818      	ldr	r0, [pc, #96]	; (800427c <vTaskStartScheduler+0x88>)
 800421a:	9202      	str	r2, [sp, #8]
 800421c:	9301      	str	r3, [sp, #4]
 800421e:	2300      	movs	r3, #0
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	2300      	movs	r3, #0
 8004224:	0022      	movs	r2, r4
 8004226:	f7ff fe51 	bl	8003ecc <xTaskCreateStatic>
 800422a:	0002      	movs	r2, r0
 800422c:	4b14      	ldr	r3, [pc, #80]	; (8004280 <vTaskStartScheduler+0x8c>)
 800422e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004230:	4b13      	ldr	r3, [pc, #76]	; (8004280 <vTaskStartScheduler+0x8c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d002      	beq.n	800423e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004238:	2301      	movs	r3, #1
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	e001      	b.n	8004242 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d10d      	bne.n	8004264 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004248:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800424a:	4b0e      	ldr	r3, [pc, #56]	; (8004284 <vTaskStartScheduler+0x90>)
 800424c:	2201      	movs	r2, #1
 800424e:	4252      	negs	r2, r2
 8004250:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004252:	4b0d      	ldr	r3, [pc, #52]	; (8004288 <vTaskStartScheduler+0x94>)
 8004254:	2201      	movs	r2, #1
 8004256:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004258:	4b0c      	ldr	r3, [pc, #48]	; (800428c <vTaskStartScheduler+0x98>)
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800425e:	f000 fc43 	bl	8004ae8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004262:	e004      	b.n	800426e <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	3301      	adds	r3, #1
 8004268:	d101      	bne.n	800426e <vTaskStartScheduler+0x7a>
 800426a:	b672      	cpsid	i
 800426c:	e7fe      	b.n	800426c <vTaskStartScheduler+0x78>
}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	46bd      	mov	sp, r7
 8004272:	b005      	add	sp, #20
 8004274:	bd90      	pop	{r4, r7, pc}
 8004276:	46c0      	nop			; (mov r8, r8)
 8004278:	08005f64 	.word	0x08005f64
 800427c:	0800479d 	.word	0x0800479d
 8004280:	20000414 	.word	0x20000414
 8004284:	20000410 	.word	0x20000410
 8004288:	200003fc 	.word	0x200003fc
 800428c:	200003f4 	.word	0x200003f4

08004290 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004294:	4b03      	ldr	r3, [pc, #12]	; (80042a4 <vTaskSuspendAll+0x14>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	4b02      	ldr	r3, [pc, #8]	; (80042a4 <vTaskSuspendAll+0x14>)
 800429c:	601a      	str	r2, [r3, #0]
}
 800429e:	46c0      	nop			; (mov r8, r8)
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	20000418 	.word	0x20000418

080042a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80042b2:	2300      	movs	r3, #0
 80042b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80042b6:	4b3a      	ldr	r3, [pc, #232]	; (80043a0 <xTaskResumeAll+0xf8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <xTaskResumeAll+0x1a>
 80042be:	b672      	cpsid	i
 80042c0:	e7fe      	b.n	80042c0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80042c2:	f000 fc45 	bl	8004b50 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80042c6:	4b36      	ldr	r3, [pc, #216]	; (80043a0 <xTaskResumeAll+0xf8>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	1e5a      	subs	r2, r3, #1
 80042cc:	4b34      	ldr	r3, [pc, #208]	; (80043a0 <xTaskResumeAll+0xf8>)
 80042ce:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042d0:	4b33      	ldr	r3, [pc, #204]	; (80043a0 <xTaskResumeAll+0xf8>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d15b      	bne.n	8004390 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80042d8:	4b32      	ldr	r3, [pc, #200]	; (80043a4 <xTaskResumeAll+0xfc>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d057      	beq.n	8004390 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042e0:	e02f      	b.n	8004342 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80042e2:	4b31      	ldr	r3, [pc, #196]	; (80043a8 <xTaskResumeAll+0x100>)
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	3318      	adds	r3, #24
 80042ee:	0018      	movs	r0, r3
 80042f0:	f7ff fb7e 	bl	80039f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	3304      	adds	r3, #4
 80042f8:	0018      	movs	r0, r3
 80042fa:	f7ff fb79 	bl	80039f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004302:	4b2a      	ldr	r3, [pc, #168]	; (80043ac <xTaskResumeAll+0x104>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d903      	bls.n	8004312 <xTaskResumeAll+0x6a>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800430e:	4b27      	ldr	r3, [pc, #156]	; (80043ac <xTaskResumeAll+0x104>)
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004316:	0013      	movs	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	189b      	adds	r3, r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4a24      	ldr	r2, [pc, #144]	; (80043b0 <xTaskResumeAll+0x108>)
 8004320:	189a      	adds	r2, r3, r2
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3304      	adds	r3, #4
 8004326:	0019      	movs	r1, r3
 8004328:	0010      	movs	r0, r2
 800432a:	f7ff fb09 	bl	8003940 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004332:	4b20      	ldr	r3, [pc, #128]	; (80043b4 <xTaskResumeAll+0x10c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004338:	429a      	cmp	r2, r3
 800433a:	d302      	bcc.n	8004342 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800433c:	4b1e      	ldr	r3, [pc, #120]	; (80043b8 <xTaskResumeAll+0x110>)
 800433e:	2201      	movs	r2, #1
 8004340:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004342:	4b19      	ldr	r3, [pc, #100]	; (80043a8 <xTaskResumeAll+0x100>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1cb      	bne.n	80042e2 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004350:	f000 face 	bl	80048f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004354:	4b19      	ldr	r3, [pc, #100]	; (80043bc <xTaskResumeAll+0x114>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00f      	beq.n	8004380 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004360:	f000 f82e 	bl	80043c0 <xTaskIncrementTick>
 8004364:	1e03      	subs	r3, r0, #0
 8004366:	d002      	beq.n	800436e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8004368:	4b13      	ldr	r3, [pc, #76]	; (80043b8 <xTaskResumeAll+0x110>)
 800436a:	2201      	movs	r2, #1
 800436c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3b01      	subs	r3, #1
 8004372:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f2      	bne.n	8004360 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800437a:	4b10      	ldr	r3, [pc, #64]	; (80043bc <xTaskResumeAll+0x114>)
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004380:	4b0d      	ldr	r3, [pc, #52]	; (80043b8 <xTaskResumeAll+0x110>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004388:	2301      	movs	r3, #1
 800438a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800438c:	f000 fbd0 	bl	8004b30 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004390:	f000 fbf0 	bl	8004b74 <vPortExitCritical>

	return xAlreadyYielded;
 8004394:	68bb      	ldr	r3, [r7, #8]
}
 8004396:	0018      	movs	r0, r3
 8004398:	46bd      	mov	sp, r7
 800439a:	b004      	add	sp, #16
 800439c:	bd80      	pop	{r7, pc}
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	20000418 	.word	0x20000418
 80043a4:	200003f0 	.word	0x200003f0
 80043a8:	200003b0 	.word	0x200003b0
 80043ac:	200003f8 	.word	0x200003f8
 80043b0:	200002f4 	.word	0x200002f4
 80043b4:	200002f0 	.word	0x200002f0
 80043b8:	20000404 	.word	0x20000404
 80043bc:	20000400 	.word	0x20000400

080043c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80043c6:	2300      	movs	r3, #0
 80043c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043ca:	4b4c      	ldr	r3, [pc, #304]	; (80044fc <xTaskIncrementTick+0x13c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d000      	beq.n	80043d4 <xTaskIncrementTick+0x14>
 80043d2:	e083      	b.n	80044dc <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80043d4:	4b4a      	ldr	r3, [pc, #296]	; (8004500 <xTaskIncrementTick+0x140>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3301      	adds	r3, #1
 80043da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80043dc:	4b48      	ldr	r3, [pc, #288]	; (8004500 <xTaskIncrementTick+0x140>)
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d117      	bne.n	8004418 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80043e8:	4b46      	ldr	r3, [pc, #280]	; (8004504 <xTaskIncrementTick+0x144>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <xTaskIncrementTick+0x36>
 80043f2:	b672      	cpsid	i
 80043f4:	e7fe      	b.n	80043f4 <xTaskIncrementTick+0x34>
 80043f6:	4b43      	ldr	r3, [pc, #268]	; (8004504 <xTaskIncrementTick+0x144>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	4b42      	ldr	r3, [pc, #264]	; (8004508 <xTaskIncrementTick+0x148>)
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	4b40      	ldr	r3, [pc, #256]	; (8004504 <xTaskIncrementTick+0x144>)
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	4b40      	ldr	r3, [pc, #256]	; (8004508 <xTaskIncrementTick+0x148>)
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	4b40      	ldr	r3, [pc, #256]	; (800450c <xTaskIncrementTick+0x14c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	4b3e      	ldr	r3, [pc, #248]	; (800450c <xTaskIncrementTick+0x14c>)
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	f000 fa6c 	bl	80048f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004418:	4b3d      	ldr	r3, [pc, #244]	; (8004510 <xTaskIncrementTick+0x150>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	429a      	cmp	r2, r3
 8004420:	d34e      	bcc.n	80044c0 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004422:	4b38      	ldr	r3, [pc, #224]	; (8004504 <xTaskIncrementTick+0x144>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <xTaskIncrementTick+0x70>
 800442c:	2301      	movs	r3, #1
 800442e:	e000      	b.n	8004432 <xTaskIncrementTick+0x72>
 8004430:	2300      	movs	r3, #0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d004      	beq.n	8004440 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004436:	4b36      	ldr	r3, [pc, #216]	; (8004510 <xTaskIncrementTick+0x150>)
 8004438:	2201      	movs	r2, #1
 800443a:	4252      	negs	r2, r2
 800443c:	601a      	str	r2, [r3, #0]
					break;
 800443e:	e03f      	b.n	80044c0 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004440:	4b30      	ldr	r3, [pc, #192]	; (8004504 <xTaskIncrementTick+0x144>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	429a      	cmp	r2, r3
 8004456:	d203      	bcs.n	8004460 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004458:	4b2d      	ldr	r3, [pc, #180]	; (8004510 <xTaskIncrementTick+0x150>)
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	601a      	str	r2, [r3, #0]
						break;
 800445e:	e02f      	b.n	80044c0 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	3304      	adds	r3, #4
 8004464:	0018      	movs	r0, r3
 8004466:	f7ff fac3 	bl	80039f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	2b00      	cmp	r3, #0
 8004470:	d004      	beq.n	800447c <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	3318      	adds	r3, #24
 8004476:	0018      	movs	r0, r3
 8004478:	f7ff faba 	bl	80039f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004480:	4b24      	ldr	r3, [pc, #144]	; (8004514 <xTaskIncrementTick+0x154>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d903      	bls.n	8004490 <xTaskIncrementTick+0xd0>
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800448c:	4b21      	ldr	r3, [pc, #132]	; (8004514 <xTaskIncrementTick+0x154>)
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004494:	0013      	movs	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	189b      	adds	r3, r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4a1e      	ldr	r2, [pc, #120]	; (8004518 <xTaskIncrementTick+0x158>)
 800449e:	189a      	adds	r2, r3, r2
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	3304      	adds	r3, #4
 80044a4:	0019      	movs	r1, r3
 80044a6:	0010      	movs	r0, r2
 80044a8:	f7ff fa4a 	bl	8003940 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b0:	4b1a      	ldr	r3, [pc, #104]	; (800451c <xTaskIncrementTick+0x15c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d3b3      	bcc.n	8004422 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80044ba:	2301      	movs	r3, #1
 80044bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044be:	e7b0      	b.n	8004422 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80044c0:	4b16      	ldr	r3, [pc, #88]	; (800451c <xTaskIncrementTick+0x15c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c6:	4914      	ldr	r1, [pc, #80]	; (8004518 <xTaskIncrementTick+0x158>)
 80044c8:	0013      	movs	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	189b      	adds	r3, r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	585b      	ldr	r3, [r3, r1]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d907      	bls.n	80044e6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80044d6:	2301      	movs	r3, #1
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	e004      	b.n	80044e6 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80044dc:	4b10      	ldr	r3, [pc, #64]	; (8004520 <xTaskIncrementTick+0x160>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	4b0f      	ldr	r3, [pc, #60]	; (8004520 <xTaskIncrementTick+0x160>)
 80044e4:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80044e6:	4b0f      	ldr	r3, [pc, #60]	; (8004524 <xTaskIncrementTick+0x164>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 80044ee:	2301      	movs	r3, #1
 80044f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80044f2:	697b      	ldr	r3, [r7, #20]
}
 80044f4:	0018      	movs	r0, r3
 80044f6:	46bd      	mov	sp, r7
 80044f8:	b006      	add	sp, #24
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20000418 	.word	0x20000418
 8004500:	200003f4 	.word	0x200003f4
 8004504:	200003a8 	.word	0x200003a8
 8004508:	200003ac 	.word	0x200003ac
 800450c:	20000408 	.word	0x20000408
 8004510:	20000410 	.word	0x20000410
 8004514:	200003f8 	.word	0x200003f8
 8004518:	200002f4 	.word	0x200002f4
 800451c:	200002f0 	.word	0x200002f0
 8004520:	20000400 	.word	0x20000400
 8004524:	20000404 	.word	0x20000404

08004528 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800452e:	4b22      	ldr	r3, [pc, #136]	; (80045b8 <vTaskSwitchContext+0x90>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004536:	4b21      	ldr	r3, [pc, #132]	; (80045bc <vTaskSwitchContext+0x94>)
 8004538:	2201      	movs	r2, #1
 800453a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800453c:	e037      	b.n	80045ae <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800453e:	4b1f      	ldr	r3, [pc, #124]	; (80045bc <vTaskSwitchContext+0x94>)
 8004540:	2200      	movs	r2, #0
 8004542:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004544:	4b1e      	ldr	r3, [pc, #120]	; (80045c0 <vTaskSwitchContext+0x98>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	607b      	str	r3, [r7, #4]
 800454a:	e007      	b.n	800455c <vTaskSwitchContext+0x34>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <vTaskSwitchContext+0x2e>
 8004552:	b672      	cpsid	i
 8004554:	e7fe      	b.n	8004554 <vTaskSwitchContext+0x2c>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	3b01      	subs	r3, #1
 800455a:	607b      	str	r3, [r7, #4]
 800455c:	4919      	ldr	r1, [pc, #100]	; (80045c4 <vTaskSwitchContext+0x9c>)
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	0013      	movs	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	189b      	adds	r3, r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	585b      	ldr	r3, [r3, r1]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0ee      	beq.n	800454c <vTaskSwitchContext+0x24>
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	0013      	movs	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	189b      	adds	r3, r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4a12      	ldr	r2, [pc, #72]	; (80045c4 <vTaskSwitchContext+0x9c>)
 800457a:	189b      	adds	r3, r3, r2
 800457c:	603b      	str	r3, [r7, #0]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	605a      	str	r2, [r3, #4]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	3308      	adds	r3, #8
 8004590:	429a      	cmp	r2, r3
 8004592:	d104      	bne.n	800459e <vTaskSwitchContext+0x76>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	605a      	str	r2, [r3, #4]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	4b08      	ldr	r3, [pc, #32]	; (80045c8 <vTaskSwitchContext+0xa0>)
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <vTaskSwitchContext+0x98>)
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	601a      	str	r2, [r3, #0]
}
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	46bd      	mov	sp, r7
 80045b2:	b002      	add	sp, #8
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	46c0      	nop			; (mov r8, r8)
 80045b8:	20000418 	.word	0x20000418
 80045bc:	20000404 	.word	0x20000404
 80045c0:	200003f8 	.word	0x200003f8
 80045c4:	200002f4 	.word	0x200002f4
 80045c8:	200002f0 	.word	0x200002f0

080045cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <vTaskPlaceOnEventList+0x14>
 80045dc:	b672      	cpsid	i
 80045de:	e7fe      	b.n	80045de <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045e0:	4b08      	ldr	r3, [pc, #32]	; (8004604 <vTaskPlaceOnEventList+0x38>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3318      	adds	r3, #24
 80045e6:	001a      	movs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	0011      	movs	r1, r2
 80045ec:	0018      	movs	r0, r3
 80045ee:	f7ff f9c9 	bl	8003984 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2101      	movs	r1, #1
 80045f6:	0018      	movs	r0, r3
 80045f8:	f000 f9ba 	bl	8004970 <prvAddCurrentTaskToDelayedList>
}
 80045fc:	46c0      	nop			; (mov r8, r8)
 80045fe:	46bd      	mov	sp, r7
 8004600:	b002      	add	sp, #8
 8004602:	bd80      	pop	{r7, pc}
 8004604:	200002f0 	.word	0x200002f0

08004608 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <xTaskRemoveFromEventList+0x1a>
 800461e:	b672      	cpsid	i
 8004620:	e7fe      	b.n	8004620 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	3318      	adds	r3, #24
 8004626:	0018      	movs	r0, r3
 8004628:	f7ff f9e2 	bl	80039f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800462c:	4b1e      	ldr	r3, [pc, #120]	; (80046a8 <xTaskRemoveFromEventList+0xa0>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d11d      	bne.n	8004670 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	3304      	adds	r3, #4
 8004638:	0018      	movs	r0, r3
 800463a:	f7ff f9d9 	bl	80039f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004642:	4b1a      	ldr	r3, [pc, #104]	; (80046ac <xTaskRemoveFromEventList+0xa4>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d903      	bls.n	8004652 <xTaskRemoveFromEventList+0x4a>
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464e:	4b17      	ldr	r3, [pc, #92]	; (80046ac <xTaskRemoveFromEventList+0xa4>)
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004656:	0013      	movs	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	189b      	adds	r3, r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4a14      	ldr	r2, [pc, #80]	; (80046b0 <xTaskRemoveFromEventList+0xa8>)
 8004660:	189a      	adds	r2, r3, r2
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	3304      	adds	r3, #4
 8004666:	0019      	movs	r1, r3
 8004668:	0010      	movs	r0, r2
 800466a:	f7ff f969 	bl	8003940 <vListInsertEnd>
 800466e:	e007      	b.n	8004680 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	3318      	adds	r3, #24
 8004674:	001a      	movs	r2, r3
 8004676:	4b0f      	ldr	r3, [pc, #60]	; (80046b4 <xTaskRemoveFromEventList+0xac>)
 8004678:	0011      	movs	r1, r2
 800467a:	0018      	movs	r0, r3
 800467c:	f7ff f960 	bl	8003940 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004684:	4b0c      	ldr	r3, [pc, #48]	; (80046b8 <xTaskRemoveFromEventList+0xb0>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468a:	429a      	cmp	r2, r3
 800468c:	d905      	bls.n	800469a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800468e:	2301      	movs	r3, #1
 8004690:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004692:	4b0a      	ldr	r3, [pc, #40]	; (80046bc <xTaskRemoveFromEventList+0xb4>)
 8004694:	2201      	movs	r2, #1
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	e001      	b.n	800469e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800469a:	2300      	movs	r3, #0
 800469c:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800469e:	68fb      	ldr	r3, [r7, #12]
}
 80046a0:	0018      	movs	r0, r3
 80046a2:	46bd      	mov	sp, r7
 80046a4:	b004      	add	sp, #16
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	20000418 	.word	0x20000418
 80046ac:	200003f8 	.word	0x200003f8
 80046b0:	200002f4 	.word	0x200002f4
 80046b4:	200003b0 	.word	0x200003b0
 80046b8:	200002f0 	.word	0x200002f0
 80046bc:	20000404 	.word	0x20000404

080046c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80046c8:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <vTaskInternalSetTimeOutState+0x20>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80046d0:	4b04      	ldr	r3, [pc, #16]	; (80046e4 <vTaskInternalSetTimeOutState+0x24>)
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	605a      	str	r2, [r3, #4]
}
 80046d8:	46c0      	nop			; (mov r8, r8)
 80046da:	46bd      	mov	sp, r7
 80046dc:	b002      	add	sp, #8
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20000408 	.word	0x20000408
 80046e4:	200003f4 	.word	0x200003f4

080046e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <xTaskCheckForTimeOut+0x14>
 80046f8:	b672      	cpsid	i
 80046fa:	e7fe      	b.n	80046fa <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <xTaskCheckForTimeOut+0x1e>
 8004702:	b672      	cpsid	i
 8004704:	e7fe      	b.n	8004704 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8004706:	f000 fa23 	bl	8004b50 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800470a:	4b1d      	ldr	r3, [pc, #116]	; (8004780 <xTaskCheckForTimeOut+0x98>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3301      	adds	r3, #1
 8004720:	d102      	bne.n	8004728 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004722:	2300      	movs	r3, #0
 8004724:	617b      	str	r3, [r7, #20]
 8004726:	e024      	b.n	8004772 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	4b15      	ldr	r3, [pc, #84]	; (8004784 <xTaskCheckForTimeOut+0x9c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d007      	beq.n	8004744 <xTaskCheckForTimeOut+0x5c>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	429a      	cmp	r2, r3
 800473c:	d302      	bcc.n	8004744 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800473e:	2301      	movs	r3, #1
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	e016      	b.n	8004772 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	429a      	cmp	r2, r3
 800474c:	d20c      	bcs.n	8004768 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	1ad2      	subs	r2, r2, r3
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	0018      	movs	r0, r3
 800475e:	f7ff ffaf 	bl	80046c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004762:	2300      	movs	r3, #0
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	e004      	b.n	8004772 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2200      	movs	r2, #0
 800476c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800476e:	2301      	movs	r3, #1
 8004770:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004772:	f000 f9ff 	bl	8004b74 <vPortExitCritical>

	return xReturn;
 8004776:	697b      	ldr	r3, [r7, #20]
}
 8004778:	0018      	movs	r0, r3
 800477a:	46bd      	mov	sp, r7
 800477c:	b006      	add	sp, #24
 800477e:	bd80      	pop	{r7, pc}
 8004780:	200003f4 	.word	0x200003f4
 8004784:	20000408 	.word	0x20000408

08004788 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800478c:	4b02      	ldr	r3, [pc, #8]	; (8004798 <vTaskMissedYield+0x10>)
 800478e:	2201      	movs	r2, #1
 8004790:	601a      	str	r2, [r3, #0]
}
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	20000404 	.word	0x20000404

0800479c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80047a4:	f000 f84e 	bl	8004844 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80047a8:	4b03      	ldr	r3, [pc, #12]	; (80047b8 <prvIdleTask+0x1c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d9f9      	bls.n	80047a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80047b0:	f000 f9be 	bl	8004b30 <vPortYield>
		prvCheckTasksWaitingTermination();
 80047b4:	e7f6      	b.n	80047a4 <prvIdleTask+0x8>
 80047b6:	46c0      	nop			; (mov r8, r8)
 80047b8:	200002f4 	.word	0x200002f4

080047bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047c2:	2300      	movs	r3, #0
 80047c4:	607b      	str	r3, [r7, #4]
 80047c6:	e00c      	b.n	80047e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	0013      	movs	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	189b      	adds	r3, r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4a14      	ldr	r2, [pc, #80]	; (8004824 <prvInitialiseTaskLists+0x68>)
 80047d4:	189b      	adds	r3, r3, r2
 80047d6:	0018      	movs	r0, r3
 80047d8:	f7ff f889 	bl	80038ee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3301      	adds	r3, #1
 80047e0:	607b      	str	r3, [r7, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b06      	cmp	r3, #6
 80047e6:	d9ef      	bls.n	80047c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80047e8:	4b0f      	ldr	r3, [pc, #60]	; (8004828 <prvInitialiseTaskLists+0x6c>)
 80047ea:	0018      	movs	r0, r3
 80047ec:	f7ff f87f 	bl	80038ee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80047f0:	4b0e      	ldr	r3, [pc, #56]	; (800482c <prvInitialiseTaskLists+0x70>)
 80047f2:	0018      	movs	r0, r3
 80047f4:	f7ff f87b 	bl	80038ee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80047f8:	4b0d      	ldr	r3, [pc, #52]	; (8004830 <prvInitialiseTaskLists+0x74>)
 80047fa:	0018      	movs	r0, r3
 80047fc:	f7ff f877 	bl	80038ee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004800:	4b0c      	ldr	r3, [pc, #48]	; (8004834 <prvInitialiseTaskLists+0x78>)
 8004802:	0018      	movs	r0, r3
 8004804:	f7ff f873 	bl	80038ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004808:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <prvInitialiseTaskLists+0x7c>)
 800480a:	0018      	movs	r0, r3
 800480c:	f7ff f86f 	bl	80038ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004810:	4b0a      	ldr	r3, [pc, #40]	; (800483c <prvInitialiseTaskLists+0x80>)
 8004812:	4a05      	ldr	r2, [pc, #20]	; (8004828 <prvInitialiseTaskLists+0x6c>)
 8004814:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004816:	4b0a      	ldr	r3, [pc, #40]	; (8004840 <prvInitialiseTaskLists+0x84>)
 8004818:	4a04      	ldr	r2, [pc, #16]	; (800482c <prvInitialiseTaskLists+0x70>)
 800481a:	601a      	str	r2, [r3, #0]
}
 800481c:	46c0      	nop			; (mov r8, r8)
 800481e:	46bd      	mov	sp, r7
 8004820:	b002      	add	sp, #8
 8004822:	bd80      	pop	{r7, pc}
 8004824:	200002f4 	.word	0x200002f4
 8004828:	20000380 	.word	0x20000380
 800482c:	20000394 	.word	0x20000394
 8004830:	200003b0 	.word	0x200003b0
 8004834:	200003c4 	.word	0x200003c4
 8004838:	200003dc 	.word	0x200003dc
 800483c:	200003a8 	.word	0x200003a8
 8004840:	200003ac 	.word	0x200003ac

08004844 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800484a:	e01a      	b.n	8004882 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800484c:	f000 f980 	bl	8004b50 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004850:	4b10      	ldr	r3, [pc, #64]	; (8004894 <prvCheckTasksWaitingTermination+0x50>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3304      	adds	r3, #4
 800485c:	0018      	movs	r0, r3
 800485e:	f7ff f8c7 	bl	80039f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004862:	4b0d      	ldr	r3, [pc, #52]	; (8004898 <prvCheckTasksWaitingTermination+0x54>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	1e5a      	subs	r2, r3, #1
 8004868:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <prvCheckTasksWaitingTermination+0x54>)
 800486a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800486c:	4b0b      	ldr	r3, [pc, #44]	; (800489c <prvCheckTasksWaitingTermination+0x58>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	1e5a      	subs	r2, r3, #1
 8004872:	4b0a      	ldr	r3, [pc, #40]	; (800489c <prvCheckTasksWaitingTermination+0x58>)
 8004874:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004876:	f000 f97d 	bl	8004b74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	0018      	movs	r0, r3
 800487e:	f000 f80f 	bl	80048a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004882:	4b06      	ldr	r3, [pc, #24]	; (800489c <prvCheckTasksWaitingTermination+0x58>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1e0      	bne.n	800484c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	46bd      	mov	sp, r7
 800488e:	b002      	add	sp, #8
 8004890:	bd80      	pop	{r7, pc}
 8004892:	46c0      	nop			; (mov r8, r8)
 8004894:	200003c4 	.word	0x200003c4
 8004898:	200003f0 	.word	0x200003f0
 800489c:	200003d8 	.word	0x200003d8

080048a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2251      	movs	r2, #81	; 0x51
 80048ac:	5c9b      	ldrb	r3, [r3, r2]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d109      	bne.n	80048c6 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b6:	0018      	movs	r0, r3
 80048b8:	f000 fa88 	bl	8004dcc <vPortFree>
				vPortFree( pxTCB );
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	0018      	movs	r0, r3
 80048c0:	f000 fa84 	bl	8004dcc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80048c4:	e010      	b.n	80048e8 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2251      	movs	r2, #81	; 0x51
 80048ca:	5c9b      	ldrb	r3, [r3, r2]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d104      	bne.n	80048da <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	0018      	movs	r0, r3
 80048d4:	f000 fa7a 	bl	8004dcc <vPortFree>
	}
 80048d8:	e006      	b.n	80048e8 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2251      	movs	r2, #81	; 0x51
 80048de:	5c9b      	ldrb	r3, [r3, r2]
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d001      	beq.n	80048e8 <prvDeleteTCB+0x48>
 80048e4:	b672      	cpsid	i
 80048e6:	e7fe      	b.n	80048e6 <prvDeleteTCB+0x46>
	}
 80048e8:	46c0      	nop			; (mov r8, r8)
 80048ea:	46bd      	mov	sp, r7
 80048ec:	b002      	add	sp, #8
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048f6:	4b0e      	ldr	r3, [pc, #56]	; (8004930 <prvResetNextTaskUnblockTime+0x40>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <prvResetNextTaskUnblockTime+0x14>
 8004900:	2301      	movs	r3, #1
 8004902:	e000      	b.n	8004906 <prvResetNextTaskUnblockTime+0x16>
 8004904:	2300      	movs	r3, #0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d004      	beq.n	8004914 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800490a:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <prvResetNextTaskUnblockTime+0x44>)
 800490c:	2201      	movs	r2, #1
 800490e:	4252      	negs	r2, r2
 8004910:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004912:	e008      	b.n	8004926 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004914:	4b06      	ldr	r3, [pc, #24]	; (8004930 <prvResetNextTaskUnblockTime+0x40>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	4b04      	ldr	r3, [pc, #16]	; (8004934 <prvResetNextTaskUnblockTime+0x44>)
 8004924:	601a      	str	r2, [r3, #0]
}
 8004926:	46c0      	nop			; (mov r8, r8)
 8004928:	46bd      	mov	sp, r7
 800492a:	b002      	add	sp, #8
 800492c:	bd80      	pop	{r7, pc}
 800492e:	46c0      	nop			; (mov r8, r8)
 8004930:	200003a8 	.word	0x200003a8
 8004934:	20000410 	.word	0x20000410

08004938 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800493e:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <xTaskGetSchedulerState+0x30>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d102      	bne.n	800494c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004946:	2301      	movs	r3, #1
 8004948:	607b      	str	r3, [r7, #4]
 800494a:	e008      	b.n	800495e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800494c:	4b07      	ldr	r3, [pc, #28]	; (800496c <xTaskGetSchedulerState+0x34>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d102      	bne.n	800495a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004954:	2302      	movs	r3, #2
 8004956:	607b      	str	r3, [r7, #4]
 8004958:	e001      	b.n	800495e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800495a:	2300      	movs	r3, #0
 800495c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800495e:	687b      	ldr	r3, [r7, #4]
	}
 8004960:	0018      	movs	r0, r3
 8004962:	46bd      	mov	sp, r7
 8004964:	b002      	add	sp, #8
 8004966:	bd80      	pop	{r7, pc}
 8004968:	200003fc 	.word	0x200003fc
 800496c:	20000418 	.word	0x20000418

08004970 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800497a:	4b21      	ldr	r3, [pc, #132]	; (8004a00 <prvAddCurrentTaskToDelayedList+0x90>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004980:	4b20      	ldr	r3, [pc, #128]	; (8004a04 <prvAddCurrentTaskToDelayedList+0x94>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3304      	adds	r3, #4
 8004986:	0018      	movs	r0, r3
 8004988:	f7ff f832 	bl	80039f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3301      	adds	r3, #1
 8004990:	d10b      	bne.n	80049aa <prvAddCurrentTaskToDelayedList+0x3a>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d008      	beq.n	80049aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004998:	4b1a      	ldr	r3, [pc, #104]	; (8004a04 <prvAddCurrentTaskToDelayedList+0x94>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	1d1a      	adds	r2, r3, #4
 800499e:	4b1a      	ldr	r3, [pc, #104]	; (8004a08 <prvAddCurrentTaskToDelayedList+0x98>)
 80049a0:	0011      	movs	r1, r2
 80049a2:	0018      	movs	r0, r3
 80049a4:	f7fe ffcc 	bl	8003940 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80049a8:	e026      	b.n	80049f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	18d3      	adds	r3, r2, r3
 80049b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80049b2:	4b14      	ldr	r3, [pc, #80]	; (8004a04 <prvAddCurrentTaskToDelayedList+0x94>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d209      	bcs.n	80049d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049c2:	4b12      	ldr	r3, [pc, #72]	; (8004a0c <prvAddCurrentTaskToDelayedList+0x9c>)
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	4b0f      	ldr	r3, [pc, #60]	; (8004a04 <prvAddCurrentTaskToDelayedList+0x94>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	3304      	adds	r3, #4
 80049cc:	0019      	movs	r1, r3
 80049ce:	0010      	movs	r0, r2
 80049d0:	f7fe ffd8 	bl	8003984 <vListInsert>
}
 80049d4:	e010      	b.n	80049f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049d6:	4b0e      	ldr	r3, [pc, #56]	; (8004a10 <prvAddCurrentTaskToDelayedList+0xa0>)
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	4b0a      	ldr	r3, [pc, #40]	; (8004a04 <prvAddCurrentTaskToDelayedList+0x94>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	3304      	adds	r3, #4
 80049e0:	0019      	movs	r1, r3
 80049e2:	0010      	movs	r0, r2
 80049e4:	f7fe ffce 	bl	8003984 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049e8:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <prvAddCurrentTaskToDelayedList+0xa4>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d202      	bcs.n	80049f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80049f2:	4b08      	ldr	r3, [pc, #32]	; (8004a14 <prvAddCurrentTaskToDelayedList+0xa4>)
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	601a      	str	r2, [r3, #0]
}
 80049f8:	46c0      	nop			; (mov r8, r8)
 80049fa:	46bd      	mov	sp, r7
 80049fc:	b004      	add	sp, #16
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	200003f4 	.word	0x200003f4
 8004a04:	200002f0 	.word	0x200002f0
 8004a08:	200003dc 	.word	0x200003dc
 8004a0c:	200003ac 	.word	0x200003ac
 8004a10:	200003a8 	.word	0x200003a8
 8004a14:	20000410 	.word	0x20000410

08004a18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	3b04      	subs	r3, #4
 8004a28:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2280      	movs	r2, #128	; 0x80
 8004a2e:	0452      	lsls	r2, r2, #17
 8004a30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	3b04      	subs	r3, #4
 8004a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3b04      	subs	r3, #4
 8004a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a44:	4a08      	ldr	r2, [pc, #32]	; (8004a68 <pxPortInitialiseStack+0x50>)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	3b14      	subs	r3, #20
 8004a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	3b20      	subs	r3, #32
 8004a5a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
}
 8004a5e:	0018      	movs	r0, r3
 8004a60:	46bd      	mov	sp, r7
 8004a62:	b004      	add	sp, #16
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	46c0      	nop			; (mov r8, r8)
 8004a68:	08004a6d 	.word	0x08004a6d

08004a6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004a72:	2300      	movs	r3, #0
 8004a74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a76:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <prvTaskExitError+0x28>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	d001      	beq.n	8004a82 <prvTaskExitError+0x16>
 8004a7e:	b672      	cpsid	i
 8004a80:	e7fe      	b.n	8004a80 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8004a82:	b672      	cpsid	i
	while( ulDummy == 0 )
 8004a84:	46c0      	nop			; (mov r8, r8)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0fc      	beq.n	8004a86 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a8c:	46c0      	nop			; (mov r8, r8)
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b002      	add	sp, #8
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	20000014 	.word	0x20000014

08004a98 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8004a9c:	46c0      	nop			; (mov r8, r8)
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004ab0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8004ab0:	4a0b      	ldr	r2, [pc, #44]	; (8004ae0 <pxCurrentTCBConst2>)
 8004ab2:	6813      	ldr	r3, [r2, #0]
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	3020      	adds	r0, #32
 8004ab8:	f380 8809 	msr	PSP, r0
 8004abc:	2002      	movs	r0, #2
 8004abe:	f380 8814 	msr	CONTROL, r0
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004ac8:	46ae      	mov	lr, r5
 8004aca:	bc08      	pop	{r3}
 8004acc:	bc04      	pop	{r2}
 8004ace:	b662      	cpsie	i
 8004ad0:	4718      	bx	r3
 8004ad2:	46c0      	nop			; (mov r8, r8)
 8004ad4:	46c0      	nop			; (mov r8, r8)
 8004ad6:	46c0      	nop			; (mov r8, r8)
 8004ad8:	46c0      	nop			; (mov r8, r8)
 8004ada:	46c0      	nop			; (mov r8, r8)
 8004adc:	46c0      	nop			; (mov r8, r8)
 8004ade:	46c0      	nop			; (mov r8, r8)

08004ae0 <pxCurrentTCBConst2>:
 8004ae0:	200002f0 	.word	0x200002f0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8004ae4:	46c0      	nop			; (mov r8, r8)
 8004ae6:	46c0      	nop			; (mov r8, r8)

08004ae8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8004aec:	4b0e      	ldr	r3, [pc, #56]	; (8004b28 <xPortStartScheduler+0x40>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	4b0d      	ldr	r3, [pc, #52]	; (8004b28 <xPortStartScheduler+0x40>)
 8004af2:	21ff      	movs	r1, #255	; 0xff
 8004af4:	0409      	lsls	r1, r1, #16
 8004af6:	430a      	orrs	r2, r1
 8004af8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8004afa:	4b0b      	ldr	r3, [pc, #44]	; (8004b28 <xPortStartScheduler+0x40>)
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	4b0a      	ldr	r3, [pc, #40]	; (8004b28 <xPortStartScheduler+0x40>)
 8004b00:	21ff      	movs	r1, #255	; 0xff
 8004b02:	0609      	lsls	r1, r1, #24
 8004b04:	430a      	orrs	r2, r1
 8004b06:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8004b08:	f000 f898 	bl	8004c3c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b0c:	4b07      	ldr	r3, [pc, #28]	; (8004b2c <xPortStartScheduler+0x44>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8004b12:	f7ff ffcd 	bl	8004ab0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b16:	f7ff fd07 	bl	8004528 <vTaskSwitchContext>
	prvTaskExitError();
 8004b1a:	f7ff ffa7 	bl	8004a6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	0018      	movs	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	e000ed20 	.word	0xe000ed20
 8004b2c:	20000014 	.word	0x20000014

08004b30 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8004b34:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <vPortYield+0x1c>)
 8004b36:	2280      	movs	r2, #128	; 0x80
 8004b38:	0552      	lsls	r2, r2, #21
 8004b3a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8004b3c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004b40:	f3bf 8f6f 	isb	sy
}
 8004b44:	46c0      	nop			; (mov r8, r8)
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	e000ed04 	.word	0xe000ed04

08004b50 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004b54:	b672      	cpsid	i
    uxCriticalNesting++;
 8004b56:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <vPortEnterCritical+0x20>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	4b04      	ldr	r3, [pc, #16]	; (8004b70 <vPortEnterCritical+0x20>)
 8004b5e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004b60:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004b64:	f3bf 8f6f 	isb	sy
}
 8004b68:	46c0      	nop			; (mov r8, r8)
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	46c0      	nop			; (mov r8, r8)
 8004b70:	20000014 	.word	0x20000014

08004b74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b78:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <vPortExitCritical+0x2c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <vPortExitCritical+0x10>
 8004b80:	b672      	cpsid	i
 8004b82:	e7fe      	b.n	8004b82 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8004b84:	4b06      	ldr	r3, [pc, #24]	; (8004ba0 <vPortExitCritical+0x2c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	1e5a      	subs	r2, r3, #1
 8004b8a:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <vPortExitCritical+0x2c>)
 8004b8c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8004b8e:	4b04      	ldr	r3, [pc, #16]	; (8004ba0 <vPortExitCritical+0x2c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d100      	bne.n	8004b98 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8004b96:	b662      	cpsie	i
    }
}
 8004b98:	46c0      	nop			; (mov r8, r8)
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	46c0      	nop			; (mov r8, r8)
 8004ba0:	20000014 	.word	0x20000014

08004ba4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8004ba4:	f3ef 8010 	mrs	r0, PRIMASK
 8004ba8:	b672      	cpsid	i
 8004baa:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8004bac:	46c0      	nop			; (mov r8, r8)
 8004bae:	0018      	movs	r0, r3

08004bb0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8004bb0:	f380 8810 	msr	PRIMASK, r0
 8004bb4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8004bb6:	46c0      	nop			; (mov r8, r8)
	...

08004bc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004bc0:	f3ef 8009 	mrs	r0, PSP
 8004bc4:	4b0e      	ldr	r3, [pc, #56]	; (8004c00 <pxCurrentTCBConst>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	3820      	subs	r0, #32
 8004bca:	6010      	str	r0, [r2, #0]
 8004bcc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004bce:	4644      	mov	r4, r8
 8004bd0:	464d      	mov	r5, r9
 8004bd2:	4656      	mov	r6, sl
 8004bd4:	465f      	mov	r7, fp
 8004bd6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004bd8:	b508      	push	{r3, lr}
 8004bda:	b672      	cpsid	i
 8004bdc:	f7ff fca4 	bl	8004528 <vTaskSwitchContext>
 8004be0:	b662      	cpsie	i
 8004be2:	bc0c      	pop	{r2, r3}
 8004be4:	6811      	ldr	r1, [r2, #0]
 8004be6:	6808      	ldr	r0, [r1, #0]
 8004be8:	3010      	adds	r0, #16
 8004bea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004bec:	46a0      	mov	r8, r4
 8004bee:	46a9      	mov	r9, r5
 8004bf0:	46b2      	mov	sl, r6
 8004bf2:	46bb      	mov	fp, r7
 8004bf4:	f380 8809 	msr	PSP, r0
 8004bf8:	3820      	subs	r0, #32
 8004bfa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004bfc:	4718      	bx	r3
 8004bfe:	46c0      	nop			; (mov r8, r8)

08004c00 <pxCurrentTCBConst>:
 8004c00:	200002f0 	.word	0x200002f0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8004c04:	46c0      	nop			; (mov r8, r8)
 8004c06:	46c0      	nop			; (mov r8, r8)

08004c08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c0e:	f7ff ffc9 	bl	8004ba4 <ulSetInterruptMaskFromISR>
 8004c12:	0003      	movs	r3, r0
 8004c14:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c16:	f7ff fbd3 	bl	80043c0 <xTaskIncrementTick>
 8004c1a:	1e03      	subs	r3, r0, #0
 8004c1c:	d003      	beq.n	8004c26 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8004c1e:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <SysTick_Handler+0x30>)
 8004c20:	2280      	movs	r2, #128	; 0x80
 8004c22:	0552      	lsls	r2, r2, #21
 8004c24:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f7ff ffc1 	bl	8004bb0 <vClearInterruptMaskFromISR>
}
 8004c2e:	46c0      	nop			; (mov r8, r8)
 8004c30:	46bd      	mov	sp, r7
 8004c32:	b002      	add	sp, #8
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	46c0      	nop			; (mov r8, r8)
 8004c38:	e000ed04 	.word	0xe000ed04

08004c3c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8004c40:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <prvSetupTimerInterrupt+0x34>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8004c46:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <prvSetupTimerInterrupt+0x38>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c4c:	4b0a      	ldr	r3, [pc, #40]	; (8004c78 <prvSetupTimerInterrupt+0x3c>)
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	23fa      	movs	r3, #250	; 0xfa
 8004c52:	0099      	lsls	r1, r3, #2
 8004c54:	0010      	movs	r0, r2
 8004c56:	f7fb fa57 	bl	8000108 <__udivsi3>
 8004c5a:	0003      	movs	r3, r0
 8004c5c:	001a      	movs	r2, r3
 8004c5e:	4b07      	ldr	r3, [pc, #28]	; (8004c7c <prvSetupTimerInterrupt+0x40>)
 8004c60:	3a01      	subs	r2, #1
 8004c62:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8004c64:	4b02      	ldr	r3, [pc, #8]	; (8004c70 <prvSetupTimerInterrupt+0x34>)
 8004c66:	2207      	movs	r2, #7
 8004c68:	601a      	str	r2, [r3, #0]
}
 8004c6a:	46c0      	nop			; (mov r8, r8)
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	e000e010 	.word	0xe000e010
 8004c74:	e000e018 	.word	0xe000e018
 8004c78:	2000000c 	.word	0x2000000c
 8004c7c:	e000e014 	.word	0xe000e014

08004c80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8004c8c:	f7ff fb00 	bl	8004290 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c90:	4b49      	ldr	r3, [pc, #292]	; (8004db8 <pvPortMalloc+0x138>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c98:	f000 f8e0 	bl	8004e5c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c9c:	4b47      	ldr	r3, [pc, #284]	; (8004dbc <pvPortMalloc+0x13c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	d000      	beq.n	8004ca8 <pvPortMalloc+0x28>
 8004ca6:	e079      	b.n	8004d9c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d012      	beq.n	8004cd4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8004cae:	2208      	movs	r2, #8
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	189b      	adds	r3, r3, r2
 8004cb4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2207      	movs	r2, #7
 8004cba:	4013      	ands	r3, r2
 8004cbc:	d00a      	beq.n	8004cd4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2207      	movs	r2, #7
 8004cc2:	4393      	bics	r3, r2
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2207      	movs	r2, #7
 8004ccc:	4013      	ands	r3, r2
 8004cce:	d001      	beq.n	8004cd4 <pvPortMalloc+0x54>
 8004cd0:	b672      	cpsid	i
 8004cd2:	e7fe      	b.n	8004cd2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d060      	beq.n	8004d9c <pvPortMalloc+0x11c>
 8004cda:	4b39      	ldr	r3, [pc, #228]	; (8004dc0 <pvPortMalloc+0x140>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d85b      	bhi.n	8004d9c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ce4:	4b37      	ldr	r3, [pc, #220]	; (8004dc4 <pvPortMalloc+0x144>)
 8004ce6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8004ce8:	4b36      	ldr	r3, [pc, #216]	; (8004dc4 <pvPortMalloc+0x144>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cee:	e004      	b.n	8004cfa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d903      	bls.n	8004d0c <pvPortMalloc+0x8c>
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1f1      	bne.n	8004cf0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d0c:	4b2a      	ldr	r3, [pc, #168]	; (8004db8 <pvPortMalloc+0x138>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d042      	beq.n	8004d9c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2208      	movs	r2, #8
 8004d1c:	189b      	adds	r3, r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	1ad2      	subs	r2, r2, r3
 8004d30:	2308      	movs	r3, #8
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d916      	bls.n	8004d66 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	18d3      	adds	r3, r2, r3
 8004d3e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2207      	movs	r2, #7
 8004d44:	4013      	ands	r3, r2
 8004d46:	d001      	beq.n	8004d4c <pvPortMalloc+0xcc>
 8004d48:	b672      	cpsid	i
 8004d4a:	e7fe      	b.n	8004d4a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	1ad2      	subs	r2, r2, r3
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	0018      	movs	r0, r3
 8004d62:	f000 f8db 	bl	8004f1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d66:	4b16      	ldr	r3, [pc, #88]	; (8004dc0 <pvPortMalloc+0x140>)
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	1ad2      	subs	r2, r2, r3
 8004d70:	4b13      	ldr	r3, [pc, #76]	; (8004dc0 <pvPortMalloc+0x140>)
 8004d72:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d74:	4b12      	ldr	r3, [pc, #72]	; (8004dc0 <pvPortMalloc+0x140>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	4b13      	ldr	r3, [pc, #76]	; (8004dc8 <pvPortMalloc+0x148>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d203      	bcs.n	8004d88 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d80:	4b0f      	ldr	r3, [pc, #60]	; (8004dc0 <pvPortMalloc+0x140>)
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	4b10      	ldr	r3, [pc, #64]	; (8004dc8 <pvPortMalloc+0x148>)
 8004d86:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	4b0b      	ldr	r3, [pc, #44]	; (8004dbc <pvPortMalloc+0x13c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	431a      	orrs	r2, r3
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d9c:	f7ff fa84 	bl	80042a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2207      	movs	r2, #7
 8004da4:	4013      	ands	r3, r2
 8004da6:	d001      	beq.n	8004dac <pvPortMalloc+0x12c>
 8004da8:	b672      	cpsid	i
 8004daa:	e7fe      	b.n	8004daa <pvPortMalloc+0x12a>
	return pvReturn;
 8004dac:	68fb      	ldr	r3, [r7, #12]
}
 8004dae:	0018      	movs	r0, r3
 8004db0:	46bd      	mov	sp, r7
 8004db2:	b006      	add	sp, #24
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	46c0      	nop			; (mov r8, r8)
 8004db8:	20001024 	.word	0x20001024
 8004dbc:	20001030 	.word	0x20001030
 8004dc0:	20001028 	.word	0x20001028
 8004dc4:	2000101c 	.word	0x2000101c
 8004dc8:	2000102c 	.word	0x2000102c

08004dcc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d035      	beq.n	8004e4a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004dde:	2308      	movs	r3, #8
 8004de0:	425b      	negs	r3, r3
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	18d3      	adds	r3, r2, r3
 8004de6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	4b18      	ldr	r3, [pc, #96]	; (8004e54 <vPortFree+0x88>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4013      	ands	r3, r2
 8004df6:	d101      	bne.n	8004dfc <vPortFree+0x30>
 8004df8:	b672      	cpsid	i
 8004dfa:	e7fe      	b.n	8004dfa <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <vPortFree+0x3c>
 8004e04:	b672      	cpsid	i
 8004e06:	e7fe      	b.n	8004e06 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	4b11      	ldr	r3, [pc, #68]	; (8004e54 <vPortFree+0x88>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4013      	ands	r3, r2
 8004e12:	d01a      	beq.n	8004e4a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d116      	bne.n	8004e4a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	4b0c      	ldr	r3, [pc, #48]	; (8004e54 <vPortFree+0x88>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	43db      	mvns	r3, r3
 8004e26:	401a      	ands	r2, r3
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e2c:	f7ff fa30 	bl	8004290 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	4b08      	ldr	r3, [pc, #32]	; (8004e58 <vPortFree+0x8c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	18d2      	adds	r2, r2, r3
 8004e3a:	4b07      	ldr	r3, [pc, #28]	; (8004e58 <vPortFree+0x8c>)
 8004e3c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	0018      	movs	r0, r3
 8004e42:	f000 f86b 	bl	8004f1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004e46:	f7ff fa2f 	bl	80042a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e4a:	46c0      	nop			; (mov r8, r8)
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	b004      	add	sp, #16
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	46c0      	nop			; (mov r8, r8)
 8004e54:	20001030 	.word	0x20001030
 8004e58:	20001028 	.word	0x20001028

08004e5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e62:	23c0      	movs	r3, #192	; 0xc0
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e68:	4b26      	ldr	r3, [pc, #152]	; (8004f04 <prvHeapInit+0xa8>)
 8004e6a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2207      	movs	r2, #7
 8004e70:	4013      	ands	r3, r2
 8004e72:	d00c      	beq.n	8004e8e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	3307      	adds	r3, #7
 8004e78:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2207      	movs	r2, #7
 8004e7e:	4393      	bics	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	1ad2      	subs	r2, r2, r3
 8004e88:	4b1e      	ldr	r3, [pc, #120]	; (8004f04 <prvHeapInit+0xa8>)
 8004e8a:	18d3      	adds	r3, r2, r3
 8004e8c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e92:	4b1d      	ldr	r3, [pc, #116]	; (8004f08 <prvHeapInit+0xac>)
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e98:	4b1b      	ldr	r3, [pc, #108]	; (8004f08 <prvHeapInit+0xac>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	18d3      	adds	r3, r2, r3
 8004ea4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ea6:	2208      	movs	r2, #8
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	1a9b      	subs	r3, r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2207      	movs	r2, #7
 8004eb2:	4393      	bics	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4b14      	ldr	r3, [pc, #80]	; (8004f0c <prvHeapInit+0xb0>)
 8004eba:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8004ebc:	4b13      	ldr	r3, [pc, #76]	; (8004f0c <prvHeapInit+0xb0>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ec4:	4b11      	ldr	r3, [pc, #68]	; (8004f0c <prvHeapInit+0xb0>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	1ad2      	subs	r2, r2, r3
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004eda:	4b0c      	ldr	r3, [pc, #48]	; (8004f0c <prvHeapInit+0xb0>)
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	4b0a      	ldr	r3, [pc, #40]	; (8004f10 <prvHeapInit+0xb4>)
 8004ee8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	4b09      	ldr	r3, [pc, #36]	; (8004f14 <prvHeapInit+0xb8>)
 8004ef0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ef2:	4b09      	ldr	r3, [pc, #36]	; (8004f18 <prvHeapInit+0xbc>)
 8004ef4:	2280      	movs	r2, #128	; 0x80
 8004ef6:	0612      	lsls	r2, r2, #24
 8004ef8:	601a      	str	r2, [r3, #0]
}
 8004efa:	46c0      	nop			; (mov r8, r8)
 8004efc:	46bd      	mov	sp, r7
 8004efe:	b004      	add	sp, #16
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	46c0      	nop			; (mov r8, r8)
 8004f04:	2000041c 	.word	0x2000041c
 8004f08:	2000101c 	.word	0x2000101c
 8004f0c:	20001024 	.word	0x20001024
 8004f10:	2000102c 	.word	0x2000102c
 8004f14:	20001028 	.word	0x20001028
 8004f18:	20001030 	.word	0x20001030

08004f1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f24:	4b27      	ldr	r3, [pc, #156]	; (8004fc4 <prvInsertBlockIntoFreeList+0xa8>)
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	e002      	b.n	8004f30 <prvInsertBlockIntoFreeList+0x14>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d8f7      	bhi.n	8004f2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	18d3      	adds	r3, r2, r3
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d108      	bne.n	8004f5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	18d2      	adds	r2, r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	18d2      	adds	r2, r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d118      	bne.n	8004fa4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	4b14      	ldr	r3, [pc, #80]	; (8004fc8 <prvInsertBlockIntoFreeList+0xac>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d00d      	beq.n	8004f9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	18d2      	adds	r2, r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	e008      	b.n	8004fac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f9a:	4b0b      	ldr	r3, [pc, #44]	; (8004fc8 <prvInsertBlockIntoFreeList+0xac>)
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	e003      	b.n	8004fac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d002      	beq.n	8004fba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fba:	46c0      	nop			; (mov r8, r8)
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	b004      	add	sp, #16
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	46c0      	nop			; (mov r8, r8)
 8004fc4:	2000101c 	.word	0x2000101c
 8004fc8:	20001024 	.word	0x20001024

08004fcc <__errno>:
 8004fcc:	4b01      	ldr	r3, [pc, #4]	; (8004fd4 <__errno+0x8>)
 8004fce:	6818      	ldr	r0, [r3, #0]
 8004fd0:	4770      	bx	lr
 8004fd2:	46c0      	nop			; (mov r8, r8)
 8004fd4:	20000018 	.word	0x20000018

08004fd8 <__libc_init_array>:
 8004fd8:	b570      	push	{r4, r5, r6, lr}
 8004fda:	2600      	movs	r6, #0
 8004fdc:	4d0c      	ldr	r5, [pc, #48]	; (8005010 <__libc_init_array+0x38>)
 8004fde:	4c0d      	ldr	r4, [pc, #52]	; (8005014 <__libc_init_array+0x3c>)
 8004fe0:	1b64      	subs	r4, r4, r5
 8004fe2:	10a4      	asrs	r4, r4, #2
 8004fe4:	42a6      	cmp	r6, r4
 8004fe6:	d109      	bne.n	8004ffc <__libc_init_array+0x24>
 8004fe8:	2600      	movs	r6, #0
 8004fea:	f000 ff43 	bl	8005e74 <_init>
 8004fee:	4d0a      	ldr	r5, [pc, #40]	; (8005018 <__libc_init_array+0x40>)
 8004ff0:	4c0a      	ldr	r4, [pc, #40]	; (800501c <__libc_init_array+0x44>)
 8004ff2:	1b64      	subs	r4, r4, r5
 8004ff4:	10a4      	asrs	r4, r4, #2
 8004ff6:	42a6      	cmp	r6, r4
 8004ff8:	d105      	bne.n	8005006 <__libc_init_array+0x2e>
 8004ffa:	bd70      	pop	{r4, r5, r6, pc}
 8004ffc:	00b3      	lsls	r3, r6, #2
 8004ffe:	58eb      	ldr	r3, [r5, r3]
 8005000:	4798      	blx	r3
 8005002:	3601      	adds	r6, #1
 8005004:	e7ee      	b.n	8004fe4 <__libc_init_array+0xc>
 8005006:	00b3      	lsls	r3, r6, #2
 8005008:	58eb      	ldr	r3, [r5, r3]
 800500a:	4798      	blx	r3
 800500c:	3601      	adds	r6, #1
 800500e:	e7f2      	b.n	8004ff6 <__libc_init_array+0x1e>
 8005010:	0800601c 	.word	0x0800601c
 8005014:	0800601c 	.word	0x0800601c
 8005018:	0800601c 	.word	0x0800601c
 800501c:	08006020 	.word	0x08006020

08005020 <memcpy>:
 8005020:	2300      	movs	r3, #0
 8005022:	b510      	push	{r4, lr}
 8005024:	429a      	cmp	r2, r3
 8005026:	d100      	bne.n	800502a <memcpy+0xa>
 8005028:	bd10      	pop	{r4, pc}
 800502a:	5ccc      	ldrb	r4, [r1, r3]
 800502c:	54c4      	strb	r4, [r0, r3]
 800502e:	3301      	adds	r3, #1
 8005030:	e7f8      	b.n	8005024 <memcpy+0x4>

08005032 <memset>:
 8005032:	0003      	movs	r3, r0
 8005034:	1812      	adds	r2, r2, r0
 8005036:	4293      	cmp	r3, r2
 8005038:	d100      	bne.n	800503c <memset+0xa>
 800503a:	4770      	bx	lr
 800503c:	7019      	strb	r1, [r3, #0]
 800503e:	3301      	adds	r3, #1
 8005040:	e7f9      	b.n	8005036 <memset+0x4>
	...

08005044 <iprintf>:
 8005044:	b40f      	push	{r0, r1, r2, r3}
 8005046:	4b0b      	ldr	r3, [pc, #44]	; (8005074 <iprintf+0x30>)
 8005048:	b513      	push	{r0, r1, r4, lr}
 800504a:	681c      	ldr	r4, [r3, #0]
 800504c:	2c00      	cmp	r4, #0
 800504e:	d005      	beq.n	800505c <iprintf+0x18>
 8005050:	69a3      	ldr	r3, [r4, #24]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d102      	bne.n	800505c <iprintf+0x18>
 8005056:	0020      	movs	r0, r4
 8005058:	f000 f850 	bl	80050fc <__sinit>
 800505c:	ab05      	add	r3, sp, #20
 800505e:	9a04      	ldr	r2, [sp, #16]
 8005060:	68a1      	ldr	r1, [r4, #8]
 8005062:	0020      	movs	r0, r4
 8005064:	9301      	str	r3, [sp, #4]
 8005066:	f000 f963 	bl	8005330 <_vfiprintf_r>
 800506a:	bc16      	pop	{r1, r2, r4}
 800506c:	bc08      	pop	{r3}
 800506e:	b004      	add	sp, #16
 8005070:	4718      	bx	r3
 8005072:	46c0      	nop			; (mov r8, r8)
 8005074:	20000018 	.word	0x20000018

08005078 <std>:
 8005078:	2300      	movs	r3, #0
 800507a:	b510      	push	{r4, lr}
 800507c:	0004      	movs	r4, r0
 800507e:	6003      	str	r3, [r0, #0]
 8005080:	6043      	str	r3, [r0, #4]
 8005082:	6083      	str	r3, [r0, #8]
 8005084:	8181      	strh	r1, [r0, #12]
 8005086:	6643      	str	r3, [r0, #100]	; 0x64
 8005088:	81c2      	strh	r2, [r0, #14]
 800508a:	6103      	str	r3, [r0, #16]
 800508c:	6143      	str	r3, [r0, #20]
 800508e:	6183      	str	r3, [r0, #24]
 8005090:	0019      	movs	r1, r3
 8005092:	2208      	movs	r2, #8
 8005094:	305c      	adds	r0, #92	; 0x5c
 8005096:	f7ff ffcc 	bl	8005032 <memset>
 800509a:	4b05      	ldr	r3, [pc, #20]	; (80050b0 <std+0x38>)
 800509c:	6224      	str	r4, [r4, #32]
 800509e:	6263      	str	r3, [r4, #36]	; 0x24
 80050a0:	4b04      	ldr	r3, [pc, #16]	; (80050b4 <std+0x3c>)
 80050a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80050a4:	4b04      	ldr	r3, [pc, #16]	; (80050b8 <std+0x40>)
 80050a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050a8:	4b04      	ldr	r3, [pc, #16]	; (80050bc <std+0x44>)
 80050aa:	6323      	str	r3, [r4, #48]	; 0x30
 80050ac:	bd10      	pop	{r4, pc}
 80050ae:	46c0      	nop			; (mov r8, r8)
 80050b0:	0800586d 	.word	0x0800586d
 80050b4:	08005895 	.word	0x08005895
 80050b8:	080058cd 	.word	0x080058cd
 80050bc:	080058f9 	.word	0x080058f9

080050c0 <_cleanup_r>:
 80050c0:	b510      	push	{r4, lr}
 80050c2:	4902      	ldr	r1, [pc, #8]	; (80050cc <_cleanup_r+0xc>)
 80050c4:	f000 f88c 	bl	80051e0 <_fwalk_reent>
 80050c8:	bd10      	pop	{r4, pc}
 80050ca:	46c0      	nop			; (mov r8, r8)
 80050cc:	08005bfd 	.word	0x08005bfd

080050d0 <__sfmoreglue>:
 80050d0:	b570      	push	{r4, r5, r6, lr}
 80050d2:	2568      	movs	r5, #104	; 0x68
 80050d4:	1e4a      	subs	r2, r1, #1
 80050d6:	4355      	muls	r5, r2
 80050d8:	000e      	movs	r6, r1
 80050da:	0029      	movs	r1, r5
 80050dc:	3174      	adds	r1, #116	; 0x74
 80050de:	f000 f8a1 	bl	8005224 <_malloc_r>
 80050e2:	1e04      	subs	r4, r0, #0
 80050e4:	d008      	beq.n	80050f8 <__sfmoreglue+0x28>
 80050e6:	2100      	movs	r1, #0
 80050e8:	002a      	movs	r2, r5
 80050ea:	6001      	str	r1, [r0, #0]
 80050ec:	6046      	str	r6, [r0, #4]
 80050ee:	300c      	adds	r0, #12
 80050f0:	60a0      	str	r0, [r4, #8]
 80050f2:	3268      	adds	r2, #104	; 0x68
 80050f4:	f7ff ff9d 	bl	8005032 <memset>
 80050f8:	0020      	movs	r0, r4
 80050fa:	bd70      	pop	{r4, r5, r6, pc}

080050fc <__sinit>:
 80050fc:	6983      	ldr	r3, [r0, #24]
 80050fe:	b513      	push	{r0, r1, r4, lr}
 8005100:	0004      	movs	r4, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d128      	bne.n	8005158 <__sinit+0x5c>
 8005106:	6483      	str	r3, [r0, #72]	; 0x48
 8005108:	64c3      	str	r3, [r0, #76]	; 0x4c
 800510a:	6503      	str	r3, [r0, #80]	; 0x50
 800510c:	4b13      	ldr	r3, [pc, #76]	; (800515c <__sinit+0x60>)
 800510e:	4a14      	ldr	r2, [pc, #80]	; (8005160 <__sinit+0x64>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6282      	str	r2, [r0, #40]	; 0x28
 8005114:	9301      	str	r3, [sp, #4]
 8005116:	4298      	cmp	r0, r3
 8005118:	d101      	bne.n	800511e <__sinit+0x22>
 800511a:	2301      	movs	r3, #1
 800511c:	6183      	str	r3, [r0, #24]
 800511e:	0020      	movs	r0, r4
 8005120:	f000 f820 	bl	8005164 <__sfp>
 8005124:	6060      	str	r0, [r4, #4]
 8005126:	0020      	movs	r0, r4
 8005128:	f000 f81c 	bl	8005164 <__sfp>
 800512c:	60a0      	str	r0, [r4, #8]
 800512e:	0020      	movs	r0, r4
 8005130:	f000 f818 	bl	8005164 <__sfp>
 8005134:	2200      	movs	r2, #0
 8005136:	60e0      	str	r0, [r4, #12]
 8005138:	2104      	movs	r1, #4
 800513a:	6860      	ldr	r0, [r4, #4]
 800513c:	f7ff ff9c 	bl	8005078 <std>
 8005140:	2201      	movs	r2, #1
 8005142:	2109      	movs	r1, #9
 8005144:	68a0      	ldr	r0, [r4, #8]
 8005146:	f7ff ff97 	bl	8005078 <std>
 800514a:	2202      	movs	r2, #2
 800514c:	2112      	movs	r1, #18
 800514e:	68e0      	ldr	r0, [r4, #12]
 8005150:	f7ff ff92 	bl	8005078 <std>
 8005154:	2301      	movs	r3, #1
 8005156:	61a3      	str	r3, [r4, #24]
 8005158:	bd13      	pop	{r0, r1, r4, pc}
 800515a:	46c0      	nop			; (mov r8, r8)
 800515c:	08005f84 	.word	0x08005f84
 8005160:	080050c1 	.word	0x080050c1

08005164 <__sfp>:
 8005164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005166:	4b1c      	ldr	r3, [pc, #112]	; (80051d8 <__sfp+0x74>)
 8005168:	0007      	movs	r7, r0
 800516a:	681e      	ldr	r6, [r3, #0]
 800516c:	69b3      	ldr	r3, [r6, #24]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d102      	bne.n	8005178 <__sfp+0x14>
 8005172:	0030      	movs	r0, r6
 8005174:	f7ff ffc2 	bl	80050fc <__sinit>
 8005178:	3648      	adds	r6, #72	; 0x48
 800517a:	68b4      	ldr	r4, [r6, #8]
 800517c:	6873      	ldr	r3, [r6, #4]
 800517e:	3b01      	subs	r3, #1
 8005180:	d504      	bpl.n	800518c <__sfp+0x28>
 8005182:	6833      	ldr	r3, [r6, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d007      	beq.n	8005198 <__sfp+0x34>
 8005188:	6836      	ldr	r6, [r6, #0]
 800518a:	e7f6      	b.n	800517a <__sfp+0x16>
 800518c:	220c      	movs	r2, #12
 800518e:	5ea5      	ldrsh	r5, [r4, r2]
 8005190:	2d00      	cmp	r5, #0
 8005192:	d00d      	beq.n	80051b0 <__sfp+0x4c>
 8005194:	3468      	adds	r4, #104	; 0x68
 8005196:	e7f2      	b.n	800517e <__sfp+0x1a>
 8005198:	2104      	movs	r1, #4
 800519a:	0038      	movs	r0, r7
 800519c:	f7ff ff98 	bl	80050d0 <__sfmoreglue>
 80051a0:	6030      	str	r0, [r6, #0]
 80051a2:	2800      	cmp	r0, #0
 80051a4:	d1f0      	bne.n	8005188 <__sfp+0x24>
 80051a6:	230c      	movs	r3, #12
 80051a8:	0004      	movs	r4, r0
 80051aa:	603b      	str	r3, [r7, #0]
 80051ac:	0020      	movs	r0, r4
 80051ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051b0:	0020      	movs	r0, r4
 80051b2:	4b0a      	ldr	r3, [pc, #40]	; (80051dc <__sfp+0x78>)
 80051b4:	6665      	str	r5, [r4, #100]	; 0x64
 80051b6:	6025      	str	r5, [r4, #0]
 80051b8:	6065      	str	r5, [r4, #4]
 80051ba:	60a5      	str	r5, [r4, #8]
 80051bc:	60e3      	str	r3, [r4, #12]
 80051be:	6125      	str	r5, [r4, #16]
 80051c0:	6165      	str	r5, [r4, #20]
 80051c2:	61a5      	str	r5, [r4, #24]
 80051c4:	2208      	movs	r2, #8
 80051c6:	0029      	movs	r1, r5
 80051c8:	305c      	adds	r0, #92	; 0x5c
 80051ca:	f7ff ff32 	bl	8005032 <memset>
 80051ce:	6365      	str	r5, [r4, #52]	; 0x34
 80051d0:	63a5      	str	r5, [r4, #56]	; 0x38
 80051d2:	64a5      	str	r5, [r4, #72]	; 0x48
 80051d4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80051d6:	e7e9      	b.n	80051ac <__sfp+0x48>
 80051d8:	08005f84 	.word	0x08005f84
 80051dc:	ffff0001 	.word	0xffff0001

080051e0 <_fwalk_reent>:
 80051e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051e2:	0004      	movs	r4, r0
 80051e4:	0007      	movs	r7, r0
 80051e6:	2600      	movs	r6, #0
 80051e8:	9101      	str	r1, [sp, #4]
 80051ea:	3448      	adds	r4, #72	; 0x48
 80051ec:	2c00      	cmp	r4, #0
 80051ee:	d101      	bne.n	80051f4 <_fwalk_reent+0x14>
 80051f0:	0030      	movs	r0, r6
 80051f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80051f4:	6863      	ldr	r3, [r4, #4]
 80051f6:	68a5      	ldr	r5, [r4, #8]
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	9b00      	ldr	r3, [sp, #0]
 80051fc:	3b01      	subs	r3, #1
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	d501      	bpl.n	8005206 <_fwalk_reent+0x26>
 8005202:	6824      	ldr	r4, [r4, #0]
 8005204:	e7f2      	b.n	80051ec <_fwalk_reent+0xc>
 8005206:	89ab      	ldrh	r3, [r5, #12]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d908      	bls.n	800521e <_fwalk_reent+0x3e>
 800520c:	220e      	movs	r2, #14
 800520e:	5eab      	ldrsh	r3, [r5, r2]
 8005210:	3301      	adds	r3, #1
 8005212:	d004      	beq.n	800521e <_fwalk_reent+0x3e>
 8005214:	0029      	movs	r1, r5
 8005216:	0038      	movs	r0, r7
 8005218:	9b01      	ldr	r3, [sp, #4]
 800521a:	4798      	blx	r3
 800521c:	4306      	orrs	r6, r0
 800521e:	3568      	adds	r5, #104	; 0x68
 8005220:	e7eb      	b.n	80051fa <_fwalk_reent+0x1a>
	...

08005224 <_malloc_r>:
 8005224:	2303      	movs	r3, #3
 8005226:	b570      	push	{r4, r5, r6, lr}
 8005228:	1ccd      	adds	r5, r1, #3
 800522a:	439d      	bics	r5, r3
 800522c:	3508      	adds	r5, #8
 800522e:	0006      	movs	r6, r0
 8005230:	2d0c      	cmp	r5, #12
 8005232:	d21e      	bcs.n	8005272 <_malloc_r+0x4e>
 8005234:	250c      	movs	r5, #12
 8005236:	42a9      	cmp	r1, r5
 8005238:	d81d      	bhi.n	8005276 <_malloc_r+0x52>
 800523a:	0030      	movs	r0, r6
 800523c:	f000 fd95 	bl	8005d6a <__malloc_lock>
 8005240:	4a25      	ldr	r2, [pc, #148]	; (80052d8 <_malloc_r+0xb4>)
 8005242:	6814      	ldr	r4, [r2, #0]
 8005244:	0021      	movs	r1, r4
 8005246:	2900      	cmp	r1, #0
 8005248:	d119      	bne.n	800527e <_malloc_r+0x5a>
 800524a:	4c24      	ldr	r4, [pc, #144]	; (80052dc <_malloc_r+0xb8>)
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d103      	bne.n	800525a <_malloc_r+0x36>
 8005252:	0030      	movs	r0, r6
 8005254:	f000 faf8 	bl	8005848 <_sbrk_r>
 8005258:	6020      	str	r0, [r4, #0]
 800525a:	0029      	movs	r1, r5
 800525c:	0030      	movs	r0, r6
 800525e:	f000 faf3 	bl	8005848 <_sbrk_r>
 8005262:	1c43      	adds	r3, r0, #1
 8005264:	d12b      	bne.n	80052be <_malloc_r+0x9a>
 8005266:	230c      	movs	r3, #12
 8005268:	0030      	movs	r0, r6
 800526a:	6033      	str	r3, [r6, #0]
 800526c:	f000 fd7e 	bl	8005d6c <__malloc_unlock>
 8005270:	e003      	b.n	800527a <_malloc_r+0x56>
 8005272:	2d00      	cmp	r5, #0
 8005274:	dadf      	bge.n	8005236 <_malloc_r+0x12>
 8005276:	230c      	movs	r3, #12
 8005278:	6033      	str	r3, [r6, #0]
 800527a:	2000      	movs	r0, #0
 800527c:	bd70      	pop	{r4, r5, r6, pc}
 800527e:	680b      	ldr	r3, [r1, #0]
 8005280:	1b5b      	subs	r3, r3, r5
 8005282:	d419      	bmi.n	80052b8 <_malloc_r+0x94>
 8005284:	2b0b      	cmp	r3, #11
 8005286:	d903      	bls.n	8005290 <_malloc_r+0x6c>
 8005288:	600b      	str	r3, [r1, #0]
 800528a:	18cc      	adds	r4, r1, r3
 800528c:	6025      	str	r5, [r4, #0]
 800528e:	e003      	b.n	8005298 <_malloc_r+0x74>
 8005290:	684b      	ldr	r3, [r1, #4]
 8005292:	428c      	cmp	r4, r1
 8005294:	d10d      	bne.n	80052b2 <_malloc_r+0x8e>
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	0030      	movs	r0, r6
 800529a:	f000 fd67 	bl	8005d6c <__malloc_unlock>
 800529e:	0020      	movs	r0, r4
 80052a0:	2207      	movs	r2, #7
 80052a2:	300b      	adds	r0, #11
 80052a4:	1d23      	adds	r3, r4, #4
 80052a6:	4390      	bics	r0, r2
 80052a8:	1ac3      	subs	r3, r0, r3
 80052aa:	d0e7      	beq.n	800527c <_malloc_r+0x58>
 80052ac:	425a      	negs	r2, r3
 80052ae:	50e2      	str	r2, [r4, r3]
 80052b0:	e7e4      	b.n	800527c <_malloc_r+0x58>
 80052b2:	6063      	str	r3, [r4, #4]
 80052b4:	000c      	movs	r4, r1
 80052b6:	e7ef      	b.n	8005298 <_malloc_r+0x74>
 80052b8:	000c      	movs	r4, r1
 80052ba:	6849      	ldr	r1, [r1, #4]
 80052bc:	e7c3      	b.n	8005246 <_malloc_r+0x22>
 80052be:	2303      	movs	r3, #3
 80052c0:	1cc4      	adds	r4, r0, #3
 80052c2:	439c      	bics	r4, r3
 80052c4:	42a0      	cmp	r0, r4
 80052c6:	d0e1      	beq.n	800528c <_malloc_r+0x68>
 80052c8:	1a21      	subs	r1, r4, r0
 80052ca:	0030      	movs	r0, r6
 80052cc:	f000 fabc 	bl	8005848 <_sbrk_r>
 80052d0:	1c43      	adds	r3, r0, #1
 80052d2:	d1db      	bne.n	800528c <_malloc_r+0x68>
 80052d4:	e7c7      	b.n	8005266 <_malloc_r+0x42>
 80052d6:	46c0      	nop			; (mov r8, r8)
 80052d8:	20001034 	.word	0x20001034
 80052dc:	20001038 	.word	0x20001038

080052e0 <__sfputc_r>:
 80052e0:	6893      	ldr	r3, [r2, #8]
 80052e2:	b510      	push	{r4, lr}
 80052e4:	3b01      	subs	r3, #1
 80052e6:	6093      	str	r3, [r2, #8]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	da04      	bge.n	80052f6 <__sfputc_r+0x16>
 80052ec:	6994      	ldr	r4, [r2, #24]
 80052ee:	42a3      	cmp	r3, r4
 80052f0:	db07      	blt.n	8005302 <__sfputc_r+0x22>
 80052f2:	290a      	cmp	r1, #10
 80052f4:	d005      	beq.n	8005302 <__sfputc_r+0x22>
 80052f6:	6813      	ldr	r3, [r2, #0]
 80052f8:	1c58      	adds	r0, r3, #1
 80052fa:	6010      	str	r0, [r2, #0]
 80052fc:	7019      	strb	r1, [r3, #0]
 80052fe:	0008      	movs	r0, r1
 8005300:	bd10      	pop	{r4, pc}
 8005302:	f000 faff 	bl	8005904 <__swbuf_r>
 8005306:	0001      	movs	r1, r0
 8005308:	e7f9      	b.n	80052fe <__sfputc_r+0x1e>

0800530a <__sfputs_r>:
 800530a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530c:	0006      	movs	r6, r0
 800530e:	000f      	movs	r7, r1
 8005310:	0014      	movs	r4, r2
 8005312:	18d5      	adds	r5, r2, r3
 8005314:	42ac      	cmp	r4, r5
 8005316:	d101      	bne.n	800531c <__sfputs_r+0x12>
 8005318:	2000      	movs	r0, #0
 800531a:	e007      	b.n	800532c <__sfputs_r+0x22>
 800531c:	7821      	ldrb	r1, [r4, #0]
 800531e:	003a      	movs	r2, r7
 8005320:	0030      	movs	r0, r6
 8005322:	f7ff ffdd 	bl	80052e0 <__sfputc_r>
 8005326:	3401      	adds	r4, #1
 8005328:	1c43      	adds	r3, r0, #1
 800532a:	d1f3      	bne.n	8005314 <__sfputs_r+0xa>
 800532c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005330 <_vfiprintf_r>:
 8005330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005332:	b0a1      	sub	sp, #132	; 0x84
 8005334:	9003      	str	r0, [sp, #12]
 8005336:	000f      	movs	r7, r1
 8005338:	0016      	movs	r6, r2
 800533a:	001d      	movs	r5, r3
 800533c:	2800      	cmp	r0, #0
 800533e:	d005      	beq.n	800534c <_vfiprintf_r+0x1c>
 8005340:	6983      	ldr	r3, [r0, #24]
 8005342:	9305      	str	r3, [sp, #20]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <_vfiprintf_r+0x1c>
 8005348:	f7ff fed8 	bl	80050fc <__sinit>
 800534c:	4b7b      	ldr	r3, [pc, #492]	; (800553c <_vfiprintf_r+0x20c>)
 800534e:	429f      	cmp	r7, r3
 8005350:	d15c      	bne.n	800540c <_vfiprintf_r+0xdc>
 8005352:	9b03      	ldr	r3, [sp, #12]
 8005354:	685f      	ldr	r7, [r3, #4]
 8005356:	89bb      	ldrh	r3, [r7, #12]
 8005358:	071b      	lsls	r3, r3, #28
 800535a:	d563      	bpl.n	8005424 <_vfiprintf_r+0xf4>
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d060      	beq.n	8005424 <_vfiprintf_r+0xf4>
 8005362:	2300      	movs	r3, #0
 8005364:	ac08      	add	r4, sp, #32
 8005366:	6163      	str	r3, [r4, #20]
 8005368:	3320      	adds	r3, #32
 800536a:	7663      	strb	r3, [r4, #25]
 800536c:	3310      	adds	r3, #16
 800536e:	76a3      	strb	r3, [r4, #26]
 8005370:	9507      	str	r5, [sp, #28]
 8005372:	0035      	movs	r5, r6
 8005374:	782b      	ldrb	r3, [r5, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <_vfiprintf_r+0x4e>
 800537a:	2b25      	cmp	r3, #37	; 0x25
 800537c:	d15c      	bne.n	8005438 <_vfiprintf_r+0x108>
 800537e:	1bab      	subs	r3, r5, r6
 8005380:	9305      	str	r3, [sp, #20]
 8005382:	d00c      	beq.n	800539e <_vfiprintf_r+0x6e>
 8005384:	0032      	movs	r2, r6
 8005386:	0039      	movs	r1, r7
 8005388:	9803      	ldr	r0, [sp, #12]
 800538a:	f7ff ffbe 	bl	800530a <__sfputs_r>
 800538e:	1c43      	adds	r3, r0, #1
 8005390:	d100      	bne.n	8005394 <_vfiprintf_r+0x64>
 8005392:	e0c4      	b.n	800551e <_vfiprintf_r+0x1ee>
 8005394:	6962      	ldr	r2, [r4, #20]
 8005396:	9b05      	ldr	r3, [sp, #20]
 8005398:	4694      	mov	ip, r2
 800539a:	4463      	add	r3, ip
 800539c:	6163      	str	r3, [r4, #20]
 800539e:	782b      	ldrb	r3, [r5, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d100      	bne.n	80053a6 <_vfiprintf_r+0x76>
 80053a4:	e0bb      	b.n	800551e <_vfiprintf_r+0x1ee>
 80053a6:	2201      	movs	r2, #1
 80053a8:	2300      	movs	r3, #0
 80053aa:	4252      	negs	r2, r2
 80053ac:	6062      	str	r2, [r4, #4]
 80053ae:	a904      	add	r1, sp, #16
 80053b0:	3254      	adds	r2, #84	; 0x54
 80053b2:	1852      	adds	r2, r2, r1
 80053b4:	1c6e      	adds	r6, r5, #1
 80053b6:	6023      	str	r3, [r4, #0]
 80053b8:	60e3      	str	r3, [r4, #12]
 80053ba:	60a3      	str	r3, [r4, #8]
 80053bc:	7013      	strb	r3, [r2, #0]
 80053be:	65a3      	str	r3, [r4, #88]	; 0x58
 80053c0:	7831      	ldrb	r1, [r6, #0]
 80053c2:	2205      	movs	r2, #5
 80053c4:	485e      	ldr	r0, [pc, #376]	; (8005540 <_vfiprintf_r+0x210>)
 80053c6:	f000 fcc5 	bl	8005d54 <memchr>
 80053ca:	1c75      	adds	r5, r6, #1
 80053cc:	2800      	cmp	r0, #0
 80053ce:	d135      	bne.n	800543c <_vfiprintf_r+0x10c>
 80053d0:	6822      	ldr	r2, [r4, #0]
 80053d2:	06d3      	lsls	r3, r2, #27
 80053d4:	d504      	bpl.n	80053e0 <_vfiprintf_r+0xb0>
 80053d6:	2353      	movs	r3, #83	; 0x53
 80053d8:	a904      	add	r1, sp, #16
 80053da:	185b      	adds	r3, r3, r1
 80053dc:	2120      	movs	r1, #32
 80053de:	7019      	strb	r1, [r3, #0]
 80053e0:	0713      	lsls	r3, r2, #28
 80053e2:	d504      	bpl.n	80053ee <_vfiprintf_r+0xbe>
 80053e4:	2353      	movs	r3, #83	; 0x53
 80053e6:	a904      	add	r1, sp, #16
 80053e8:	185b      	adds	r3, r3, r1
 80053ea:	212b      	movs	r1, #43	; 0x2b
 80053ec:	7019      	strb	r1, [r3, #0]
 80053ee:	7833      	ldrb	r3, [r6, #0]
 80053f0:	2b2a      	cmp	r3, #42	; 0x2a
 80053f2:	d02c      	beq.n	800544e <_vfiprintf_r+0x11e>
 80053f4:	0035      	movs	r5, r6
 80053f6:	2100      	movs	r1, #0
 80053f8:	200a      	movs	r0, #10
 80053fa:	68e3      	ldr	r3, [r4, #12]
 80053fc:	782a      	ldrb	r2, [r5, #0]
 80053fe:	1c6e      	adds	r6, r5, #1
 8005400:	3a30      	subs	r2, #48	; 0x30
 8005402:	2a09      	cmp	r2, #9
 8005404:	d964      	bls.n	80054d0 <_vfiprintf_r+0x1a0>
 8005406:	2900      	cmp	r1, #0
 8005408:	d02e      	beq.n	8005468 <_vfiprintf_r+0x138>
 800540a:	e026      	b.n	800545a <_vfiprintf_r+0x12a>
 800540c:	4b4d      	ldr	r3, [pc, #308]	; (8005544 <_vfiprintf_r+0x214>)
 800540e:	429f      	cmp	r7, r3
 8005410:	d102      	bne.n	8005418 <_vfiprintf_r+0xe8>
 8005412:	9b03      	ldr	r3, [sp, #12]
 8005414:	689f      	ldr	r7, [r3, #8]
 8005416:	e79e      	b.n	8005356 <_vfiprintf_r+0x26>
 8005418:	4b4b      	ldr	r3, [pc, #300]	; (8005548 <_vfiprintf_r+0x218>)
 800541a:	429f      	cmp	r7, r3
 800541c:	d19b      	bne.n	8005356 <_vfiprintf_r+0x26>
 800541e:	9b03      	ldr	r3, [sp, #12]
 8005420:	68df      	ldr	r7, [r3, #12]
 8005422:	e798      	b.n	8005356 <_vfiprintf_r+0x26>
 8005424:	0039      	movs	r1, r7
 8005426:	9803      	ldr	r0, [sp, #12]
 8005428:	f000 fad6 	bl	80059d8 <__swsetup_r>
 800542c:	2800      	cmp	r0, #0
 800542e:	d098      	beq.n	8005362 <_vfiprintf_r+0x32>
 8005430:	2001      	movs	r0, #1
 8005432:	4240      	negs	r0, r0
 8005434:	b021      	add	sp, #132	; 0x84
 8005436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005438:	3501      	adds	r5, #1
 800543a:	e79b      	b.n	8005374 <_vfiprintf_r+0x44>
 800543c:	4b40      	ldr	r3, [pc, #256]	; (8005540 <_vfiprintf_r+0x210>)
 800543e:	6822      	ldr	r2, [r4, #0]
 8005440:	1ac0      	subs	r0, r0, r3
 8005442:	2301      	movs	r3, #1
 8005444:	4083      	lsls	r3, r0
 8005446:	4313      	orrs	r3, r2
 8005448:	6023      	str	r3, [r4, #0]
 800544a:	002e      	movs	r6, r5
 800544c:	e7b8      	b.n	80053c0 <_vfiprintf_r+0x90>
 800544e:	9b07      	ldr	r3, [sp, #28]
 8005450:	1d19      	adds	r1, r3, #4
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	9107      	str	r1, [sp, #28]
 8005456:	2b00      	cmp	r3, #0
 8005458:	db01      	blt.n	800545e <_vfiprintf_r+0x12e>
 800545a:	930b      	str	r3, [sp, #44]	; 0x2c
 800545c:	e004      	b.n	8005468 <_vfiprintf_r+0x138>
 800545e:	425b      	negs	r3, r3
 8005460:	60e3      	str	r3, [r4, #12]
 8005462:	2302      	movs	r3, #2
 8005464:	4313      	orrs	r3, r2
 8005466:	6023      	str	r3, [r4, #0]
 8005468:	782b      	ldrb	r3, [r5, #0]
 800546a:	2b2e      	cmp	r3, #46	; 0x2e
 800546c:	d10a      	bne.n	8005484 <_vfiprintf_r+0x154>
 800546e:	786b      	ldrb	r3, [r5, #1]
 8005470:	2b2a      	cmp	r3, #42	; 0x2a
 8005472:	d135      	bne.n	80054e0 <_vfiprintf_r+0x1b0>
 8005474:	9b07      	ldr	r3, [sp, #28]
 8005476:	3502      	adds	r5, #2
 8005478:	1d1a      	adds	r2, r3, #4
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	9207      	str	r2, [sp, #28]
 800547e:	2b00      	cmp	r3, #0
 8005480:	db2b      	blt.n	80054da <_vfiprintf_r+0x1aa>
 8005482:	9309      	str	r3, [sp, #36]	; 0x24
 8005484:	4e31      	ldr	r6, [pc, #196]	; (800554c <_vfiprintf_r+0x21c>)
 8005486:	7829      	ldrb	r1, [r5, #0]
 8005488:	2203      	movs	r2, #3
 800548a:	0030      	movs	r0, r6
 800548c:	f000 fc62 	bl	8005d54 <memchr>
 8005490:	2800      	cmp	r0, #0
 8005492:	d006      	beq.n	80054a2 <_vfiprintf_r+0x172>
 8005494:	2340      	movs	r3, #64	; 0x40
 8005496:	1b80      	subs	r0, r0, r6
 8005498:	4083      	lsls	r3, r0
 800549a:	6822      	ldr	r2, [r4, #0]
 800549c:	3501      	adds	r5, #1
 800549e:	4313      	orrs	r3, r2
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	7829      	ldrb	r1, [r5, #0]
 80054a4:	2206      	movs	r2, #6
 80054a6:	482a      	ldr	r0, [pc, #168]	; (8005550 <_vfiprintf_r+0x220>)
 80054a8:	1c6e      	adds	r6, r5, #1
 80054aa:	7621      	strb	r1, [r4, #24]
 80054ac:	f000 fc52 	bl	8005d54 <memchr>
 80054b0:	2800      	cmp	r0, #0
 80054b2:	d03a      	beq.n	800552a <_vfiprintf_r+0x1fa>
 80054b4:	4b27      	ldr	r3, [pc, #156]	; (8005554 <_vfiprintf_r+0x224>)
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d125      	bne.n	8005506 <_vfiprintf_r+0x1d6>
 80054ba:	2207      	movs	r2, #7
 80054bc:	9b07      	ldr	r3, [sp, #28]
 80054be:	3307      	adds	r3, #7
 80054c0:	4393      	bics	r3, r2
 80054c2:	3308      	adds	r3, #8
 80054c4:	9307      	str	r3, [sp, #28]
 80054c6:	6963      	ldr	r3, [r4, #20]
 80054c8:	9a04      	ldr	r2, [sp, #16]
 80054ca:	189b      	adds	r3, r3, r2
 80054cc:	6163      	str	r3, [r4, #20]
 80054ce:	e750      	b.n	8005372 <_vfiprintf_r+0x42>
 80054d0:	4343      	muls	r3, r0
 80054d2:	2101      	movs	r1, #1
 80054d4:	189b      	adds	r3, r3, r2
 80054d6:	0035      	movs	r5, r6
 80054d8:	e790      	b.n	80053fc <_vfiprintf_r+0xcc>
 80054da:	2301      	movs	r3, #1
 80054dc:	425b      	negs	r3, r3
 80054de:	e7d0      	b.n	8005482 <_vfiprintf_r+0x152>
 80054e0:	2300      	movs	r3, #0
 80054e2:	200a      	movs	r0, #10
 80054e4:	001a      	movs	r2, r3
 80054e6:	3501      	adds	r5, #1
 80054e8:	6063      	str	r3, [r4, #4]
 80054ea:	7829      	ldrb	r1, [r5, #0]
 80054ec:	1c6e      	adds	r6, r5, #1
 80054ee:	3930      	subs	r1, #48	; 0x30
 80054f0:	2909      	cmp	r1, #9
 80054f2:	d903      	bls.n	80054fc <_vfiprintf_r+0x1cc>
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d0c5      	beq.n	8005484 <_vfiprintf_r+0x154>
 80054f8:	9209      	str	r2, [sp, #36]	; 0x24
 80054fa:	e7c3      	b.n	8005484 <_vfiprintf_r+0x154>
 80054fc:	4342      	muls	r2, r0
 80054fe:	2301      	movs	r3, #1
 8005500:	1852      	adds	r2, r2, r1
 8005502:	0035      	movs	r5, r6
 8005504:	e7f1      	b.n	80054ea <_vfiprintf_r+0x1ba>
 8005506:	ab07      	add	r3, sp, #28
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	003a      	movs	r2, r7
 800550c:	4b12      	ldr	r3, [pc, #72]	; (8005558 <_vfiprintf_r+0x228>)
 800550e:	0021      	movs	r1, r4
 8005510:	9803      	ldr	r0, [sp, #12]
 8005512:	e000      	b.n	8005516 <_vfiprintf_r+0x1e6>
 8005514:	bf00      	nop
 8005516:	9004      	str	r0, [sp, #16]
 8005518:	9b04      	ldr	r3, [sp, #16]
 800551a:	3301      	adds	r3, #1
 800551c:	d1d3      	bne.n	80054c6 <_vfiprintf_r+0x196>
 800551e:	89bb      	ldrh	r3, [r7, #12]
 8005520:	065b      	lsls	r3, r3, #25
 8005522:	d500      	bpl.n	8005526 <_vfiprintf_r+0x1f6>
 8005524:	e784      	b.n	8005430 <_vfiprintf_r+0x100>
 8005526:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005528:	e784      	b.n	8005434 <_vfiprintf_r+0x104>
 800552a:	ab07      	add	r3, sp, #28
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	003a      	movs	r2, r7
 8005530:	4b09      	ldr	r3, [pc, #36]	; (8005558 <_vfiprintf_r+0x228>)
 8005532:	0021      	movs	r1, r4
 8005534:	9803      	ldr	r0, [sp, #12]
 8005536:	f000 f87f 	bl	8005638 <_printf_i>
 800553a:	e7ec      	b.n	8005516 <_vfiprintf_r+0x1e6>
 800553c:	08005fa8 	.word	0x08005fa8
 8005540:	08005fe8 	.word	0x08005fe8
 8005544:	08005fc8 	.word	0x08005fc8
 8005548:	08005f88 	.word	0x08005f88
 800554c:	08005fee 	.word	0x08005fee
 8005550:	08005ff2 	.word	0x08005ff2
 8005554:	00000000 	.word	0x00000000
 8005558:	0800530b 	.word	0x0800530b

0800555c <_printf_common>:
 800555c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800555e:	0015      	movs	r5, r2
 8005560:	9301      	str	r3, [sp, #4]
 8005562:	688a      	ldr	r2, [r1, #8]
 8005564:	690b      	ldr	r3, [r1, #16]
 8005566:	9000      	str	r0, [sp, #0]
 8005568:	000c      	movs	r4, r1
 800556a:	4293      	cmp	r3, r2
 800556c:	da00      	bge.n	8005570 <_printf_common+0x14>
 800556e:	0013      	movs	r3, r2
 8005570:	0022      	movs	r2, r4
 8005572:	602b      	str	r3, [r5, #0]
 8005574:	3243      	adds	r2, #67	; 0x43
 8005576:	7812      	ldrb	r2, [r2, #0]
 8005578:	2a00      	cmp	r2, #0
 800557a:	d001      	beq.n	8005580 <_printf_common+0x24>
 800557c:	3301      	adds	r3, #1
 800557e:	602b      	str	r3, [r5, #0]
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	069b      	lsls	r3, r3, #26
 8005584:	d502      	bpl.n	800558c <_printf_common+0x30>
 8005586:	682b      	ldr	r3, [r5, #0]
 8005588:	3302      	adds	r3, #2
 800558a:	602b      	str	r3, [r5, #0]
 800558c:	2706      	movs	r7, #6
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	401f      	ands	r7, r3
 8005592:	d027      	beq.n	80055e4 <_printf_common+0x88>
 8005594:	0023      	movs	r3, r4
 8005596:	3343      	adds	r3, #67	; 0x43
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	1e5a      	subs	r2, r3, #1
 800559c:	4193      	sbcs	r3, r2
 800559e:	6822      	ldr	r2, [r4, #0]
 80055a0:	0692      	lsls	r2, r2, #26
 80055a2:	d430      	bmi.n	8005606 <_printf_common+0xaa>
 80055a4:	0022      	movs	r2, r4
 80055a6:	9901      	ldr	r1, [sp, #4]
 80055a8:	3243      	adds	r2, #67	; 0x43
 80055aa:	9800      	ldr	r0, [sp, #0]
 80055ac:	9e08      	ldr	r6, [sp, #32]
 80055ae:	47b0      	blx	r6
 80055b0:	1c43      	adds	r3, r0, #1
 80055b2:	d025      	beq.n	8005600 <_printf_common+0xa4>
 80055b4:	2306      	movs	r3, #6
 80055b6:	6820      	ldr	r0, [r4, #0]
 80055b8:	682a      	ldr	r2, [r5, #0]
 80055ba:	68e1      	ldr	r1, [r4, #12]
 80055bc:	4003      	ands	r3, r0
 80055be:	2500      	movs	r5, #0
 80055c0:	2b04      	cmp	r3, #4
 80055c2:	d103      	bne.n	80055cc <_printf_common+0x70>
 80055c4:	1a8d      	subs	r5, r1, r2
 80055c6:	43eb      	mvns	r3, r5
 80055c8:	17db      	asrs	r3, r3, #31
 80055ca:	401d      	ands	r5, r3
 80055cc:	68a3      	ldr	r3, [r4, #8]
 80055ce:	6922      	ldr	r2, [r4, #16]
 80055d0:	4293      	cmp	r3, r2
 80055d2:	dd01      	ble.n	80055d8 <_printf_common+0x7c>
 80055d4:	1a9b      	subs	r3, r3, r2
 80055d6:	18ed      	adds	r5, r5, r3
 80055d8:	2700      	movs	r7, #0
 80055da:	42bd      	cmp	r5, r7
 80055dc:	d120      	bne.n	8005620 <_printf_common+0xc4>
 80055de:	2000      	movs	r0, #0
 80055e0:	e010      	b.n	8005604 <_printf_common+0xa8>
 80055e2:	3701      	adds	r7, #1
 80055e4:	68e3      	ldr	r3, [r4, #12]
 80055e6:	682a      	ldr	r2, [r5, #0]
 80055e8:	1a9b      	subs	r3, r3, r2
 80055ea:	42bb      	cmp	r3, r7
 80055ec:	ddd2      	ble.n	8005594 <_printf_common+0x38>
 80055ee:	0022      	movs	r2, r4
 80055f0:	2301      	movs	r3, #1
 80055f2:	3219      	adds	r2, #25
 80055f4:	9901      	ldr	r1, [sp, #4]
 80055f6:	9800      	ldr	r0, [sp, #0]
 80055f8:	9e08      	ldr	r6, [sp, #32]
 80055fa:	47b0      	blx	r6
 80055fc:	1c43      	adds	r3, r0, #1
 80055fe:	d1f0      	bne.n	80055e2 <_printf_common+0x86>
 8005600:	2001      	movs	r0, #1
 8005602:	4240      	negs	r0, r0
 8005604:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005606:	2030      	movs	r0, #48	; 0x30
 8005608:	18e1      	adds	r1, r4, r3
 800560a:	3143      	adds	r1, #67	; 0x43
 800560c:	7008      	strb	r0, [r1, #0]
 800560e:	0021      	movs	r1, r4
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	3145      	adds	r1, #69	; 0x45
 8005614:	7809      	ldrb	r1, [r1, #0]
 8005616:	18a2      	adds	r2, r4, r2
 8005618:	3243      	adds	r2, #67	; 0x43
 800561a:	3302      	adds	r3, #2
 800561c:	7011      	strb	r1, [r2, #0]
 800561e:	e7c1      	b.n	80055a4 <_printf_common+0x48>
 8005620:	0022      	movs	r2, r4
 8005622:	2301      	movs	r3, #1
 8005624:	321a      	adds	r2, #26
 8005626:	9901      	ldr	r1, [sp, #4]
 8005628:	9800      	ldr	r0, [sp, #0]
 800562a:	9e08      	ldr	r6, [sp, #32]
 800562c:	47b0      	blx	r6
 800562e:	1c43      	adds	r3, r0, #1
 8005630:	d0e6      	beq.n	8005600 <_printf_common+0xa4>
 8005632:	3701      	adds	r7, #1
 8005634:	e7d1      	b.n	80055da <_printf_common+0x7e>
	...

08005638 <_printf_i>:
 8005638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800563a:	b089      	sub	sp, #36	; 0x24
 800563c:	9204      	str	r2, [sp, #16]
 800563e:	000a      	movs	r2, r1
 8005640:	3243      	adds	r2, #67	; 0x43
 8005642:	9305      	str	r3, [sp, #20]
 8005644:	9003      	str	r0, [sp, #12]
 8005646:	9202      	str	r2, [sp, #8]
 8005648:	7e0a      	ldrb	r2, [r1, #24]
 800564a:	000c      	movs	r4, r1
 800564c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800564e:	2a6e      	cmp	r2, #110	; 0x6e
 8005650:	d100      	bne.n	8005654 <_printf_i+0x1c>
 8005652:	e086      	b.n	8005762 <_printf_i+0x12a>
 8005654:	d81f      	bhi.n	8005696 <_printf_i+0x5e>
 8005656:	2a63      	cmp	r2, #99	; 0x63
 8005658:	d033      	beq.n	80056c2 <_printf_i+0x8a>
 800565a:	d808      	bhi.n	800566e <_printf_i+0x36>
 800565c:	2a00      	cmp	r2, #0
 800565e:	d100      	bne.n	8005662 <_printf_i+0x2a>
 8005660:	e08c      	b.n	800577c <_printf_i+0x144>
 8005662:	2a58      	cmp	r2, #88	; 0x58
 8005664:	d04d      	beq.n	8005702 <_printf_i+0xca>
 8005666:	0025      	movs	r5, r4
 8005668:	3542      	adds	r5, #66	; 0x42
 800566a:	702a      	strb	r2, [r5, #0]
 800566c:	e030      	b.n	80056d0 <_printf_i+0x98>
 800566e:	2a64      	cmp	r2, #100	; 0x64
 8005670:	d001      	beq.n	8005676 <_printf_i+0x3e>
 8005672:	2a69      	cmp	r2, #105	; 0x69
 8005674:	d1f7      	bne.n	8005666 <_printf_i+0x2e>
 8005676:	6819      	ldr	r1, [r3, #0]
 8005678:	6825      	ldr	r5, [r4, #0]
 800567a:	1d0a      	adds	r2, r1, #4
 800567c:	0628      	lsls	r0, r5, #24
 800567e:	d529      	bpl.n	80056d4 <_printf_i+0x9c>
 8005680:	6808      	ldr	r0, [r1, #0]
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	2800      	cmp	r0, #0
 8005686:	da03      	bge.n	8005690 <_printf_i+0x58>
 8005688:	232d      	movs	r3, #45	; 0x2d
 800568a:	9a02      	ldr	r2, [sp, #8]
 800568c:	4240      	negs	r0, r0
 800568e:	7013      	strb	r3, [r2, #0]
 8005690:	4e6b      	ldr	r6, [pc, #428]	; (8005840 <_printf_i+0x208>)
 8005692:	270a      	movs	r7, #10
 8005694:	e04f      	b.n	8005736 <_printf_i+0xfe>
 8005696:	2a73      	cmp	r2, #115	; 0x73
 8005698:	d074      	beq.n	8005784 <_printf_i+0x14c>
 800569a:	d808      	bhi.n	80056ae <_printf_i+0x76>
 800569c:	2a6f      	cmp	r2, #111	; 0x6f
 800569e:	d01f      	beq.n	80056e0 <_printf_i+0xa8>
 80056a0:	2a70      	cmp	r2, #112	; 0x70
 80056a2:	d1e0      	bne.n	8005666 <_printf_i+0x2e>
 80056a4:	2220      	movs	r2, #32
 80056a6:	6809      	ldr	r1, [r1, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	6022      	str	r2, [r4, #0]
 80056ac:	e003      	b.n	80056b6 <_printf_i+0x7e>
 80056ae:	2a75      	cmp	r2, #117	; 0x75
 80056b0:	d016      	beq.n	80056e0 <_printf_i+0xa8>
 80056b2:	2a78      	cmp	r2, #120	; 0x78
 80056b4:	d1d7      	bne.n	8005666 <_printf_i+0x2e>
 80056b6:	0022      	movs	r2, r4
 80056b8:	2178      	movs	r1, #120	; 0x78
 80056ba:	3245      	adds	r2, #69	; 0x45
 80056bc:	7011      	strb	r1, [r2, #0]
 80056be:	4e61      	ldr	r6, [pc, #388]	; (8005844 <_printf_i+0x20c>)
 80056c0:	e022      	b.n	8005708 <_printf_i+0xd0>
 80056c2:	0025      	movs	r5, r4
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	3542      	adds	r5, #66	; 0x42
 80056c8:	1d11      	adds	r1, r2, #4
 80056ca:	6019      	str	r1, [r3, #0]
 80056cc:	6813      	ldr	r3, [r2, #0]
 80056ce:	702b      	strb	r3, [r5, #0]
 80056d0:	2301      	movs	r3, #1
 80056d2:	e065      	b.n	80057a0 <_printf_i+0x168>
 80056d4:	6808      	ldr	r0, [r1, #0]
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	0669      	lsls	r1, r5, #25
 80056da:	d5d3      	bpl.n	8005684 <_printf_i+0x4c>
 80056dc:	b200      	sxth	r0, r0
 80056de:	e7d1      	b.n	8005684 <_printf_i+0x4c>
 80056e0:	6819      	ldr	r1, [r3, #0]
 80056e2:	6825      	ldr	r5, [r4, #0]
 80056e4:	1d08      	adds	r0, r1, #4
 80056e6:	6018      	str	r0, [r3, #0]
 80056e8:	6808      	ldr	r0, [r1, #0]
 80056ea:	062e      	lsls	r6, r5, #24
 80056ec:	d505      	bpl.n	80056fa <_printf_i+0xc2>
 80056ee:	4e54      	ldr	r6, [pc, #336]	; (8005840 <_printf_i+0x208>)
 80056f0:	2708      	movs	r7, #8
 80056f2:	2a6f      	cmp	r2, #111	; 0x6f
 80056f4:	d01b      	beq.n	800572e <_printf_i+0xf6>
 80056f6:	270a      	movs	r7, #10
 80056f8:	e019      	b.n	800572e <_printf_i+0xf6>
 80056fa:	066d      	lsls	r5, r5, #25
 80056fc:	d5f7      	bpl.n	80056ee <_printf_i+0xb6>
 80056fe:	b280      	uxth	r0, r0
 8005700:	e7f5      	b.n	80056ee <_printf_i+0xb6>
 8005702:	3145      	adds	r1, #69	; 0x45
 8005704:	4e4e      	ldr	r6, [pc, #312]	; (8005840 <_printf_i+0x208>)
 8005706:	700a      	strb	r2, [r1, #0]
 8005708:	6818      	ldr	r0, [r3, #0]
 800570a:	6822      	ldr	r2, [r4, #0]
 800570c:	1d01      	adds	r1, r0, #4
 800570e:	6800      	ldr	r0, [r0, #0]
 8005710:	6019      	str	r1, [r3, #0]
 8005712:	0615      	lsls	r5, r2, #24
 8005714:	d521      	bpl.n	800575a <_printf_i+0x122>
 8005716:	07d3      	lsls	r3, r2, #31
 8005718:	d502      	bpl.n	8005720 <_printf_i+0xe8>
 800571a:	2320      	movs	r3, #32
 800571c:	431a      	orrs	r2, r3
 800571e:	6022      	str	r2, [r4, #0]
 8005720:	2710      	movs	r7, #16
 8005722:	2800      	cmp	r0, #0
 8005724:	d103      	bne.n	800572e <_printf_i+0xf6>
 8005726:	2320      	movs	r3, #32
 8005728:	6822      	ldr	r2, [r4, #0]
 800572a:	439a      	bics	r2, r3
 800572c:	6022      	str	r2, [r4, #0]
 800572e:	0023      	movs	r3, r4
 8005730:	2200      	movs	r2, #0
 8005732:	3343      	adds	r3, #67	; 0x43
 8005734:	701a      	strb	r2, [r3, #0]
 8005736:	6863      	ldr	r3, [r4, #4]
 8005738:	60a3      	str	r3, [r4, #8]
 800573a:	2b00      	cmp	r3, #0
 800573c:	db58      	blt.n	80057f0 <_printf_i+0x1b8>
 800573e:	2204      	movs	r2, #4
 8005740:	6821      	ldr	r1, [r4, #0]
 8005742:	4391      	bics	r1, r2
 8005744:	6021      	str	r1, [r4, #0]
 8005746:	2800      	cmp	r0, #0
 8005748:	d154      	bne.n	80057f4 <_printf_i+0x1bc>
 800574a:	9d02      	ldr	r5, [sp, #8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d05a      	beq.n	8005806 <_printf_i+0x1ce>
 8005750:	0025      	movs	r5, r4
 8005752:	7833      	ldrb	r3, [r6, #0]
 8005754:	3542      	adds	r5, #66	; 0x42
 8005756:	702b      	strb	r3, [r5, #0]
 8005758:	e055      	b.n	8005806 <_printf_i+0x1ce>
 800575a:	0655      	lsls	r5, r2, #25
 800575c:	d5db      	bpl.n	8005716 <_printf_i+0xde>
 800575e:	b280      	uxth	r0, r0
 8005760:	e7d9      	b.n	8005716 <_printf_i+0xde>
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	680d      	ldr	r5, [r1, #0]
 8005766:	1d10      	adds	r0, r2, #4
 8005768:	6949      	ldr	r1, [r1, #20]
 800576a:	6018      	str	r0, [r3, #0]
 800576c:	6813      	ldr	r3, [r2, #0]
 800576e:	062e      	lsls	r6, r5, #24
 8005770:	d501      	bpl.n	8005776 <_printf_i+0x13e>
 8005772:	6019      	str	r1, [r3, #0]
 8005774:	e002      	b.n	800577c <_printf_i+0x144>
 8005776:	066d      	lsls	r5, r5, #25
 8005778:	d5fb      	bpl.n	8005772 <_printf_i+0x13a>
 800577a:	8019      	strh	r1, [r3, #0]
 800577c:	2300      	movs	r3, #0
 800577e:	9d02      	ldr	r5, [sp, #8]
 8005780:	6123      	str	r3, [r4, #16]
 8005782:	e04f      	b.n	8005824 <_printf_i+0x1ec>
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	1d11      	adds	r1, r2, #4
 8005788:	6019      	str	r1, [r3, #0]
 800578a:	6815      	ldr	r5, [r2, #0]
 800578c:	2100      	movs	r1, #0
 800578e:	6862      	ldr	r2, [r4, #4]
 8005790:	0028      	movs	r0, r5
 8005792:	f000 fadf 	bl	8005d54 <memchr>
 8005796:	2800      	cmp	r0, #0
 8005798:	d001      	beq.n	800579e <_printf_i+0x166>
 800579a:	1b40      	subs	r0, r0, r5
 800579c:	6060      	str	r0, [r4, #4]
 800579e:	6863      	ldr	r3, [r4, #4]
 80057a0:	6123      	str	r3, [r4, #16]
 80057a2:	2300      	movs	r3, #0
 80057a4:	9a02      	ldr	r2, [sp, #8]
 80057a6:	7013      	strb	r3, [r2, #0]
 80057a8:	e03c      	b.n	8005824 <_printf_i+0x1ec>
 80057aa:	6923      	ldr	r3, [r4, #16]
 80057ac:	002a      	movs	r2, r5
 80057ae:	9904      	ldr	r1, [sp, #16]
 80057b0:	9803      	ldr	r0, [sp, #12]
 80057b2:	9d05      	ldr	r5, [sp, #20]
 80057b4:	47a8      	blx	r5
 80057b6:	1c43      	adds	r3, r0, #1
 80057b8:	d03e      	beq.n	8005838 <_printf_i+0x200>
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	079b      	lsls	r3, r3, #30
 80057be:	d415      	bmi.n	80057ec <_printf_i+0x1b4>
 80057c0:	9b07      	ldr	r3, [sp, #28]
 80057c2:	68e0      	ldr	r0, [r4, #12]
 80057c4:	4298      	cmp	r0, r3
 80057c6:	da39      	bge.n	800583c <_printf_i+0x204>
 80057c8:	0018      	movs	r0, r3
 80057ca:	e037      	b.n	800583c <_printf_i+0x204>
 80057cc:	0022      	movs	r2, r4
 80057ce:	2301      	movs	r3, #1
 80057d0:	3219      	adds	r2, #25
 80057d2:	9904      	ldr	r1, [sp, #16]
 80057d4:	9803      	ldr	r0, [sp, #12]
 80057d6:	9e05      	ldr	r6, [sp, #20]
 80057d8:	47b0      	blx	r6
 80057da:	1c43      	adds	r3, r0, #1
 80057dc:	d02c      	beq.n	8005838 <_printf_i+0x200>
 80057de:	3501      	adds	r5, #1
 80057e0:	68e3      	ldr	r3, [r4, #12]
 80057e2:	9a07      	ldr	r2, [sp, #28]
 80057e4:	1a9b      	subs	r3, r3, r2
 80057e6:	42ab      	cmp	r3, r5
 80057e8:	dcf0      	bgt.n	80057cc <_printf_i+0x194>
 80057ea:	e7e9      	b.n	80057c0 <_printf_i+0x188>
 80057ec:	2500      	movs	r5, #0
 80057ee:	e7f7      	b.n	80057e0 <_printf_i+0x1a8>
 80057f0:	2800      	cmp	r0, #0
 80057f2:	d0ad      	beq.n	8005750 <_printf_i+0x118>
 80057f4:	9d02      	ldr	r5, [sp, #8]
 80057f6:	0039      	movs	r1, r7
 80057f8:	f7fa fd0c 	bl	8000214 <__aeabi_uidivmod>
 80057fc:	5c73      	ldrb	r3, [r6, r1]
 80057fe:	3d01      	subs	r5, #1
 8005800:	702b      	strb	r3, [r5, #0]
 8005802:	2800      	cmp	r0, #0
 8005804:	d1f7      	bne.n	80057f6 <_printf_i+0x1be>
 8005806:	2f08      	cmp	r7, #8
 8005808:	d109      	bne.n	800581e <_printf_i+0x1e6>
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	07db      	lsls	r3, r3, #31
 800580e:	d506      	bpl.n	800581e <_printf_i+0x1e6>
 8005810:	6863      	ldr	r3, [r4, #4]
 8005812:	6922      	ldr	r2, [r4, #16]
 8005814:	4293      	cmp	r3, r2
 8005816:	dc02      	bgt.n	800581e <_printf_i+0x1e6>
 8005818:	2330      	movs	r3, #48	; 0x30
 800581a:	3d01      	subs	r5, #1
 800581c:	702b      	strb	r3, [r5, #0]
 800581e:	9b02      	ldr	r3, [sp, #8]
 8005820:	1b5b      	subs	r3, r3, r5
 8005822:	6123      	str	r3, [r4, #16]
 8005824:	9b05      	ldr	r3, [sp, #20]
 8005826:	aa07      	add	r2, sp, #28
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	0021      	movs	r1, r4
 800582c:	9b04      	ldr	r3, [sp, #16]
 800582e:	9803      	ldr	r0, [sp, #12]
 8005830:	f7ff fe94 	bl	800555c <_printf_common>
 8005834:	1c43      	adds	r3, r0, #1
 8005836:	d1b8      	bne.n	80057aa <_printf_i+0x172>
 8005838:	2001      	movs	r0, #1
 800583a:	4240      	negs	r0, r0
 800583c:	b009      	add	sp, #36	; 0x24
 800583e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005840:	08005ff9 	.word	0x08005ff9
 8005844:	0800600a 	.word	0x0800600a

08005848 <_sbrk_r>:
 8005848:	2300      	movs	r3, #0
 800584a:	b570      	push	{r4, r5, r6, lr}
 800584c:	4c06      	ldr	r4, [pc, #24]	; (8005868 <_sbrk_r+0x20>)
 800584e:	0005      	movs	r5, r0
 8005850:	0008      	movs	r0, r1
 8005852:	6023      	str	r3, [r4, #0]
 8005854:	f7fb fb8e 	bl	8000f74 <_sbrk>
 8005858:	1c43      	adds	r3, r0, #1
 800585a:	d103      	bne.n	8005864 <_sbrk_r+0x1c>
 800585c:	6823      	ldr	r3, [r4, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d000      	beq.n	8005864 <_sbrk_r+0x1c>
 8005862:	602b      	str	r3, [r5, #0]
 8005864:	bd70      	pop	{r4, r5, r6, pc}
 8005866:	46c0      	nop			; (mov r8, r8)
 8005868:	2000115c 	.word	0x2000115c

0800586c <__sread>:
 800586c:	b570      	push	{r4, r5, r6, lr}
 800586e:	000c      	movs	r4, r1
 8005870:	250e      	movs	r5, #14
 8005872:	5f49      	ldrsh	r1, [r1, r5]
 8005874:	f000 fac6 	bl	8005e04 <_read_r>
 8005878:	2800      	cmp	r0, #0
 800587a:	db03      	blt.n	8005884 <__sread+0x18>
 800587c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800587e:	181b      	adds	r3, r3, r0
 8005880:	6563      	str	r3, [r4, #84]	; 0x54
 8005882:	bd70      	pop	{r4, r5, r6, pc}
 8005884:	89a3      	ldrh	r3, [r4, #12]
 8005886:	4a02      	ldr	r2, [pc, #8]	; (8005890 <__sread+0x24>)
 8005888:	4013      	ands	r3, r2
 800588a:	81a3      	strh	r3, [r4, #12]
 800588c:	e7f9      	b.n	8005882 <__sread+0x16>
 800588e:	46c0      	nop			; (mov r8, r8)
 8005890:	ffffefff 	.word	0xffffefff

08005894 <__swrite>:
 8005894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005896:	001f      	movs	r7, r3
 8005898:	898b      	ldrh	r3, [r1, #12]
 800589a:	0005      	movs	r5, r0
 800589c:	000c      	movs	r4, r1
 800589e:	0016      	movs	r6, r2
 80058a0:	05db      	lsls	r3, r3, #23
 80058a2:	d505      	bpl.n	80058b0 <__swrite+0x1c>
 80058a4:	230e      	movs	r3, #14
 80058a6:	5ec9      	ldrsh	r1, [r1, r3]
 80058a8:	2200      	movs	r2, #0
 80058aa:	2302      	movs	r3, #2
 80058ac:	f000 f9d2 	bl	8005c54 <_lseek_r>
 80058b0:	89a3      	ldrh	r3, [r4, #12]
 80058b2:	4a05      	ldr	r2, [pc, #20]	; (80058c8 <__swrite+0x34>)
 80058b4:	0028      	movs	r0, r5
 80058b6:	4013      	ands	r3, r2
 80058b8:	81a3      	strh	r3, [r4, #12]
 80058ba:	0032      	movs	r2, r6
 80058bc:	230e      	movs	r3, #14
 80058be:	5ee1      	ldrsh	r1, [r4, r3]
 80058c0:	003b      	movs	r3, r7
 80058c2:	f000 f875 	bl	80059b0 <_write_r>
 80058c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058c8:	ffffefff 	.word	0xffffefff

080058cc <__sseek>:
 80058cc:	b570      	push	{r4, r5, r6, lr}
 80058ce:	000c      	movs	r4, r1
 80058d0:	250e      	movs	r5, #14
 80058d2:	5f49      	ldrsh	r1, [r1, r5]
 80058d4:	f000 f9be 	bl	8005c54 <_lseek_r>
 80058d8:	89a3      	ldrh	r3, [r4, #12]
 80058da:	1c42      	adds	r2, r0, #1
 80058dc:	d103      	bne.n	80058e6 <__sseek+0x1a>
 80058de:	4a05      	ldr	r2, [pc, #20]	; (80058f4 <__sseek+0x28>)
 80058e0:	4013      	ands	r3, r2
 80058e2:	81a3      	strh	r3, [r4, #12]
 80058e4:	bd70      	pop	{r4, r5, r6, pc}
 80058e6:	2280      	movs	r2, #128	; 0x80
 80058e8:	0152      	lsls	r2, r2, #5
 80058ea:	4313      	orrs	r3, r2
 80058ec:	81a3      	strh	r3, [r4, #12]
 80058ee:	6560      	str	r0, [r4, #84]	; 0x54
 80058f0:	e7f8      	b.n	80058e4 <__sseek+0x18>
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	ffffefff 	.word	0xffffefff

080058f8 <__sclose>:
 80058f8:	b510      	push	{r4, lr}
 80058fa:	230e      	movs	r3, #14
 80058fc:	5ec9      	ldrsh	r1, [r1, r3]
 80058fe:	f000 f8e1 	bl	8005ac4 <_close_r>
 8005902:	bd10      	pop	{r4, pc}

08005904 <__swbuf_r>:
 8005904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005906:	0005      	movs	r5, r0
 8005908:	000e      	movs	r6, r1
 800590a:	0014      	movs	r4, r2
 800590c:	2800      	cmp	r0, #0
 800590e:	d004      	beq.n	800591a <__swbuf_r+0x16>
 8005910:	6983      	ldr	r3, [r0, #24]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <__swbuf_r+0x16>
 8005916:	f7ff fbf1 	bl	80050fc <__sinit>
 800591a:	4b22      	ldr	r3, [pc, #136]	; (80059a4 <__swbuf_r+0xa0>)
 800591c:	429c      	cmp	r4, r3
 800591e:	d12d      	bne.n	800597c <__swbuf_r+0x78>
 8005920:	686c      	ldr	r4, [r5, #4]
 8005922:	69a3      	ldr	r3, [r4, #24]
 8005924:	60a3      	str	r3, [r4, #8]
 8005926:	89a3      	ldrh	r3, [r4, #12]
 8005928:	071b      	lsls	r3, r3, #28
 800592a:	d531      	bpl.n	8005990 <__swbuf_r+0x8c>
 800592c:	6923      	ldr	r3, [r4, #16]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d02e      	beq.n	8005990 <__swbuf_r+0x8c>
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	6922      	ldr	r2, [r4, #16]
 8005936:	b2f7      	uxtb	r7, r6
 8005938:	1a98      	subs	r0, r3, r2
 800593a:	6963      	ldr	r3, [r4, #20]
 800593c:	b2f6      	uxtb	r6, r6
 800593e:	4283      	cmp	r3, r0
 8005940:	dc05      	bgt.n	800594e <__swbuf_r+0x4a>
 8005942:	0021      	movs	r1, r4
 8005944:	0028      	movs	r0, r5
 8005946:	f000 f959 	bl	8005bfc <_fflush_r>
 800594a:	2800      	cmp	r0, #0
 800594c:	d126      	bne.n	800599c <__swbuf_r+0x98>
 800594e:	68a3      	ldr	r3, [r4, #8]
 8005950:	3001      	adds	r0, #1
 8005952:	3b01      	subs	r3, #1
 8005954:	60a3      	str	r3, [r4, #8]
 8005956:	6823      	ldr	r3, [r4, #0]
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	6022      	str	r2, [r4, #0]
 800595c:	701f      	strb	r7, [r3, #0]
 800595e:	6963      	ldr	r3, [r4, #20]
 8005960:	4283      	cmp	r3, r0
 8005962:	d004      	beq.n	800596e <__swbuf_r+0x6a>
 8005964:	89a3      	ldrh	r3, [r4, #12]
 8005966:	07db      	lsls	r3, r3, #31
 8005968:	d51a      	bpl.n	80059a0 <__swbuf_r+0x9c>
 800596a:	2e0a      	cmp	r6, #10
 800596c:	d118      	bne.n	80059a0 <__swbuf_r+0x9c>
 800596e:	0021      	movs	r1, r4
 8005970:	0028      	movs	r0, r5
 8005972:	f000 f943 	bl	8005bfc <_fflush_r>
 8005976:	2800      	cmp	r0, #0
 8005978:	d012      	beq.n	80059a0 <__swbuf_r+0x9c>
 800597a:	e00f      	b.n	800599c <__swbuf_r+0x98>
 800597c:	4b0a      	ldr	r3, [pc, #40]	; (80059a8 <__swbuf_r+0xa4>)
 800597e:	429c      	cmp	r4, r3
 8005980:	d101      	bne.n	8005986 <__swbuf_r+0x82>
 8005982:	68ac      	ldr	r4, [r5, #8]
 8005984:	e7cd      	b.n	8005922 <__swbuf_r+0x1e>
 8005986:	4b09      	ldr	r3, [pc, #36]	; (80059ac <__swbuf_r+0xa8>)
 8005988:	429c      	cmp	r4, r3
 800598a:	d1ca      	bne.n	8005922 <__swbuf_r+0x1e>
 800598c:	68ec      	ldr	r4, [r5, #12]
 800598e:	e7c8      	b.n	8005922 <__swbuf_r+0x1e>
 8005990:	0021      	movs	r1, r4
 8005992:	0028      	movs	r0, r5
 8005994:	f000 f820 	bl	80059d8 <__swsetup_r>
 8005998:	2800      	cmp	r0, #0
 800599a:	d0ca      	beq.n	8005932 <__swbuf_r+0x2e>
 800599c:	2601      	movs	r6, #1
 800599e:	4276      	negs	r6, r6
 80059a0:	0030      	movs	r0, r6
 80059a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059a4:	08005fa8 	.word	0x08005fa8
 80059a8:	08005fc8 	.word	0x08005fc8
 80059ac:	08005f88 	.word	0x08005f88

080059b0 <_write_r>:
 80059b0:	b570      	push	{r4, r5, r6, lr}
 80059b2:	0005      	movs	r5, r0
 80059b4:	0008      	movs	r0, r1
 80059b6:	0011      	movs	r1, r2
 80059b8:	2200      	movs	r2, #0
 80059ba:	4c06      	ldr	r4, [pc, #24]	; (80059d4 <_write_r+0x24>)
 80059bc:	6022      	str	r2, [r4, #0]
 80059be:	001a      	movs	r2, r3
 80059c0:	f7fa fea8 	bl	8000714 <_write>
 80059c4:	1c43      	adds	r3, r0, #1
 80059c6:	d103      	bne.n	80059d0 <_write_r+0x20>
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d000      	beq.n	80059d0 <_write_r+0x20>
 80059ce:	602b      	str	r3, [r5, #0]
 80059d0:	bd70      	pop	{r4, r5, r6, pc}
 80059d2:	46c0      	nop			; (mov r8, r8)
 80059d4:	2000115c 	.word	0x2000115c

080059d8 <__swsetup_r>:
 80059d8:	4b36      	ldr	r3, [pc, #216]	; (8005ab4 <__swsetup_r+0xdc>)
 80059da:	b570      	push	{r4, r5, r6, lr}
 80059dc:	681d      	ldr	r5, [r3, #0]
 80059de:	0006      	movs	r6, r0
 80059e0:	000c      	movs	r4, r1
 80059e2:	2d00      	cmp	r5, #0
 80059e4:	d005      	beq.n	80059f2 <__swsetup_r+0x1a>
 80059e6:	69ab      	ldr	r3, [r5, #24]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d102      	bne.n	80059f2 <__swsetup_r+0x1a>
 80059ec:	0028      	movs	r0, r5
 80059ee:	f7ff fb85 	bl	80050fc <__sinit>
 80059f2:	4b31      	ldr	r3, [pc, #196]	; (8005ab8 <__swsetup_r+0xe0>)
 80059f4:	429c      	cmp	r4, r3
 80059f6:	d10f      	bne.n	8005a18 <__swsetup_r+0x40>
 80059f8:	686c      	ldr	r4, [r5, #4]
 80059fa:	230c      	movs	r3, #12
 80059fc:	5ee2      	ldrsh	r2, [r4, r3]
 80059fe:	b293      	uxth	r3, r2
 8005a00:	0719      	lsls	r1, r3, #28
 8005a02:	d42d      	bmi.n	8005a60 <__swsetup_r+0x88>
 8005a04:	06d9      	lsls	r1, r3, #27
 8005a06:	d411      	bmi.n	8005a2c <__swsetup_r+0x54>
 8005a08:	2309      	movs	r3, #9
 8005a0a:	2001      	movs	r0, #1
 8005a0c:	6033      	str	r3, [r6, #0]
 8005a0e:	3337      	adds	r3, #55	; 0x37
 8005a10:	4313      	orrs	r3, r2
 8005a12:	81a3      	strh	r3, [r4, #12]
 8005a14:	4240      	negs	r0, r0
 8005a16:	bd70      	pop	{r4, r5, r6, pc}
 8005a18:	4b28      	ldr	r3, [pc, #160]	; (8005abc <__swsetup_r+0xe4>)
 8005a1a:	429c      	cmp	r4, r3
 8005a1c:	d101      	bne.n	8005a22 <__swsetup_r+0x4a>
 8005a1e:	68ac      	ldr	r4, [r5, #8]
 8005a20:	e7eb      	b.n	80059fa <__swsetup_r+0x22>
 8005a22:	4b27      	ldr	r3, [pc, #156]	; (8005ac0 <__swsetup_r+0xe8>)
 8005a24:	429c      	cmp	r4, r3
 8005a26:	d1e8      	bne.n	80059fa <__swsetup_r+0x22>
 8005a28:	68ec      	ldr	r4, [r5, #12]
 8005a2a:	e7e6      	b.n	80059fa <__swsetup_r+0x22>
 8005a2c:	075b      	lsls	r3, r3, #29
 8005a2e:	d513      	bpl.n	8005a58 <__swsetup_r+0x80>
 8005a30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a32:	2900      	cmp	r1, #0
 8005a34:	d008      	beq.n	8005a48 <__swsetup_r+0x70>
 8005a36:	0023      	movs	r3, r4
 8005a38:	3344      	adds	r3, #68	; 0x44
 8005a3a:	4299      	cmp	r1, r3
 8005a3c:	d002      	beq.n	8005a44 <__swsetup_r+0x6c>
 8005a3e:	0030      	movs	r0, r6
 8005a40:	f000 f996 	bl	8005d70 <_free_r>
 8005a44:	2300      	movs	r3, #0
 8005a46:	6363      	str	r3, [r4, #52]	; 0x34
 8005a48:	2224      	movs	r2, #36	; 0x24
 8005a4a:	89a3      	ldrh	r3, [r4, #12]
 8005a4c:	4393      	bics	r3, r2
 8005a4e:	81a3      	strh	r3, [r4, #12]
 8005a50:	2300      	movs	r3, #0
 8005a52:	6063      	str	r3, [r4, #4]
 8005a54:	6923      	ldr	r3, [r4, #16]
 8005a56:	6023      	str	r3, [r4, #0]
 8005a58:	2308      	movs	r3, #8
 8005a5a:	89a2      	ldrh	r2, [r4, #12]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	81a3      	strh	r3, [r4, #12]
 8005a60:	6923      	ldr	r3, [r4, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10b      	bne.n	8005a7e <__swsetup_r+0xa6>
 8005a66:	21a0      	movs	r1, #160	; 0xa0
 8005a68:	2280      	movs	r2, #128	; 0x80
 8005a6a:	89a3      	ldrh	r3, [r4, #12]
 8005a6c:	0089      	lsls	r1, r1, #2
 8005a6e:	0092      	lsls	r2, r2, #2
 8005a70:	400b      	ands	r3, r1
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d003      	beq.n	8005a7e <__swsetup_r+0xa6>
 8005a76:	0021      	movs	r1, r4
 8005a78:	0030      	movs	r0, r6
 8005a7a:	f000 f927 	bl	8005ccc <__smakebuf_r>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	89a2      	ldrh	r2, [r4, #12]
 8005a82:	4013      	ands	r3, r2
 8005a84:	d011      	beq.n	8005aaa <__swsetup_r+0xd2>
 8005a86:	2300      	movs	r3, #0
 8005a88:	60a3      	str	r3, [r4, #8]
 8005a8a:	6963      	ldr	r3, [r4, #20]
 8005a8c:	425b      	negs	r3, r3
 8005a8e:	61a3      	str	r3, [r4, #24]
 8005a90:	2000      	movs	r0, #0
 8005a92:	6923      	ldr	r3, [r4, #16]
 8005a94:	4283      	cmp	r3, r0
 8005a96:	d1be      	bne.n	8005a16 <__swsetup_r+0x3e>
 8005a98:	230c      	movs	r3, #12
 8005a9a:	5ee2      	ldrsh	r2, [r4, r3]
 8005a9c:	0613      	lsls	r3, r2, #24
 8005a9e:	d5ba      	bpl.n	8005a16 <__swsetup_r+0x3e>
 8005aa0:	2340      	movs	r3, #64	; 0x40
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	81a3      	strh	r3, [r4, #12]
 8005aa6:	3801      	subs	r0, #1
 8005aa8:	e7b5      	b.n	8005a16 <__swsetup_r+0x3e>
 8005aaa:	0792      	lsls	r2, r2, #30
 8005aac:	d400      	bmi.n	8005ab0 <__swsetup_r+0xd8>
 8005aae:	6963      	ldr	r3, [r4, #20]
 8005ab0:	60a3      	str	r3, [r4, #8]
 8005ab2:	e7ed      	b.n	8005a90 <__swsetup_r+0xb8>
 8005ab4:	20000018 	.word	0x20000018
 8005ab8:	08005fa8 	.word	0x08005fa8
 8005abc:	08005fc8 	.word	0x08005fc8
 8005ac0:	08005f88 	.word	0x08005f88

08005ac4 <_close_r>:
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	b570      	push	{r4, r5, r6, lr}
 8005ac8:	4c06      	ldr	r4, [pc, #24]	; (8005ae4 <_close_r+0x20>)
 8005aca:	0005      	movs	r5, r0
 8005acc:	0008      	movs	r0, r1
 8005ace:	6023      	str	r3, [r4, #0]
 8005ad0:	f7fb fa23 	bl	8000f1a <_close>
 8005ad4:	1c43      	adds	r3, r0, #1
 8005ad6:	d103      	bne.n	8005ae0 <_close_r+0x1c>
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d000      	beq.n	8005ae0 <_close_r+0x1c>
 8005ade:	602b      	str	r3, [r5, #0]
 8005ae0:	bd70      	pop	{r4, r5, r6, pc}
 8005ae2:	46c0      	nop			; (mov r8, r8)
 8005ae4:	2000115c 	.word	0x2000115c

08005ae8 <__sflush_r>:
 8005ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005aea:	898a      	ldrh	r2, [r1, #12]
 8005aec:	0005      	movs	r5, r0
 8005aee:	000c      	movs	r4, r1
 8005af0:	0713      	lsls	r3, r2, #28
 8005af2:	d460      	bmi.n	8005bb6 <__sflush_r+0xce>
 8005af4:	684b      	ldr	r3, [r1, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	dc04      	bgt.n	8005b04 <__sflush_r+0x1c>
 8005afa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	dc01      	bgt.n	8005b04 <__sflush_r+0x1c>
 8005b00:	2000      	movs	r0, #0
 8005b02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b04:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005b06:	2f00      	cmp	r7, #0
 8005b08:	d0fa      	beq.n	8005b00 <__sflush_r+0x18>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	682e      	ldr	r6, [r5, #0]
 8005b0e:	602b      	str	r3, [r5, #0]
 8005b10:	2380      	movs	r3, #128	; 0x80
 8005b12:	015b      	lsls	r3, r3, #5
 8005b14:	6a21      	ldr	r1, [r4, #32]
 8005b16:	401a      	ands	r2, r3
 8005b18:	d034      	beq.n	8005b84 <__sflush_r+0x9c>
 8005b1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b1c:	89a3      	ldrh	r3, [r4, #12]
 8005b1e:	075b      	lsls	r3, r3, #29
 8005b20:	d506      	bpl.n	8005b30 <__sflush_r+0x48>
 8005b22:	6863      	ldr	r3, [r4, #4]
 8005b24:	1ac0      	subs	r0, r0, r3
 8005b26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d001      	beq.n	8005b30 <__sflush_r+0x48>
 8005b2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b2e:	1ac0      	subs	r0, r0, r3
 8005b30:	0002      	movs	r2, r0
 8005b32:	6a21      	ldr	r1, [r4, #32]
 8005b34:	2300      	movs	r3, #0
 8005b36:	0028      	movs	r0, r5
 8005b38:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005b3a:	47b8      	blx	r7
 8005b3c:	89a1      	ldrh	r1, [r4, #12]
 8005b3e:	1c43      	adds	r3, r0, #1
 8005b40:	d106      	bne.n	8005b50 <__sflush_r+0x68>
 8005b42:	682b      	ldr	r3, [r5, #0]
 8005b44:	2b1d      	cmp	r3, #29
 8005b46:	d830      	bhi.n	8005baa <__sflush_r+0xc2>
 8005b48:	4a2b      	ldr	r2, [pc, #172]	; (8005bf8 <__sflush_r+0x110>)
 8005b4a:	40da      	lsrs	r2, r3
 8005b4c:	07d3      	lsls	r3, r2, #31
 8005b4e:	d52c      	bpl.n	8005baa <__sflush_r+0xc2>
 8005b50:	2300      	movs	r3, #0
 8005b52:	6063      	str	r3, [r4, #4]
 8005b54:	6923      	ldr	r3, [r4, #16]
 8005b56:	6023      	str	r3, [r4, #0]
 8005b58:	04cb      	lsls	r3, r1, #19
 8005b5a:	d505      	bpl.n	8005b68 <__sflush_r+0x80>
 8005b5c:	1c43      	adds	r3, r0, #1
 8005b5e:	d102      	bne.n	8005b66 <__sflush_r+0x7e>
 8005b60:	682b      	ldr	r3, [r5, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d100      	bne.n	8005b68 <__sflush_r+0x80>
 8005b66:	6560      	str	r0, [r4, #84]	; 0x54
 8005b68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b6a:	602e      	str	r6, [r5, #0]
 8005b6c:	2900      	cmp	r1, #0
 8005b6e:	d0c7      	beq.n	8005b00 <__sflush_r+0x18>
 8005b70:	0023      	movs	r3, r4
 8005b72:	3344      	adds	r3, #68	; 0x44
 8005b74:	4299      	cmp	r1, r3
 8005b76:	d002      	beq.n	8005b7e <__sflush_r+0x96>
 8005b78:	0028      	movs	r0, r5
 8005b7a:	f000 f8f9 	bl	8005d70 <_free_r>
 8005b7e:	2000      	movs	r0, #0
 8005b80:	6360      	str	r0, [r4, #52]	; 0x34
 8005b82:	e7be      	b.n	8005b02 <__sflush_r+0x1a>
 8005b84:	2301      	movs	r3, #1
 8005b86:	0028      	movs	r0, r5
 8005b88:	47b8      	blx	r7
 8005b8a:	1c43      	adds	r3, r0, #1
 8005b8c:	d1c6      	bne.n	8005b1c <__sflush_r+0x34>
 8005b8e:	682b      	ldr	r3, [r5, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d0c3      	beq.n	8005b1c <__sflush_r+0x34>
 8005b94:	2b1d      	cmp	r3, #29
 8005b96:	d001      	beq.n	8005b9c <__sflush_r+0xb4>
 8005b98:	2b16      	cmp	r3, #22
 8005b9a:	d101      	bne.n	8005ba0 <__sflush_r+0xb8>
 8005b9c:	602e      	str	r6, [r5, #0]
 8005b9e:	e7af      	b.n	8005b00 <__sflush_r+0x18>
 8005ba0:	2340      	movs	r3, #64	; 0x40
 8005ba2:	89a2      	ldrh	r2, [r4, #12]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	81a3      	strh	r3, [r4, #12]
 8005ba8:	e7ab      	b.n	8005b02 <__sflush_r+0x1a>
 8005baa:	2340      	movs	r3, #64	; 0x40
 8005bac:	430b      	orrs	r3, r1
 8005bae:	2001      	movs	r0, #1
 8005bb0:	81a3      	strh	r3, [r4, #12]
 8005bb2:	4240      	negs	r0, r0
 8005bb4:	e7a5      	b.n	8005b02 <__sflush_r+0x1a>
 8005bb6:	690f      	ldr	r7, [r1, #16]
 8005bb8:	2f00      	cmp	r7, #0
 8005bba:	d0a1      	beq.n	8005b00 <__sflush_r+0x18>
 8005bbc:	680b      	ldr	r3, [r1, #0]
 8005bbe:	600f      	str	r7, [r1, #0]
 8005bc0:	1bdb      	subs	r3, r3, r7
 8005bc2:	9301      	str	r3, [sp, #4]
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	0792      	lsls	r2, r2, #30
 8005bc8:	d100      	bne.n	8005bcc <__sflush_r+0xe4>
 8005bca:	694b      	ldr	r3, [r1, #20]
 8005bcc:	60a3      	str	r3, [r4, #8]
 8005bce:	9b01      	ldr	r3, [sp, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	dc00      	bgt.n	8005bd6 <__sflush_r+0xee>
 8005bd4:	e794      	b.n	8005b00 <__sflush_r+0x18>
 8005bd6:	9b01      	ldr	r3, [sp, #4]
 8005bd8:	003a      	movs	r2, r7
 8005bda:	6a21      	ldr	r1, [r4, #32]
 8005bdc:	0028      	movs	r0, r5
 8005bde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005be0:	47b0      	blx	r6
 8005be2:	2800      	cmp	r0, #0
 8005be4:	dc03      	bgt.n	8005bee <__sflush_r+0x106>
 8005be6:	2340      	movs	r3, #64	; 0x40
 8005be8:	89a2      	ldrh	r2, [r4, #12]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	e7df      	b.n	8005bae <__sflush_r+0xc6>
 8005bee:	9b01      	ldr	r3, [sp, #4]
 8005bf0:	183f      	adds	r7, r7, r0
 8005bf2:	1a1b      	subs	r3, r3, r0
 8005bf4:	9301      	str	r3, [sp, #4]
 8005bf6:	e7ea      	b.n	8005bce <__sflush_r+0xe6>
 8005bf8:	20400001 	.word	0x20400001

08005bfc <_fflush_r>:
 8005bfc:	690b      	ldr	r3, [r1, #16]
 8005bfe:	b570      	push	{r4, r5, r6, lr}
 8005c00:	0005      	movs	r5, r0
 8005c02:	000c      	movs	r4, r1
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d101      	bne.n	8005c0c <_fflush_r+0x10>
 8005c08:	2000      	movs	r0, #0
 8005c0a:	bd70      	pop	{r4, r5, r6, pc}
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	d004      	beq.n	8005c1a <_fflush_r+0x1e>
 8005c10:	6983      	ldr	r3, [r0, #24]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <_fflush_r+0x1e>
 8005c16:	f7ff fa71 	bl	80050fc <__sinit>
 8005c1a:	4b0b      	ldr	r3, [pc, #44]	; (8005c48 <_fflush_r+0x4c>)
 8005c1c:	429c      	cmp	r4, r3
 8005c1e:	d109      	bne.n	8005c34 <_fflush_r+0x38>
 8005c20:	686c      	ldr	r4, [r5, #4]
 8005c22:	220c      	movs	r2, #12
 8005c24:	5ea3      	ldrsh	r3, [r4, r2]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d0ee      	beq.n	8005c08 <_fflush_r+0xc>
 8005c2a:	0021      	movs	r1, r4
 8005c2c:	0028      	movs	r0, r5
 8005c2e:	f7ff ff5b 	bl	8005ae8 <__sflush_r>
 8005c32:	e7ea      	b.n	8005c0a <_fflush_r+0xe>
 8005c34:	4b05      	ldr	r3, [pc, #20]	; (8005c4c <_fflush_r+0x50>)
 8005c36:	429c      	cmp	r4, r3
 8005c38:	d101      	bne.n	8005c3e <_fflush_r+0x42>
 8005c3a:	68ac      	ldr	r4, [r5, #8]
 8005c3c:	e7f1      	b.n	8005c22 <_fflush_r+0x26>
 8005c3e:	4b04      	ldr	r3, [pc, #16]	; (8005c50 <_fflush_r+0x54>)
 8005c40:	429c      	cmp	r4, r3
 8005c42:	d1ee      	bne.n	8005c22 <_fflush_r+0x26>
 8005c44:	68ec      	ldr	r4, [r5, #12]
 8005c46:	e7ec      	b.n	8005c22 <_fflush_r+0x26>
 8005c48:	08005fa8 	.word	0x08005fa8
 8005c4c:	08005fc8 	.word	0x08005fc8
 8005c50:	08005f88 	.word	0x08005f88

08005c54 <_lseek_r>:
 8005c54:	b570      	push	{r4, r5, r6, lr}
 8005c56:	0005      	movs	r5, r0
 8005c58:	0008      	movs	r0, r1
 8005c5a:	0011      	movs	r1, r2
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	4c06      	ldr	r4, [pc, #24]	; (8005c78 <_lseek_r+0x24>)
 8005c60:	6022      	str	r2, [r4, #0]
 8005c62:	001a      	movs	r2, r3
 8005c64:	f7fb f97a 	bl	8000f5c <_lseek>
 8005c68:	1c43      	adds	r3, r0, #1
 8005c6a:	d103      	bne.n	8005c74 <_lseek_r+0x20>
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d000      	beq.n	8005c74 <_lseek_r+0x20>
 8005c72:	602b      	str	r3, [r5, #0]
 8005c74:	bd70      	pop	{r4, r5, r6, pc}
 8005c76:	46c0      	nop			; (mov r8, r8)
 8005c78:	2000115c 	.word	0x2000115c

08005c7c <__swhatbuf_r>:
 8005c7c:	b570      	push	{r4, r5, r6, lr}
 8005c7e:	000e      	movs	r6, r1
 8005c80:	001d      	movs	r5, r3
 8005c82:	230e      	movs	r3, #14
 8005c84:	5ec9      	ldrsh	r1, [r1, r3]
 8005c86:	b096      	sub	sp, #88	; 0x58
 8005c88:	0014      	movs	r4, r2
 8005c8a:	2900      	cmp	r1, #0
 8005c8c:	da07      	bge.n	8005c9e <__swhatbuf_r+0x22>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	602b      	str	r3, [r5, #0]
 8005c92:	89b3      	ldrh	r3, [r6, #12]
 8005c94:	061b      	lsls	r3, r3, #24
 8005c96:	d411      	bmi.n	8005cbc <__swhatbuf_r+0x40>
 8005c98:	2380      	movs	r3, #128	; 0x80
 8005c9a:	00db      	lsls	r3, r3, #3
 8005c9c:	e00f      	b.n	8005cbe <__swhatbuf_r+0x42>
 8005c9e:	466a      	mov	r2, sp
 8005ca0:	f000 f8c4 	bl	8005e2c <_fstat_r>
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	dbf2      	blt.n	8005c8e <__swhatbuf_r+0x12>
 8005ca8:	22f0      	movs	r2, #240	; 0xf0
 8005caa:	9b01      	ldr	r3, [sp, #4]
 8005cac:	0212      	lsls	r2, r2, #8
 8005cae:	4013      	ands	r3, r2
 8005cb0:	4a05      	ldr	r2, [pc, #20]	; (8005cc8 <__swhatbuf_r+0x4c>)
 8005cb2:	189b      	adds	r3, r3, r2
 8005cb4:	425a      	negs	r2, r3
 8005cb6:	4153      	adcs	r3, r2
 8005cb8:	602b      	str	r3, [r5, #0]
 8005cba:	e7ed      	b.n	8005c98 <__swhatbuf_r+0x1c>
 8005cbc:	2340      	movs	r3, #64	; 0x40
 8005cbe:	2000      	movs	r0, #0
 8005cc0:	6023      	str	r3, [r4, #0]
 8005cc2:	b016      	add	sp, #88	; 0x58
 8005cc4:	bd70      	pop	{r4, r5, r6, pc}
 8005cc6:	46c0      	nop			; (mov r8, r8)
 8005cc8:	ffffe000 	.word	0xffffe000

08005ccc <__smakebuf_r>:
 8005ccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cce:	2602      	movs	r6, #2
 8005cd0:	898b      	ldrh	r3, [r1, #12]
 8005cd2:	0005      	movs	r5, r0
 8005cd4:	000c      	movs	r4, r1
 8005cd6:	4233      	tst	r3, r6
 8005cd8:	d006      	beq.n	8005ce8 <__smakebuf_r+0x1c>
 8005cda:	0023      	movs	r3, r4
 8005cdc:	3347      	adds	r3, #71	; 0x47
 8005cde:	6023      	str	r3, [r4, #0]
 8005ce0:	6123      	str	r3, [r4, #16]
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	6163      	str	r3, [r4, #20]
 8005ce6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005ce8:	ab01      	add	r3, sp, #4
 8005cea:	466a      	mov	r2, sp
 8005cec:	f7ff ffc6 	bl	8005c7c <__swhatbuf_r>
 8005cf0:	9900      	ldr	r1, [sp, #0]
 8005cf2:	0007      	movs	r7, r0
 8005cf4:	0028      	movs	r0, r5
 8005cf6:	f7ff fa95 	bl	8005224 <_malloc_r>
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	d108      	bne.n	8005d10 <__smakebuf_r+0x44>
 8005cfe:	220c      	movs	r2, #12
 8005d00:	5ea3      	ldrsh	r3, [r4, r2]
 8005d02:	059a      	lsls	r2, r3, #22
 8005d04:	d4ef      	bmi.n	8005ce6 <__smakebuf_r+0x1a>
 8005d06:	2203      	movs	r2, #3
 8005d08:	4393      	bics	r3, r2
 8005d0a:	431e      	orrs	r6, r3
 8005d0c:	81a6      	strh	r6, [r4, #12]
 8005d0e:	e7e4      	b.n	8005cda <__smakebuf_r+0xe>
 8005d10:	4b0f      	ldr	r3, [pc, #60]	; (8005d50 <__smakebuf_r+0x84>)
 8005d12:	62ab      	str	r3, [r5, #40]	; 0x28
 8005d14:	2380      	movs	r3, #128	; 0x80
 8005d16:	89a2      	ldrh	r2, [r4, #12]
 8005d18:	6020      	str	r0, [r4, #0]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	81a3      	strh	r3, [r4, #12]
 8005d1e:	9b00      	ldr	r3, [sp, #0]
 8005d20:	6120      	str	r0, [r4, #16]
 8005d22:	6163      	str	r3, [r4, #20]
 8005d24:	9b01      	ldr	r3, [sp, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00d      	beq.n	8005d46 <__smakebuf_r+0x7a>
 8005d2a:	230e      	movs	r3, #14
 8005d2c:	5ee1      	ldrsh	r1, [r4, r3]
 8005d2e:	0028      	movs	r0, r5
 8005d30:	f000 f88e 	bl	8005e50 <_isatty_r>
 8005d34:	2800      	cmp	r0, #0
 8005d36:	d006      	beq.n	8005d46 <__smakebuf_r+0x7a>
 8005d38:	2203      	movs	r2, #3
 8005d3a:	89a3      	ldrh	r3, [r4, #12]
 8005d3c:	4393      	bics	r3, r2
 8005d3e:	001a      	movs	r2, r3
 8005d40:	2301      	movs	r3, #1
 8005d42:	4313      	orrs	r3, r2
 8005d44:	81a3      	strh	r3, [r4, #12]
 8005d46:	89a0      	ldrh	r0, [r4, #12]
 8005d48:	4338      	orrs	r0, r7
 8005d4a:	81a0      	strh	r0, [r4, #12]
 8005d4c:	e7cb      	b.n	8005ce6 <__smakebuf_r+0x1a>
 8005d4e:	46c0      	nop			; (mov r8, r8)
 8005d50:	080050c1 	.word	0x080050c1

08005d54 <memchr>:
 8005d54:	b2c9      	uxtb	r1, r1
 8005d56:	1882      	adds	r2, r0, r2
 8005d58:	4290      	cmp	r0, r2
 8005d5a:	d101      	bne.n	8005d60 <memchr+0xc>
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	4770      	bx	lr
 8005d60:	7803      	ldrb	r3, [r0, #0]
 8005d62:	428b      	cmp	r3, r1
 8005d64:	d0fb      	beq.n	8005d5e <memchr+0xa>
 8005d66:	3001      	adds	r0, #1
 8005d68:	e7f6      	b.n	8005d58 <memchr+0x4>

08005d6a <__malloc_lock>:
 8005d6a:	4770      	bx	lr

08005d6c <__malloc_unlock>:
 8005d6c:	4770      	bx	lr
	...

08005d70 <_free_r>:
 8005d70:	b570      	push	{r4, r5, r6, lr}
 8005d72:	0005      	movs	r5, r0
 8005d74:	2900      	cmp	r1, #0
 8005d76:	d010      	beq.n	8005d9a <_free_r+0x2a>
 8005d78:	1f0c      	subs	r4, r1, #4
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	da00      	bge.n	8005d82 <_free_r+0x12>
 8005d80:	18e4      	adds	r4, r4, r3
 8005d82:	0028      	movs	r0, r5
 8005d84:	f7ff fff1 	bl	8005d6a <__malloc_lock>
 8005d88:	4a1d      	ldr	r2, [pc, #116]	; (8005e00 <_free_r+0x90>)
 8005d8a:	6813      	ldr	r3, [r2, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d105      	bne.n	8005d9c <_free_r+0x2c>
 8005d90:	6063      	str	r3, [r4, #4]
 8005d92:	6014      	str	r4, [r2, #0]
 8005d94:	0028      	movs	r0, r5
 8005d96:	f7ff ffe9 	bl	8005d6c <__malloc_unlock>
 8005d9a:	bd70      	pop	{r4, r5, r6, pc}
 8005d9c:	42a3      	cmp	r3, r4
 8005d9e:	d909      	bls.n	8005db4 <_free_r+0x44>
 8005da0:	6821      	ldr	r1, [r4, #0]
 8005da2:	1860      	adds	r0, r4, r1
 8005da4:	4283      	cmp	r3, r0
 8005da6:	d1f3      	bne.n	8005d90 <_free_r+0x20>
 8005da8:	6818      	ldr	r0, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	1841      	adds	r1, r0, r1
 8005dae:	6021      	str	r1, [r4, #0]
 8005db0:	e7ee      	b.n	8005d90 <_free_r+0x20>
 8005db2:	0013      	movs	r3, r2
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	2a00      	cmp	r2, #0
 8005db8:	d001      	beq.n	8005dbe <_free_r+0x4e>
 8005dba:	42a2      	cmp	r2, r4
 8005dbc:	d9f9      	bls.n	8005db2 <_free_r+0x42>
 8005dbe:	6819      	ldr	r1, [r3, #0]
 8005dc0:	1858      	adds	r0, r3, r1
 8005dc2:	42a0      	cmp	r0, r4
 8005dc4:	d10b      	bne.n	8005dde <_free_r+0x6e>
 8005dc6:	6820      	ldr	r0, [r4, #0]
 8005dc8:	1809      	adds	r1, r1, r0
 8005dca:	1858      	adds	r0, r3, r1
 8005dcc:	6019      	str	r1, [r3, #0]
 8005dce:	4282      	cmp	r2, r0
 8005dd0:	d1e0      	bne.n	8005d94 <_free_r+0x24>
 8005dd2:	6810      	ldr	r0, [r2, #0]
 8005dd4:	6852      	ldr	r2, [r2, #4]
 8005dd6:	1841      	adds	r1, r0, r1
 8005dd8:	6019      	str	r1, [r3, #0]
 8005dda:	605a      	str	r2, [r3, #4]
 8005ddc:	e7da      	b.n	8005d94 <_free_r+0x24>
 8005dde:	42a0      	cmp	r0, r4
 8005de0:	d902      	bls.n	8005de8 <_free_r+0x78>
 8005de2:	230c      	movs	r3, #12
 8005de4:	602b      	str	r3, [r5, #0]
 8005de6:	e7d5      	b.n	8005d94 <_free_r+0x24>
 8005de8:	6821      	ldr	r1, [r4, #0]
 8005dea:	1860      	adds	r0, r4, r1
 8005dec:	4282      	cmp	r2, r0
 8005dee:	d103      	bne.n	8005df8 <_free_r+0x88>
 8005df0:	6810      	ldr	r0, [r2, #0]
 8005df2:	6852      	ldr	r2, [r2, #4]
 8005df4:	1841      	adds	r1, r0, r1
 8005df6:	6021      	str	r1, [r4, #0]
 8005df8:	6062      	str	r2, [r4, #4]
 8005dfa:	605c      	str	r4, [r3, #4]
 8005dfc:	e7ca      	b.n	8005d94 <_free_r+0x24>
 8005dfe:	46c0      	nop			; (mov r8, r8)
 8005e00:	20001034 	.word	0x20001034

08005e04 <_read_r>:
 8005e04:	b570      	push	{r4, r5, r6, lr}
 8005e06:	0005      	movs	r5, r0
 8005e08:	0008      	movs	r0, r1
 8005e0a:	0011      	movs	r1, r2
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	4c06      	ldr	r4, [pc, #24]	; (8005e28 <_read_r+0x24>)
 8005e10:	6022      	str	r2, [r4, #0]
 8005e12:	001a      	movs	r2, r3
 8005e14:	f7fb f864 	bl	8000ee0 <_read>
 8005e18:	1c43      	adds	r3, r0, #1
 8005e1a:	d103      	bne.n	8005e24 <_read_r+0x20>
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d000      	beq.n	8005e24 <_read_r+0x20>
 8005e22:	602b      	str	r3, [r5, #0]
 8005e24:	bd70      	pop	{r4, r5, r6, pc}
 8005e26:	46c0      	nop			; (mov r8, r8)
 8005e28:	2000115c 	.word	0x2000115c

08005e2c <_fstat_r>:
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	b570      	push	{r4, r5, r6, lr}
 8005e30:	4c06      	ldr	r4, [pc, #24]	; (8005e4c <_fstat_r+0x20>)
 8005e32:	0005      	movs	r5, r0
 8005e34:	0008      	movs	r0, r1
 8005e36:	0011      	movs	r1, r2
 8005e38:	6023      	str	r3, [r4, #0]
 8005e3a:	f7fb f878 	bl	8000f2e <_fstat>
 8005e3e:	1c43      	adds	r3, r0, #1
 8005e40:	d103      	bne.n	8005e4a <_fstat_r+0x1e>
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d000      	beq.n	8005e4a <_fstat_r+0x1e>
 8005e48:	602b      	str	r3, [r5, #0]
 8005e4a:	bd70      	pop	{r4, r5, r6, pc}
 8005e4c:	2000115c 	.word	0x2000115c

08005e50 <_isatty_r>:
 8005e50:	2300      	movs	r3, #0
 8005e52:	b570      	push	{r4, r5, r6, lr}
 8005e54:	4c06      	ldr	r4, [pc, #24]	; (8005e70 <_isatty_r+0x20>)
 8005e56:	0005      	movs	r5, r0
 8005e58:	0008      	movs	r0, r1
 8005e5a:	6023      	str	r3, [r4, #0]
 8005e5c:	f7fb f875 	bl	8000f4a <_isatty>
 8005e60:	1c43      	adds	r3, r0, #1
 8005e62:	d103      	bne.n	8005e6c <_isatty_r+0x1c>
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d000      	beq.n	8005e6c <_isatty_r+0x1c>
 8005e6a:	602b      	str	r3, [r5, #0]
 8005e6c:	bd70      	pop	{r4, r5, r6, pc}
 8005e6e:	46c0      	nop			; (mov r8, r8)
 8005e70:	2000115c 	.word	0x2000115c

08005e74 <_init>:
 8005e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e76:	46c0      	nop			; (mov r8, r8)
 8005e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7a:	bc08      	pop	{r3}
 8005e7c:	469e      	mov	lr, r3
 8005e7e:	4770      	bx	lr

08005e80 <_fini>:
 8005e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e82:	46c0      	nop			; (mov r8, r8)
 8005e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e86:	bc08      	pop	{r3}
 8005e88:	469e      	mov	lr, r3
 8005e8a:	4770      	bx	lr
