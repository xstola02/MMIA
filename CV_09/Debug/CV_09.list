
CV_09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068c8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08006a74  08006a74  00016a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ad4  08006ad4  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  08006ad4  08006ad4  00016ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006adc  08006adc  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006adc  08006adc  00016adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ae0  08006ae0  00016ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08006ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000094c  200001c8  08006cac  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b14  08006cac  00020b14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127b6  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ae9  00000000  00000000  000329ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb8  00000000  00000000  00035498  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b70  00000000  00000000  00036150  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000259dc  00000000  00000000  00036cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f173  00000000  00000000  0005c69c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5a6d  00000000  00000000  0006b80f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014127c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a0  00000000  00000000  001412f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200001c8 	.word	0x200001c8
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006a5c 	.word	0x08006a5c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200001cc 	.word	0x200001cc
 80001e8:	08006a5c 	.word	0x08006a5c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fac2 	bl	8000a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f814 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f8a6 	bl	8000648 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80004fc:	f000 f87a 	bl	80005f4 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000500:	f005 fd84 	bl	800600c <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  do { HAL_Delay(40);} while (!HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin));
 8000504:	2028      	movs	r0, #40	; 0x28
 8000506:	f000 fb29 	bl	8000b5c <HAL_Delay>
 800050a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050e:	4803      	ldr	r0, [pc, #12]	; (800051c <main+0x30>)
 8000510:	f000 fe02 	bl	8001118 <HAL_GPIO_ReadPin>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	e7f4      	b.n	8000504 <main+0x18>
 800051a:	bf00      	nop
 800051c:	40020800 	.word	0x40020800

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	2230      	movs	r2, #48	; 0x30
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f006 f9d2 	bl	80068d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	4b28      	ldr	r3, [pc, #160]	; (80005ec <SystemClock_Config+0xcc>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	4a27      	ldr	r2, [pc, #156]	; (80005ec <SystemClock_Config+0xcc>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	; 0x40
 8000554:	4b25      	ldr	r3, [pc, #148]	; (80005ec <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <SystemClock_Config+0xd0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a21      	ldr	r2, [pc, #132]	; (80005f0 <SystemClock_Config+0xd0>)
 800056a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800057c:	2301      	movs	r3, #1
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000580:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000590:	2304      	movs	r3, #4
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000594:	23a8      	movs	r3, #168	; 0xa8
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800059c:	2307      	movs	r3, #7
 800059e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0320 	add.w	r3, r7, #32
 80005a4:	4618      	mov	r0, r3
 80005a6:	f001 ff53 	bl	8002450 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005b0:	f000 f93c 	bl	800082c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2105      	movs	r1, #5
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 f9ac 	bl	8002930 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005de:	f000 f925 	bl	800082c <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_USART3_UART_Init+0x4c>)
 80005fa:	4a12      	ldr	r2, [pc, #72]	; (8000644 <MX_USART3_UART_Init+0x50>)
 80005fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <MX_USART3_UART_Init+0x4c>)
 8000600:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000604:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_USART3_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_USART3_UART_Init+0x4c>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <MX_USART3_UART_Init+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_USART3_UART_Init+0x4c>)
 800061a:	220c      	movs	r2, #12
 800061c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <MX_USART3_UART_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_USART3_UART_Init+0x4c>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_USART3_UART_Init+0x4c>)
 800062c:	f002 fb72 	bl	8002d14 <HAL_UART_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000636:	f000 f8f9 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	200001f4 	.word	0x200001f4
 8000644:	40004800 	.word	0x40004800

08000648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08c      	sub	sp, #48	; 0x30
 800064c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	f107 031c 	add.w	r3, r7, #28
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	61bb      	str	r3, [r7, #24]
 8000662:	4b6c      	ldr	r3, [pc, #432]	; (8000814 <MX_GPIO_Init+0x1cc>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a6b      	ldr	r2, [pc, #428]	; (8000814 <MX_GPIO_Init+0x1cc>)
 8000668:	f043 0304 	orr.w	r3, r3, #4
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b69      	ldr	r3, [pc, #420]	; (8000814 <MX_GPIO_Init+0x1cc>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0304 	and.w	r3, r3, #4
 8000676:	61bb      	str	r3, [r7, #24]
 8000678:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
 800067e:	4b65      	ldr	r3, [pc, #404]	; (8000814 <MX_GPIO_Init+0x1cc>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a64      	ldr	r2, [pc, #400]	; (8000814 <MX_GPIO_Init+0x1cc>)
 8000684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b62      	ldr	r3, [pc, #392]	; (8000814 <MX_GPIO_Init+0x1cc>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
 800069a:	4b5e      	ldr	r3, [pc, #376]	; (8000814 <MX_GPIO_Init+0x1cc>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a5d      	ldr	r2, [pc, #372]	; (8000814 <MX_GPIO_Init+0x1cc>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b5b      	ldr	r3, [pc, #364]	; (8000814 <MX_GPIO_Init+0x1cc>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	4b57      	ldr	r3, [pc, #348]	; (8000814 <MX_GPIO_Init+0x1cc>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a56      	ldr	r2, [pc, #344]	; (8000814 <MX_GPIO_Init+0x1cc>)
 80006bc:	f043 0302 	orr.w	r3, r3, #2
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b54      	ldr	r3, [pc, #336]	; (8000814 <MX_GPIO_Init+0x1cc>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0302 	and.w	r3, r3, #2
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	4b50      	ldr	r3, [pc, #320]	; (8000814 <MX_GPIO_Init+0x1cc>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a4f      	ldr	r2, [pc, #316]	; (8000814 <MX_GPIO_Init+0x1cc>)
 80006d8:	f043 0308 	orr.w	r3, r3, #8
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b4d      	ldr	r3, [pc, #308]	; (8000814 <MX_GPIO_Init+0x1cc>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	4b49      	ldr	r3, [pc, #292]	; (8000814 <MX_GPIO_Init+0x1cc>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a48      	ldr	r2, [pc, #288]	; (8000814 <MX_GPIO_Init+0x1cc>)
 80006f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b46      	ldr	r3, [pc, #280]	; (8000814 <MX_GPIO_Init+0x1cc>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	f244 0181 	movw	r1, #16513	; 0x4081
 800070c:	4842      	ldr	r0, [pc, #264]	; (8000818 <MX_GPIO_Init+0x1d0>)
 800070e:	f000 fd1b 	bl	8001148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2140      	movs	r1, #64	; 0x40
 8000716:	4841      	ldr	r0, [pc, #260]	; (800081c <MX_GPIO_Init+0x1d4>)
 8000718:	f000 fd16 	bl	8001148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800071c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000722:	4b3f      	ldr	r3, [pc, #252]	; (8000820 <MX_GPIO_Init+0x1d8>)
 8000724:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4619      	mov	r1, r3
 8000730:	483c      	ldr	r0, [pc, #240]	; (8000824 <MX_GPIO_Init+0x1dc>)
 8000732:	f000 fb47 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000736:	2332      	movs	r3, #50	; 0x32
 8000738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073a:	2302      	movs	r3, #2
 800073c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000742:	2303      	movs	r3, #3
 8000744:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000746:	230b      	movs	r3, #11
 8000748:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	4834      	ldr	r0, [pc, #208]	; (8000824 <MX_GPIO_Init+0x1dc>)
 8000752:	f000 fb37 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000756:	2386      	movs	r3, #134	; 0x86
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000762:	2303      	movs	r3, #3
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000766:	230b      	movs	r3, #11
 8000768:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	4619      	mov	r1, r3
 8000770:	482d      	ldr	r0, [pc, #180]	; (8000828 <MX_GPIO_Init+0x1e0>)
 8000772:	f000 fb27 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000776:	f244 0381 	movw	r3, #16513	; 0x4081
 800077a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4619      	mov	r1, r3
 800078e:	4822      	ldr	r0, [pc, #136]	; (8000818 <MX_GPIO_Init+0x1d0>)
 8000790:	f000 fb18 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a2:	2303      	movs	r3, #3
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a6:	230b      	movs	r3, #11
 80007a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	4619      	mov	r1, r3
 80007b0:	4819      	ldr	r0, [pc, #100]	; (8000818 <MX_GPIO_Init+0x1d0>)
 80007b2:	f000 fb07 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007b6:	2340      	movs	r3, #64	; 0x40
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	4813      	ldr	r0, [pc, #76]	; (800081c <MX_GPIO_Init+0x1d4>)
 80007ce:	f000 faf9 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007d2:	2380      	movs	r3, #128	; 0x80
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d6:	2300      	movs	r3, #0
 80007d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	4619      	mov	r1, r3
 80007e4:	480d      	ldr	r0, [pc, #52]	; (800081c <MX_GPIO_Init+0x1d4>)
 80007e6:	f000 faed 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f0:	2302      	movs	r3, #2
 80007f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f8:	2303      	movs	r3, #3
 80007fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007fc:	230b      	movs	r3, #11
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	4619      	mov	r1, r3
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_GPIO_Init+0x1d4>)
 8000808:	f000 fadc 	bl	8000dc4 <HAL_GPIO_Init>

}
 800080c:	bf00      	nop
 800080e:	3730      	adds	r7, #48	; 0x30
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800
 8000818:	40020400 	.word	0x40020400
 800081c:	40021800 	.word	0x40021800
 8000820:	10110000 	.word	0x10110000
 8000824:	40020800 	.word	0x40020800
 8000828:	40020000 	.word	0x40020000

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
	...

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <HAL_MspInit+0x4c>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084a:	4a0f      	ldr	r2, [pc, #60]	; (8000888 <HAL_MspInit+0x4c>)
 800084c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000850:	6453      	str	r3, [r2, #68]	; 0x44
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <HAL_MspInit+0x4c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	4a08      	ldr	r2, [pc, #32]	; (8000888 <HAL_MspInit+0x4c>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086c:	6413      	str	r3, [r2, #64]	; 0x40
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800

0800088c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a19      	ldr	r2, [pc, #100]	; (8000910 <HAL_UART_MspInit+0x84>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d12c      	bne.n	8000908 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	4a17      	ldr	r2, [pc, #92]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008bc:	6413      	str	r3, [r2, #64]	; 0x40
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a10      	ldr	r2, [pc, #64]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008d4:	f043 0308 	orr.w	r3, r3, #8
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f4:	2303      	movs	r3, #3
 80008f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008f8:	2307      	movs	r3, #7
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <HAL_UART_MspInit+0x8c>)
 8000904:	f000 fa5e 	bl	8000dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000908:	bf00      	nop
 800090a:	3728      	adds	r7, #40	; 0x28
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40004800 	.word	0x40004800
 8000914:	40023800 	.word	0x40023800
 8000918:	40020c00 	.word	0x40020c00

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <HardFault_Handler+0x4>

08000930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <MemManage_Handler+0x4>

08000936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <BusFault_Handler+0x4>

0800093c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <UsageFault_Handler+0x4>

08000942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000970:	f000 f8d4 	bl	8000b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}

08000978 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800097c:	4802      	ldr	r0, [pc, #8]	; (8000988 <OTG_FS_IRQHandler+0x10>)
 800097e:	f000 fd4c 	bl	800141a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000708 	.word	0x20000708

0800098c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000994:	4a14      	ldr	r2, [pc, #80]	; (80009e8 <_sbrk+0x5c>)
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <_sbrk+0x60>)
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <_sbrk+0x64>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d102      	bne.n	80009ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <_sbrk+0x64>)
 80009aa:	4a12      	ldr	r2, [pc, #72]	; (80009f4 <_sbrk+0x68>)
 80009ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <_sbrk+0x64>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d207      	bcs.n	80009cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009bc:	f005 ff52 	bl	8006864 <__errno>
 80009c0:	4602      	mov	r2, r0
 80009c2:	230c      	movs	r3, #12
 80009c4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ca:	e009      	b.n	80009e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <_sbrk+0x64>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009d2:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <_sbrk+0x64>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	4a05      	ldr	r2, [pc, #20]	; (80009f0 <_sbrk+0x64>)
 80009dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009de:	68fb      	ldr	r3, [r7, #12]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20030000 	.word	0x20030000
 80009ec:	00000400 	.word	0x00000400
 80009f0:	200001e4 	.word	0x200001e4
 80009f4:	20000b18 	.word	0x20000b18

080009f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <SystemInit+0x28>)
 80009fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a02:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <SystemInit+0x28>)
 8000a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <SystemInit+0x28>)
 8000a0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a12:	609a      	str	r2, [r3, #8]
#endif
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a5c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a2a:	e003      	b.n	8000a34 <LoopCopyDataInit>

08000a2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a32:	3104      	adds	r1, #4

08000a34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a3c:	d3f6      	bcc.n	8000a2c <CopyDataInit>
  ldr  r2, =_sbss
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a40:	e002      	b.n	8000a48 <LoopFillZerobss>

08000a42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a44:	f842 3b04 	str.w	r3, [r2], #4

08000a48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a4c:	d3f9      	bcc.n	8000a42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a4e:	f7ff ffd3 	bl	80009f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a52:	f005 ff0d 	bl	8006870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a56:	f7ff fd49 	bl	80004ec <main>
  bx  lr    
 8000a5a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a5c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000a60:	08006ae4 	.word	0x08006ae4
  ldr  r0, =_sdata
 8000a64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a68:	200001c8 	.word	0x200001c8
  ldr  r2, =_sbss
 8000a6c:	200001c8 	.word	0x200001c8
  ldr  r3, = _ebss
 8000a70:	20000b14 	.word	0x20000b14

08000a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC_IRQHandler>
	...

08000a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <HAL_Init+0x40>)
 8000a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <HAL_Init+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <HAL_Init+0x40>)
 8000a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_Init+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <HAL_Init+0x40>)
 8000a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f94d 	bl	8000d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f000 f808 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aac:	f7ff fec6 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023c00 	.word	0x40023c00

08000abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0x54>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_InitTick+0x58>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4619      	mov	r1, r3
 8000ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f965 	bl	8000daa <HAL_SYSTICK_Config>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e00e      	b.n	8000b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b0f      	cmp	r3, #15
 8000aee:	d80a      	bhi.n	8000b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295
 8000af8:	f000 f92d 	bl	8000d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <HAL_InitTick+0x5c>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b02:	2300      	movs	r3, #0
 8000b04:	e000      	b.n	8000b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000008 	.word	0x20000008
 8000b18:	20000004 	.word	0x20000004

08000b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_IncTick+0x20>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_IncTick+0x24>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_IncTick+0x24>)
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20000234 	.word	0x20000234

08000b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return uwTick;
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <HAL_GetTick+0x14>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000234 	.word	0x20000234

08000b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b64:	f7ff ffee 	bl	8000b44 <HAL_GetTick>
 8000b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b74:	d005      	beq.n	8000b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <HAL_Delay+0x40>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4413      	add	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b82:	bf00      	nop
 8000b84:	f7ff ffde 	bl	8000b44 <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d8f7      	bhi.n	8000b84 <HAL_Delay+0x28>
  {
  }
}
 8000b94:	bf00      	nop
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000008 	.word	0x20000008

08000ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	60d3      	str	r3, [r2, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <__NVIC_GetPriorityGrouping+0x18>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	f003 0307 	and.w	r3, r3, #7
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	db0b      	blt.n	8000c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f003 021f 	and.w	r2, r3, #31
 8000c1c:	4907      	ldr	r1, [pc, #28]	; (8000c3c <__NVIC_EnableIRQ+0x38>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	095b      	lsrs	r3, r3, #5
 8000c24:	2001      	movs	r0, #1
 8000c26:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000e100 	.word	0xe000e100

08000c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db0a      	blt.n	8000c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	490c      	ldr	r1, [pc, #48]	; (8000c8c <__NVIC_SetPriority+0x4c>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	0112      	lsls	r2, r2, #4
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	440b      	add	r3, r1
 8000c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c68:	e00a      	b.n	8000c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4908      	ldr	r1, [pc, #32]	; (8000c90 <__NVIC_SetPriority+0x50>)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	3b04      	subs	r3, #4
 8000c78:	0112      	lsls	r2, r2, #4
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	761a      	strb	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	; 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f1c3 0307 	rsb	r3, r3, #7
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	bf28      	it	cs
 8000cb2:	2304      	movcs	r3, #4
 8000cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	2b06      	cmp	r3, #6
 8000cbc:	d902      	bls.n	8000cc4 <NVIC_EncodePriority+0x30>
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3b03      	subs	r3, #3
 8000cc2:	e000      	b.n	8000cc6 <NVIC_EncodePriority+0x32>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43d9      	mvns	r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	4313      	orrs	r3, r2
         );
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3724      	adds	r7, #36	; 0x24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d0c:	d301      	bcc.n	8000d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00f      	b.n	8000d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d12:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <SysTick_Config+0x40>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f7ff ff8e 	bl	8000c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <SysTick_Config+0x40>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2a:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <SysTick_Config+0x40>)
 8000d2c:	2207      	movs	r2, #7
 8000d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	e000e010 	.word	0xe000e010

08000d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ff29 	bl	8000ba0 <__NVIC_SetPriorityGrouping>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d68:	f7ff ff3e 	bl	8000be8 <__NVIC_GetPriorityGrouping>
 8000d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	6978      	ldr	r0, [r7, #20]
 8000d74:	f7ff ff8e 	bl	8000c94 <NVIC_EncodePriority>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff5d 	bl	8000c40 <__NVIC_SetPriority>
}
 8000d86:	bf00      	nop
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff31 	bl	8000c04 <__NVIC_EnableIRQ>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ffa2 	bl	8000cfc <SysTick_Config>
 8000db8:	4603      	mov	r3, r0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b089      	sub	sp, #36	; 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
 8000dde:	e177      	b.n	80010d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000de0:	2201      	movs	r2, #1
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	697a      	ldr	r2, [r7, #20]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	f040 8166 	bne.w	80010ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d00b      	beq.n	8000e1e <HAL_GPIO_Init+0x5a>
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d007      	beq.n	8000e1e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e12:	2b11      	cmp	r3, #17
 8000e14:	d003      	beq.n	8000e1e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2b12      	cmp	r3, #18
 8000e1c:	d130      	bne.n	8000e80 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	2203      	movs	r2, #3
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4013      	ands	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	68da      	ldr	r2, [r3, #12]
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e54:	2201      	movs	r2, #1
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	091b      	lsrs	r3, r3, #4
 8000e6a:	f003 0201 	and.w	r2, r3, #1
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	689a      	ldr	r2, [r3, #8]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d003      	beq.n	8000ec0 <HAL_GPIO_Init+0xfc>
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b12      	cmp	r3, #18
 8000ebe:	d123      	bne.n	8000f08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	08da      	lsrs	r2, r3, #3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3208      	adds	r2, #8
 8000ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	f003 0307 	and.w	r3, r3, #7
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	220f      	movs	r2, #15
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	691a      	ldr	r2, [r3, #16]
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	08da      	lsrs	r2, r3, #3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3208      	adds	r2, #8
 8000f02:	69b9      	ldr	r1, [r7, #24]
 8000f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0203 	and.w	r2, r3, #3
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f000 80c0 	beq.w	80010ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b65      	ldr	r3, [pc, #404]	; (80010e4 <HAL_GPIO_Init+0x320>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	4a64      	ldr	r2, [pc, #400]	; (80010e4 <HAL_GPIO_Init+0x320>)
 8000f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f58:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5a:	4b62      	ldr	r3, [pc, #392]	; (80010e4 <HAL_GPIO_Init+0x320>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f66:	4a60      	ldr	r2, [pc, #384]	; (80010e8 <HAL_GPIO_Init+0x324>)
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	089b      	lsrs	r3, r3, #2
 8000f6c:	3302      	adds	r3, #2
 8000f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	220f      	movs	r2, #15
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a57      	ldr	r2, [pc, #348]	; (80010ec <HAL_GPIO_Init+0x328>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d037      	beq.n	8001002 <HAL_GPIO_Init+0x23e>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a56      	ldr	r2, [pc, #344]	; (80010f0 <HAL_GPIO_Init+0x32c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d031      	beq.n	8000ffe <HAL_GPIO_Init+0x23a>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a55      	ldr	r2, [pc, #340]	; (80010f4 <HAL_GPIO_Init+0x330>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d02b      	beq.n	8000ffa <HAL_GPIO_Init+0x236>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a54      	ldr	r2, [pc, #336]	; (80010f8 <HAL_GPIO_Init+0x334>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d025      	beq.n	8000ff6 <HAL_GPIO_Init+0x232>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a53      	ldr	r2, [pc, #332]	; (80010fc <HAL_GPIO_Init+0x338>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d01f      	beq.n	8000ff2 <HAL_GPIO_Init+0x22e>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a52      	ldr	r2, [pc, #328]	; (8001100 <HAL_GPIO_Init+0x33c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d019      	beq.n	8000fee <HAL_GPIO_Init+0x22a>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a51      	ldr	r2, [pc, #324]	; (8001104 <HAL_GPIO_Init+0x340>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d013      	beq.n	8000fea <HAL_GPIO_Init+0x226>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a50      	ldr	r2, [pc, #320]	; (8001108 <HAL_GPIO_Init+0x344>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d00d      	beq.n	8000fe6 <HAL_GPIO_Init+0x222>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a4f      	ldr	r2, [pc, #316]	; (800110c <HAL_GPIO_Init+0x348>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d007      	beq.n	8000fe2 <HAL_GPIO_Init+0x21e>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a4e      	ldr	r2, [pc, #312]	; (8001110 <HAL_GPIO_Init+0x34c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d101      	bne.n	8000fde <HAL_GPIO_Init+0x21a>
 8000fda:	2309      	movs	r3, #9
 8000fdc:	e012      	b.n	8001004 <HAL_GPIO_Init+0x240>
 8000fde:	230a      	movs	r3, #10
 8000fe0:	e010      	b.n	8001004 <HAL_GPIO_Init+0x240>
 8000fe2:	2308      	movs	r3, #8
 8000fe4:	e00e      	b.n	8001004 <HAL_GPIO_Init+0x240>
 8000fe6:	2307      	movs	r3, #7
 8000fe8:	e00c      	b.n	8001004 <HAL_GPIO_Init+0x240>
 8000fea:	2306      	movs	r3, #6
 8000fec:	e00a      	b.n	8001004 <HAL_GPIO_Init+0x240>
 8000fee:	2305      	movs	r3, #5
 8000ff0:	e008      	b.n	8001004 <HAL_GPIO_Init+0x240>
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	e006      	b.n	8001004 <HAL_GPIO_Init+0x240>
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e004      	b.n	8001004 <HAL_GPIO_Init+0x240>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	e002      	b.n	8001004 <HAL_GPIO_Init+0x240>
 8000ffe:	2301      	movs	r3, #1
 8001000:	e000      	b.n	8001004 <HAL_GPIO_Init+0x240>
 8001002:	2300      	movs	r3, #0
 8001004:	69fa      	ldr	r2, [r7, #28]
 8001006:	f002 0203 	and.w	r2, r2, #3
 800100a:	0092      	lsls	r2, r2, #2
 800100c:	4093      	lsls	r3, r2
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001014:	4934      	ldr	r1, [pc, #208]	; (80010e8 <HAL_GPIO_Init+0x324>)
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	089b      	lsrs	r3, r3, #2
 800101a:	3302      	adds	r3, #2
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001022:	4b3c      	ldr	r3, [pc, #240]	; (8001114 <HAL_GPIO_Init+0x350>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001046:	4a33      	ldr	r2, [pc, #204]	; (8001114 <HAL_GPIO_Init+0x350>)
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800104c:	4b31      	ldr	r3, [pc, #196]	; (8001114 <HAL_GPIO_Init+0x350>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001070:	4a28      	ldr	r2, [pc, #160]	; (8001114 <HAL_GPIO_Init+0x350>)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001076:	4b27      	ldr	r3, [pc, #156]	; (8001114 <HAL_GPIO_Init+0x350>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800109a:	4a1e      	ldr	r2, [pc, #120]	; (8001114 <HAL_GPIO_Init+0x350>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010a0:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <HAL_GPIO_Init+0x350>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010c4:	4a13      	ldr	r2, [pc, #76]	; (8001114 <HAL_GPIO_Init+0x350>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3301      	adds	r3, #1
 80010ce:	61fb      	str	r3, [r7, #28]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	2b0f      	cmp	r3, #15
 80010d4:	f67f ae84 	bls.w	8000de0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010d8:	bf00      	nop
 80010da:	3724      	adds	r7, #36	; 0x24
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40013800 	.word	0x40013800
 80010ec:	40020000 	.word	0x40020000
 80010f0:	40020400 	.word	0x40020400
 80010f4:	40020800 	.word	0x40020800
 80010f8:	40020c00 	.word	0x40020c00
 80010fc:	40021000 	.word	0x40021000
 8001100:	40021400 	.word	0x40021400
 8001104:	40021800 	.word	0x40021800
 8001108:	40021c00 	.word	0x40021c00
 800110c:	40022000 	.word	0x40022000
 8001110:	40022400 	.word	0x40022400
 8001114:	40013c00 	.word	0x40013c00

08001118 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	691a      	ldr	r2, [r3, #16]
 8001128:	887b      	ldrh	r3, [r7, #2]
 800112a:	4013      	ands	r3, r2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d002      	beq.n	8001136 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001130:	2301      	movs	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	e001      	b.n	800113a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001136:	2300      	movs	r3, #0
 8001138:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]
 8001154:	4613      	mov	r3, r2
 8001156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001158:	787b      	ldrb	r3, [r7, #1]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800115e:	887a      	ldrh	r2, [r7, #2]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001164:	e003      	b.n	800116e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001166:	887b      	ldrh	r3, [r7, #2]
 8001168:	041a      	lsls	r2, r3, #16
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	619a      	str	r2, [r3, #24]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800117a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117c:	b08f      	sub	sp, #60	; 0x3c
 800117e:	af0a      	add	r7, sp, #40	; 0x28
 8001180:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e10f      	b.n	80013ac <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d106      	bne.n	80011ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f005 f864 	bl	8006274 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2203      	movs	r2, #3
 80011b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d102      	bne.n	80011c6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f002 fa81 	bl	80036d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	687e      	ldr	r6, [r7, #4]
 80011d8:	466d      	mov	r5, sp
 80011da:	f106 0410 	add.w	r4, r6, #16
 80011de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80011ee:	1d33      	adds	r3, r6, #4
 80011f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011f2:	6838      	ldr	r0, [r7, #0]
 80011f4:	f002 f958 	bl	80034a8 <USB_CoreInit>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d005      	beq.n	800120a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2202      	movs	r2, #2
 8001202:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e0d0      	b.n	80013ac <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f002 fa6f 	bl	80036f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001216:	2300      	movs	r3, #0
 8001218:	73fb      	strb	r3, [r7, #15]
 800121a:	e04a      	b.n	80012b2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800121c:	7bfa      	ldrb	r2, [r7, #15]
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	4613      	mov	r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	1a9b      	subs	r3, r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	333d      	adds	r3, #61	; 0x3d
 800122c:	2201      	movs	r2, #1
 800122e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001230:	7bfa      	ldrb	r2, [r7, #15]
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	4613      	mov	r3, r2
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	1a9b      	subs	r3, r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	440b      	add	r3, r1
 800123e:	333c      	adds	r3, #60	; 0x3c
 8001240:	7bfa      	ldrb	r2, [r7, #15]
 8001242:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001244:	7bfa      	ldrb	r2, [r7, #15]
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	b298      	uxth	r0, r3
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	4613      	mov	r3, r2
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	1a9b      	subs	r3, r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	440b      	add	r3, r1
 8001256:	3342      	adds	r3, #66	; 0x42
 8001258:	4602      	mov	r2, r0
 800125a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800125c:	7bfa      	ldrb	r2, [r7, #15]
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	4613      	mov	r3, r2
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	1a9b      	subs	r3, r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	440b      	add	r3, r1
 800126a:	333f      	adds	r3, #63	; 0x3f
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001270:	7bfa      	ldrb	r2, [r7, #15]
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	4613      	mov	r3, r2
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	1a9b      	subs	r3, r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	3344      	adds	r3, #68	; 0x44
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001284:	7bfa      	ldrb	r2, [r7, #15]
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	4613      	mov	r3, r2
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	1a9b      	subs	r3, r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	440b      	add	r3, r1
 8001292:	3348      	adds	r3, #72	; 0x48
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001298:	7bfa      	ldrb	r2, [r7, #15]
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	4613      	mov	r3, r2
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	1a9b      	subs	r3, r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	440b      	add	r3, r1
 80012a6:	3350      	adds	r3, #80	; 0x50
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	3301      	adds	r3, #1
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	7bfa      	ldrb	r2, [r7, #15]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d3af      	bcc.n	800121c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012bc:	2300      	movs	r3, #0
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	e044      	b.n	800134c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012c2:	7bfa      	ldrb	r2, [r7, #15]
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	4613      	mov	r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	1a9b      	subs	r3, r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	440b      	add	r3, r1
 80012d0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012d8:	7bfa      	ldrb	r2, [r7, #15]
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	4613      	mov	r3, r2
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	1a9b      	subs	r3, r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	440b      	add	r3, r1
 80012e6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80012ea:	7bfa      	ldrb	r2, [r7, #15]
 80012ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012ee:	7bfa      	ldrb	r2, [r7, #15]
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	4613      	mov	r3, r2
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	1a9b      	subs	r3, r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	440b      	add	r3, r1
 80012fc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001304:	7bfa      	ldrb	r2, [r7, #15]
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	4613      	mov	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	1a9b      	subs	r3, r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800131a:	7bfa      	ldrb	r2, [r7, #15]
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	4613      	mov	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	1a9b      	subs	r3, r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	440b      	add	r3, r1
 8001328:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001330:	7bfa      	ldrb	r2, [r7, #15]
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	4613      	mov	r3, r2
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	1a9b      	subs	r3, r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	440b      	add	r3, r1
 800133e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	3301      	adds	r3, #1
 800134a:	73fb      	strb	r3, [r7, #15]
 800134c:	7bfa      	ldrb	r2, [r7, #15]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	429a      	cmp	r2, r3
 8001354:	d3b5      	bcc.n	80012c2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	687e      	ldr	r6, [r7, #4]
 800135e:	466d      	mov	r5, sp
 8001360:	f106 0410 	add.w	r4, r6, #16
 8001364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001366:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001368:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800136a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800136c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001370:	e885 0003 	stmia.w	r5, {r0, r1}
 8001374:	1d33      	adds	r3, r6, #4
 8001376:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001378:	6838      	ldr	r0, [r7, #0]
 800137a:	f002 f9e5 	bl	8003748 <USB_DevInit>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d005      	beq.n	8001390 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2202      	movs	r2, #2
 8001388:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e00d      	b.n	80013ac <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f003 fa2d 	bl	8004804 <USB_DevDisconnect>

  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d101      	bne.n	80013d0 <HAL_PCD_Start+0x1c>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e020      	b.n	8001412 <HAL_PCD_Start+0x5e>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d109      	bne.n	80013f4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d005      	beq.n	80013f4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f002 f959 	bl	80036b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f003 f9dd 	bl	80047c2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800141a:	b590      	push	{r4, r7, lr}
 800141c:	b08d      	sub	sp, #52	; 0x34
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001428:	6a3b      	ldr	r3, [r7, #32]
 800142a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f003 fa9b 	bl	800496c <USB_GetMode>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	f040 839d 	bne.w	8001b78 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f003 f9ff 	bl	8004846 <USB_ReadInterrupts>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 8393 	beq.w	8001b76 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f003 f9f6 	bl	8004846 <USB_ReadInterrupts>
 800145a:	4603      	mov	r3, r0
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b02      	cmp	r3, #2
 8001462:	d107      	bne.n	8001474 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	695a      	ldr	r2, [r3, #20]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f002 0202 	and.w	r2, r2, #2
 8001472:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f003 f9e4 	bl	8004846 <USB_ReadInterrupts>
 800147e:	4603      	mov	r3, r0
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	2b10      	cmp	r3, #16
 8001486:	d161      	bne.n	800154c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	699a      	ldr	r2, [r3, #24]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0210 	bic.w	r2, r2, #16
 8001496:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	f003 020f 	and.w	r2, r3, #15
 80014a4:	4613      	mov	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	1a9b      	subs	r3, r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	4413      	add	r3, r2
 80014b4:	3304      	adds	r3, #4
 80014b6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	0c5b      	lsrs	r3, r3, #17
 80014bc:	f003 030f 	and.w	r3, r3, #15
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d124      	bne.n	800150e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80014ca:	4013      	ands	r3, r2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d035      	beq.n	800153c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014de:	b29b      	uxth	r3, r3
 80014e0:	461a      	mov	r2, r3
 80014e2:	6a38      	ldr	r0, [r7, #32]
 80014e4:	f003 f84a 	bl	800457c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	091b      	lsrs	r3, r3, #4
 80014f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014f4:	441a      	add	r2, r3
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	699a      	ldr	r2, [r3, #24]
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	091b      	lsrs	r3, r3, #4
 8001502:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001506:	441a      	add	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	619a      	str	r2, [r3, #24]
 800150c:	e016      	b.n	800153c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	0c5b      	lsrs	r3, r3, #17
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	2b06      	cmp	r3, #6
 8001518:	d110      	bne.n	800153c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001520:	2208      	movs	r2, #8
 8001522:	4619      	mov	r1, r3
 8001524:	6a38      	ldr	r0, [r7, #32]
 8001526:	f003 f829 	bl	800457c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	699a      	ldr	r2, [r3, #24]
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	091b      	lsrs	r3, r3, #4
 8001532:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001536:	441a      	add	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	699a      	ldr	r2, [r3, #24]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0210 	orr.w	r2, r2, #16
 800154a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f003 f978 	bl	8004846 <USB_ReadInterrupts>
 8001556:	4603      	mov	r3, r0
 8001558:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800155c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001560:	d16e      	bne.n	8001640 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f003 f97e 	bl	800486c <USB_ReadDevAllOutEpInterrupt>
 8001570:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001572:	e062      	b.n	800163a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d057      	beq.n	800162e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	4611      	mov	r1, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f003 f9a3 	bl	80048d4 <USB_ReadDevOutEPInterrupt>
 800158e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00c      	beq.n	80015b4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	015a      	lsls	r2, r3, #5
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	4413      	add	r3, r2
 80015a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015a6:	461a      	mov	r2, r3
 80015a8:	2301      	movs	r3, #1
 80015aa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80015ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 fd98 	bl	80020e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00c      	beq.n	80015d8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	015a      	lsls	r2, r3, #5
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	4413      	add	r3, r2
 80015c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015ca:	461a      	mov	r2, r3
 80015cc:	2308      	movs	r3, #8
 80015ce:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80015d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 fe92 	bl	80022fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	f003 0310 	and.w	r3, r3, #16
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d008      	beq.n	80015f4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	015a      	lsls	r2, r3, #5
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	4413      	add	r3, r2
 80015ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015ee:	461a      	mov	r2, r3
 80015f0:	2310      	movs	r3, #16
 80015f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	f003 0320 	and.w	r3, r3, #32
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d008      	beq.n	8001610 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	015a      	lsls	r2, r3, #5
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	4413      	add	r3, r2
 8001606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800160a:	461a      	mov	r2, r3
 800160c:	2320      	movs	r3, #32
 800160e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d009      	beq.n	800162e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	015a      	lsls	r2, r3, #5
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	4413      	add	r3, r2
 8001622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001626:	461a      	mov	r2, r3
 8001628:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800162c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	3301      	adds	r3, #1
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001636:	085b      	lsrs	r3, r3, #1
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800163a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163c:	2b00      	cmp	r3, #0
 800163e:	d199      	bne.n	8001574 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f003 f8fe 	bl	8004846 <USB_ReadInterrupts>
 800164a:	4603      	mov	r3, r0
 800164c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001650:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001654:	f040 80c0 	bne.w	80017d8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f003 f91f 	bl	80048a0 <USB_ReadDevAllInEpInterrupt>
 8001662:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001668:	e0b2      	b.n	80017d0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800166a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 80a7 	beq.w	80017c4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f003 f945 	bl	8004910 <USB_ReadDevInEPInterrupt>
 8001686:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d057      	beq.n	8001742 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	f003 030f 	and.w	r3, r3, #15
 8001698:	2201      	movs	r2, #1
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	69f9      	ldr	r1, [r7, #28]
 80016ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80016b2:	4013      	ands	r3, r2
 80016b4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	015a      	lsls	r2, r3, #5
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	4413      	add	r3, r2
 80016be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016c2:	461a      	mov	r2, r3
 80016c4:	2301      	movs	r3, #1
 80016c6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d132      	bne.n	8001736 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d4:	4613      	mov	r3, r2
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	1a9b      	subs	r3, r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	3348      	adds	r3, #72	; 0x48
 80016e0:	6819      	ldr	r1, [r3, #0]
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e6:	4613      	mov	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	1a9b      	subs	r3, r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4403      	add	r3, r0
 80016f0:	3344      	adds	r3, #68	; 0x44
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4419      	add	r1, r3
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016fa:	4613      	mov	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	1a9b      	subs	r3, r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4403      	add	r3, r0
 8001704:	3348      	adds	r3, #72	; 0x48
 8001706:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	2b00      	cmp	r3, #0
 800170c:	d113      	bne.n	8001736 <HAL_PCD_IRQHandler+0x31c>
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001712:	4613      	mov	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	1a9b      	subs	r3, r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	440b      	add	r3, r1
 800171c:	3350      	adds	r3, #80	; 0x50
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d108      	bne.n	8001736 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800172e:	461a      	mov	r2, r3
 8001730:	2101      	movs	r1, #1
 8001732:	f003 f94d 	bl	80049d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	b2db      	uxtb	r3, r3
 800173a:	4619      	mov	r1, r3
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f004 fe28 	bl	8006392 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	2b00      	cmp	r3, #0
 800174a:	d008      	beq.n	800175e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	015a      	lsls	r2, r3, #5
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	4413      	add	r3, r2
 8001754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001758:	461a      	mov	r2, r3
 800175a:	2308      	movs	r3, #8
 800175c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	2b00      	cmp	r3, #0
 8001766:	d008      	beq.n	800177a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	015a      	lsls	r2, r3, #5
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	4413      	add	r3, r2
 8001770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001774:	461a      	mov	r2, r3
 8001776:	2310      	movs	r3, #16
 8001778:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001780:	2b00      	cmp	r3, #0
 8001782:	d008      	beq.n	8001796 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	015a      	lsls	r2, r3, #5
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	4413      	add	r3, r2
 800178c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001790:	461a      	mov	r2, r3
 8001792:	2340      	movs	r3, #64	; 0x40
 8001794:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d008      	beq.n	80017b2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	015a      	lsls	r2, r3, #5
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	4413      	add	r3, r2
 80017a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ac:	461a      	mov	r2, r3
 80017ae:	2302      	movs	r3, #2
 80017b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80017bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 fc03 	bl	8001fca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	3301      	adds	r3, #1
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017cc:	085b      	lsrs	r3, r3, #1
 80017ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f47f af49 	bne.w	800166a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f003 f832 	bl	8004846 <USB_ReadInterrupts>
 80017e2:	4603      	mov	r3, r0
 80017e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80017e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017ec:	d122      	bne.n	8001834 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017fc:	f023 0301 	bic.w	r3, r3, #1
 8001800:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001808:	2b01      	cmp	r3, #1
 800180a:	d108      	bne.n	800181e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001814:	2100      	movs	r1, #0
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 fe0e 	bl	8002438 <HAL_PCDEx_LPM_Callback>
 800181c:	e002      	b.n	8001824 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f004 fe2e 	bl	8006480 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	695a      	ldr	r2, [r3, #20]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001832:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f003 f804 	bl	8004846 <USB_ReadInterrupts>
 800183e:	4603      	mov	r3, r0
 8001840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001844:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001848:	d112      	bne.n	8001870 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b01      	cmp	r3, #1
 8001858:	d102      	bne.n	8001860 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f004 fdea 	bl	8006434 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	695a      	ldr	r2, [r3, #20]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800186e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f002 ffe6 	bl	8004846 <USB_ReadInterrupts>
 800187a:	4603      	mov	r3, r0
 800187c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001884:	f040 80c7 	bne.w	8001a16 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	69fa      	ldr	r2, [r7, #28]
 8001892:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001896:	f023 0301 	bic.w	r3, r3, #1
 800189a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2110      	movs	r1, #16
 80018a2:	4618      	mov	r0, r3
 80018a4:	f002 f8b4 	bl	8003a10 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a8:	2300      	movs	r3, #0
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ac:	e056      	b.n	800195c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80018ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b0:	015a      	lsls	r2, r3, #5
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	4413      	add	r3, r2
 80018b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018ba:	461a      	mov	r2, r3
 80018bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018c0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80018c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c4:	015a      	lsls	r2, r3, #5
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	4413      	add	r3, r2
 80018ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018d2:	0151      	lsls	r1, r2, #5
 80018d4:	69fa      	ldr	r2, [r7, #28]
 80018d6:	440a      	add	r2, r1
 80018d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80018dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018e0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80018e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e4:	015a      	lsls	r2, r3, #5
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	4413      	add	r3, r2
 80018ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018f2:	0151      	lsls	r1, r2, #5
 80018f4:	69fa      	ldr	r2, [r7, #28]
 80018f6:	440a      	add	r2, r1
 80018f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80018fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001900:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001904:	015a      	lsls	r2, r3, #5
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	4413      	add	r3, r2
 800190a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800190e:	461a      	mov	r2, r3
 8001910:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001914:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001918:	015a      	lsls	r2, r3, #5
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	4413      	add	r3, r2
 800191e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001926:	0151      	lsls	r1, r2, #5
 8001928:	69fa      	ldr	r2, [r7, #28]
 800192a:	440a      	add	r2, r1
 800192c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001930:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001934:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001938:	015a      	lsls	r2, r3, #5
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	4413      	add	r3, r2
 800193e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001946:	0151      	lsls	r1, r2, #5
 8001948:	69fa      	ldr	r2, [r7, #28]
 800194a:	440a      	add	r2, r1
 800194c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001950:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001954:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001958:	3301      	adds	r3, #1
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001962:	429a      	cmp	r2, r3
 8001964:	d3a3      	bcc.n	80018ae <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001974:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001978:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	2b00      	cmp	r3, #0
 8001980:	d016      	beq.n	80019b0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800198c:	69fa      	ldr	r2, [r7, #28]
 800198e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001992:	f043 030b 	orr.w	r3, r3, #11
 8001996:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019a8:	f043 030b 	orr.w	r3, r3, #11
 80019ac:	6453      	str	r3, [r2, #68]	; 0x44
 80019ae:	e015      	b.n	80019dc <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	69fa      	ldr	r2, [r7, #28]
 80019ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019c2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80019c6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	69fa      	ldr	r2, [r7, #28]
 80019d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019d6:	f043 030b 	orr.w	r3, r3, #11
 80019da:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	69fa      	ldr	r2, [r7, #28]
 80019e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80019ee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a00:	461a      	mov	r2, r3
 8001a02:	f002 ffe5 	bl	80049d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f002 ff13 	bl	8004846 <USB_ReadInterrupts>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a2a:	d124      	bne.n	8001a76 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f002 ffa9 	bl	8004988 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f002 f849 	bl	8003ad2 <USB_GetDevSpeed>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681c      	ldr	r4, [r3, #0]
 8001a4c:	f001 f92e 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8001a50:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	f001 fd86 	bl	800356c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f004 fcbe 	bl	80063e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	695a      	ldr	r2, [r3, #20]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a74:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f002 fee3 	bl	8004846 <USB_ReadInterrupts>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d10a      	bne.n	8001aa0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f004 fc9b 	bl	80063c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	695a      	ldr	r2, [r3, #20]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f002 0208 	and.w	r2, r2, #8
 8001a9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f002 fece 	bl	8004846 <USB_ReadInterrupts>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ab4:	d10f      	bne.n	8001ad6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	4619      	mov	r1, r3
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f004 fcfd 	bl	80064c0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	695a      	ldr	r2, [r3, #20]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001ad4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f002 feb3 	bl	8004846 <USB_ReadInterrupts>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001aea:	d10f      	bne.n	8001b0c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	4619      	mov	r1, r3
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f004 fcd0 	bl	800649c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	695a      	ldr	r2, [r3, #20]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f002 fe98 	bl	8004846 <USB_ReadInterrupts>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b20:	d10a      	bne.n	8001b38 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f004 fcde 	bl	80064e4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	695a      	ldr	r2, [r3, #20]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f002 fe82 	bl	8004846 <USB_ReadInterrupts>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d115      	bne.n	8001b78 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f004 fcce 	bl	8006500 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6859      	ldr	r1, [r3, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	e000      	b.n	8001b78 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001b76:	bf00      	nop
    }
  }
}
 8001b78:	3734      	adds	r7, #52	; 0x34
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd90      	pop	{r4, r7, pc}

08001b7e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	460b      	mov	r3, r1
 8001b88:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_PCD_SetAddress+0x1a>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e013      	b.n	8001bc0 <HAL_PCD_SetAddress+0x42>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	78fa      	ldrb	r2, [r7, #3]
 8001ba4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	78fa      	ldrb	r2, [r7, #3]
 8001bae:	4611      	mov	r1, r2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f002 fde0 	bl	8004776 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	4608      	mov	r0, r1
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	70fb      	strb	r3, [r7, #3]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	803b      	strh	r3, [r7, #0]
 8001bde:	4613      	mov	r3, r2
 8001be0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001be6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	da0f      	bge.n	8001c0e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bee:	78fb      	ldrb	r3, [r7, #3]
 8001bf0:	f003 020f 	and.w	r2, r3, #15
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	1a9b      	subs	r3, r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	3338      	adds	r3, #56	; 0x38
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	3304      	adds	r3, #4
 8001c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	705a      	strb	r2, [r3, #1]
 8001c0c:	e00f      	b.n	8001c2e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	f003 020f 	and.w	r2, r3, #15
 8001c14:	4613      	mov	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	1a9b      	subs	r3, r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	4413      	add	r3, r2
 8001c24:	3304      	adds	r3, #4
 8001c26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	f003 030f 	and.w	r3, r3, #15
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c3a:	883a      	ldrh	r2, [r7, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	78ba      	ldrb	r2, [r7, #2]
 8001c44:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	785b      	ldrb	r3, [r3, #1]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d004      	beq.n	8001c58 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c58:	78bb      	ldrb	r3, [r7, #2]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d102      	bne.n	8001c64 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d101      	bne.n	8001c72 <HAL_PCD_EP_Open+0xaa>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e00e      	b.n	8001c90 <HAL_PCD_EP_Open+0xc8>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68f9      	ldr	r1, [r7, #12]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f001 ff4b 	bl	8003b1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001c8e:	7afb      	ldrb	r3, [r7, #11]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	da0f      	bge.n	8001ccc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	f003 020f 	and.w	r2, r3, #15
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	1a9b      	subs	r3, r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	3338      	adds	r3, #56	; 0x38
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	705a      	strb	r2, [r3, #1]
 8001cca:	e00f      	b.n	8001cec <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	f003 020f 	and.w	r2, r3, #15
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	1a9b      	subs	r3, r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <HAL_PCD_EP_Close+0x6e>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e00e      	b.n	8001d24 <HAL_PCD_EP_Close+0x8c>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68f9      	ldr	r1, [r7, #12]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f001 ff89 	bl	8003c2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	607a      	str	r2, [r7, #4]
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d3c:	7afb      	ldrb	r3, [r7, #11]
 8001d3e:	f003 020f 	and.w	r2, r3, #15
 8001d42:	4613      	mov	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	1a9b      	subs	r3, r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	4413      	add	r3, r2
 8001d52:	3304      	adds	r3, #4
 8001d54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d6e:	7afb      	ldrb	r3, [r7, #11]
 8001d70:	f003 030f 	and.w	r3, r3, #15
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d102      	bne.n	8001d88 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d88:	7afb      	ldrb	r3, [r7, #11]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6818      	ldr	r0, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	6979      	ldr	r1, [r7, #20]
 8001da0:	f002 fa64 	bl	800426c <USB_EP0StartXfer>
 8001da4:	e008      	b.n	8001db8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	461a      	mov	r2, r3
 8001db2:	6979      	ldr	r1, [r7, #20]
 8001db4:	f002 f816 	bl	8003de4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b086      	sub	sp, #24
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	607a      	str	r2, [r7, #4]
 8001dcc:	603b      	str	r3, [r7, #0]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dd2:	7afb      	ldrb	r3, [r7, #11]
 8001dd4:	f003 020f 	and.w	r2, r3, #15
 8001dd8:	4613      	mov	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	1a9b      	subs	r3, r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	3338      	adds	r3, #56	; 0x38
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4413      	add	r3, r2
 8001de6:	3304      	adds	r3, #4
 8001de8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e02:	7afb      	ldrb	r3, [r7, #11]
 8001e04:	f003 030f 	and.w	r3, r3, #15
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d102      	bne.n	8001e1c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e1c:	7afb      	ldrb	r3, [r7, #11]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d109      	bne.n	8001e3a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6818      	ldr	r0, [r3, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	461a      	mov	r2, r3
 8001e32:	6979      	ldr	r1, [r7, #20]
 8001e34:	f002 fa1a 	bl	800426c <USB_EP0StartXfer>
 8001e38:	e008      	b.n	8001e4c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	6979      	ldr	r1, [r7, #20]
 8001e48:	f001 ffcc 	bl	8003de4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	f003 020f 	and.w	r2, r3, #15
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d901      	bls.n	8001e74 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e050      	b.n	8001f16 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	da0f      	bge.n	8001e9c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	f003 020f 	and.w	r2, r3, #15
 8001e82:	4613      	mov	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	1a9b      	subs	r3, r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	3338      	adds	r3, #56	; 0x38
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	4413      	add	r3, r2
 8001e90:	3304      	adds	r3, #4
 8001e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2201      	movs	r2, #1
 8001e98:	705a      	strb	r2, [r3, #1]
 8001e9a:	e00d      	b.n	8001eb8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e9c:	78fa      	ldrb	r2, [r7, #3]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	1a9b      	subs	r3, r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	3304      	adds	r3, #4
 8001eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <HAL_PCD_EP_SetStall+0x82>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e01e      	b.n	8001f16 <HAL_PCD_EP_SetStall+0xc0>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68f9      	ldr	r1, [r7, #12]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f002 fb71 	bl	80045ce <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001eec:	78fb      	ldrb	r3, [r7, #3]
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10a      	bne.n	8001f0c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6818      	ldr	r0, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	b2d9      	uxtb	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f06:	461a      	mov	r2, r3
 8001f08:	f002 fd62 	bl	80049d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	460b      	mov	r3, r1
 8001f28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
 8001f2c:	f003 020f 	and.w	r2, r3, #15
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d901      	bls.n	8001f3c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e042      	b.n	8001fc2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	da0f      	bge.n	8001f64 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	f003 020f 	and.w	r2, r3, #15
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	1a9b      	subs	r3, r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	3338      	adds	r3, #56	; 0x38
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	4413      	add	r3, r2
 8001f58:	3304      	adds	r3, #4
 8001f5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	705a      	strb	r2, [r3, #1]
 8001f62:	e00f      	b.n	8001f84 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	f003 020f 	and.w	r2, r3, #15
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	1a9b      	subs	r3, r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	3304      	adds	r3, #4
 8001f7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_PCD_EP_ClrStall+0x86>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e00e      	b.n	8001fc2 <HAL_PCD_EP_ClrStall+0xa4>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68f9      	ldr	r1, [r7, #12]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f002 fb79 	bl	80046aa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b08a      	sub	sp, #40	; 0x28
 8001fce:	af02      	add	r7, sp, #8
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	1a9b      	subs	r3, r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	3338      	adds	r3, #56	; 0x38
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	3304      	adds	r3, #4
 8001ff0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	699a      	ldr	r2, [r3, #24]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d901      	bls.n	8002002 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e06c      	b.n	80020dc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	695a      	ldr	r2, [r3, #20]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	69fa      	ldr	r2, [r7, #28]
 8002014:	429a      	cmp	r2, r3
 8002016:	d902      	bls.n	800201e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3303      	adds	r3, #3
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002026:	e02b      	b.n	8002080 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	695a      	ldr	r2, [r3, #20]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	69fa      	ldr	r2, [r7, #28]
 800203a:	429a      	cmp	r2, r3
 800203c:	d902      	bls.n	8002044 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	3303      	adds	r3, #3
 8002048:	089b      	lsrs	r3, r3, #2
 800204a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	68d9      	ldr	r1, [r3, #12]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	b2da      	uxtb	r2, r3
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800205c:	b2db      	uxtb	r3, r3
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	4603      	mov	r3, r0
 8002062:	6978      	ldr	r0, [r7, #20]
 8002064:	f002 fa55 	bl	8004512 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	68da      	ldr	r2, [r3, #12]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	441a      	add	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	699a      	ldr	r2, [r3, #24]
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	441a      	add	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	015a      	lsls	r2, r3, #5
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4413      	add	r3, r2
 8002088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	b29b      	uxth	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	429a      	cmp	r2, r3
 8002094:	d809      	bhi.n	80020aa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	699a      	ldr	r2, [r3, #24]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800209e:	429a      	cmp	r2, r3
 80020a0:	d203      	bcs.n	80020aa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1be      	bne.n	8002028 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	695a      	ldr	r2, [r3, #20]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d811      	bhi.n	80020da <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	f003 030f 	and.w	r3, r3, #15
 80020bc:	2201      	movs	r2, #1
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	6939      	ldr	r1, [r7, #16]
 80020d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020d6:	4013      	ands	r3, r2
 80020d8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3720      	adds	r7, #32
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	333c      	adds	r3, #60	; 0x3c
 80020fc:	3304      	adds	r3, #4
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	015a      	lsls	r2, r3, #5
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4413      	add	r3, r2
 800210a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	2b01      	cmp	r3, #1
 8002118:	f040 80a0 	bne.w	800225c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d015      	beq.n	8002152 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4a72      	ldr	r2, [pc, #456]	; (80022f4 <PCD_EP_OutXfrComplete_int+0x210>)
 800212a:	4293      	cmp	r3, r2
 800212c:	f240 80dd 	bls.w	80022ea <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 80d7 	beq.w	80022ea <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4413      	add	r3, r2
 8002144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002148:	461a      	mov	r2, r3
 800214a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800214e:	6093      	str	r3, [r2, #8]
 8002150:	e0cb      	b.n	80022ea <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	f003 0320 	and.w	r3, r3, #32
 8002158:	2b00      	cmp	r3, #0
 800215a:	d009      	beq.n	8002170 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	015a      	lsls	r2, r3, #5
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4413      	add	r3, r2
 8002164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002168:	461a      	mov	r2, r3
 800216a:	2320      	movs	r3, #32
 800216c:	6093      	str	r3, [r2, #8]
 800216e:	e0bc      	b.n	80022ea <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002176:	2b00      	cmp	r3, #0
 8002178:	f040 80b7 	bne.w	80022ea <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4a5d      	ldr	r2, [pc, #372]	; (80022f4 <PCD_EP_OutXfrComplete_int+0x210>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d90f      	bls.n	80021a4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00a      	beq.n	80021a4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	015a      	lsls	r2, r3, #5
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4413      	add	r3, r2
 8002196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800219a:	461a      	mov	r2, r3
 800219c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021a0:	6093      	str	r3, [r2, #8]
 80021a2:	e0a2      	b.n	80022ea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	4613      	mov	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	1a9b      	subs	r3, r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021b6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	0159      	lsls	r1, r3, #5
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	440b      	add	r3, r1
 80021c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80021ca:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4403      	add	r3, r0
 80021da:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80021de:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	4613      	mov	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	1a9b      	subs	r3, r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021f2:	6819      	ldr	r1, [r3, #0]
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	4613      	mov	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	1a9b      	subs	r3, r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4403      	add	r3, r0
 8002202:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4419      	add	r1, r3
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	4613      	mov	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	1a9b      	subs	r3, r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4403      	add	r3, r0
 8002218:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800221c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d114      	bne.n	800224e <PCD_EP_OutXfrComplete_int+0x16a>
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d108      	bne.n	800224e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002246:	461a      	mov	r2, r3
 8002248:	2101      	movs	r1, #1
 800224a:	f002 fbc1 	bl	80049d0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	4619      	mov	r1, r3
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f004 f881 	bl	800635c <HAL_PCD_DataOutStageCallback>
 800225a:	e046      	b.n	80022ea <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4a26      	ldr	r2, [pc, #152]	; (80022f8 <PCD_EP_OutXfrComplete_int+0x214>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d124      	bne.n	80022ae <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00a      	beq.n	8002284 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	015a      	lsls	r2, r3, #5
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4413      	add	r3, r2
 8002276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800227a:	461a      	mov	r2, r3
 800227c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002280:	6093      	str	r3, [r2, #8]
 8002282:	e032      	b.n	80022ea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f003 0320 	and.w	r3, r3, #32
 800228a:	2b00      	cmp	r3, #0
 800228c:	d008      	beq.n	80022a0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4413      	add	r3, r2
 8002296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800229a:	461a      	mov	r2, r3
 800229c:	2320      	movs	r3, #32
 800229e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	4619      	mov	r1, r3
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f004 f858 	bl	800635c <HAL_PCD_DataOutStageCallback>
 80022ac:	e01d      	b.n	80022ea <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d114      	bne.n	80022de <PCD_EP_OutXfrComplete_int+0x1fa>
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	1a9b      	subs	r3, r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d108      	bne.n	80022de <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022d6:	461a      	mov	r2, r3
 80022d8:	2100      	movs	r1, #0
 80022da:	f002 fb79 	bl	80049d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	4619      	mov	r1, r3
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f004 f839 	bl	800635c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	4f54300a 	.word	0x4f54300a
 80022f8:	4f54310a 	.word	0x4f54310a

080022fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	333c      	adds	r3, #60	; 0x3c
 8002314:	3304      	adds	r3, #4
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	015a      	lsls	r2, r3, #5
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4413      	add	r3, r2
 8002322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4a15      	ldr	r2, [pc, #84]	; (8002384 <PCD_EP_OutSetupPacket_int+0x88>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d90e      	bls.n	8002350 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002338:	2b00      	cmp	r3, #0
 800233a:	d009      	beq.n	8002350 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4413      	add	r3, r2
 8002344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002348:	461a      	mov	r2, r3
 800234a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800234e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f003 fff1 	bl	8006338 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <PCD_EP_OutSetupPacket_int+0x88>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d90c      	bls.n	8002378 <PCD_EP_OutSetupPacket_int+0x7c>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d108      	bne.n	8002378 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6818      	ldr	r0, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002370:	461a      	mov	r2, r3
 8002372:	2101      	movs	r1, #1
 8002374:	f002 fb2c 	bl	80049d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	4f54300a 	.word	0x4f54300a

08002388 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	70fb      	strb	r3, [r7, #3]
 8002394:	4613      	mov	r3, r2
 8002396:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d107      	bne.n	80023b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023a6:	883b      	ldrh	r3, [r7, #0]
 80023a8:	0419      	lsls	r1, r3, #16
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	629a      	str	r2, [r3, #40]	; 0x28
 80023b4:	e028      	b.n	8002408 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023bc:	0c1b      	lsrs	r3, r3, #16
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	4413      	add	r3, r2
 80023c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023c4:	2300      	movs	r3, #0
 80023c6:	73fb      	strb	r3, [r7, #15]
 80023c8:	e00d      	b.n	80023e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
 80023d0:	3340      	adds	r3, #64	; 0x40
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	0c1b      	lsrs	r3, r3, #16
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	4413      	add	r3, r2
 80023de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	3301      	adds	r3, #1
 80023e4:	73fb      	strb	r3, [r7, #15]
 80023e6:	7bfa      	ldrb	r2, [r7, #15]
 80023e8:	78fb      	ldrb	r3, [r7, #3]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d3ec      	bcc.n	80023ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023f0:	883b      	ldrh	r3, [r7, #0]
 80023f2:	0418      	lsls	r0, r3, #16
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6819      	ldr	r1, [r3, #0]
 80023f8:	78fb      	ldrb	r3, [r7, #3]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	4302      	orrs	r2, r0
 8002400:	3340      	adds	r3, #64	; 0x40
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	460b      	mov	r3, r1
 8002420:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	887a      	ldrh	r2, [r7, #2]
 8002428:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e25b      	b.n	800291a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d075      	beq.n	800255a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800246e:	4ba3      	ldr	r3, [pc, #652]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b04      	cmp	r3, #4
 8002478:	d00c      	beq.n	8002494 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800247a:	4ba0      	ldr	r3, [pc, #640]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002482:	2b08      	cmp	r3, #8
 8002484:	d112      	bne.n	80024ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002486:	4b9d      	ldr	r3, [pc, #628]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800248e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002492:	d10b      	bne.n	80024ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002494:	4b99      	ldr	r3, [pc, #612]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d05b      	beq.n	8002558 <HAL_RCC_OscConfig+0x108>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d157      	bne.n	8002558 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e236      	b.n	800291a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b4:	d106      	bne.n	80024c4 <HAL_RCC_OscConfig+0x74>
 80024b6:	4b91      	ldr	r3, [pc, #580]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a90      	ldr	r2, [pc, #576]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	e01d      	b.n	8002500 <HAL_RCC_OscConfig+0xb0>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024cc:	d10c      	bne.n	80024e8 <HAL_RCC_OscConfig+0x98>
 80024ce:	4b8b      	ldr	r3, [pc, #556]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a8a      	ldr	r2, [pc, #552]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80024d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	4b88      	ldr	r3, [pc, #544]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a87      	ldr	r2, [pc, #540]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80024e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	e00b      	b.n	8002500 <HAL_RCC_OscConfig+0xb0>
 80024e8:	4b84      	ldr	r3, [pc, #528]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a83      	ldr	r2, [pc, #524]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80024ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	4b81      	ldr	r3, [pc, #516]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a80      	ldr	r2, [pc, #512]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80024fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d013      	beq.n	8002530 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7fe fb1c 	bl	8000b44 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002510:	f7fe fb18 	bl	8000b44 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	; 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e1fb      	b.n	800291a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002522:	4b76      	ldr	r3, [pc, #472]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0xc0>
 800252e:	e014      	b.n	800255a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7fe fb08 	bl	8000b44 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002538:	f7fe fb04 	bl	8000b44 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b64      	cmp	r3, #100	; 0x64
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e1e7      	b.n	800291a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254a:	4b6c      	ldr	r3, [pc, #432]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0xe8>
 8002556:	e000      	b.n	800255a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d063      	beq.n	800262e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002566:	4b65      	ldr	r3, [pc, #404]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00b      	beq.n	800258a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002572:	4b62      	ldr	r3, [pc, #392]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800257a:	2b08      	cmp	r3, #8
 800257c:	d11c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800257e:	4b5f      	ldr	r3, [pc, #380]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d116      	bne.n	80025b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258a:	4b5c      	ldr	r3, [pc, #368]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d005      	beq.n	80025a2 <HAL_RCC_OscConfig+0x152>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d001      	beq.n	80025a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e1bb      	b.n	800291a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a2:	4b56      	ldr	r3, [pc, #344]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4952      	ldr	r1, [pc, #328]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025b6:	e03a      	b.n	800262e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d020      	beq.n	8002602 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c0:	4b4f      	ldr	r3, [pc, #316]	; (8002700 <HAL_RCC_OscConfig+0x2b0>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c6:	f7fe fabd 	bl	8000b44 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ce:	f7fe fab9 	bl	8000b44 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e19c      	b.n	800291a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e0:	4b46      	ldr	r3, [pc, #280]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0f0      	beq.n	80025ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ec:	4b43      	ldr	r3, [pc, #268]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	4940      	ldr	r1, [pc, #256]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	600b      	str	r3, [r1, #0]
 8002600:	e015      	b.n	800262e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002602:	4b3f      	ldr	r3, [pc, #252]	; (8002700 <HAL_RCC_OscConfig+0x2b0>)
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002608:	f7fe fa9c 	bl	8000b44 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002610:	f7fe fa98 	bl	8000b44 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e17b      	b.n	800291a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002622:	4b36      	ldr	r3, [pc, #216]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d030      	beq.n	800269c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d016      	beq.n	8002670 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002642:	4b30      	ldr	r3, [pc, #192]	; (8002704 <HAL_RCC_OscConfig+0x2b4>)
 8002644:	2201      	movs	r2, #1
 8002646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002648:	f7fe fa7c 	bl	8000b44 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002650:	f7fe fa78 	bl	8000b44 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e15b      	b.n	800291a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002662:	4b26      	ldr	r3, [pc, #152]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 8002664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0x200>
 800266e:	e015      	b.n	800269c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002670:	4b24      	ldr	r3, [pc, #144]	; (8002704 <HAL_RCC_OscConfig+0x2b4>)
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002676:	f7fe fa65 	bl	8000b44 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800267e:	f7fe fa61 	bl	8000b44 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e144      	b.n	800291a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002690:	4b1a      	ldr	r3, [pc, #104]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 8002692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f0      	bne.n	800267e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 80a0 	beq.w	80027ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026aa:	2300      	movs	r3, #0
 80026ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ae:	4b13      	ldr	r3, [pc, #76]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10f      	bne.n	80026da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	4a0e      	ldr	r2, [pc, #56]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80026c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ca:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <HAL_RCC_OscConfig+0x2ac>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026d6:	2301      	movs	r3, #1
 80026d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026da:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_RCC_OscConfig+0x2b8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d121      	bne.n	800272a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026e6:	4b08      	ldr	r3, [pc, #32]	; (8002708 <HAL_RCC_OscConfig+0x2b8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a07      	ldr	r2, [pc, #28]	; (8002708 <HAL_RCC_OscConfig+0x2b8>)
 80026ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f2:	f7fe fa27 	bl	8000b44 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f8:	e011      	b.n	800271e <HAL_RCC_OscConfig+0x2ce>
 80026fa:	bf00      	nop
 80026fc:	40023800 	.word	0x40023800
 8002700:	42470000 	.word	0x42470000
 8002704:	42470e80 	.word	0x42470e80
 8002708:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270c:	f7fe fa1a 	bl	8000b44 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e0fd      	b.n	800291a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271e:	4b81      	ldr	r3, [pc, #516]	; (8002924 <HAL_RCC_OscConfig+0x4d4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d106      	bne.n	8002740 <HAL_RCC_OscConfig+0x2f0>
 8002732:	4b7d      	ldr	r3, [pc, #500]	; (8002928 <HAL_RCC_OscConfig+0x4d8>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	4a7c      	ldr	r2, [pc, #496]	; (8002928 <HAL_RCC_OscConfig+0x4d8>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	6713      	str	r3, [r2, #112]	; 0x70
 800273e:	e01c      	b.n	800277a <HAL_RCC_OscConfig+0x32a>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b05      	cmp	r3, #5
 8002746:	d10c      	bne.n	8002762 <HAL_RCC_OscConfig+0x312>
 8002748:	4b77      	ldr	r3, [pc, #476]	; (8002928 <HAL_RCC_OscConfig+0x4d8>)
 800274a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274c:	4a76      	ldr	r2, [pc, #472]	; (8002928 <HAL_RCC_OscConfig+0x4d8>)
 800274e:	f043 0304 	orr.w	r3, r3, #4
 8002752:	6713      	str	r3, [r2, #112]	; 0x70
 8002754:	4b74      	ldr	r3, [pc, #464]	; (8002928 <HAL_RCC_OscConfig+0x4d8>)
 8002756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002758:	4a73      	ldr	r2, [pc, #460]	; (8002928 <HAL_RCC_OscConfig+0x4d8>)
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	6713      	str	r3, [r2, #112]	; 0x70
 8002760:	e00b      	b.n	800277a <HAL_RCC_OscConfig+0x32a>
 8002762:	4b71      	ldr	r3, [pc, #452]	; (8002928 <HAL_RCC_OscConfig+0x4d8>)
 8002764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002766:	4a70      	ldr	r2, [pc, #448]	; (8002928 <HAL_RCC_OscConfig+0x4d8>)
 8002768:	f023 0301 	bic.w	r3, r3, #1
 800276c:	6713      	str	r3, [r2, #112]	; 0x70
 800276e:	4b6e      	ldr	r3, [pc, #440]	; (8002928 <HAL_RCC_OscConfig+0x4d8>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002772:	4a6d      	ldr	r2, [pc, #436]	; (8002928 <HAL_RCC_OscConfig+0x4d8>)
 8002774:	f023 0304 	bic.w	r3, r3, #4
 8002778:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d015      	beq.n	80027ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002782:	f7fe f9df 	bl	8000b44 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002788:	e00a      	b.n	80027a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800278a:	f7fe f9db 	bl	8000b44 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	f241 3288 	movw	r2, #5000	; 0x1388
 8002798:	4293      	cmp	r3, r2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e0bc      	b.n	800291a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a0:	4b61      	ldr	r3, [pc, #388]	; (8002928 <HAL_RCC_OscConfig+0x4d8>)
 80027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0ee      	beq.n	800278a <HAL_RCC_OscConfig+0x33a>
 80027ac:	e014      	b.n	80027d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ae:	f7fe f9c9 	bl	8000b44 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b4:	e00a      	b.n	80027cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b6:	f7fe f9c5 	bl	8000b44 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e0a6      	b.n	800291a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027cc:	4b56      	ldr	r3, [pc, #344]	; (8002928 <HAL_RCC_OscConfig+0x4d8>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1ee      	bne.n	80027b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027d8:	7dfb      	ldrb	r3, [r7, #23]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d105      	bne.n	80027ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027de:	4b52      	ldr	r3, [pc, #328]	; (8002928 <HAL_RCC_OscConfig+0x4d8>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	4a51      	ldr	r2, [pc, #324]	; (8002928 <HAL_RCC_OscConfig+0x4d8>)
 80027e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 8092 	beq.w	8002918 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027f4:	4b4c      	ldr	r3, [pc, #304]	; (8002928 <HAL_RCC_OscConfig+0x4d8>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 030c 	and.w	r3, r3, #12
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d05c      	beq.n	80028ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	2b02      	cmp	r3, #2
 8002806:	d141      	bne.n	800288c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002808:	4b48      	ldr	r3, [pc, #288]	; (800292c <HAL_RCC_OscConfig+0x4dc>)
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280e:	f7fe f999 	bl	8000b44 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002816:	f7fe f995 	bl	8000b44 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e078      	b.n	800291a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002828:	4b3f      	ldr	r3, [pc, #252]	; (8002928 <HAL_RCC_OscConfig+0x4d8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1f0      	bne.n	8002816 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69da      	ldr	r2, [r3, #28]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	019b      	lsls	r3, r3, #6
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284a:	085b      	lsrs	r3, r3, #1
 800284c:	3b01      	subs	r3, #1
 800284e:	041b      	lsls	r3, r3, #16
 8002850:	431a      	orrs	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	061b      	lsls	r3, r3, #24
 8002858:	4933      	ldr	r1, [pc, #204]	; (8002928 <HAL_RCC_OscConfig+0x4d8>)
 800285a:	4313      	orrs	r3, r2
 800285c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800285e:	4b33      	ldr	r3, [pc, #204]	; (800292c <HAL_RCC_OscConfig+0x4dc>)
 8002860:	2201      	movs	r2, #1
 8002862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002864:	f7fe f96e 	bl	8000b44 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286c:	f7fe f96a 	bl	8000b44 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e04d      	b.n	800291a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287e:	4b2a      	ldr	r3, [pc, #168]	; (8002928 <HAL_RCC_OscConfig+0x4d8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x41c>
 800288a:	e045      	b.n	8002918 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288c:	4b27      	ldr	r3, [pc, #156]	; (800292c <HAL_RCC_OscConfig+0x4dc>)
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002892:	f7fe f957 	bl	8000b44 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800289a:	f7fe f953 	bl	8000b44 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e036      	b.n	800291a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ac:	4b1e      	ldr	r3, [pc, #120]	; (8002928 <HAL_RCC_OscConfig+0x4d8>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f0      	bne.n	800289a <HAL_RCC_OscConfig+0x44a>
 80028b8:	e02e      	b.n	8002918 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e029      	b.n	800291a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028c6:	4b18      	ldr	r3, [pc, #96]	; (8002928 <HAL_RCC_OscConfig+0x4d8>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d11c      	bne.n	8002914 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d115      	bne.n	8002914 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028ee:	4013      	ands	r3, r2
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d10d      	bne.n	8002914 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002902:	429a      	cmp	r2, r3
 8002904:	d106      	bne.n	8002914 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e000      	b.n	800291a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3718      	adds	r7, #24
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40007000 	.word	0x40007000
 8002928:	40023800 	.word	0x40023800
 800292c:	42470060 	.word	0x42470060

08002930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0cc      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002944:	4b68      	ldr	r3, [pc, #416]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 030f 	and.w	r3, r3, #15
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d90c      	bls.n	800296c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002952:	4b65      	ldr	r3, [pc, #404]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295a:	4b63      	ldr	r3, [pc, #396]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d001      	beq.n	800296c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0b8      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d020      	beq.n	80029ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002984:	4b59      	ldr	r3, [pc, #356]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4a58      	ldr	r2, [pc, #352]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800298e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800299c:	4b53      	ldr	r3, [pc, #332]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	4a52      	ldr	r2, [pc, #328]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a8:	4b50      	ldr	r3, [pc, #320]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	494d      	ldr	r1, [pc, #308]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d044      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d107      	bne.n	80029de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	4b47      	ldr	r3, [pc, #284]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d119      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e07f      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d003      	beq.n	80029ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d107      	bne.n	80029fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ee:	4b3f      	ldr	r3, [pc, #252]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d109      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e06f      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fe:	4b3b      	ldr	r3, [pc, #236]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e067      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a0e:	4b37      	ldr	r3, [pc, #220]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f023 0203 	bic.w	r2, r3, #3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	4934      	ldr	r1, [pc, #208]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a20:	f7fe f890 	bl	8000b44 <HAL_GetTick>
 8002a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a26:	e00a      	b.n	8002a3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a28:	f7fe f88c 	bl	8000b44 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e04f      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3e:	4b2b      	ldr	r3, [pc, #172]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 020c 	and.w	r2, r3, #12
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d1eb      	bne.n	8002a28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a50:	4b25      	ldr	r3, [pc, #148]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 030f 	and.w	r3, r3, #15
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d20c      	bcs.n	8002a78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5e:	4b22      	ldr	r3, [pc, #136]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a66:	4b20      	ldr	r3, [pc, #128]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e032      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a84:	4b19      	ldr	r3, [pc, #100]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4916      	ldr	r1, [pc, #88]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aa2:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	490e      	ldr	r1, [pc, #56]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ab6:	f000 f821 	bl	8002afc <HAL_RCC_GetSysClockFreq>
 8002aba:	4601      	mov	r1, r0
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac8:	5cd3      	ldrb	r3, [r2, r3]
 8002aca:	fa21 f303 	lsr.w	r3, r1, r3
 8002ace:	4a09      	ldr	r2, [pc, #36]	; (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fd fff0 	bl	8000abc <HAL_InitTick>

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40023c00 	.word	0x40023c00
 8002aec:	40023800 	.word	0x40023800
 8002af0:	08006abc 	.word	0x08006abc
 8002af4:	20000000 	.word	0x20000000
 8002af8:	20000004 	.word	0x20000004

08002afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	607b      	str	r3, [r7, #4]
 8002b06:	2300      	movs	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b12:	4b63      	ldr	r3, [pc, #396]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d007      	beq.n	8002b2e <HAL_RCC_GetSysClockFreq+0x32>
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d008      	beq.n	8002b34 <HAL_RCC_GetSysClockFreq+0x38>
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f040 80b4 	bne.w	8002c90 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b28:	4b5e      	ldr	r3, [pc, #376]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b2a:	60bb      	str	r3, [r7, #8]
       break;
 8002b2c:	e0b3      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b2e:	4b5e      	ldr	r3, [pc, #376]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002b30:	60bb      	str	r3, [r7, #8]
      break;
 8002b32:	e0b0      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b34:	4b5a      	ldr	r3, [pc, #360]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b3c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b3e:	4b58      	ldr	r3, [pc, #352]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d04a      	beq.n	8002be0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b4a:	4b55      	ldr	r3, [pc, #340]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	099b      	lsrs	r3, r3, #6
 8002b50:	f04f 0400 	mov.w	r4, #0
 8002b54:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	ea03 0501 	and.w	r5, r3, r1
 8002b60:	ea04 0602 	and.w	r6, r4, r2
 8002b64:	4629      	mov	r1, r5
 8002b66:	4632      	mov	r2, r6
 8002b68:	f04f 0300 	mov.w	r3, #0
 8002b6c:	f04f 0400 	mov.w	r4, #0
 8002b70:	0154      	lsls	r4, r2, #5
 8002b72:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b76:	014b      	lsls	r3, r1, #5
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4622      	mov	r2, r4
 8002b7c:	1b49      	subs	r1, r1, r5
 8002b7e:	eb62 0206 	sbc.w	r2, r2, r6
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	f04f 0400 	mov.w	r4, #0
 8002b8a:	0194      	lsls	r4, r2, #6
 8002b8c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b90:	018b      	lsls	r3, r1, #6
 8002b92:	1a5b      	subs	r3, r3, r1
 8002b94:	eb64 0402 	sbc.w	r4, r4, r2
 8002b98:	f04f 0100 	mov.w	r1, #0
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	00e2      	lsls	r2, r4, #3
 8002ba2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ba6:	00d9      	lsls	r1, r3, #3
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4614      	mov	r4, r2
 8002bac:	195b      	adds	r3, r3, r5
 8002bae:	eb44 0406 	adc.w	r4, r4, r6
 8002bb2:	f04f 0100 	mov.w	r1, #0
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	0262      	lsls	r2, r4, #9
 8002bbc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002bc0:	0259      	lsls	r1, r3, #9
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4614      	mov	r4, r2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	4621      	mov	r1, r4
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f04f 0400 	mov.w	r4, #0
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4623      	mov	r3, r4
 8002bd4:	f7fd fb0a 	bl	80001ec <__aeabi_uldivmod>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	460c      	mov	r4, r1
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	e049      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002be0:	4b2f      	ldr	r3, [pc, #188]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	099b      	lsrs	r3, r3, #6
 8002be6:	f04f 0400 	mov.w	r4, #0
 8002bea:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	ea03 0501 	and.w	r5, r3, r1
 8002bf6:	ea04 0602 	and.w	r6, r4, r2
 8002bfa:	4629      	mov	r1, r5
 8002bfc:	4632      	mov	r2, r6
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	f04f 0400 	mov.w	r4, #0
 8002c06:	0154      	lsls	r4, r2, #5
 8002c08:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c0c:	014b      	lsls	r3, r1, #5
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4622      	mov	r2, r4
 8002c12:	1b49      	subs	r1, r1, r5
 8002c14:	eb62 0206 	sbc.w	r2, r2, r6
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	f04f 0400 	mov.w	r4, #0
 8002c20:	0194      	lsls	r4, r2, #6
 8002c22:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c26:	018b      	lsls	r3, r1, #6
 8002c28:	1a5b      	subs	r3, r3, r1
 8002c2a:	eb64 0402 	sbc.w	r4, r4, r2
 8002c2e:	f04f 0100 	mov.w	r1, #0
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	00e2      	lsls	r2, r4, #3
 8002c38:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c3c:	00d9      	lsls	r1, r3, #3
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4614      	mov	r4, r2
 8002c42:	195b      	adds	r3, r3, r5
 8002c44:	eb44 0406 	adc.w	r4, r4, r6
 8002c48:	f04f 0100 	mov.w	r1, #0
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	02a2      	lsls	r2, r4, #10
 8002c52:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c56:	0299      	lsls	r1, r3, #10
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4614      	mov	r4, r2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	4621      	mov	r1, r4
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f04f 0400 	mov.w	r4, #0
 8002c66:	461a      	mov	r2, r3
 8002c68:	4623      	mov	r3, r4
 8002c6a:	f7fd fabf 	bl	80001ec <__aeabi_uldivmod>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	460c      	mov	r4, r1
 8002c72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c74:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	0c1b      	lsrs	r3, r3, #16
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	3301      	adds	r3, #1
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8c:	60bb      	str	r3, [r7, #8]
      break;
 8002c8e:	e002      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c90:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c92:	60bb      	str	r3, [r7, #8]
      break;
 8002c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c96:	68bb      	ldr	r3, [r7, #8]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	00f42400 	.word	0x00f42400
 8002ca8:	007a1200 	.word	0x007a1200

08002cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb0:	4b03      	ldr	r3, [pc, #12]	; (8002cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	20000000 	.word	0x20000000

08002cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cc8:	f7ff fff0 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8002ccc:	4601      	mov	r1, r0
 8002cce:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	0a9b      	lsrs	r3, r3, #10
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	4a03      	ldr	r2, [pc, #12]	; (8002ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cda:	5cd3      	ldrb	r3, [r2, r3]
 8002cdc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	08006acc 	.word	0x08006acc

08002cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cf0:	f7ff ffdc 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8002cf4:	4601      	mov	r1, r0
 8002cf6:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	0b5b      	lsrs	r3, r3, #13
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	4a03      	ldr	r2, [pc, #12]	; (8002d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d02:	5cd3      	ldrb	r3, [r2, r3]
 8002d04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	08006acc 	.word	0x08006acc

08002d14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e03f      	b.n	8002da6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d106      	bne.n	8002d40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7fd fda6 	bl	800088c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2224      	movs	r2, #36	; 0x24
 8002d44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f829 	bl	8002db0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695a      	ldr	r2, [r3, #20]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db4:	b085      	sub	sp, #20
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002df2:	f023 030c 	bic.w	r3, r3, #12
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6812      	ldr	r2, [r2, #0]
 8002dfa:	68f9      	ldr	r1, [r7, #12]
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699a      	ldr	r2, [r3, #24]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e1e:	f040 818b 	bne.w	8003138 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4ac1      	ldr	r2, [pc, #772]	; (800312c <UART_SetConfig+0x37c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d005      	beq.n	8002e38 <UART_SetConfig+0x88>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4abf      	ldr	r2, [pc, #764]	; (8003130 <UART_SetConfig+0x380>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	f040 80bd 	bne.w	8002fb2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e38:	f7ff ff58 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
 8002e3c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	461d      	mov	r5, r3
 8002e42:	f04f 0600 	mov.w	r6, #0
 8002e46:	46a8      	mov	r8, r5
 8002e48:	46b1      	mov	r9, r6
 8002e4a:	eb18 0308 	adds.w	r3, r8, r8
 8002e4e:	eb49 0409 	adc.w	r4, r9, r9
 8002e52:	4698      	mov	r8, r3
 8002e54:	46a1      	mov	r9, r4
 8002e56:	eb18 0805 	adds.w	r8, r8, r5
 8002e5a:	eb49 0906 	adc.w	r9, r9, r6
 8002e5e:	f04f 0100 	mov.w	r1, #0
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e6a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e6e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e72:	4688      	mov	r8, r1
 8002e74:	4691      	mov	r9, r2
 8002e76:	eb18 0005 	adds.w	r0, r8, r5
 8002e7a:	eb49 0106 	adc.w	r1, r9, r6
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	461d      	mov	r5, r3
 8002e84:	f04f 0600 	mov.w	r6, #0
 8002e88:	196b      	adds	r3, r5, r5
 8002e8a:	eb46 0406 	adc.w	r4, r6, r6
 8002e8e:	461a      	mov	r2, r3
 8002e90:	4623      	mov	r3, r4
 8002e92:	f7fd f9ab 	bl	80001ec <__aeabi_uldivmod>
 8002e96:	4603      	mov	r3, r0
 8002e98:	460c      	mov	r4, r1
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	4ba5      	ldr	r3, [pc, #660]	; (8003134 <UART_SetConfig+0x384>)
 8002e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8002ea2:	095b      	lsrs	r3, r3, #5
 8002ea4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	461d      	mov	r5, r3
 8002eac:	f04f 0600 	mov.w	r6, #0
 8002eb0:	46a9      	mov	r9, r5
 8002eb2:	46b2      	mov	sl, r6
 8002eb4:	eb19 0309 	adds.w	r3, r9, r9
 8002eb8:	eb4a 040a 	adc.w	r4, sl, sl
 8002ebc:	4699      	mov	r9, r3
 8002ebe:	46a2      	mov	sl, r4
 8002ec0:	eb19 0905 	adds.w	r9, r9, r5
 8002ec4:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ec8:	f04f 0100 	mov.w	r1, #0
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ed4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ed8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002edc:	4689      	mov	r9, r1
 8002ede:	4692      	mov	sl, r2
 8002ee0:	eb19 0005 	adds.w	r0, r9, r5
 8002ee4:	eb4a 0106 	adc.w	r1, sl, r6
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	461d      	mov	r5, r3
 8002eee:	f04f 0600 	mov.w	r6, #0
 8002ef2:	196b      	adds	r3, r5, r5
 8002ef4:	eb46 0406 	adc.w	r4, r6, r6
 8002ef8:	461a      	mov	r2, r3
 8002efa:	4623      	mov	r3, r4
 8002efc:	f7fd f976 	bl	80001ec <__aeabi_uldivmod>
 8002f00:	4603      	mov	r3, r0
 8002f02:	460c      	mov	r4, r1
 8002f04:	461a      	mov	r2, r3
 8002f06:	4b8b      	ldr	r3, [pc, #556]	; (8003134 <UART_SetConfig+0x384>)
 8002f08:	fba3 1302 	umull	r1, r3, r3, r2
 8002f0c:	095b      	lsrs	r3, r3, #5
 8002f0e:	2164      	movs	r1, #100	; 0x64
 8002f10:	fb01 f303 	mul.w	r3, r1, r3
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	3332      	adds	r3, #50	; 0x32
 8002f1a:	4a86      	ldr	r2, [pc, #536]	; (8003134 <UART_SetConfig+0x384>)
 8002f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f20:	095b      	lsrs	r3, r3, #5
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f28:	4498      	add	r8, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	461d      	mov	r5, r3
 8002f2e:	f04f 0600 	mov.w	r6, #0
 8002f32:	46a9      	mov	r9, r5
 8002f34:	46b2      	mov	sl, r6
 8002f36:	eb19 0309 	adds.w	r3, r9, r9
 8002f3a:	eb4a 040a 	adc.w	r4, sl, sl
 8002f3e:	4699      	mov	r9, r3
 8002f40:	46a2      	mov	sl, r4
 8002f42:	eb19 0905 	adds.w	r9, r9, r5
 8002f46:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f4a:	f04f 0100 	mov.w	r1, #0
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f5e:	4689      	mov	r9, r1
 8002f60:	4692      	mov	sl, r2
 8002f62:	eb19 0005 	adds.w	r0, r9, r5
 8002f66:	eb4a 0106 	adc.w	r1, sl, r6
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	461d      	mov	r5, r3
 8002f70:	f04f 0600 	mov.w	r6, #0
 8002f74:	196b      	adds	r3, r5, r5
 8002f76:	eb46 0406 	adc.w	r4, r6, r6
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	4623      	mov	r3, r4
 8002f7e:	f7fd f935 	bl	80001ec <__aeabi_uldivmod>
 8002f82:	4603      	mov	r3, r0
 8002f84:	460c      	mov	r4, r1
 8002f86:	461a      	mov	r2, r3
 8002f88:	4b6a      	ldr	r3, [pc, #424]	; (8003134 <UART_SetConfig+0x384>)
 8002f8a:	fba3 1302 	umull	r1, r3, r3, r2
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	2164      	movs	r1, #100	; 0x64
 8002f92:	fb01 f303 	mul.w	r3, r1, r3
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	3332      	adds	r3, #50	; 0x32
 8002f9c:	4a65      	ldr	r2, [pc, #404]	; (8003134 <UART_SetConfig+0x384>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	f003 0207 	and.w	r2, r3, #7
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4442      	add	r2, r8
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	e26f      	b.n	8003492 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fb2:	f7ff fe87 	bl	8002cc4 <HAL_RCC_GetPCLK1Freq>
 8002fb6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	461d      	mov	r5, r3
 8002fbc:	f04f 0600 	mov.w	r6, #0
 8002fc0:	46a8      	mov	r8, r5
 8002fc2:	46b1      	mov	r9, r6
 8002fc4:	eb18 0308 	adds.w	r3, r8, r8
 8002fc8:	eb49 0409 	adc.w	r4, r9, r9
 8002fcc:	4698      	mov	r8, r3
 8002fce:	46a1      	mov	r9, r4
 8002fd0:	eb18 0805 	adds.w	r8, r8, r5
 8002fd4:	eb49 0906 	adc.w	r9, r9, r6
 8002fd8:	f04f 0100 	mov.w	r1, #0
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002fe4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002fe8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002fec:	4688      	mov	r8, r1
 8002fee:	4691      	mov	r9, r2
 8002ff0:	eb18 0005 	adds.w	r0, r8, r5
 8002ff4:	eb49 0106 	adc.w	r1, r9, r6
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	461d      	mov	r5, r3
 8002ffe:	f04f 0600 	mov.w	r6, #0
 8003002:	196b      	adds	r3, r5, r5
 8003004:	eb46 0406 	adc.w	r4, r6, r6
 8003008:	461a      	mov	r2, r3
 800300a:	4623      	mov	r3, r4
 800300c:	f7fd f8ee 	bl	80001ec <__aeabi_uldivmod>
 8003010:	4603      	mov	r3, r0
 8003012:	460c      	mov	r4, r1
 8003014:	461a      	mov	r2, r3
 8003016:	4b47      	ldr	r3, [pc, #284]	; (8003134 <UART_SetConfig+0x384>)
 8003018:	fba3 2302 	umull	r2, r3, r3, r2
 800301c:	095b      	lsrs	r3, r3, #5
 800301e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	461d      	mov	r5, r3
 8003026:	f04f 0600 	mov.w	r6, #0
 800302a:	46a9      	mov	r9, r5
 800302c:	46b2      	mov	sl, r6
 800302e:	eb19 0309 	adds.w	r3, r9, r9
 8003032:	eb4a 040a 	adc.w	r4, sl, sl
 8003036:	4699      	mov	r9, r3
 8003038:	46a2      	mov	sl, r4
 800303a:	eb19 0905 	adds.w	r9, r9, r5
 800303e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003042:	f04f 0100 	mov.w	r1, #0
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800304e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003052:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003056:	4689      	mov	r9, r1
 8003058:	4692      	mov	sl, r2
 800305a:	eb19 0005 	adds.w	r0, r9, r5
 800305e:	eb4a 0106 	adc.w	r1, sl, r6
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	461d      	mov	r5, r3
 8003068:	f04f 0600 	mov.w	r6, #0
 800306c:	196b      	adds	r3, r5, r5
 800306e:	eb46 0406 	adc.w	r4, r6, r6
 8003072:	461a      	mov	r2, r3
 8003074:	4623      	mov	r3, r4
 8003076:	f7fd f8b9 	bl	80001ec <__aeabi_uldivmod>
 800307a:	4603      	mov	r3, r0
 800307c:	460c      	mov	r4, r1
 800307e:	461a      	mov	r2, r3
 8003080:	4b2c      	ldr	r3, [pc, #176]	; (8003134 <UART_SetConfig+0x384>)
 8003082:	fba3 1302 	umull	r1, r3, r3, r2
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	2164      	movs	r1, #100	; 0x64
 800308a:	fb01 f303 	mul.w	r3, r1, r3
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	3332      	adds	r3, #50	; 0x32
 8003094:	4a27      	ldr	r2, [pc, #156]	; (8003134 <UART_SetConfig+0x384>)
 8003096:	fba2 2303 	umull	r2, r3, r2, r3
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030a2:	4498      	add	r8, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	461d      	mov	r5, r3
 80030a8:	f04f 0600 	mov.w	r6, #0
 80030ac:	46a9      	mov	r9, r5
 80030ae:	46b2      	mov	sl, r6
 80030b0:	eb19 0309 	adds.w	r3, r9, r9
 80030b4:	eb4a 040a 	adc.w	r4, sl, sl
 80030b8:	4699      	mov	r9, r3
 80030ba:	46a2      	mov	sl, r4
 80030bc:	eb19 0905 	adds.w	r9, r9, r5
 80030c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80030c4:	f04f 0100 	mov.w	r1, #0
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030d8:	4689      	mov	r9, r1
 80030da:	4692      	mov	sl, r2
 80030dc:	eb19 0005 	adds.w	r0, r9, r5
 80030e0:	eb4a 0106 	adc.w	r1, sl, r6
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	461d      	mov	r5, r3
 80030ea:	f04f 0600 	mov.w	r6, #0
 80030ee:	196b      	adds	r3, r5, r5
 80030f0:	eb46 0406 	adc.w	r4, r6, r6
 80030f4:	461a      	mov	r2, r3
 80030f6:	4623      	mov	r3, r4
 80030f8:	f7fd f878 	bl	80001ec <__aeabi_uldivmod>
 80030fc:	4603      	mov	r3, r0
 80030fe:	460c      	mov	r4, r1
 8003100:	461a      	mov	r2, r3
 8003102:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <UART_SetConfig+0x384>)
 8003104:	fba3 1302 	umull	r1, r3, r3, r2
 8003108:	095b      	lsrs	r3, r3, #5
 800310a:	2164      	movs	r1, #100	; 0x64
 800310c:	fb01 f303 	mul.w	r3, r1, r3
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	3332      	adds	r3, #50	; 0x32
 8003116:	4a07      	ldr	r2, [pc, #28]	; (8003134 <UART_SetConfig+0x384>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	095b      	lsrs	r3, r3, #5
 800311e:	f003 0207 	and.w	r2, r3, #7
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4442      	add	r2, r8
 8003128:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800312a:	e1b2      	b.n	8003492 <UART_SetConfig+0x6e2>
 800312c:	40011000 	.word	0x40011000
 8003130:	40011400 	.word	0x40011400
 8003134:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4ad7      	ldr	r2, [pc, #860]	; (800349c <UART_SetConfig+0x6ec>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d005      	beq.n	800314e <UART_SetConfig+0x39e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4ad6      	ldr	r2, [pc, #856]	; (80034a0 <UART_SetConfig+0x6f0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	f040 80d1 	bne.w	80032f0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800314e:	f7ff fdcd 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
 8003152:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	469a      	mov	sl, r3
 8003158:	f04f 0b00 	mov.w	fp, #0
 800315c:	46d0      	mov	r8, sl
 800315e:	46d9      	mov	r9, fp
 8003160:	eb18 0308 	adds.w	r3, r8, r8
 8003164:	eb49 0409 	adc.w	r4, r9, r9
 8003168:	4698      	mov	r8, r3
 800316a:	46a1      	mov	r9, r4
 800316c:	eb18 080a 	adds.w	r8, r8, sl
 8003170:	eb49 090b 	adc.w	r9, r9, fp
 8003174:	f04f 0100 	mov.w	r1, #0
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003180:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003184:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003188:	4688      	mov	r8, r1
 800318a:	4691      	mov	r9, r2
 800318c:	eb1a 0508 	adds.w	r5, sl, r8
 8003190:	eb4b 0609 	adc.w	r6, fp, r9
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	4619      	mov	r1, r3
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	f04f 0300 	mov.w	r3, #0
 80031a2:	f04f 0400 	mov.w	r4, #0
 80031a6:	0094      	lsls	r4, r2, #2
 80031a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031ac:	008b      	lsls	r3, r1, #2
 80031ae:	461a      	mov	r2, r3
 80031b0:	4623      	mov	r3, r4
 80031b2:	4628      	mov	r0, r5
 80031b4:	4631      	mov	r1, r6
 80031b6:	f7fd f819 	bl	80001ec <__aeabi_uldivmod>
 80031ba:	4603      	mov	r3, r0
 80031bc:	460c      	mov	r4, r1
 80031be:	461a      	mov	r2, r3
 80031c0:	4bb8      	ldr	r3, [pc, #736]	; (80034a4 <UART_SetConfig+0x6f4>)
 80031c2:	fba3 2302 	umull	r2, r3, r3, r2
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	469b      	mov	fp, r3
 80031d0:	f04f 0c00 	mov.w	ip, #0
 80031d4:	46d9      	mov	r9, fp
 80031d6:	46e2      	mov	sl, ip
 80031d8:	eb19 0309 	adds.w	r3, r9, r9
 80031dc:	eb4a 040a 	adc.w	r4, sl, sl
 80031e0:	4699      	mov	r9, r3
 80031e2:	46a2      	mov	sl, r4
 80031e4:	eb19 090b 	adds.w	r9, r9, fp
 80031e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80031ec:	f04f 0100 	mov.w	r1, #0
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003200:	4689      	mov	r9, r1
 8003202:	4692      	mov	sl, r2
 8003204:	eb1b 0509 	adds.w	r5, fp, r9
 8003208:	eb4c 060a 	adc.w	r6, ip, sl
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	4619      	mov	r1, r3
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	f04f 0400 	mov.w	r4, #0
 800321e:	0094      	lsls	r4, r2, #2
 8003220:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003224:	008b      	lsls	r3, r1, #2
 8003226:	461a      	mov	r2, r3
 8003228:	4623      	mov	r3, r4
 800322a:	4628      	mov	r0, r5
 800322c:	4631      	mov	r1, r6
 800322e:	f7fc ffdd 	bl	80001ec <__aeabi_uldivmod>
 8003232:	4603      	mov	r3, r0
 8003234:	460c      	mov	r4, r1
 8003236:	461a      	mov	r2, r3
 8003238:	4b9a      	ldr	r3, [pc, #616]	; (80034a4 <UART_SetConfig+0x6f4>)
 800323a:	fba3 1302 	umull	r1, r3, r3, r2
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	2164      	movs	r1, #100	; 0x64
 8003242:	fb01 f303 	mul.w	r3, r1, r3
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	3332      	adds	r3, #50	; 0x32
 800324c:	4a95      	ldr	r2, [pc, #596]	; (80034a4 <UART_SetConfig+0x6f4>)
 800324e:	fba2 2303 	umull	r2, r3, r2, r3
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003258:	4498      	add	r8, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	469b      	mov	fp, r3
 800325e:	f04f 0c00 	mov.w	ip, #0
 8003262:	46d9      	mov	r9, fp
 8003264:	46e2      	mov	sl, ip
 8003266:	eb19 0309 	adds.w	r3, r9, r9
 800326a:	eb4a 040a 	adc.w	r4, sl, sl
 800326e:	4699      	mov	r9, r3
 8003270:	46a2      	mov	sl, r4
 8003272:	eb19 090b 	adds.w	r9, r9, fp
 8003276:	eb4a 0a0c 	adc.w	sl, sl, ip
 800327a:	f04f 0100 	mov.w	r1, #0
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003286:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800328a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800328e:	4689      	mov	r9, r1
 8003290:	4692      	mov	sl, r2
 8003292:	eb1b 0509 	adds.w	r5, fp, r9
 8003296:	eb4c 060a 	adc.w	r6, ip, sl
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4619      	mov	r1, r3
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	f04f 0400 	mov.w	r4, #0
 80032ac:	0094      	lsls	r4, r2, #2
 80032ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032b2:	008b      	lsls	r3, r1, #2
 80032b4:	461a      	mov	r2, r3
 80032b6:	4623      	mov	r3, r4
 80032b8:	4628      	mov	r0, r5
 80032ba:	4631      	mov	r1, r6
 80032bc:	f7fc ff96 	bl	80001ec <__aeabi_uldivmod>
 80032c0:	4603      	mov	r3, r0
 80032c2:	460c      	mov	r4, r1
 80032c4:	461a      	mov	r2, r3
 80032c6:	4b77      	ldr	r3, [pc, #476]	; (80034a4 <UART_SetConfig+0x6f4>)
 80032c8:	fba3 1302 	umull	r1, r3, r3, r2
 80032cc:	095b      	lsrs	r3, r3, #5
 80032ce:	2164      	movs	r1, #100	; 0x64
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	3332      	adds	r3, #50	; 0x32
 80032da:	4a72      	ldr	r2, [pc, #456]	; (80034a4 <UART_SetConfig+0x6f4>)
 80032dc:	fba2 2303 	umull	r2, r3, r2, r3
 80032e0:	095b      	lsrs	r3, r3, #5
 80032e2:	f003 020f 	and.w	r2, r3, #15
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4442      	add	r2, r8
 80032ec:	609a      	str	r2, [r3, #8]
 80032ee:	e0d0      	b.n	8003492 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80032f0:	f7ff fce8 	bl	8002cc4 <HAL_RCC_GetPCLK1Freq>
 80032f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	469a      	mov	sl, r3
 80032fa:	f04f 0b00 	mov.w	fp, #0
 80032fe:	46d0      	mov	r8, sl
 8003300:	46d9      	mov	r9, fp
 8003302:	eb18 0308 	adds.w	r3, r8, r8
 8003306:	eb49 0409 	adc.w	r4, r9, r9
 800330a:	4698      	mov	r8, r3
 800330c:	46a1      	mov	r9, r4
 800330e:	eb18 080a 	adds.w	r8, r8, sl
 8003312:	eb49 090b 	adc.w	r9, r9, fp
 8003316:	f04f 0100 	mov.w	r1, #0
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003322:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003326:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800332a:	4688      	mov	r8, r1
 800332c:	4691      	mov	r9, r2
 800332e:	eb1a 0508 	adds.w	r5, sl, r8
 8003332:	eb4b 0609 	adc.w	r6, fp, r9
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	4619      	mov	r1, r3
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	f04f 0400 	mov.w	r4, #0
 8003348:	0094      	lsls	r4, r2, #2
 800334a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800334e:	008b      	lsls	r3, r1, #2
 8003350:	461a      	mov	r2, r3
 8003352:	4623      	mov	r3, r4
 8003354:	4628      	mov	r0, r5
 8003356:	4631      	mov	r1, r6
 8003358:	f7fc ff48 	bl	80001ec <__aeabi_uldivmod>
 800335c:	4603      	mov	r3, r0
 800335e:	460c      	mov	r4, r1
 8003360:	461a      	mov	r2, r3
 8003362:	4b50      	ldr	r3, [pc, #320]	; (80034a4 <UART_SetConfig+0x6f4>)
 8003364:	fba3 2302 	umull	r2, r3, r3, r2
 8003368:	095b      	lsrs	r3, r3, #5
 800336a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	469b      	mov	fp, r3
 8003372:	f04f 0c00 	mov.w	ip, #0
 8003376:	46d9      	mov	r9, fp
 8003378:	46e2      	mov	sl, ip
 800337a:	eb19 0309 	adds.w	r3, r9, r9
 800337e:	eb4a 040a 	adc.w	r4, sl, sl
 8003382:	4699      	mov	r9, r3
 8003384:	46a2      	mov	sl, r4
 8003386:	eb19 090b 	adds.w	r9, r9, fp
 800338a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800338e:	f04f 0100 	mov.w	r1, #0
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800339a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800339e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033a2:	4689      	mov	r9, r1
 80033a4:	4692      	mov	sl, r2
 80033a6:	eb1b 0509 	adds.w	r5, fp, r9
 80033aa:	eb4c 060a 	adc.w	r6, ip, sl
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4619      	mov	r1, r3
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	f04f 0400 	mov.w	r4, #0
 80033c0:	0094      	lsls	r4, r2, #2
 80033c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033c6:	008b      	lsls	r3, r1, #2
 80033c8:	461a      	mov	r2, r3
 80033ca:	4623      	mov	r3, r4
 80033cc:	4628      	mov	r0, r5
 80033ce:	4631      	mov	r1, r6
 80033d0:	f7fc ff0c 	bl	80001ec <__aeabi_uldivmod>
 80033d4:	4603      	mov	r3, r0
 80033d6:	460c      	mov	r4, r1
 80033d8:	461a      	mov	r2, r3
 80033da:	4b32      	ldr	r3, [pc, #200]	; (80034a4 <UART_SetConfig+0x6f4>)
 80033dc:	fba3 1302 	umull	r1, r3, r3, r2
 80033e0:	095b      	lsrs	r3, r3, #5
 80033e2:	2164      	movs	r1, #100	; 0x64
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	3332      	adds	r3, #50	; 0x32
 80033ee:	4a2d      	ldr	r2, [pc, #180]	; (80034a4 <UART_SetConfig+0x6f4>)
 80033f0:	fba2 2303 	umull	r2, r3, r2, r3
 80033f4:	095b      	lsrs	r3, r3, #5
 80033f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033fa:	4498      	add	r8, r3
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	469b      	mov	fp, r3
 8003400:	f04f 0c00 	mov.w	ip, #0
 8003404:	46d9      	mov	r9, fp
 8003406:	46e2      	mov	sl, ip
 8003408:	eb19 0309 	adds.w	r3, r9, r9
 800340c:	eb4a 040a 	adc.w	r4, sl, sl
 8003410:	4699      	mov	r9, r3
 8003412:	46a2      	mov	sl, r4
 8003414:	eb19 090b 	adds.w	r9, r9, fp
 8003418:	eb4a 0a0c 	adc.w	sl, sl, ip
 800341c:	f04f 0100 	mov.w	r1, #0
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003428:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800342c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003430:	4689      	mov	r9, r1
 8003432:	4692      	mov	sl, r2
 8003434:	eb1b 0509 	adds.w	r5, fp, r9
 8003438:	eb4c 060a 	adc.w	r6, ip, sl
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	4619      	mov	r1, r3
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	f04f 0400 	mov.w	r4, #0
 800344e:	0094      	lsls	r4, r2, #2
 8003450:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003454:	008b      	lsls	r3, r1, #2
 8003456:	461a      	mov	r2, r3
 8003458:	4623      	mov	r3, r4
 800345a:	4628      	mov	r0, r5
 800345c:	4631      	mov	r1, r6
 800345e:	f7fc fec5 	bl	80001ec <__aeabi_uldivmod>
 8003462:	4603      	mov	r3, r0
 8003464:	460c      	mov	r4, r1
 8003466:	461a      	mov	r2, r3
 8003468:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <UART_SetConfig+0x6f4>)
 800346a:	fba3 1302 	umull	r1, r3, r3, r2
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	2164      	movs	r1, #100	; 0x64
 8003472:	fb01 f303 	mul.w	r3, r1, r3
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	3332      	adds	r3, #50	; 0x32
 800347c:	4a09      	ldr	r2, [pc, #36]	; (80034a4 <UART_SetConfig+0x6f4>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	095b      	lsrs	r3, r3, #5
 8003484:	f003 020f 	and.w	r2, r3, #15
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4442      	add	r2, r8
 800348e:	609a      	str	r2, [r3, #8]
}
 8003490:	e7ff      	b.n	8003492 <UART_SetConfig+0x6e2>
 8003492:	bf00      	nop
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800349c:	40011000 	.word	0x40011000
 80034a0:	40011400 	.word	0x40011400
 80034a4:	51eb851f 	.word	0x51eb851f

080034a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034a8:	b084      	sub	sp, #16
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b084      	sub	sp, #16
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
 80034b2:	f107 001c 	add.w	r0, r7, #28
 80034b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d122      	bne.n	8003506 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80034d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80034e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d105      	bne.n	80034fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f001 fac6 	bl	8004a8c <USB_CoreReset>
 8003500:	4603      	mov	r3, r0
 8003502:	73fb      	strb	r3, [r7, #15]
 8003504:	e01a      	b.n	800353c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f001 faba 	bl	8004a8c <USB_CoreReset>
 8003518:	4603      	mov	r3, r0
 800351a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800351c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800351e:	2b00      	cmp	r3, #0
 8003520:	d106      	bne.n	8003530 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003526:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	639a      	str	r2, [r3, #56]	; 0x38
 800352e:	e005      	b.n	800353c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003534:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800353c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353e:	2b01      	cmp	r3, #1
 8003540:	d10b      	bne.n	800355a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f043 0206 	orr.w	r2, r3, #6
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f043 0220 	orr.w	r2, r3, #32
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800355a:	7bfb      	ldrb	r3, [r7, #15]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003566:	b004      	add	sp, #16
 8003568:	4770      	bx	lr
	...

0800356c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	4613      	mov	r3, r2
 8003578:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	2b02      	cmp	r3, #2
 800357e:	d165      	bne.n	800364c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	4a41      	ldr	r2, [pc, #260]	; (8003688 <USB_SetTurnaroundTime+0x11c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d906      	bls.n	8003596 <USB_SetTurnaroundTime+0x2a>
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4a40      	ldr	r2, [pc, #256]	; (800368c <USB_SetTurnaroundTime+0x120>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d802      	bhi.n	8003596 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003590:	230f      	movs	r3, #15
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	e062      	b.n	800365c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	4a3c      	ldr	r2, [pc, #240]	; (800368c <USB_SetTurnaroundTime+0x120>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d906      	bls.n	80035ac <USB_SetTurnaroundTime+0x40>
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	4a3b      	ldr	r2, [pc, #236]	; (8003690 <USB_SetTurnaroundTime+0x124>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d802      	bhi.n	80035ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80035a6:	230e      	movs	r3, #14
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	e057      	b.n	800365c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4a38      	ldr	r2, [pc, #224]	; (8003690 <USB_SetTurnaroundTime+0x124>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d906      	bls.n	80035c2 <USB_SetTurnaroundTime+0x56>
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4a37      	ldr	r2, [pc, #220]	; (8003694 <USB_SetTurnaroundTime+0x128>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d802      	bhi.n	80035c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80035bc:	230d      	movs	r3, #13
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	e04c      	b.n	800365c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	4a33      	ldr	r2, [pc, #204]	; (8003694 <USB_SetTurnaroundTime+0x128>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d906      	bls.n	80035d8 <USB_SetTurnaroundTime+0x6c>
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	4a32      	ldr	r2, [pc, #200]	; (8003698 <USB_SetTurnaroundTime+0x12c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d802      	bhi.n	80035d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80035d2:	230c      	movs	r3, #12
 80035d4:	617b      	str	r3, [r7, #20]
 80035d6:	e041      	b.n	800365c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	4a2f      	ldr	r2, [pc, #188]	; (8003698 <USB_SetTurnaroundTime+0x12c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d906      	bls.n	80035ee <USB_SetTurnaroundTime+0x82>
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4a2e      	ldr	r2, [pc, #184]	; (800369c <USB_SetTurnaroundTime+0x130>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d802      	bhi.n	80035ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80035e8:	230b      	movs	r3, #11
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	e036      	b.n	800365c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	4a2a      	ldr	r2, [pc, #168]	; (800369c <USB_SetTurnaroundTime+0x130>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d906      	bls.n	8003604 <USB_SetTurnaroundTime+0x98>
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	4a29      	ldr	r2, [pc, #164]	; (80036a0 <USB_SetTurnaroundTime+0x134>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d802      	bhi.n	8003604 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80035fe:	230a      	movs	r3, #10
 8003600:	617b      	str	r3, [r7, #20]
 8003602:	e02b      	b.n	800365c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	4a26      	ldr	r2, [pc, #152]	; (80036a0 <USB_SetTurnaroundTime+0x134>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d906      	bls.n	800361a <USB_SetTurnaroundTime+0xae>
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4a25      	ldr	r2, [pc, #148]	; (80036a4 <USB_SetTurnaroundTime+0x138>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d802      	bhi.n	800361a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003614:	2309      	movs	r3, #9
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	e020      	b.n	800365c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	4a21      	ldr	r2, [pc, #132]	; (80036a4 <USB_SetTurnaroundTime+0x138>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d906      	bls.n	8003630 <USB_SetTurnaroundTime+0xc4>
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	4a20      	ldr	r2, [pc, #128]	; (80036a8 <USB_SetTurnaroundTime+0x13c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d802      	bhi.n	8003630 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800362a:	2308      	movs	r3, #8
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	e015      	b.n	800365c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	4a1d      	ldr	r2, [pc, #116]	; (80036a8 <USB_SetTurnaroundTime+0x13c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d906      	bls.n	8003646 <USB_SetTurnaroundTime+0xda>
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4a1c      	ldr	r2, [pc, #112]	; (80036ac <USB_SetTurnaroundTime+0x140>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d802      	bhi.n	8003646 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003640:	2307      	movs	r3, #7
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	e00a      	b.n	800365c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003646:	2306      	movs	r3, #6
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	e007      	b.n	800365c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d102      	bne.n	8003658 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003652:	2309      	movs	r3, #9
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	e001      	b.n	800365c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003658:	2309      	movs	r3, #9
 800365a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	029b      	lsls	r3, r3, #10
 8003670:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003674:	431a      	orrs	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	371c      	adds	r7, #28
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	00d8acbf 	.word	0x00d8acbf
 800368c:	00e4e1bf 	.word	0x00e4e1bf
 8003690:	00f423ff 	.word	0x00f423ff
 8003694:	0106737f 	.word	0x0106737f
 8003698:	011a499f 	.word	0x011a499f
 800369c:	01312cff 	.word	0x01312cff
 80036a0:	014ca43f 	.word	0x014ca43f
 80036a4:	016e35ff 	.word	0x016e35ff
 80036a8:	01a6ab1f 	.word	0x01a6ab1f
 80036ac:	01e847ff 	.word	0x01e847ff

080036b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f043 0201 	orr.w	r2, r3, #1
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f023 0201 	bic.w	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d106      	bne.n	8003720 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	60da      	str	r2, [r3, #12]
 800371e:	e00b      	b.n	8003738 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	60da      	str	r2, [r3, #12]
 8003732:	e001      	b.n	8003738 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e003      	b.n	8003740 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003738:	2032      	movs	r0, #50	; 0x32
 800373a:	f7fd fa0f 	bl	8000b5c <HAL_Delay>

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003748:	b084      	sub	sp, #16
 800374a:	b580      	push	{r7, lr}
 800374c:	b086      	sub	sp, #24
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003756:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003762:	2300      	movs	r3, #0
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	e009      	b.n	800377c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	3340      	adds	r3, #64	; 0x40
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	2200      	movs	r2, #0
 8003774:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	3301      	adds	r3, #1
 800377a:	613b      	str	r3, [r7, #16]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	2b0e      	cmp	r3, #14
 8003780:	d9f2      	bls.n	8003768 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003784:	2b00      	cmp	r3, #0
 8003786:	d11c      	bne.n	80037c2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003796:	f043 0302 	orr.w	r3, r3, #2
 800379a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	639a      	str	r2, [r3, #56]	; 0x38
 80037c0:	e00b      	b.n	80037da <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80037e0:	461a      	mov	r2, r3
 80037e2:	2300      	movs	r3, #0
 80037e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ec:	4619      	mov	r1, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f4:	461a      	mov	r2, r3
 80037f6:	680b      	ldr	r3, [r1, #0]
 80037f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d10c      	bne.n	800381a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003802:	2b00      	cmp	r3, #0
 8003804:	d104      	bne.n	8003810 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003806:	2100      	movs	r1, #0
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f949 	bl	8003aa0 <USB_SetDevSpeed>
 800380e:	e008      	b.n	8003822 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003810:	2101      	movs	r1, #1
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f944 	bl	8003aa0 <USB_SetDevSpeed>
 8003818:	e003      	b.n	8003822 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800381a:	2103      	movs	r1, #3
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f93f 	bl	8003aa0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003822:	2110      	movs	r1, #16
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f8f3 	bl	8003a10 <USB_FlushTxFifo>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f911 	bl	8003a5c <USB_FlushRxFifo>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800384a:	461a      	mov	r2, r3
 800384c:	2300      	movs	r3, #0
 800384e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003856:	461a      	mov	r2, r3
 8003858:	2300      	movs	r3, #0
 800385a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003862:	461a      	mov	r2, r3
 8003864:	2300      	movs	r3, #0
 8003866:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003868:	2300      	movs	r3, #0
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	e043      	b.n	80038f6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4413      	add	r3, r2
 8003876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003880:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003884:	d118      	bne.n	80038b8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10a      	bne.n	80038a2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4413      	add	r3, r2
 8003894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003898:	461a      	mov	r2, r3
 800389a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800389e:	6013      	str	r3, [r2, #0]
 80038a0:	e013      	b.n	80038ca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ae:	461a      	mov	r2, r3
 80038b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	e008      	b.n	80038ca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c4:	461a      	mov	r2, r3
 80038c6:	2300      	movs	r3, #0
 80038c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d6:	461a      	mov	r2, r3
 80038d8:	2300      	movs	r3, #0
 80038da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e8:	461a      	mov	r2, r3
 80038ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	3301      	adds	r3, #1
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d3b7      	bcc.n	800386e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038fe:	2300      	movs	r3, #0
 8003900:	613b      	str	r3, [r7, #16]
 8003902:	e043      	b.n	800398c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4413      	add	r3, r2
 800390c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003916:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800391a:	d118      	bne.n	800394e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10a      	bne.n	8003938 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	015a      	lsls	r2, r3, #5
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4413      	add	r3, r2
 800392a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800392e:	461a      	mov	r2, r3
 8003930:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	e013      	b.n	8003960 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4413      	add	r3, r2
 8003940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003944:	461a      	mov	r2, r3
 8003946:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800394a:	6013      	str	r3, [r2, #0]
 800394c:	e008      	b.n	8003960 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	4413      	add	r3, r2
 8003956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395a:	461a      	mov	r2, r3
 800395c:	2300      	movs	r3, #0
 800395e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4413      	add	r3, r2
 8003968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396c:	461a      	mov	r2, r3
 800396e:	2300      	movs	r3, #0
 8003970:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4413      	add	r3, r2
 800397a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397e:	461a      	mov	r2, r3
 8003980:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003984:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	3301      	adds	r3, #1
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	429a      	cmp	r2, r3
 8003992:	d3b7      	bcc.n	8003904 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80039b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80039b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d105      	bne.n	80039c8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	f043 0210 	orr.w	r2, r3, #16
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	699a      	ldr	r2, [r3, #24]
 80039cc:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <USB_DevInit+0x2c4>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80039d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d005      	beq.n	80039e6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	f043 0208 	orr.w	r2, r3, #8
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80039e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d107      	bne.n	80039fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039f4:	f043 0304 	orr.w	r3, r3, #4
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a08:	b004      	add	sp, #16
 8003a0a:	4770      	bx	lr
 8003a0c:	803c3800 	.word	0x803c3800

08003a10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	019b      	lsls	r3, r3, #6
 8003a22:	f043 0220 	orr.w	r2, r3, #32
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4a09      	ldr	r2, [pc, #36]	; (8003a58 <USB_FlushTxFifo+0x48>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d901      	bls.n	8003a3c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e006      	b.n	8003a4a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	f003 0320 	and.w	r3, r3, #32
 8003a44:	2b20      	cmp	r3, #32
 8003a46:	d0f0      	beq.n	8003a2a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	00030d40 	.word	0x00030d40

08003a5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2210      	movs	r2, #16
 8003a6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	3301      	adds	r3, #1
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4a09      	ldr	r2, [pc, #36]	; (8003a9c <USB_FlushRxFifo+0x40>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d901      	bls.n	8003a80 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e006      	b.n	8003a8e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	f003 0310 	and.w	r3, r3, #16
 8003a88:	2b10      	cmp	r3, #16
 8003a8a:	d0f0      	beq.n	8003a6e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	00030d40 	.word	0x00030d40

08003aa0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	78fb      	ldrb	r3, [r7, #3]
 8003aba:	68f9      	ldr	r1, [r7, #12]
 8003abc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b087      	sub	sp, #28
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 0306 	and.w	r3, r3, #6
 8003aea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d102      	bne.n	8003af8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003af2:	2300      	movs	r3, #0
 8003af4:	75fb      	strb	r3, [r7, #23]
 8003af6:	e00a      	b.n	8003b0e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d002      	beq.n	8003b04 <USB_GetDevSpeed+0x32>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b06      	cmp	r3, #6
 8003b02:	d102      	bne.n	8003b0a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003b04:	2302      	movs	r3, #2
 8003b06:	75fb      	strb	r3, [r7, #23]
 8003b08:	e001      	b.n	8003b0e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003b0a:	230f      	movs	r3, #15
 8003b0c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	371c      	adds	r7, #28
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	785b      	ldrb	r3, [r3, #1]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d13a      	bne.n	8003bae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b3e:	69da      	ldr	r2, [r3, #28]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	f003 030f 	and.w	r3, r3, #15
 8003b48:	2101      	movs	r1, #1
 8003b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	68f9      	ldr	r1, [r7, #12]
 8003b52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b56:	4313      	orrs	r3, r2
 8003b58:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	015a      	lsls	r2, r3, #5
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4413      	add	r3, r2
 8003b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d155      	bne.n	8003c1c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	015a      	lsls	r2, r3, #5
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	78db      	ldrb	r3, [r3, #3]
 8003b8a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b8c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	059b      	lsls	r3, r3, #22
 8003b92:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b94:	4313      	orrs	r3, r2
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	0151      	lsls	r1, r2, #5
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	440a      	add	r2, r1
 8003b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003baa:	6013      	str	r3, [r2, #0]
 8003bac:	e036      	b.n	8003c1c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb4:	69da      	ldr	r2, [r3, #28]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc4:	041b      	lsls	r3, r3, #16
 8003bc6:	68f9      	ldr	r1, [r7, #12]
 8003bc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d11a      	bne.n	8003c1c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	78db      	ldrb	r3, [r3, #3]
 8003c00:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c02:	430b      	orrs	r3, r1
 8003c04:	4313      	orrs	r3, r2
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	0151      	lsls	r1, r2, #5
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	440a      	add	r2, r1
 8003c0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c1a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
	...

08003c2c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	785b      	ldrb	r3, [r3, #1]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d161      	bne.n	8003d0c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c5e:	d11f      	bne.n	8003ca0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	015a      	lsls	r2, r3, #5
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	0151      	lsls	r1, r2, #5
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	440a      	add	r2, r1
 8003c76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c7e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	0151      	lsls	r1, r2, #5
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	440a      	add	r2, r1
 8003c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	f003 030f 	and.w	r3, r3, #15
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	68f9      	ldr	r1, [r7, #12]
 8003cbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	f003 030f 	and.w	r3, r3, #15
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	68f9      	ldr	r1, [r7, #12]
 8003ce0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	0159      	lsls	r1, r3, #5
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	440b      	add	r3, r1
 8003cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d02:	4619      	mov	r1, r3
 8003d04:	4b35      	ldr	r3, [pc, #212]	; (8003ddc <USB_DeactivateEndpoint+0x1b0>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	600b      	str	r3, [r1, #0]
 8003d0a:	e060      	b.n	8003dce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	015a      	lsls	r2, r3, #5
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d22:	d11f      	bne.n	8003d64 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	0151      	lsls	r1, r2, #5
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	440a      	add	r2, r1
 8003d3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d42:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	0151      	lsls	r1, r2, #5
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	440a      	add	r2, r1
 8003d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	2101      	movs	r1, #1
 8003d76:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7a:	041b      	lsls	r3, r3, #16
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	68f9      	ldr	r1, [r7, #12]
 8003d80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d84:	4013      	ands	r3, r2
 8003d86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d8e:	69da      	ldr	r2, [r3, #28]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	f003 030f 	and.w	r3, r3, #15
 8003d98:	2101      	movs	r1, #1
 8003d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9e:	041b      	lsls	r3, r3, #16
 8003da0:	43db      	mvns	r3, r3
 8003da2:	68f9      	ldr	r1, [r7, #12]
 8003da4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003da8:	4013      	ands	r3, r2
 8003daa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	0159      	lsls	r1, r3, #5
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	440b      	add	r3, r1
 8003dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <USB_DeactivateEndpoint+0x1b4>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	ec337800 	.word	0xec337800
 8003de0:	eff37800 	.word	0xeff37800

08003de4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08a      	sub	sp, #40	; 0x28
 8003de8:	af02      	add	r7, sp, #8
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	4613      	mov	r3, r2
 8003df0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	785b      	ldrb	r3, [r3, #1]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	f040 815c 	bne.w	80040be <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d132      	bne.n	8003e74 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	0151      	lsls	r1, r2, #5
 8003e20:	69fa      	ldr	r2, [r7, #28]
 8003e22:	440a      	add	r2, r1
 8003e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	0151      	lsls	r1, r2, #5
 8003e44:	69fa      	ldr	r2, [r7, #28]
 8003e46:	440a      	add	r2, r1
 8003e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	015a      	lsls	r2, r3, #5
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	0151      	lsls	r1, r2, #5
 8003e64:	69fa      	ldr	r2, [r7, #28]
 8003e66:	440a      	add	r2, r1
 8003e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e6c:	0cdb      	lsrs	r3, r3, #19
 8003e6e:	04db      	lsls	r3, r3, #19
 8003e70:	6113      	str	r3, [r2, #16]
 8003e72:	e074      	b.n	8003f5e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	015a      	lsls	r2, r3, #5
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	0151      	lsls	r1, r2, #5
 8003e86:	69fa      	ldr	r2, [r7, #28]
 8003e88:	440a      	add	r2, r1
 8003e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e8e:	0cdb      	lsrs	r3, r3, #19
 8003e90:	04db      	lsls	r3, r3, #19
 8003e92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	0151      	lsls	r1, r2, #5
 8003ea6:	69fa      	ldr	r2, [r7, #28]
 8003ea8:	440a      	add	r2, r1
 8003eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003eb2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003eb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	6959      	ldr	r1, [r3, #20]
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	440b      	add	r3, r1
 8003ed0:	1e59      	subs	r1, r3, #1
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eda:	04d9      	lsls	r1, r3, #19
 8003edc:	4b9d      	ldr	r3, [pc, #628]	; (8004154 <USB_EPStartXfer+0x370>)
 8003ede:	400b      	ands	r3, r1
 8003ee0:	69b9      	ldr	r1, [r7, #24]
 8003ee2:	0148      	lsls	r0, r1, #5
 8003ee4:	69f9      	ldr	r1, [r7, #28]
 8003ee6:	4401      	add	r1, r0
 8003ee8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003eec:	4313      	orrs	r3, r2
 8003eee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f06:	69b9      	ldr	r1, [r7, #24]
 8003f08:	0148      	lsls	r0, r1, #5
 8003f0a:	69f9      	ldr	r1, [r7, #28]
 8003f0c:	4401      	add	r1, r0
 8003f0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f12:	4313      	orrs	r3, r2
 8003f14:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	78db      	ldrb	r3, [r3, #3]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d11f      	bne.n	8003f5e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	0151      	lsls	r1, r2, #5
 8003f30:	69fa      	ldr	r2, [r7, #28]
 8003f32:	440a      	add	r2, r1
 8003f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f38:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003f3c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	0151      	lsls	r1, r2, #5
 8003f50:	69fa      	ldr	r2, [r7, #28]
 8003f52:	440a      	add	r2, r1
 8003f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f5c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d14b      	bne.n	8003ffc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d009      	beq.n	8003f80 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f78:	461a      	mov	r2, r3
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	78db      	ldrb	r3, [r3, #3]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d128      	bne.n	8003fda <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d110      	bne.n	8003fba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	0151      	lsls	r1, r2, #5
 8003faa:	69fa      	ldr	r2, [r7, #28]
 8003fac:	440a      	add	r2, r1
 8003fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fb6:	6013      	str	r3, [r2, #0]
 8003fb8:	e00f      	b.n	8003fda <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	0151      	lsls	r1, r2, #5
 8003fcc:	69fa      	ldr	r2, [r7, #28]
 8003fce:	440a      	add	r2, r1
 8003fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	0151      	lsls	r1, r2, #5
 8003fec:	69fa      	ldr	r2, [r7, #28]
 8003fee:	440a      	add	r2, r1
 8003ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ff4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	e12f      	b.n	800425c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	4413      	add	r3, r2
 8004004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	0151      	lsls	r1, r2, #5
 800400e:	69fa      	ldr	r2, [r7, #28]
 8004010:	440a      	add	r2, r1
 8004012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004016:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800401a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	78db      	ldrb	r3, [r3, #3]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d015      	beq.n	8004050 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 8117 	beq.w	800425c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	2101      	movs	r1, #1
 8004040:	fa01 f303 	lsl.w	r3, r1, r3
 8004044:	69f9      	ldr	r1, [r7, #28]
 8004046:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800404a:	4313      	orrs	r3, r2
 800404c:	634b      	str	r3, [r1, #52]	; 0x34
 800404e:	e105      	b.n	800425c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405c:	2b00      	cmp	r3, #0
 800405e:	d110      	bne.n	8004082 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	0151      	lsls	r1, r2, #5
 8004072:	69fa      	ldr	r2, [r7, #28]
 8004074:	440a      	add	r2, r1
 8004076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800407a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800407e:	6013      	str	r3, [r2, #0]
 8004080:	e00f      	b.n	80040a2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	015a      	lsls	r2, r3, #5
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	4413      	add	r3, r2
 800408a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	0151      	lsls	r1, r2, #5
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	440a      	add	r2, r1
 8004098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800409c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	68d9      	ldr	r1, [r3, #12]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	781a      	ldrb	r2, [r3, #0]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	b298      	uxth	r0, r3
 80040b0:	79fb      	ldrb	r3, [r7, #7]
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	4603      	mov	r3, r0
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 fa2b 	bl	8004512 <USB_WritePacket>
 80040bc:	e0ce      	b.n	800425c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	0151      	lsls	r1, r2, #5
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	440a      	add	r2, r1
 80040d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040d8:	0cdb      	lsrs	r3, r3, #19
 80040da:	04db      	lsls	r3, r3, #19
 80040dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	0151      	lsls	r1, r2, #5
 80040f0:	69fa      	ldr	r2, [r7, #28]
 80040f2:	440a      	add	r2, r1
 80040f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004100:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d126      	bne.n	8004158 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	4413      	add	r3, r2
 8004112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004120:	69b9      	ldr	r1, [r7, #24]
 8004122:	0148      	lsls	r0, r1, #5
 8004124:	69f9      	ldr	r1, [r7, #28]
 8004126:	4401      	add	r1, r0
 8004128:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800412c:	4313      	orrs	r3, r2
 800412e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	4413      	add	r3, r2
 8004138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	0151      	lsls	r1, r2, #5
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	440a      	add	r2, r1
 8004146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800414a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800414e:	6113      	str	r3, [r2, #16]
 8004150:	e036      	b.n	80041c0 <USB_EPStartXfer+0x3dc>
 8004152:	bf00      	nop
 8004154:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	695a      	ldr	r2, [r3, #20]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	4413      	add	r3, r2
 8004162:	1e5a      	subs	r2, r3, #1
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	fbb2 f3f3 	udiv	r3, r2, r3
 800416c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	4413      	add	r3, r2
 8004176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	8afb      	ldrh	r3, [r7, #22]
 800417e:	04d9      	lsls	r1, r3, #19
 8004180:	4b39      	ldr	r3, [pc, #228]	; (8004268 <USB_EPStartXfer+0x484>)
 8004182:	400b      	ands	r3, r1
 8004184:	69b9      	ldr	r1, [r7, #24]
 8004186:	0148      	lsls	r0, r1, #5
 8004188:	69f9      	ldr	r1, [r7, #28]
 800418a:	4401      	add	r1, r0
 800418c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004190:	4313      	orrs	r3, r2
 8004192:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	4413      	add	r3, r2
 800419c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a0:	691a      	ldr	r2, [r3, #16]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	8af9      	ldrh	r1, [r7, #22]
 80041a8:	fb01 f303 	mul.w	r3, r1, r3
 80041ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b0:	69b9      	ldr	r1, [r7, #24]
 80041b2:	0148      	lsls	r0, r1, #5
 80041b4:	69f9      	ldr	r1, [r7, #28]
 80041b6:	4401      	add	r1, r0
 80041b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041bc:	4313      	orrs	r3, r2
 80041be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80041c0:	79fb      	ldrb	r3, [r7, #7]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d10d      	bne.n	80041e2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d009      	beq.n	80041e2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	68d9      	ldr	r1, [r3, #12]
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041de:	460a      	mov	r2, r1
 80041e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	78db      	ldrb	r3, [r3, #3]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d128      	bne.n	800423c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d110      	bne.n	800421c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	4413      	add	r3, r2
 8004202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	0151      	lsls	r1, r2, #5
 800420c:	69fa      	ldr	r2, [r7, #28]
 800420e:	440a      	add	r2, r1
 8004210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004214:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	e00f      	b.n	800423c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	4413      	add	r3, r2
 8004224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	0151      	lsls	r1, r2, #5
 800422e:	69fa      	ldr	r2, [r7, #28]
 8004230:	440a      	add	r2, r1
 8004232:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800423a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	4413      	add	r3, r2
 8004244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	0151      	lsls	r1, r2, #5
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	440a      	add	r2, r1
 8004252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004256:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800425a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3720      	adds	r7, #32
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	1ff80000 	.word	0x1ff80000

0800426c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	4613      	mov	r3, r2
 8004278:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	785b      	ldrb	r3, [r3, #1]
 8004288:	2b01      	cmp	r3, #1
 800428a:	f040 80cd 	bne.w	8004428 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d132      	bne.n	80042fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	4413      	add	r3, r2
 800429e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	0151      	lsls	r1, r2, #5
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	440a      	add	r2, r1
 80042ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	0151      	lsls	r1, r2, #5
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	440a      	add	r2, r1
 80042d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	0151      	lsls	r1, r2, #5
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	440a      	add	r2, r1
 80042f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042f4:	0cdb      	lsrs	r3, r3, #19
 80042f6:	04db      	lsls	r3, r3, #19
 80042f8:	6113      	str	r3, [r2, #16]
 80042fa:	e04e      	b.n	800439a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	0151      	lsls	r1, r2, #5
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	440a      	add	r2, r1
 8004312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004316:	0cdb      	lsrs	r3, r3, #19
 8004318:	04db      	lsls	r3, r3, #19
 800431a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	4413      	add	r3, r2
 8004324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	0151      	lsls	r1, r2, #5
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	440a      	add	r2, r1
 8004332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004336:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800433a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800433e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	695a      	ldr	r2, [r3, #20]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	429a      	cmp	r2, r3
 800434a:	d903      	bls.n	8004354 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	0151      	lsls	r1, r2, #5
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	440a      	add	r2, r1
 800436a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800436e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004372:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004380:	691a      	ldr	r2, [r3, #16]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800438a:	6939      	ldr	r1, [r7, #16]
 800438c:	0148      	lsls	r0, r1, #5
 800438e:	6979      	ldr	r1, [r7, #20]
 8004390:	4401      	add	r1, r0
 8004392:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004396:	4313      	orrs	r3, r2
 8004398:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800439a:	79fb      	ldrb	r3, [r7, #7]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d11e      	bne.n	80043de <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d009      	beq.n	80043bc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b4:	461a      	mov	r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	0151      	lsls	r1, r2, #5
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	440a      	add	r2, r1
 80043d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	e092      	b.n	8004504 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	0151      	lsls	r1, r2, #5
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	440a      	add	r2, r1
 80043f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043fc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d07e      	beq.n	8004504 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	2101      	movs	r1, #1
 8004418:	fa01 f303 	lsl.w	r3, r1, r3
 800441c:	6979      	ldr	r1, [r7, #20]
 800441e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004422:	4313      	orrs	r3, r2
 8004424:	634b      	str	r3, [r1, #52]	; 0x34
 8004426:	e06d      	b.n	8004504 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	0151      	lsls	r1, r2, #5
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	440a      	add	r2, r1
 800443e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004442:	0cdb      	lsrs	r3, r3, #19
 8004444:	04db      	lsls	r3, r3, #19
 8004446:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	4413      	add	r3, r2
 8004450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	0151      	lsls	r1, r2, #5
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	440a      	add	r2, r1
 800445e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004462:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004466:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800446a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	4413      	add	r3, r2
 8004484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	0151      	lsls	r1, r2, #5
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	440a      	add	r2, r1
 8004492:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004496:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800449a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a8:	691a      	ldr	r2, [r3, #16]
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044b2:	6939      	ldr	r1, [r7, #16]
 80044b4:	0148      	lsls	r0, r1, #5
 80044b6:	6979      	ldr	r1, [r7, #20]
 80044b8:	4401      	add	r1, r0
 80044ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044be:	4313      	orrs	r3, r2
 80044c0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d10d      	bne.n	80044e4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d009      	beq.n	80044e4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	68d9      	ldr	r1, [r3, #12]
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e0:	460a      	mov	r2, r1
 80044e2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	0151      	lsls	r1, r2, #5
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	440a      	add	r2, r1
 80044fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004502:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004512:	b480      	push	{r7}
 8004514:	b089      	sub	sp, #36	; 0x24
 8004516:	af00      	add	r7, sp, #0
 8004518:	60f8      	str	r0, [r7, #12]
 800451a:	60b9      	str	r1, [r7, #8]
 800451c:	4611      	mov	r1, r2
 800451e:	461a      	mov	r2, r3
 8004520:	460b      	mov	r3, r1
 8004522:	71fb      	strb	r3, [r7, #7]
 8004524:	4613      	mov	r3, r2
 8004526:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004530:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004534:	2b00      	cmp	r3, #0
 8004536:	d11a      	bne.n	800456e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004538:	88bb      	ldrh	r3, [r7, #4]
 800453a:	3303      	adds	r3, #3
 800453c:	089b      	lsrs	r3, r3, #2
 800453e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004540:	2300      	movs	r3, #0
 8004542:	61bb      	str	r3, [r7, #24]
 8004544:	e00f      	b.n	8004566 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004546:	79fb      	ldrb	r3, [r7, #7]
 8004548:	031a      	lsls	r2, r3, #12
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	4413      	add	r3, r2
 800454e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004552:	461a      	mov	r2, r3
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6013      	str	r3, [r2, #0]
      pSrc++;
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	3304      	adds	r3, #4
 800455e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	3301      	adds	r3, #1
 8004564:	61bb      	str	r3, [r7, #24]
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	429a      	cmp	r2, r3
 800456c:	d3eb      	bcc.n	8004546 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3724      	adds	r7, #36	; 0x24
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800457c:	b480      	push	{r7}
 800457e:	b089      	sub	sp, #36	; 0x24
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	4613      	mov	r3, r2
 8004588:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004592:	88fb      	ldrh	r3, [r7, #6]
 8004594:	3303      	adds	r3, #3
 8004596:	089b      	lsrs	r3, r3, #2
 8004598:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800459a:	2300      	movs	r3, #0
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	e00b      	b.n	80045b8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	601a      	str	r2, [r3, #0]
    pDest++;
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	3304      	adds	r3, #4
 80045b0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	3301      	adds	r3, #1
 80045b6:	61bb      	str	r3, [r7, #24]
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d3ef      	bcc.n	80045a0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80045c0:	69fb      	ldr	r3, [r7, #28]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3724      	adds	r7, #36	; 0x24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b085      	sub	sp, #20
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	785b      	ldrb	r3, [r3, #1]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d12c      	bne.n	8004644 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	db12      	blt.n	8004622 <USB_EPSetStall+0x54>
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00f      	beq.n	8004622 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	0151      	lsls	r1, r2, #5
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	440a      	add	r2, r1
 8004618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800461c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004620:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4413      	add	r3, r2
 800462a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	0151      	lsls	r1, r2, #5
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	440a      	add	r2, r1
 8004638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800463c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	e02b      	b.n	800469c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	db12      	blt.n	800467c <USB_EPSetStall+0xae>
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00f      	beq.n	800467c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	0151      	lsls	r1, r2, #5
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	440a      	add	r2, r1
 8004672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004676:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800467a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	0151      	lsls	r1, r2, #5
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	440a      	add	r2, r1
 8004692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004696:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800469a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b085      	sub	sp, #20
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	785b      	ldrb	r3, [r3, #1]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d128      	bne.n	8004718 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	015a      	lsls	r2, r3, #5
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	0151      	lsls	r1, r2, #5
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	440a      	add	r2, r1
 80046dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046e4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	78db      	ldrb	r3, [r3, #3]
 80046ea:	2b03      	cmp	r3, #3
 80046ec:	d003      	beq.n	80046f6 <USB_EPClearStall+0x4c>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	78db      	ldrb	r3, [r3, #3]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d138      	bne.n	8004768 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	0151      	lsls	r1, r2, #5
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	440a      	add	r2, r1
 800470c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	e027      	b.n	8004768 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	0151      	lsls	r1, r2, #5
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	440a      	add	r2, r1
 800472e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004732:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004736:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	78db      	ldrb	r3, [r3, #3]
 800473c:	2b03      	cmp	r3, #3
 800473e:	d003      	beq.n	8004748 <USB_EPClearStall+0x9e>
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	78db      	ldrb	r3, [r3, #3]
 8004744:	2b02      	cmp	r3, #2
 8004746:	d10f      	bne.n	8004768 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	0151      	lsls	r1, r2, #5
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	440a      	add	r2, r1
 800475e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004766:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004776:	b480      	push	{r7}
 8004778:	b085      	sub	sp, #20
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	460b      	mov	r3, r1
 8004780:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004794:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004798:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	78fb      	ldrb	r3, [r7, #3]
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80047aa:	68f9      	ldr	r1, [r7, #12]
 80047ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047b0:	4313      	orrs	r3, r2
 80047b2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b085      	sub	sp, #20
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80047dc:	f023 0303 	bic.w	r3, r3, #3
 80047e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047f0:	f023 0302 	bic.w	r3, r3, #2
 80047f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800481e:	f023 0303 	bic.w	r3, r3, #3
 8004822:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004832:	f043 0302 	orr.w	r3, r3, #2
 8004836:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004846:	b480      	push	{r7}
 8004848:	b085      	sub	sp, #20
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4013      	ands	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800485e:	68fb      	ldr	r3, [r7, #12]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	4013      	ands	r3, r2
 800488e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	0c1b      	lsrs	r3, r3, #16
}
 8004894:	4618      	mov	r0, r3
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	4013      	ands	r3, r2
 80048c2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	b29b      	uxth	r3, r3
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	460b      	mov	r3, r1
 80048de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80048e4:	78fb      	ldrb	r3, [r7, #3]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	4013      	ands	r3, r2
 8004900:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004902:	68bb      	ldr	r3, [r7, #8]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004932:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004934:	78fb      	ldrb	r3, [r7, #3]
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	fa22 f303 	lsr.w	r3, r2, r3
 8004940:	01db      	lsls	r3, r3, #7
 8004942:	b2db      	uxtb	r3, r3
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4313      	orrs	r3, r2
 8004948:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800494a:	78fb      	ldrb	r3, [r7, #3]
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	4413      	add	r3, r2
 8004952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4013      	ands	r3, r2
 800495c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800495e:	68bb      	ldr	r3, [r7, #8]
}
 8004960:	4618      	mov	r0, r3
 8004962:	371c      	adds	r7, #28
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	f003 0301 	and.w	r3, r3, #1
}
 800497c:	4618      	mov	r0, r3
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80049a6:	f023 0307 	bic.w	r3, r3, #7
 80049aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
	...

080049d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	460b      	mov	r3, r1
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	333c      	adds	r3, #60	; 0x3c
 80049e6:	3304      	adds	r3, #4
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	4a26      	ldr	r2, [pc, #152]	; (8004a88 <USB_EP0_OutStart+0xb8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d90a      	bls.n	8004a0a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a04:	d101      	bne.n	8004a0a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	e037      	b.n	8004a7a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a10:	461a      	mov	r2, r3
 8004a12:	2300      	movs	r3, #0
 8004a14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a38:	f043 0318 	orr.w	r3, r3, #24
 8004a3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a4c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004a50:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004a52:	7afb      	ldrb	r3, [r7, #11]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d10f      	bne.n	8004a78 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5e:	461a      	mov	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a72:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004a76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	371c      	adds	r7, #28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	4f54300a 	.word	0x4f54300a

08004a8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	60fb      	str	r3, [r7, #12]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4a13      	ldr	r2, [pc, #76]	; (8004af0 <USB_CoreReset+0x64>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d901      	bls.n	8004aaa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e01b      	b.n	8004ae2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	daf2      	bge.n	8004a98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f043 0201 	orr.w	r2, r3, #1
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4a09      	ldr	r2, [pc, #36]	; (8004af0 <USB_CoreReset+0x64>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d901      	bls.n	8004ad4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e006      	b.n	8004ae2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d0f0      	beq.n	8004ac2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	00030d40 	.word	0x00030d40

08004af4 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	460b      	mov	r3, r1
 8004afe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004b00:	2010      	movs	r0, #16
 8004b02:	f001 fed9 	bl	80068b8 <malloc>
 8004b06:	4603      	mov	r3, r0
 8004b08:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d105      	bne.n	8004b1c <USBD_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004b18:	2302      	movs	r3, #2
 8004b1a:	e01b      	b.n	8004b54 <USBD_HID_Init+0x60>
  }

  pdev->pClassData = (void *)hhid;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	7c1b      	ldrb	r3, [r3, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d103      	bne.n	8004b34 <USBD_HID_Init+0x40>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2207      	movs	r2, #7
 8004b30:	875a      	strh	r2, [r3, #58]	; 0x3a
 8004b32:	e002      	b.n	8004b3a <USBD_HID_Init+0x46>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	220a      	movs	r2, #10
 8004b38:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

    /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004b3a:	2304      	movs	r3, #4
 8004b3c:	2203      	movs	r2, #3
 8004b3e:	2181      	movs	r1, #129	; 0x81
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f001 fd52 	bl	80065ea <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8004b68:	2181      	movs	r1, #129	; 0x81
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f001 fd63 	bl	8006636 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d009      	beq.n	8004b9a <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f001 fe9b 	bl	80068c8 <free>
    pdev->pClassData = NULL;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3708      	adds	r7, #8
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bb4:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	817b      	strh	r3, [r7, #10]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d045      	beq.n	8004c56 <USBD_HID_Setup+0xb2>
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	f040 80d4 	bne.w	8004d78 <USBD_HID_Setup+0x1d4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	785b      	ldrb	r3, [r3, #1]
 8004bd4:	3b02      	subs	r3, #2
 8004bd6:	2b09      	cmp	r3, #9
 8004bd8:	d835      	bhi.n	8004c46 <USBD_HID_Setup+0xa2>
 8004bda:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <USBD_HID_Setup+0x3c>)
 8004bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be0:	08004c37 	.word	0x08004c37
 8004be4:	08004c17 	.word	0x08004c17
 8004be8:	08004c47 	.word	0x08004c47
 8004bec:	08004c47 	.word	0x08004c47
 8004bf0:	08004c47 	.word	0x08004c47
 8004bf4:	08004c47 	.word	0x08004c47
 8004bf8:	08004c47 	.word	0x08004c47
 8004bfc:	08004c47 	.word	0x08004c47
 8004c00:	08004c25 	.word	0x08004c25
 8004c04:	08004c09 	.word	0x08004c09
    {
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	885b      	ldrh	r3, [r3, #2]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	461a      	mov	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	601a      	str	r2, [r3, #0]
      break;
 8004c14:	e01e      	b.n	8004c54 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f001 f992 	bl	8005f46 <USBD_CtlSendData>
      break;
 8004c22:	e017      	b.n	8004c54 <USBD_HID_Setup+0xb0>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	885b      	ldrh	r3, [r3, #2]
 8004c28:	0a1b      	lsrs	r3, r3, #8
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	461a      	mov	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	605a      	str	r2, [r3, #4]
      break;
 8004c34:	e00e      	b.n	8004c54 <USBD_HID_Setup+0xb0>

    case HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3304      	adds	r3, #4
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f001 f981 	bl	8005f46 <USBD_CtlSendData>
      break;
 8004c44:	e006      	b.n	8004c54 <USBD_HID_Setup+0xb0>

    default:
      USBD_CtlError(pdev, req);
 8004c46:	6839      	ldr	r1, [r7, #0]
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f001 f90b 	bl	8005e64 <USBD_CtlError>
      ret = USBD_FAIL;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	75fb      	strb	r3, [r7, #23]
      break;
 8004c52:	bf00      	nop
    }
    break;
 8004c54:	e097      	b.n	8004d86 <USBD_HID_Setup+0x1e2>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	785b      	ldrb	r3, [r3, #1]
 8004c5a:	2b0b      	cmp	r3, #11
 8004c5c:	f200 8083 	bhi.w	8004d66 <USBD_HID_Setup+0x1c2>
 8004c60:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <USBD_HID_Setup+0xc4>)
 8004c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c66:	bf00      	nop
 8004c68:	08004c99 	.word	0x08004c99
 8004c6c:	08004d75 	.word	0x08004d75
 8004c70:	08004d67 	.word	0x08004d67
 8004c74:	08004d67 	.word	0x08004d67
 8004c78:	08004d67 	.word	0x08004d67
 8004c7c:	08004d67 	.word	0x08004d67
 8004c80:	08004cc1 	.word	0x08004cc1
 8004c84:	08004d67 	.word	0x08004d67
 8004c88:	08004d67 	.word	0x08004d67
 8004c8c:	08004d67 	.word	0x08004d67
 8004c90:	08004d19 	.word	0x08004d19
 8004c94:	08004d41 	.word	0x08004d41
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d107      	bne.n	8004cb2 <USBD_HID_Setup+0x10e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004ca2:	f107 030a 	add.w	r3, r7, #10
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	4619      	mov	r1, r3
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f001 f94b 	bl	8005f46 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004cb0:	e061      	b.n	8004d76 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8004cb2:	6839      	ldr	r1, [r7, #0]
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f001 f8d5 	bl	8005e64 <USBD_CtlError>
        ret = USBD_FAIL;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	75fb      	strb	r3, [r7, #23]
      break;
 8004cbe:	e05a      	b.n	8004d76 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_REPORT_DESC)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	885b      	ldrh	r3, [r3, #2]
 8004cc4:	0a1b      	lsrs	r3, r3, #8
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	2b22      	cmp	r3, #34	; 0x22
 8004cca:	d108      	bne.n	8004cde <USBD_HID_Setup+0x13a>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	88db      	ldrh	r3, [r3, #6]
 8004cd0:	2b4a      	cmp	r3, #74	; 0x4a
 8004cd2:	bf28      	it	cs
 8004cd4:	234a      	movcs	r3, #74	; 0x4a
 8004cd6:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_MOUSE_ReportDesc;
 8004cd8:	4b2d      	ldr	r3, [pc, #180]	; (8004d90 <USBD_HID_Setup+0x1ec>)
 8004cda:	613b      	str	r3, [r7, #16]
 8004cdc:	e015      	b.n	8004d0a <USBD_HID_Setup+0x166>
      }
      else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	885b      	ldrh	r3, [r3, #2]
 8004ce2:	0a1b      	lsrs	r3, r3, #8
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	2b21      	cmp	r3, #33	; 0x21
 8004ce8:	d108      	bne.n	8004cfc <USBD_HID_Setup+0x158>
      {
        pbuf = USBD_HID_Desc;
 8004cea:	4b2a      	ldr	r3, [pc, #168]	; (8004d94 <USBD_HID_Setup+0x1f0>)
 8004cec:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	88db      	ldrh	r3, [r3, #6]
 8004cf2:	2b09      	cmp	r3, #9
 8004cf4:	bf28      	it	cs
 8004cf6:	2309      	movcs	r3, #9
 8004cf8:	82bb      	strh	r3, [r7, #20]
 8004cfa:	e006      	b.n	8004d0a <USBD_HID_Setup+0x166>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8004cfc:	6839      	ldr	r1, [r7, #0]
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f001 f8b0 	bl	8005e64 <USBD_CtlError>
        ret = USBD_FAIL;
 8004d04:	2303      	movs	r3, #3
 8004d06:	75fb      	strb	r3, [r7, #23]
        break;
 8004d08:	e035      	b.n	8004d76 <USBD_HID_Setup+0x1d2>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004d0a:	8abb      	ldrh	r3, [r7, #20]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	6939      	ldr	r1, [r7, #16]
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f001 f918 	bl	8005f46 <USBD_CtlSendData>
      break;
 8004d16:	e02e      	b.n	8004d76 <USBD_HID_Setup+0x1d2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d107      	bne.n	8004d32 <USBD_HID_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	3308      	adds	r3, #8
 8004d26:	2201      	movs	r2, #1
 8004d28:	4619      	mov	r1, r3
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f001 f90b 	bl	8005f46 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004d30:	e021      	b.n	8004d76 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8004d32:	6839      	ldr	r1, [r7, #0]
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f001 f895 	bl	8005e64 <USBD_CtlError>
        ret = USBD_FAIL;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d3e:	e01a      	b.n	8004d76 <USBD_HID_Setup+0x1d2>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d106      	bne.n	8004d58 <USBD_HID_Setup+0x1b4>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	885b      	ldrh	r3, [r3, #2]
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	461a      	mov	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004d56:	e00e      	b.n	8004d76 <USBD_HID_Setup+0x1d2>
        USBD_CtlError(pdev, req);
 8004d58:	6839      	ldr	r1, [r7, #0]
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f001 f882 	bl	8005e64 <USBD_CtlError>
        ret = USBD_FAIL;
 8004d60:	2303      	movs	r3, #3
 8004d62:	75fb      	strb	r3, [r7, #23]
      break;
 8004d64:	e007      	b.n	8004d76 <USBD_HID_Setup+0x1d2>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004d66:	6839      	ldr	r1, [r7, #0]
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f001 f87b 	bl	8005e64 <USBD_CtlError>
      ret = USBD_FAIL;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	75fb      	strb	r3, [r7, #23]
      break;
 8004d72:	e000      	b.n	8004d76 <USBD_HID_Setup+0x1d2>
      break;
 8004d74:	bf00      	nop
    }
    break;
 8004d76:	e006      	b.n	8004d86 <USBD_HID_Setup+0x1e2>

  default:
    USBD_CtlError(pdev, req);
 8004d78:	6839      	ldr	r1, [r7, #0]
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f001 f872 	bl	8005e64 <USBD_CtlError>
    ret = USBD_FAIL;
 8004d80:	2303      	movs	r3, #3
 8004d82:	75fb      	strb	r3, [r7, #23]
    break;
 8004d84:	bf00      	nop
  }

  return (uint8_t)ret;
 8004d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3718      	adds	r7, #24
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	200000c8 	.word	0x200000c8
 8004d94:	200000b0 	.word	0x200000b0

08004d98 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2222      	movs	r2, #34	; 0x22
 8004da4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8004da6:	4b03      	ldr	r3, [pc, #12]	; (8004db4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	20000044 	.word	0x20000044

08004db8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2222      	movs	r2, #34	; 0x22
 8004dc4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8004dc6:	4b03      	ldr	r3, [pc, #12]	; (8004dd4 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	20000068 	.word	0x20000068

08004dd8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2222      	movs	r2, #34	; 0x22
 8004de4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8004de6:	4b03      	ldr	r3, [pc, #12]	; (8004df4 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr
 8004df4:	2000008c 	.word	0x2000008c

08004df8 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	460b      	mov	r3, r1
 8004e02:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	220a      	movs	r2, #10
 8004e28:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8004e2a:	4b03      	ldr	r3, [pc, #12]	; (8004e38 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	200000bc 	.word	0x200000bc

08004e3c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	4613      	mov	r3, r2
 8004e48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e025      	b.n	8004ea0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	79fa      	ldrb	r2, [r7, #7]
 8004e92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f001 fb41 	bl	800651c <USBD_LL_Init>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e010      	b.n	8004ee2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed0:	f107 020e 	add.w	r2, r7, #14
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	4798      	blx	r3
 8004ed8:	4602      	mov	r2, r0
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b082      	sub	sp, #8
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f001 fb5e 	bl	80065b4 <USBD_LL_Start>
 8004ef8:	4603      	mov	r3, r0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004f24:	2303      	movs	r3, #3
 8004f26:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d009      	beq.n	8004f46 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	78fa      	ldrb	r2, [r7, #3]
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	4798      	blx	r3
 8004f42:	4603      	mov	r3, r0
 8004f44:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d007      	beq.n	8004f76 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	78fa      	ldrb	r2, [r7, #3]
 8004f70:	4611      	mov	r1, r2
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	4798      	blx	r3
  }

  return USBD_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f90:	6839      	ldr	r1, [r7, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 ff2c 	bl	8005df0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004fb4:	f003 031f 	and.w	r3, r3, #31
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d00e      	beq.n	8004fda <USBD_LL_SetupStage+0x5a>
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d302      	bcc.n	8004fc6 <USBD_LL_SetupStage+0x46>
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d014      	beq.n	8004fee <USBD_LL_SetupStage+0x6e>
 8004fc4:	e01d      	b.n	8005002 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004fcc:	4619      	mov	r1, r3
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 fa18 	bl	8005404 <USBD_StdDevReq>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fd8:	e020      	b.n	800501c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fa7c 	bl	80054e0 <USBD_StdItfReq>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	73fb      	strb	r3, [r7, #15]
      break;
 8004fec:	e016      	b.n	800501c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fab8 	bl	800556c <USBD_StdEPReq>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8005000:	e00c      	b.n	800501c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005008:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800500c:	b2db      	uxtb	r3, r3
 800500e:	4619      	mov	r1, r3
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f001 fb2f 	bl	8006674 <USBD_LL_StallEP>
 8005016:	4603      	mov	r3, r0
 8005018:	73fb      	strb	r3, [r7, #15]
      break;
 800501a:	bf00      	nop
  }

  return ret;
 800501c:	7bfb      	ldrb	r3, [r7, #15]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b086      	sub	sp, #24
 800502a:	af00      	add	r7, sp, #0
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	460b      	mov	r3, r1
 8005030:	607a      	str	r2, [r7, #4]
 8005032:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005034:	7afb      	ldrb	r3, [r7, #11]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d137      	bne.n	80050aa <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005040:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005048:	2b03      	cmp	r3, #3
 800504a:	d14a      	bne.n	80050e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	429a      	cmp	r2, r3
 8005056:	d913      	bls.n	8005080 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	1ad2      	subs	r2, r2, r3
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	4293      	cmp	r3, r2
 8005070:	bf28      	it	cs
 8005072:	4613      	movcs	r3, r2
 8005074:	461a      	mov	r2, r3
 8005076:	6879      	ldr	r1, [r7, #4]
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 ff90 	bl	8005f9e <USBD_CtlContinueRx>
 800507e:	e030      	b.n	80050e2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00a      	beq.n	80050a2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005092:	2b03      	cmp	r3, #3
 8005094:	d105      	bne.n	80050a2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f000 ff8c 	bl	8005fc0 <USBD_CtlSendStatus>
 80050a8:	e01b      	b.n	80050e2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d013      	beq.n	80050de <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80050bc:	2b03      	cmp	r3, #3
 80050be:	d10e      	bne.n	80050de <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	7afa      	ldrb	r2, [r7, #11]
 80050ca:	4611      	mov	r1, r2
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	4798      	blx	r3
 80050d0:	4603      	mov	r3, r0
 80050d2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80050d4:	7dfb      	ldrb	r3, [r7, #23]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80050da:	7dfb      	ldrb	r3, [r7, #23]
 80050dc:	e002      	b.n	80050e4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80050de:	2303      	movs	r3, #3
 80050e0:	e000      	b.n	80050e4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3718      	adds	r7, #24
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	460b      	mov	r3, r1
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80050fa:	7afb      	ldrb	r3, [r7, #11]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d16a      	bne.n	80051d6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	3314      	adds	r3, #20
 8005104:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800510c:	2b02      	cmp	r3, #2
 800510e:	d155      	bne.n	80051bc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	429a      	cmp	r2, r3
 800511a:	d914      	bls.n	8005146 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	1ad2      	subs	r2, r2, r3
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	461a      	mov	r2, r3
 8005130:	6879      	ldr	r1, [r7, #4]
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 ff22 	bl	8005f7c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005138:	2300      	movs	r3, #0
 800513a:	2200      	movs	r2, #0
 800513c:	2100      	movs	r1, #0
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f001 fb42 	bl	80067c8 <USBD_LL_PrepareReceive>
 8005144:	e03a      	b.n	80051bc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	68da      	ldr	r2, [r3, #12]
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	429a      	cmp	r2, r3
 8005150:	d11c      	bne.n	800518c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800515a:	429a      	cmp	r2, r3
 800515c:	d316      	bcc.n	800518c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005168:	429a      	cmp	r2, r3
 800516a:	d20f      	bcs.n	800518c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800516c:	2200      	movs	r2, #0
 800516e:	2100      	movs	r1, #0
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 ff03 	bl	8005f7c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800517e:	2300      	movs	r3, #0
 8005180:	2200      	movs	r2, #0
 8005182:	2100      	movs	r1, #0
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f001 fb1f 	bl	80067c8 <USBD_LL_PrepareReceive>
 800518a:	e017      	b.n	80051bc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800519e:	2b03      	cmp	r3, #3
 80051a0:	d105      	bne.n	80051ae <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80051ae:	2180      	movs	r1, #128	; 0x80
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f001 fa5f 	bl	8006674 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 ff15 	bl	8005fe6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d123      	bne.n	800520e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f7ff fe9b 	bl	8004f02 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80051d4:	e01b      	b.n	800520e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d013      	beq.n	800520a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80051e8:	2b03      	cmp	r3, #3
 80051ea:	d10e      	bne.n	800520a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	7afa      	ldrb	r2, [r7, #11]
 80051f6:	4611      	mov	r1, r2
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	4798      	blx	r3
 80051fc:	4603      	mov	r3, r0
 80051fe:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005200:	7dfb      	ldrb	r3, [r7, #23]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005206:	7dfb      	ldrb	r3, [r7, #23]
 8005208:	e002      	b.n	8005210 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800520a:	2303      	movs	r3, #3
 800520c:	e000      	b.n	8005210 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005244:	2b00      	cmp	r3, #0
 8005246:	d009      	beq.n	800525c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6852      	ldr	r2, [r2, #4]
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	4611      	mov	r1, r2
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800525c:	2340      	movs	r3, #64	; 0x40
 800525e:	2200      	movs	r2, #0
 8005260:	2100      	movs	r1, #0
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f001 f9c1 	bl	80065ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2240      	movs	r2, #64	; 0x40
 8005274:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005278:	2340      	movs	r3, #64	; 0x40
 800527a:	2200      	movs	r2, #0
 800527c:	2180      	movs	r1, #128	; 0x80
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f001 f9b3 	bl	80065ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2240      	movs	r2, #64	; 0x40
 800528e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	460b      	mov	r3, r1
 80052a4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	78fa      	ldrb	r2, [r7, #3]
 80052aa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b083      	sub	sp, #12
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2204      	movs	r2, #4
 80052d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d105      	bne.n	8005302 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800531e:	2b03      	cmp	r3, #3
 8005320:	d10b      	bne.n	800533a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d005      	beq.n	800533a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	460b      	mov	r3, r1
 800534e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	460b      	mov	r3, r1
 8005368:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b082      	sub	sp, #8
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d009      	beq.n	80053bc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	6852      	ldr	r2, [r2, #4]
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	4611      	mov	r1, r2
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	4798      	blx	r3
  }

  return USBD_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b087      	sub	sp, #28
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	3301      	adds	r3, #1
 80053dc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80053e4:	8a3b      	ldrh	r3, [r7, #16]
 80053e6:	021b      	lsls	r3, r3, #8
 80053e8:	b21a      	sxth	r2, r3
 80053ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	b21b      	sxth	r3, r3
 80053f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80053f4:	89fb      	ldrh	r3, [r7, #14]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
	...

08005404 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800540e:	2300      	movs	r3, #0
 8005410:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800541a:	2b20      	cmp	r3, #32
 800541c:	d004      	beq.n	8005428 <USBD_StdDevReq+0x24>
 800541e:	2b40      	cmp	r3, #64	; 0x40
 8005420:	d002      	beq.n	8005428 <USBD_StdDevReq+0x24>
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <USBD_StdDevReq+0x38>
 8005426:	e050      	b.n	80054ca <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	6839      	ldr	r1, [r7, #0]
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	4798      	blx	r3
 8005436:	4603      	mov	r3, r0
 8005438:	73fb      	strb	r3, [r7, #15]
    break;
 800543a:	e04b      	b.n	80054d4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	785b      	ldrb	r3, [r3, #1]
 8005440:	2b09      	cmp	r3, #9
 8005442:	d83c      	bhi.n	80054be <USBD_StdDevReq+0xba>
 8005444:	a201      	add	r2, pc, #4	; (adr r2, 800544c <USBD_StdDevReq+0x48>)
 8005446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544a:	bf00      	nop
 800544c:	080054a1 	.word	0x080054a1
 8005450:	080054b5 	.word	0x080054b5
 8005454:	080054bf 	.word	0x080054bf
 8005458:	080054ab 	.word	0x080054ab
 800545c:	080054bf 	.word	0x080054bf
 8005460:	0800547f 	.word	0x0800547f
 8005464:	08005475 	.word	0x08005475
 8005468:	080054bf 	.word	0x080054bf
 800546c:	08005497 	.word	0x08005497
 8005470:	08005489 	.word	0x08005489
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005474:	6839      	ldr	r1, [r7, #0]
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f9ce 	bl	8005818 <USBD_GetDescriptor>
      break;
 800547c:	e024      	b.n	80054c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800547e:	6839      	ldr	r1, [r7, #0]
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fb33 	bl	8005aec <USBD_SetAddress>
      break;
 8005486:	e01f      	b.n	80054c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005488:	6839      	ldr	r1, [r7, #0]
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fb70 	bl	8005b70 <USBD_SetConfig>
 8005490:	4603      	mov	r3, r0
 8005492:	73fb      	strb	r3, [r7, #15]
      break;
 8005494:	e018      	b.n	80054c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8005496:	6839      	ldr	r1, [r7, #0]
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fc0d 	bl	8005cb8 <USBD_GetConfig>
      break;
 800549e:	e013      	b.n	80054c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80054a0:	6839      	ldr	r1, [r7, #0]
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fc3c 	bl	8005d20 <USBD_GetStatus>
      break;
 80054a8:	e00e      	b.n	80054c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80054aa:	6839      	ldr	r1, [r7, #0]
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fc6a 	bl	8005d86 <USBD_SetFeature>
      break;
 80054b2:	e009      	b.n	80054c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80054b4:	6839      	ldr	r1, [r7, #0]
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fc79 	bl	8005dae <USBD_ClrFeature>
      break;
 80054bc:	e004      	b.n	80054c8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80054be:	6839      	ldr	r1, [r7, #0]
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fccf 	bl	8005e64 <USBD_CtlError>
      break;
 80054c6:	bf00      	nop
    }
    break;
 80054c8:	e004      	b.n	80054d4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80054ca:	6839      	ldr	r1, [r7, #0]
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 fcc9 	bl	8005e64 <USBD_CtlError>
    break;
 80054d2:	bf00      	nop
  }

  return ret;
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop

080054e0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80054f6:	2b20      	cmp	r3, #32
 80054f8:	d003      	beq.n	8005502 <USBD_StdItfReq+0x22>
 80054fa:	2b40      	cmp	r3, #64	; 0x40
 80054fc:	d001      	beq.n	8005502 <USBD_StdItfReq+0x22>
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d12a      	bne.n	8005558 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005508:	3b01      	subs	r3, #1
 800550a:	2b02      	cmp	r3, #2
 800550c:	d81d      	bhi.n	800554a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	889b      	ldrh	r3, [r3, #4]
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b01      	cmp	r3, #1
 8005516:	d813      	bhi.n	8005540 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	6839      	ldr	r1, [r7, #0]
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	4798      	blx	r3
 8005526:	4603      	mov	r3, r0
 8005528:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	88db      	ldrh	r3, [r3, #6]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d110      	bne.n	8005554 <USBD_StdItfReq+0x74>
 8005532:	7bfb      	ldrb	r3, [r7, #15]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10d      	bne.n	8005554 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 fd41 	bl	8005fc0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800553e:	e009      	b.n	8005554 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005540:	6839      	ldr	r1, [r7, #0]
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fc8e 	bl	8005e64 <USBD_CtlError>
      break;
 8005548:	e004      	b.n	8005554 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800554a:	6839      	ldr	r1, [r7, #0]
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 fc89 	bl	8005e64 <USBD_CtlError>
      break;
 8005552:	e000      	b.n	8005556 <USBD_StdItfReq+0x76>
      break;
 8005554:	bf00      	nop
    }
    break;
 8005556:	e004      	b.n	8005562 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005558:	6839      	ldr	r1, [r7, #0]
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 fc82 	bl	8005e64 <USBD_CtlError>
    break;
 8005560:	bf00      	nop
  }

  return ret;
 8005562:	7bfb      	ldrb	r3, [r7, #15]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	889b      	ldrh	r3, [r3, #4]
 800557e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005588:	2b20      	cmp	r3, #32
 800558a:	d004      	beq.n	8005596 <USBD_StdEPReq+0x2a>
 800558c:	2b40      	cmp	r3, #64	; 0x40
 800558e:	d002      	beq.n	8005596 <USBD_StdEPReq+0x2a>
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00a      	beq.n	80055aa <USBD_StdEPReq+0x3e>
 8005594:	e135      	b.n	8005802 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	6839      	ldr	r1, [r7, #0]
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	4798      	blx	r3
 80055a4:	4603      	mov	r3, r0
 80055a6:	73fb      	strb	r3, [r7, #15]
    break;
 80055a8:	e130      	b.n	800580c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	785b      	ldrb	r3, [r3, #1]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d03e      	beq.n	8005630 <USBD_StdEPReq+0xc4>
 80055b2:	2b03      	cmp	r3, #3
 80055b4:	d002      	beq.n	80055bc <USBD_StdEPReq+0x50>
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d077      	beq.n	80056aa <USBD_StdEPReq+0x13e>
 80055ba:	e11c      	b.n	80057f6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d002      	beq.n	80055cc <USBD_StdEPReq+0x60>
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	d015      	beq.n	80055f6 <USBD_StdEPReq+0x8a>
 80055ca:	e02b      	b.n	8005624 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80055cc:	7bbb      	ldrb	r3, [r7, #14]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00c      	beq.n	80055ec <USBD_StdEPReq+0x80>
 80055d2:	7bbb      	ldrb	r3, [r7, #14]
 80055d4:	2b80      	cmp	r3, #128	; 0x80
 80055d6:	d009      	beq.n	80055ec <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80055d8:	7bbb      	ldrb	r3, [r7, #14]
 80055da:	4619      	mov	r1, r3
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f001 f849 	bl	8006674 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80055e2:	2180      	movs	r1, #128	; 0x80
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f001 f845 	bl	8006674 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80055ea:	e020      	b.n	800562e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80055ec:	6839      	ldr	r1, [r7, #0]
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fc38 	bl	8005e64 <USBD_CtlError>
        break;
 80055f4:	e01b      	b.n	800562e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	885b      	ldrh	r3, [r3, #2]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10e      	bne.n	800561c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80055fe:	7bbb      	ldrb	r3, [r7, #14]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00b      	beq.n	800561c <USBD_StdEPReq+0xb0>
 8005604:	7bbb      	ldrb	r3, [r7, #14]
 8005606:	2b80      	cmp	r3, #128	; 0x80
 8005608:	d008      	beq.n	800561c <USBD_StdEPReq+0xb0>
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	88db      	ldrh	r3, [r3, #6]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d104      	bne.n	800561c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8005612:	7bbb      	ldrb	r3, [r7, #14]
 8005614:	4619      	mov	r1, r3
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f001 f82c 	bl	8006674 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 fccf 	bl	8005fc0 <USBD_CtlSendStatus>

        break;
 8005622:	e004      	b.n	800562e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8005624:	6839      	ldr	r1, [r7, #0]
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fc1c 	bl	8005e64 <USBD_CtlError>
        break;
 800562c:	bf00      	nop
      }
      break;
 800562e:	e0e7      	b.n	8005800 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005636:	2b02      	cmp	r3, #2
 8005638:	d002      	beq.n	8005640 <USBD_StdEPReq+0xd4>
 800563a:	2b03      	cmp	r3, #3
 800563c:	d015      	beq.n	800566a <USBD_StdEPReq+0xfe>
 800563e:	e02d      	b.n	800569c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005640:	7bbb      	ldrb	r3, [r7, #14]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00c      	beq.n	8005660 <USBD_StdEPReq+0xf4>
 8005646:	7bbb      	ldrb	r3, [r7, #14]
 8005648:	2b80      	cmp	r3, #128	; 0x80
 800564a:	d009      	beq.n	8005660 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800564c:	7bbb      	ldrb	r3, [r7, #14]
 800564e:	4619      	mov	r1, r3
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f001 f80f 	bl	8006674 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005656:	2180      	movs	r1, #128	; 0x80
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f001 f80b 	bl	8006674 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800565e:	e023      	b.n	80056a8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8005660:	6839      	ldr	r1, [r7, #0]
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 fbfe 	bl	8005e64 <USBD_CtlError>
        break;
 8005668:	e01e      	b.n	80056a8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	885b      	ldrh	r3, [r3, #2]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d119      	bne.n	80056a6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005672:	7bbb      	ldrb	r3, [r7, #14]
 8005674:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005678:	2b00      	cmp	r3, #0
 800567a:	d004      	beq.n	8005686 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800567c:	7bbb      	ldrb	r3, [r7, #14]
 800567e:	4619      	mov	r1, r3
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f001 f816 	bl	80066b2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fc9a 	bl	8005fc0 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	6839      	ldr	r1, [r7, #0]
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	4798      	blx	r3
        }
        break;
 800569a:	e004      	b.n	80056a6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800569c:	6839      	ldr	r1, [r7, #0]
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fbe0 	bl	8005e64 <USBD_CtlError>
        break;
 80056a4:	e000      	b.n	80056a8 <USBD_StdEPReq+0x13c>
        break;
 80056a6:	bf00      	nop
      }
      break;
 80056a8:	e0aa      	b.n	8005800 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d002      	beq.n	80056ba <USBD_StdEPReq+0x14e>
 80056b4:	2b03      	cmp	r3, #3
 80056b6:	d032      	beq.n	800571e <USBD_StdEPReq+0x1b2>
 80056b8:	e097      	b.n	80057ea <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80056ba:	7bbb      	ldrb	r3, [r7, #14]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d007      	beq.n	80056d0 <USBD_StdEPReq+0x164>
 80056c0:	7bbb      	ldrb	r3, [r7, #14]
 80056c2:	2b80      	cmp	r3, #128	; 0x80
 80056c4:	d004      	beq.n	80056d0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80056c6:	6839      	ldr	r1, [r7, #0]
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fbcb 	bl	8005e64 <USBD_CtlError>
          break;
 80056ce:	e091      	b.n	80057f4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80056d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	da0b      	bge.n	80056f0 <USBD_StdEPReq+0x184>
 80056d8:	7bbb      	ldrb	r3, [r7, #14]
 80056da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80056de:	4613      	mov	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4413      	add	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	3310      	adds	r3, #16
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	4413      	add	r3, r2
 80056ec:	3304      	adds	r3, #4
 80056ee:	e00b      	b.n	8005708 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80056f0:	7bbb      	ldrb	r3, [r7, #14]
 80056f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80056f6:	4613      	mov	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4413      	add	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	4413      	add	r3, r2
 8005706:	3304      	adds	r3, #4
 8005708:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2200      	movs	r2, #0
 800570e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2202      	movs	r2, #2
 8005714:	4619      	mov	r1, r3
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fc15 	bl	8005f46 <USBD_CtlSendData>
        break;
 800571c:	e06a      	b.n	80057f4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800571e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005722:	2b00      	cmp	r3, #0
 8005724:	da11      	bge.n	800574a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005726:	7bbb      	ldrb	r3, [r7, #14]
 8005728:	f003 020f 	and.w	r2, r3, #15
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	4613      	mov	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4413      	add	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	440b      	add	r3, r1
 8005738:	3324      	adds	r3, #36	; 0x24
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d117      	bne.n	8005770 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005740:	6839      	ldr	r1, [r7, #0]
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fb8e 	bl	8005e64 <USBD_CtlError>
            break;
 8005748:	e054      	b.n	80057f4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800574a:	7bbb      	ldrb	r3, [r7, #14]
 800574c:	f003 020f 	and.w	r2, r3, #15
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	4613      	mov	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	440b      	add	r3, r1
 800575c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d104      	bne.n	8005770 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005766:	6839      	ldr	r1, [r7, #0]
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 fb7b 	bl	8005e64 <USBD_CtlError>
            break;
 800576e:	e041      	b.n	80057f4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005770:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005774:	2b00      	cmp	r3, #0
 8005776:	da0b      	bge.n	8005790 <USBD_StdEPReq+0x224>
 8005778:	7bbb      	ldrb	r3, [r7, #14]
 800577a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800577e:	4613      	mov	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	3310      	adds	r3, #16
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	4413      	add	r3, r2
 800578c:	3304      	adds	r3, #4
 800578e:	e00b      	b.n	80057a8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005790:	7bbb      	ldrb	r3, [r7, #14]
 8005792:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005796:	4613      	mov	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	4413      	add	r3, r2
 80057a6:	3304      	adds	r3, #4
 80057a8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80057aa:	7bbb      	ldrb	r3, [r7, #14]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <USBD_StdEPReq+0x24a>
 80057b0:	7bbb      	ldrb	r3, [r7, #14]
 80057b2:	2b80      	cmp	r3, #128	; 0x80
 80057b4:	d103      	bne.n	80057be <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]
 80057bc:	e00e      	b.n	80057dc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80057be:	7bbb      	ldrb	r3, [r7, #14]
 80057c0:	4619      	mov	r1, r3
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 ff94 	bl	80066f0 <USBD_LL_IsStallEP>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2201      	movs	r2, #1
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	e002      	b.n	80057dc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2200      	movs	r2, #0
 80057da:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2202      	movs	r2, #2
 80057e0:	4619      	mov	r1, r3
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fbaf 	bl	8005f46 <USBD_CtlSendData>
          break;
 80057e8:	e004      	b.n	80057f4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80057ea:	6839      	ldr	r1, [r7, #0]
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 fb39 	bl	8005e64 <USBD_CtlError>
        break;
 80057f2:	bf00      	nop
      }
      break;
 80057f4:	e004      	b.n	8005800 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80057f6:	6839      	ldr	r1, [r7, #0]
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 fb33 	bl	8005e64 <USBD_CtlError>
      break;
 80057fe:	bf00      	nop
    }
    break;
 8005800:	e004      	b.n	800580c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8005802:	6839      	ldr	r1, [r7, #0]
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fb2d 	bl	8005e64 <USBD_CtlError>
    break;
 800580a:	bf00      	nop
  }

  return ret;
 800580c:	7bfb      	ldrb	r3, [r7, #15]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
	...

08005818 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005822:	2300      	movs	r3, #0
 8005824:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005826:	2300      	movs	r3, #0
 8005828:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800582a:	2300      	movs	r3, #0
 800582c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	885b      	ldrh	r3, [r3, #2]
 8005832:	0a1b      	lsrs	r3, r3, #8
 8005834:	b29b      	uxth	r3, r3
 8005836:	3b01      	subs	r3, #1
 8005838:	2b06      	cmp	r3, #6
 800583a:	f200 8128 	bhi.w	8005a8e <USBD_GetDescriptor+0x276>
 800583e:	a201      	add	r2, pc, #4	; (adr r2, 8005844 <USBD_GetDescriptor+0x2c>)
 8005840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005844:	08005861 	.word	0x08005861
 8005848:	08005879 	.word	0x08005879
 800584c:	080058b9 	.word	0x080058b9
 8005850:	08005a8f 	.word	0x08005a8f
 8005854:	08005a8f 	.word	0x08005a8f
 8005858:	08005a2f 	.word	0x08005a2f
 800585c:	08005a5b 	.word	0x08005a5b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	7c12      	ldrb	r2, [r2, #16]
 800586c:	f107 0108 	add.w	r1, r7, #8
 8005870:	4610      	mov	r0, r2
 8005872:	4798      	blx	r3
 8005874:	60f8      	str	r0, [r7, #12]
    break;
 8005876:	e112      	b.n	8005a9e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	7c1b      	ldrb	r3, [r3, #16]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10d      	bne.n	800589c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005888:	f107 0208 	add.w	r2, r7, #8
 800588c:	4610      	mov	r0, r2
 800588e:	4798      	blx	r3
 8005890:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	3301      	adds	r3, #1
 8005896:	2202      	movs	r2, #2
 8005898:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800589a:	e100      	b.n	8005a9e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a4:	f107 0208 	add.w	r2, r7, #8
 80058a8:	4610      	mov	r0, r2
 80058aa:	4798      	blx	r3
 80058ac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	3301      	adds	r3, #1
 80058b2:	2202      	movs	r2, #2
 80058b4:	701a      	strb	r2, [r3, #0]
    break;
 80058b6:	e0f2      	b.n	8005a9e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	885b      	ldrh	r3, [r3, #2]
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b05      	cmp	r3, #5
 80058c0:	f200 80ac 	bhi.w	8005a1c <USBD_GetDescriptor+0x204>
 80058c4:	a201      	add	r2, pc, #4	; (adr r2, 80058cc <USBD_GetDescriptor+0xb4>)
 80058c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ca:	bf00      	nop
 80058cc:	080058e5 	.word	0x080058e5
 80058d0:	08005919 	.word	0x08005919
 80058d4:	0800594d 	.word	0x0800594d
 80058d8:	08005981 	.word	0x08005981
 80058dc:	080059b5 	.word	0x080059b5
 80058e0:	080059e9 	.word	0x080059e9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00b      	beq.n	8005908 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	7c12      	ldrb	r2, [r2, #16]
 80058fc:	f107 0108 	add.w	r1, r7, #8
 8005900:	4610      	mov	r0, r2
 8005902:	4798      	blx	r3
 8005904:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005906:	e091      	b.n	8005a2c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005908:	6839      	ldr	r1, [r7, #0]
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 faaa 	bl	8005e64 <USBD_CtlError>
        err++;
 8005910:	7afb      	ldrb	r3, [r7, #11]
 8005912:	3301      	adds	r3, #1
 8005914:	72fb      	strb	r3, [r7, #11]
      break;
 8005916:	e089      	b.n	8005a2c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00b      	beq.n	800593c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	7c12      	ldrb	r2, [r2, #16]
 8005930:	f107 0108 	add.w	r1, r7, #8
 8005934:	4610      	mov	r0, r2
 8005936:	4798      	blx	r3
 8005938:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800593a:	e077      	b.n	8005a2c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800593c:	6839      	ldr	r1, [r7, #0]
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fa90 	bl	8005e64 <USBD_CtlError>
        err++;
 8005944:	7afb      	ldrb	r3, [r7, #11]
 8005946:	3301      	adds	r3, #1
 8005948:	72fb      	strb	r3, [r7, #11]
      break;
 800594a:	e06f      	b.n	8005a2c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00b      	beq.n	8005970 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	7c12      	ldrb	r2, [r2, #16]
 8005964:	f107 0108 	add.w	r1, r7, #8
 8005968:	4610      	mov	r0, r2
 800596a:	4798      	blx	r3
 800596c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800596e:	e05d      	b.n	8005a2c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005970:	6839      	ldr	r1, [r7, #0]
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 fa76 	bl	8005e64 <USBD_CtlError>
        err++;
 8005978:	7afb      	ldrb	r3, [r7, #11]
 800597a:	3301      	adds	r3, #1
 800597c:	72fb      	strb	r3, [r7, #11]
      break;
 800597e:	e055      	b.n	8005a2c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00b      	beq.n	80059a4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	7c12      	ldrb	r2, [r2, #16]
 8005998:	f107 0108 	add.w	r1, r7, #8
 800599c:	4610      	mov	r0, r2
 800599e:	4798      	blx	r3
 80059a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80059a2:	e043      	b.n	8005a2c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80059a4:	6839      	ldr	r1, [r7, #0]
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 fa5c 	bl	8005e64 <USBD_CtlError>
        err++;
 80059ac:	7afb      	ldrb	r3, [r7, #11]
 80059ae:	3301      	adds	r3, #1
 80059b0:	72fb      	strb	r3, [r7, #11]
      break;
 80059b2:	e03b      	b.n	8005a2c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00b      	beq.n	80059d8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	7c12      	ldrb	r2, [r2, #16]
 80059cc:	f107 0108 	add.w	r1, r7, #8
 80059d0:	4610      	mov	r0, r2
 80059d2:	4798      	blx	r3
 80059d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80059d6:	e029      	b.n	8005a2c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80059d8:	6839      	ldr	r1, [r7, #0]
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fa42 	bl	8005e64 <USBD_CtlError>
        err++;
 80059e0:	7afb      	ldrb	r3, [r7, #11]
 80059e2:	3301      	adds	r3, #1
 80059e4:	72fb      	strb	r3, [r7, #11]
      break;
 80059e6:	e021      	b.n	8005a2c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00b      	beq.n	8005a0c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	7c12      	ldrb	r2, [r2, #16]
 8005a00:	f107 0108 	add.w	r1, r7, #8
 8005a04:	4610      	mov	r0, r2
 8005a06:	4798      	blx	r3
 8005a08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005a0a:	e00f      	b.n	8005a2c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005a0c:	6839      	ldr	r1, [r7, #0]
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fa28 	bl	8005e64 <USBD_CtlError>
        err++;
 8005a14:	7afb      	ldrb	r3, [r7, #11]
 8005a16:	3301      	adds	r3, #1
 8005a18:	72fb      	strb	r3, [r7, #11]
      break;
 8005a1a:	e007      	b.n	8005a2c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005a1c:	6839      	ldr	r1, [r7, #0]
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fa20 	bl	8005e64 <USBD_CtlError>
      err++;
 8005a24:	7afb      	ldrb	r3, [r7, #11]
 8005a26:	3301      	adds	r3, #1
 8005a28:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8005a2a:	bf00      	nop
    }
    break;
 8005a2c:	e037      	b.n	8005a9e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	7c1b      	ldrb	r3, [r3, #16]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d109      	bne.n	8005a4a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a3e:	f107 0208 	add.w	r2, r7, #8
 8005a42:	4610      	mov	r0, r2
 8005a44:	4798      	blx	r3
 8005a46:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005a48:	e029      	b.n	8005a9e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005a4a:	6839      	ldr	r1, [r7, #0]
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fa09 	bl	8005e64 <USBD_CtlError>
      err++;
 8005a52:	7afb      	ldrb	r3, [r7, #11]
 8005a54:	3301      	adds	r3, #1
 8005a56:	72fb      	strb	r3, [r7, #11]
    break;
 8005a58:	e021      	b.n	8005a9e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	7c1b      	ldrb	r3, [r3, #16]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10d      	bne.n	8005a7e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6a:	f107 0208 	add.w	r2, r7, #8
 8005a6e:	4610      	mov	r0, r2
 8005a70:	4798      	blx	r3
 8005a72:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3301      	adds	r3, #1
 8005a78:	2207      	movs	r2, #7
 8005a7a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005a7c:	e00f      	b.n	8005a9e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005a7e:	6839      	ldr	r1, [r7, #0]
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f9ef 	bl	8005e64 <USBD_CtlError>
      err++;
 8005a86:	7afb      	ldrb	r3, [r7, #11]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	72fb      	strb	r3, [r7, #11]
    break;
 8005a8c:	e007      	b.n	8005a9e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8005a8e:	6839      	ldr	r1, [r7, #0]
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f9e7 	bl	8005e64 <USBD_CtlError>
    err++;
 8005a96:	7afb      	ldrb	r3, [r7, #11]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	72fb      	strb	r3, [r7, #11]
    break;
 8005a9c:	bf00      	nop
  }

  if (err != 0U)
 8005a9e:	7afb      	ldrb	r3, [r7, #11]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d11e      	bne.n	8005ae2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	88db      	ldrh	r3, [r3, #6]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d016      	beq.n	8005ada <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8005aac:	893b      	ldrh	r3, [r7, #8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00e      	beq.n	8005ad0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	88da      	ldrh	r2, [r3, #6]
 8005ab6:	893b      	ldrh	r3, [r7, #8]
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	bf28      	it	cs
 8005abc:	4613      	movcs	r3, r2
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005ac2:	893b      	ldrh	r3, [r7, #8]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	68f9      	ldr	r1, [r7, #12]
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fa3c 	bl	8005f46 <USBD_CtlSendData>
 8005ace:	e009      	b.n	8005ae4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005ad0:	6839      	ldr	r1, [r7, #0]
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f9c6 	bl	8005e64 <USBD_CtlError>
 8005ad8:	e004      	b.n	8005ae4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fa70 	bl	8005fc0 <USBD_CtlSendStatus>
 8005ae0:	e000      	b.n	8005ae4 <USBD_GetDescriptor+0x2cc>
    return;
 8005ae2:	bf00      	nop
    }
  }
}
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop

08005aec <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	889b      	ldrh	r3, [r3, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d130      	bne.n	8005b60 <USBD_SetAddress+0x74>
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	88db      	ldrh	r3, [r3, #6]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d12c      	bne.n	8005b60 <USBD_SetAddress+0x74>
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	885b      	ldrh	r3, [r3, #2]
 8005b0a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b0c:	d828      	bhi.n	8005b60 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	885b      	ldrh	r3, [r3, #2]
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b20:	2b03      	cmp	r3, #3
 8005b22:	d104      	bne.n	8005b2e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005b24:	6839      	ldr	r1, [r7, #0]
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f99c 	bl	8005e64 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b2c:	e01c      	b.n	8005b68 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	7bfa      	ldrb	r2, [r7, #15]
 8005b32:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005b36:	7bfb      	ldrb	r3, [r7, #15]
 8005b38:	4619      	mov	r1, r3
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fe04 	bl	8006748 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 fa3d 	bl	8005fc0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005b46:	7bfb      	ldrb	r3, [r7, #15]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d004      	beq.n	8005b56 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b54:	e008      	b.n	8005b68 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b5e:	e003      	b.n	8005b68 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005b60:	6839      	ldr	r1, [r7, #0]
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f97e 	bl	8005e64 <USBD_CtlError>
  }
}
 8005b68:	bf00      	nop
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	885b      	ldrh	r3, [r3, #2]
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	4b4b      	ldr	r3, [pc, #300]	; (8005cb4 <USBD_SetConfig+0x144>)
 8005b86:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005b88:	4b4a      	ldr	r3, [pc, #296]	; (8005cb4 <USBD_SetConfig+0x144>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d905      	bls.n	8005b9c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005b90:	6839      	ldr	r1, [r7, #0]
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f966 	bl	8005e64 <USBD_CtlError>
    return USBD_FAIL;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e087      	b.n	8005cac <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d002      	beq.n	8005bac <USBD_SetConfig+0x3c>
 8005ba6:	2b03      	cmp	r3, #3
 8005ba8:	d025      	beq.n	8005bf6 <USBD_SetConfig+0x86>
 8005baa:	e071      	b.n	8005c90 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005bac:	4b41      	ldr	r3, [pc, #260]	; (8005cb4 <USBD_SetConfig+0x144>)
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d01c      	beq.n	8005bee <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005bb4:	4b3f      	ldr	r3, [pc, #252]	; (8005cb4 <USBD_SetConfig+0x144>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	461a      	mov	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005bbe:	4b3d      	ldr	r3, [pc, #244]	; (8005cb4 <USBD_SetConfig+0x144>)
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f7ff f9a7 	bl	8004f18 <USBD_SetClassConfig>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d004      	beq.n	8005bde <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005bd4:	6839      	ldr	r1, [r7, #0]
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f944 	bl	8005e64 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005bdc:	e065      	b.n	8005caa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 f9ee 	bl	8005fc0 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2203      	movs	r2, #3
 8005be8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005bec:	e05d      	b.n	8005caa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f9e6 	bl	8005fc0 <USBD_CtlSendStatus>
    break;
 8005bf4:	e059      	b.n	8005caa <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8005bf6:	4b2f      	ldr	r3, [pc, #188]	; (8005cb4 <USBD_SetConfig+0x144>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d112      	bne.n	8005c24 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2202      	movs	r2, #2
 8005c02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8005c06:	4b2b      	ldr	r3, [pc, #172]	; (8005cb4 <USBD_SetConfig+0x144>)
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005c10:	4b28      	ldr	r3, [pc, #160]	; (8005cb4 <USBD_SetConfig+0x144>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	4619      	mov	r1, r3
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7ff f99a 	bl	8004f50 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f9cf 	bl	8005fc0 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005c22:	e042      	b.n	8005caa <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8005c24:	4b23      	ldr	r3, [pc, #140]	; (8005cb4 <USBD_SetConfig+0x144>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d02a      	beq.n	8005c88 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	4619      	mov	r1, r3
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7ff f988 	bl	8004f50 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8005c40:	4b1c      	ldr	r3, [pc, #112]	; (8005cb4 <USBD_SetConfig+0x144>)
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	461a      	mov	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005c4a:	4b1a      	ldr	r3, [pc, #104]	; (8005cb4 <USBD_SetConfig+0x144>)
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	4619      	mov	r1, r3
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f7ff f961 	bl	8004f18 <USBD_SetClassConfig>
 8005c56:	4603      	mov	r3, r0
 8005c58:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8005c5a:	7bfb      	ldrb	r3, [r7, #15]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00f      	beq.n	8005c80 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8005c60:	6839      	ldr	r1, [r7, #0]
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f8fe 	bl	8005e64 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	4619      	mov	r1, r3
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7ff f96d 	bl	8004f50 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2202      	movs	r2, #2
 8005c7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005c7e:	e014      	b.n	8005caa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f99d 	bl	8005fc0 <USBD_CtlSendStatus>
    break;
 8005c86:	e010      	b.n	8005caa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f999 	bl	8005fc0 <USBD_CtlSendStatus>
    break;
 8005c8e:	e00c      	b.n	8005caa <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8005c90:	6839      	ldr	r1, [r7, #0]
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f8e6 	bl	8005e64 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005c98:	4b06      	ldr	r3, [pc, #24]	; (8005cb4 <USBD_SetConfig+0x144>)
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7ff f956 	bl	8004f50 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8005ca8:	bf00      	nop
  }

  return ret;
 8005caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	200001e8 	.word	0x200001e8

08005cb8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	88db      	ldrh	r3, [r3, #6]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d004      	beq.n	8005cd4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005cca:	6839      	ldr	r1, [r7, #0]
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f8c9 	bl	8005e64 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8005cd2:	e021      	b.n	8005d18 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	db17      	blt.n	8005d0e <USBD_GetConfig+0x56>
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	dd02      	ble.n	8005ce8 <USBD_GetConfig+0x30>
 8005ce2:	2b03      	cmp	r3, #3
 8005ce4:	d00b      	beq.n	8005cfe <USBD_GetConfig+0x46>
 8005ce6:	e012      	b.n	8005d0e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	3308      	adds	r3, #8
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f925 	bl	8005f46 <USBD_CtlSendData>
      break;
 8005cfc:	e00c      	b.n	8005d18 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	3304      	adds	r3, #4
 8005d02:	2201      	movs	r2, #1
 8005d04:	4619      	mov	r1, r3
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f91d 	bl	8005f46 <USBD_CtlSendData>
      break;
 8005d0c:	e004      	b.n	8005d18 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8005d0e:	6839      	ldr	r1, [r7, #0]
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f8a7 	bl	8005e64 <USBD_CtlError>
      break;
 8005d16:	bf00      	nop
}
 8005d18:	bf00      	nop
 8005d1a:	3708      	adds	r7, #8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d30:	3b01      	subs	r3, #1
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d81e      	bhi.n	8005d74 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	88db      	ldrh	r3, [r3, #6]
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d004      	beq.n	8005d48 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8005d3e:	6839      	ldr	r1, [r7, #0]
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f88f 	bl	8005e64 <USBD_CtlError>
      break;
 8005d46:	e01a      	b.n	8005d7e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d005      	beq.n	8005d64 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f043 0202 	orr.w	r2, r3, #2
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	330c      	adds	r3, #12
 8005d68:	2202      	movs	r2, #2
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f8ea 	bl	8005f46 <USBD_CtlSendData>
    break;
 8005d72:	e004      	b.n	8005d7e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8005d74:	6839      	ldr	r1, [r7, #0]
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f874 	bl	8005e64 <USBD_CtlError>
    break;
 8005d7c:	bf00      	nop
  }
}
 8005d7e:	bf00      	nop
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b082      	sub	sp, #8
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	885b      	ldrh	r3, [r3, #2]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d106      	bne.n	8005da6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f90d 	bl	8005fc0 <USBD_CtlSendStatus>
  }
}
 8005da6:	bf00      	nop
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b082      	sub	sp, #8
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d80b      	bhi.n	8005ddc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	885b      	ldrh	r3, [r3, #2]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d10c      	bne.n	8005de6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 f8f3 	bl	8005fc0 <USBD_CtlSendStatus>
      }
      break;
 8005dda:	e004      	b.n	8005de6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005ddc:	6839      	ldr	r1, [r7, #0]
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f840 	bl	8005e64 <USBD_CtlError>
      break;
 8005de4:	e000      	b.n	8005de8 <USBD_ClrFeature+0x3a>
      break;
 8005de6:	bf00      	nop
  }
}
 8005de8:	bf00      	nop
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	781a      	ldrb	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	781a      	ldrb	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	3301      	adds	r3, #1
 8005e18:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f7ff fad3 	bl	80053c6 <SWAPBYTE>
 8005e20:	4603      	mov	r3, r0
 8005e22:	461a      	mov	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	3301      	adds	r3, #1
 8005e32:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f7ff fac6 	bl	80053c6 <SWAPBYTE>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3301      	adds	r3, #1
 8005e46:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f7ff fab9 	bl	80053c6 <SWAPBYTE>
 8005e54:	4603      	mov	r3, r0
 8005e56:	461a      	mov	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	80da      	strh	r2, [r3, #6]
}
 8005e5c:	bf00      	nop
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e6e:	2180      	movs	r1, #128	; 0x80
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fbff 	bl	8006674 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005e76:	2100      	movs	r1, #0
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fbfb 	bl	8006674 <USBD_LL_StallEP>
}
 8005e7e:	bf00      	nop
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b086      	sub	sp, #24
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	60f8      	str	r0, [r7, #12]
 8005e8e:	60b9      	str	r1, [r7, #8]
 8005e90:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d036      	beq.n	8005f0a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005ea0:	6938      	ldr	r0, [r7, #16]
 8005ea2:	f000 f836 	bl	8005f12 <USBD_GetLen>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005eb4:	7dfb      	ldrb	r3, [r7, #23]
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	4413      	add	r3, r2
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	7812      	ldrb	r2, [r2, #0]
 8005ebe:	701a      	strb	r2, [r3, #0]
  idx++;
 8005ec0:	7dfb      	ldrb	r3, [r7, #23]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005ec6:	7dfb      	ldrb	r3, [r7, #23]
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	4413      	add	r3, r2
 8005ecc:	2203      	movs	r2, #3
 8005ece:	701a      	strb	r2, [r3, #0]
  idx++;
 8005ed0:	7dfb      	ldrb	r3, [r7, #23]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005ed6:	e013      	b.n	8005f00 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005ed8:	7dfb      	ldrb	r3, [r7, #23]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	4413      	add	r3, r2
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	7812      	ldrb	r2, [r2, #0]
 8005ee2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	613b      	str	r3, [r7, #16]
    idx++;
 8005eea:	7dfb      	ldrb	r3, [r7, #23]
 8005eec:	3301      	adds	r3, #1
 8005eee:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005ef0:	7dfb      	ldrb	r3, [r7, #23]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	701a      	strb	r2, [r3, #0]
    idx++;
 8005efa:	7dfb      	ldrb	r3, [r7, #23]
 8005efc:	3301      	adds	r3, #1
 8005efe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1e7      	bne.n	8005ed8 <USBD_GetString+0x52>
 8005f08:	e000      	b.n	8005f0c <USBD_GetString+0x86>
    return;
 8005f0a:	bf00      	nop
  }
}
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b085      	sub	sp, #20
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005f22:	e005      	b.n	8005f30 <USBD_GetLen+0x1e>
  {
    len++;
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
 8005f26:	3301      	adds	r3, #1
 8005f28:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1f5      	bne.n	8005f24 <USBD_GetLen+0x12>
  }

  return len;
 8005f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b084      	sub	sp, #16
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	60f8      	str	r0, [r7, #12]
 8005f4e:	60b9      	str	r1, [r7, #8]
 8005f50:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2202      	movs	r2, #2
 8005f56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f000 fc0a 	bl	8006786 <USBD_LL_Transmit>

  return USBD_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 fbf9 	bl	8006786 <USBD_LL_Transmit>

  return USBD_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	2100      	movs	r1, #0
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 fc09 	bl	80067c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2204      	movs	r2, #4
 8005fcc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fbd5 	bl	8006786 <USBD_LL_Transmit>

  return USBD_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b082      	sub	sp, #8
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2205      	movs	r2, #5
 8005ff2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fbe3 	bl	80067c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3708      	adds	r7, #8
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006010:	2200      	movs	r2, #0
 8006012:	490e      	ldr	r1, [pc, #56]	; (800604c <MX_USB_DEVICE_Init+0x40>)
 8006014:	480e      	ldr	r0, [pc, #56]	; (8006050 <MX_USB_DEVICE_Init+0x44>)
 8006016:	f7fe ff11 	bl	8004e3c <USBD_Init>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d001      	beq.n	8006024 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006020:	f7fa fc04 	bl	800082c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006024:	490b      	ldr	r1, [pc, #44]	; (8006054 <MX_USB_DEVICE_Init+0x48>)
 8006026:	480a      	ldr	r0, [pc, #40]	; (8006050 <MX_USB_DEVICE_Init+0x44>)
 8006028:	f7fe ff3e 	bl	8004ea8 <USBD_RegisterClass>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006032:	f7fa fbfb 	bl	800082c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006036:	4806      	ldr	r0, [pc, #24]	; (8006050 <MX_USB_DEVICE_Init+0x44>)
 8006038:	f7fe ff57 	bl	8004eea <USBD_Start>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006042:	f7fa fbf3 	bl	800082c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006046:	bf00      	nop
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	20000114 	.word	0x20000114
 8006050:	20000238 	.word	0x20000238
 8006054:	2000000c 	.word	0x2000000c

08006058 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	4603      	mov	r3, r0
 8006060:	6039      	str	r1, [r7, #0]
 8006062:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	2212      	movs	r2, #18
 8006068:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800606a:	4b03      	ldr	r3, [pc, #12]	; (8006078 <USBD_FS_DeviceDescriptor+0x20>)
}
 800606c:	4618      	mov	r0, r3
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	20000130 	.word	0x20000130

0800607c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	4603      	mov	r3, r0
 8006084:	6039      	str	r1, [r7, #0]
 8006086:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	2204      	movs	r2, #4
 800608c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800608e:	4b03      	ldr	r3, [pc, #12]	; (800609c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	20000144 	.word	0x20000144

080060a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	4603      	mov	r3, r0
 80060a8:	6039      	str	r1, [r7, #0]
 80060aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80060ac:	79fb      	ldrb	r3, [r7, #7]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d105      	bne.n	80060be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	4907      	ldr	r1, [pc, #28]	; (80060d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80060b6:	4808      	ldr	r0, [pc, #32]	; (80060d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80060b8:	f7ff fee5 	bl	8005e86 <USBD_GetString>
 80060bc:	e004      	b.n	80060c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	4904      	ldr	r1, [pc, #16]	; (80060d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80060c2:	4805      	ldr	r0, [pc, #20]	; (80060d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80060c4:	f7ff fedf 	bl	8005e86 <USBD_GetString>
  }
  return USBD_StrDesc;
 80060c8:	4b02      	ldr	r3, [pc, #8]	; (80060d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	20000508 	.word	0x20000508
 80060d8:	08006a74 	.word	0x08006a74

080060dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	4603      	mov	r3, r0
 80060e4:	6039      	str	r1, [r7, #0]
 80060e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	4904      	ldr	r1, [pc, #16]	; (80060fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80060ec:	4804      	ldr	r0, [pc, #16]	; (8006100 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80060ee:	f7ff feca 	bl	8005e86 <USBD_GetString>
  return USBD_StrDesc;
 80060f2:	4b02      	ldr	r3, [pc, #8]	; (80060fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3708      	adds	r7, #8
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	20000508 	.word	0x20000508
 8006100:	08006a8c 	.word	0x08006a8c

08006104 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	4603      	mov	r3, r0
 800610c:	6039      	str	r1, [r7, #0]
 800610e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	221a      	movs	r2, #26
 8006114:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006116:	f000 f843 	bl	80061a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800611a:	4b02      	ldr	r3, [pc, #8]	; (8006124 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800611c:	4618      	mov	r0, r3
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	20000148 	.word	0x20000148

08006128 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	4603      	mov	r3, r0
 8006130:	6039      	str	r1, [r7, #0]
 8006132:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006134:	79fb      	ldrb	r3, [r7, #7]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d105      	bne.n	8006146 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	4907      	ldr	r1, [pc, #28]	; (800615c <USBD_FS_ConfigStrDescriptor+0x34>)
 800613e:	4808      	ldr	r0, [pc, #32]	; (8006160 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006140:	f7ff fea1 	bl	8005e86 <USBD_GetString>
 8006144:	e004      	b.n	8006150 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	4904      	ldr	r1, [pc, #16]	; (800615c <USBD_FS_ConfigStrDescriptor+0x34>)
 800614a:	4805      	ldr	r0, [pc, #20]	; (8006160 <USBD_FS_ConfigStrDescriptor+0x38>)
 800614c:	f7ff fe9b 	bl	8005e86 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006150:	4b02      	ldr	r3, [pc, #8]	; (800615c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006152:	4618      	mov	r0, r3
 8006154:	3708      	adds	r7, #8
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	20000508 	.word	0x20000508
 8006160:	08006aa0 	.word	0x08006aa0

08006164 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	4603      	mov	r3, r0
 800616c:	6039      	str	r1, [r7, #0]
 800616e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006170:	79fb      	ldrb	r3, [r7, #7]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d105      	bne.n	8006182 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	4907      	ldr	r1, [pc, #28]	; (8006198 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800617a:	4808      	ldr	r0, [pc, #32]	; (800619c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800617c:	f7ff fe83 	bl	8005e86 <USBD_GetString>
 8006180:	e004      	b.n	800618c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	4904      	ldr	r1, [pc, #16]	; (8006198 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006186:	4805      	ldr	r0, [pc, #20]	; (800619c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006188:	f7ff fe7d 	bl	8005e86 <USBD_GetString>
  }
  return USBD_StrDesc;
 800618c:	4b02      	ldr	r3, [pc, #8]	; (8006198 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800618e:	4618      	mov	r0, r3
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	20000508 	.word	0x20000508
 800619c:	08006aac 	.word	0x08006aac

080061a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80061a6:	4b0f      	ldr	r3, [pc, #60]	; (80061e4 <Get_SerialNum+0x44>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80061ac:	4b0e      	ldr	r3, [pc, #56]	; (80061e8 <Get_SerialNum+0x48>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80061b2:	4b0e      	ldr	r3, [pc, #56]	; (80061ec <Get_SerialNum+0x4c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4413      	add	r3, r2
 80061be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d009      	beq.n	80061da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80061c6:	2208      	movs	r2, #8
 80061c8:	4909      	ldr	r1, [pc, #36]	; (80061f0 <Get_SerialNum+0x50>)
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f000 f814 	bl	80061f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80061d0:	2204      	movs	r2, #4
 80061d2:	4908      	ldr	r1, [pc, #32]	; (80061f4 <Get_SerialNum+0x54>)
 80061d4:	68b8      	ldr	r0, [r7, #8]
 80061d6:	f000 f80f 	bl	80061f8 <IntToUnicode>
  }
}
 80061da:	bf00      	nop
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	1fff7a10 	.word	0x1fff7a10
 80061e8:	1fff7a14 	.word	0x1fff7a14
 80061ec:	1fff7a18 	.word	0x1fff7a18
 80061f0:	2000014a 	.word	0x2000014a
 80061f4:	2000015a 	.word	0x2000015a

080061f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	4613      	mov	r3, r2
 8006204:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006206:	2300      	movs	r3, #0
 8006208:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800620a:	2300      	movs	r3, #0
 800620c:	75fb      	strb	r3, [r7, #23]
 800620e:	e027      	b.n	8006260 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	0f1b      	lsrs	r3, r3, #28
 8006214:	2b09      	cmp	r3, #9
 8006216:	d80b      	bhi.n	8006230 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	0f1b      	lsrs	r3, r3, #28
 800621c:	b2da      	uxtb	r2, r3
 800621e:	7dfb      	ldrb	r3, [r7, #23]
 8006220:	005b      	lsls	r3, r3, #1
 8006222:	4619      	mov	r1, r3
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	440b      	add	r3, r1
 8006228:	3230      	adds	r2, #48	; 0x30
 800622a:	b2d2      	uxtb	r2, r2
 800622c:	701a      	strb	r2, [r3, #0]
 800622e:	e00a      	b.n	8006246 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	0f1b      	lsrs	r3, r3, #28
 8006234:	b2da      	uxtb	r2, r3
 8006236:	7dfb      	ldrb	r3, [r7, #23]
 8006238:	005b      	lsls	r3, r3, #1
 800623a:	4619      	mov	r1, r3
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	440b      	add	r3, r1
 8006240:	3237      	adds	r2, #55	; 0x37
 8006242:	b2d2      	uxtb	r2, r2
 8006244:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	011b      	lsls	r3, r3, #4
 800624a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800624c:	7dfb      	ldrb	r3, [r7, #23]
 800624e:	005b      	lsls	r3, r3, #1
 8006250:	3301      	adds	r3, #1
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	4413      	add	r3, r2
 8006256:	2200      	movs	r2, #0
 8006258:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800625a:	7dfb      	ldrb	r3, [r7, #23]
 800625c:	3301      	adds	r3, #1
 800625e:	75fb      	strb	r3, [r7, #23]
 8006260:	7dfa      	ldrb	r2, [r7, #23]
 8006262:	79fb      	ldrb	r3, [r7, #7]
 8006264:	429a      	cmp	r2, r3
 8006266:	d3d3      	bcc.n	8006210 <IntToUnicode+0x18>
  }
}
 8006268:	bf00      	nop
 800626a:	371c      	adds	r7, #28
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b08a      	sub	sp, #40	; 0x28
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800627c:	f107 0314 	add.w	r3, r7, #20
 8006280:	2200      	movs	r2, #0
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	605a      	str	r2, [r3, #4]
 8006286:	609a      	str	r2, [r3, #8]
 8006288:	60da      	str	r2, [r3, #12]
 800628a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006294:	d147      	bne.n	8006326 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006296:	2300      	movs	r3, #0
 8006298:	613b      	str	r3, [r7, #16]
 800629a:	4b25      	ldr	r3, [pc, #148]	; (8006330 <HAL_PCD_MspInit+0xbc>)
 800629c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629e:	4a24      	ldr	r2, [pc, #144]	; (8006330 <HAL_PCD_MspInit+0xbc>)
 80062a0:	f043 0301 	orr.w	r3, r3, #1
 80062a4:	6313      	str	r3, [r2, #48]	; 0x30
 80062a6:	4b22      	ldr	r3, [pc, #136]	; (8006330 <HAL_PCD_MspInit+0xbc>)
 80062a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	613b      	str	r3, [r7, #16]
 80062b0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80062b2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80062b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062b8:	2302      	movs	r3, #2
 80062ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062bc:	2300      	movs	r3, #0
 80062be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062c0:	2303      	movs	r3, #3
 80062c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80062c4:	230a      	movs	r3, #10
 80062c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062c8:	f107 0314 	add.w	r3, r7, #20
 80062cc:	4619      	mov	r1, r3
 80062ce:	4819      	ldr	r0, [pc, #100]	; (8006334 <HAL_PCD_MspInit+0xc0>)
 80062d0:	f7fa fd78 	bl	8000dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80062d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80062da:	2300      	movs	r3, #0
 80062dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062de:	2300      	movs	r3, #0
 80062e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80062e2:	f107 0314 	add.w	r3, r7, #20
 80062e6:	4619      	mov	r1, r3
 80062e8:	4812      	ldr	r0, [pc, #72]	; (8006334 <HAL_PCD_MspInit+0xc0>)
 80062ea:	f7fa fd6b 	bl	8000dc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80062ee:	4b10      	ldr	r3, [pc, #64]	; (8006330 <HAL_PCD_MspInit+0xbc>)
 80062f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f2:	4a0f      	ldr	r2, [pc, #60]	; (8006330 <HAL_PCD_MspInit+0xbc>)
 80062f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062f8:	6353      	str	r3, [r2, #52]	; 0x34
 80062fa:	2300      	movs	r3, #0
 80062fc:	60fb      	str	r3, [r7, #12]
 80062fe:	4b0c      	ldr	r3, [pc, #48]	; (8006330 <HAL_PCD_MspInit+0xbc>)
 8006300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006302:	4a0b      	ldr	r2, [pc, #44]	; (8006330 <HAL_PCD_MspInit+0xbc>)
 8006304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006308:	6453      	str	r3, [r2, #68]	; 0x44
 800630a:	4b09      	ldr	r3, [pc, #36]	; (8006330 <HAL_PCD_MspInit+0xbc>)
 800630c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800630e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006316:	2200      	movs	r2, #0
 8006318:	2100      	movs	r1, #0
 800631a:	2043      	movs	r0, #67	; 0x43
 800631c:	f7fa fd1b 	bl	8000d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006320:	2043      	movs	r0, #67	; 0x43
 8006322:	f7fa fd34 	bl	8000d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006326:	bf00      	nop
 8006328:	3728      	adds	r7, #40	; 0x28
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	40023800 	.word	0x40023800
 8006334:	40020000 	.word	0x40020000

08006338 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800634c:	4619      	mov	r1, r3
 800634e:	4610      	mov	r0, r2
 8006350:	f7fe fe16 	bl	8004f80 <USBD_LL_SetupStage>
}
 8006354:	bf00      	nop
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	460b      	mov	r3, r1
 8006366:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800636e:	78fa      	ldrb	r2, [r7, #3]
 8006370:	6879      	ldr	r1, [r7, #4]
 8006372:	4613      	mov	r3, r2
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	1a9b      	subs	r3, r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	440b      	add	r3, r1
 800637c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	78fb      	ldrb	r3, [r7, #3]
 8006384:	4619      	mov	r1, r3
 8006386:	f7fe fe4e 	bl	8005026 <USBD_LL_DataOutStage>
}
 800638a:	bf00      	nop
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b082      	sub	sp, #8
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	460b      	mov	r3, r1
 800639c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80063a4:	78fa      	ldrb	r2, [r7, #3]
 80063a6:	6879      	ldr	r1, [r7, #4]
 80063a8:	4613      	mov	r3, r2
 80063aa:	00db      	lsls	r3, r3, #3
 80063ac:	1a9b      	subs	r3, r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	440b      	add	r3, r1
 80063b2:	3348      	adds	r3, #72	; 0x48
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	78fb      	ldrb	r3, [r7, #3]
 80063b8:	4619      	mov	r1, r3
 80063ba:	f7fe fe97 	bl	80050ec <USBD_LL_DataInStage>
}
 80063be:	bf00      	nop
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b082      	sub	sp, #8
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fe ff9b 	bl	8005310 <USBD_LL_SOF>
}
 80063da:	bf00      	nop
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b084      	sub	sp, #16
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80063ea:	2301      	movs	r3, #1
 80063ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d102      	bne.n	80063fc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80063f6:	2300      	movs	r3, #0
 80063f8:	73fb      	strb	r3, [r7, #15]
 80063fa:	e008      	b.n	800640e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	2b02      	cmp	r3, #2
 8006402:	d102      	bne.n	800640a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006404:	2301      	movs	r3, #1
 8006406:	73fb      	strb	r3, [r7, #15]
 8006408:	e001      	b.n	800640e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800640a:	f7fa fa0f 	bl	800082c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006414:	7bfa      	ldrb	r2, [r7, #15]
 8006416:	4611      	mov	r1, r2
 8006418:	4618      	mov	r0, r3
 800641a:	f7fe ff3e 	bl	800529a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006424:	4618      	mov	r0, r3
 8006426:	f7fe fef7 	bl	8005218 <USBD_LL_Reset>
}
 800642a:	bf00      	nop
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
	...

08006434 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006442:	4618      	mov	r0, r3
 8006444:	f7fe ff39 	bl	80052ba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	6812      	ldr	r2, [r2, #0]
 8006456:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800645a:	f043 0301 	orr.w	r3, r3, #1
 800645e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d005      	beq.n	8006474 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006468:	4b04      	ldr	r3, [pc, #16]	; (800647c <HAL_PCD_SuspendCallback+0x48>)
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	4a03      	ldr	r2, [pc, #12]	; (800647c <HAL_PCD_SuspendCallback+0x48>)
 800646e:	f043 0306 	orr.w	r3, r3, #6
 8006472:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006474:	bf00      	nop
 8006476:	3708      	adds	r7, #8
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	e000ed00 	.word	0xe000ed00

08006480 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800648e:	4618      	mov	r0, r3
 8006490:	f7fe ff28 	bl	80052e4 <USBD_LL_Resume>
}
 8006494:	bf00      	nop
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	460b      	mov	r3, r1
 80064a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064ae:	78fa      	ldrb	r2, [r7, #3]
 80064b0:	4611      	mov	r1, r2
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fe ff53 	bl	800535e <USBD_LL_IsoOUTIncomplete>
}
 80064b8:	bf00      	nop
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	460b      	mov	r3, r1
 80064ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064d2:	78fa      	ldrb	r2, [r7, #3]
 80064d4:	4611      	mov	r1, r2
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fe ff34 	bl	8005344 <USBD_LL_IsoINIncomplete>
}
 80064dc:	bf00      	nop
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fe ff40 	bl	8005378 <USBD_LL_DevConnected>
}
 80064f8:	bf00      	nop
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800650e:	4618      	mov	r0, r3
 8006510:	f7fe ff3d 	bl	800538e <USBD_LL_DevDisconnected>
}
 8006514:	bf00      	nop
 8006516:	3708      	adds	r7, #8
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d13c      	bne.n	80065a6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800652c:	4a20      	ldr	r2, [pc, #128]	; (80065b0 <USBD_LL_Init+0x94>)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a1e      	ldr	r2, [pc, #120]	; (80065b0 <USBD_LL_Init+0x94>)
 8006538:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800653c:	4b1c      	ldr	r3, [pc, #112]	; (80065b0 <USBD_LL_Init+0x94>)
 800653e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006542:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006544:	4b1a      	ldr	r3, [pc, #104]	; (80065b0 <USBD_LL_Init+0x94>)
 8006546:	2204      	movs	r2, #4
 8006548:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800654a:	4b19      	ldr	r3, [pc, #100]	; (80065b0 <USBD_LL_Init+0x94>)
 800654c:	2202      	movs	r2, #2
 800654e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006550:	4b17      	ldr	r3, [pc, #92]	; (80065b0 <USBD_LL_Init+0x94>)
 8006552:	2200      	movs	r2, #0
 8006554:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006556:	4b16      	ldr	r3, [pc, #88]	; (80065b0 <USBD_LL_Init+0x94>)
 8006558:	2202      	movs	r2, #2
 800655a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800655c:	4b14      	ldr	r3, [pc, #80]	; (80065b0 <USBD_LL_Init+0x94>)
 800655e:	2201      	movs	r2, #1
 8006560:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006562:	4b13      	ldr	r3, [pc, #76]	; (80065b0 <USBD_LL_Init+0x94>)
 8006564:	2200      	movs	r2, #0
 8006566:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006568:	4b11      	ldr	r3, [pc, #68]	; (80065b0 <USBD_LL_Init+0x94>)
 800656a:	2200      	movs	r2, #0
 800656c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800656e:	4b10      	ldr	r3, [pc, #64]	; (80065b0 <USBD_LL_Init+0x94>)
 8006570:	2201      	movs	r2, #1
 8006572:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006574:	4b0e      	ldr	r3, [pc, #56]	; (80065b0 <USBD_LL_Init+0x94>)
 8006576:	2200      	movs	r2, #0
 8006578:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800657a:	480d      	ldr	r0, [pc, #52]	; (80065b0 <USBD_LL_Init+0x94>)
 800657c:	f7fa fdfd 	bl	800117a <HAL_PCD_Init>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d001      	beq.n	800658a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006586:	f7fa f951 	bl	800082c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800658a:	2180      	movs	r1, #128	; 0x80
 800658c:	4808      	ldr	r0, [pc, #32]	; (80065b0 <USBD_LL_Init+0x94>)
 800658e:	f7fb ff42 	bl	8002416 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006592:	2240      	movs	r2, #64	; 0x40
 8006594:	2100      	movs	r1, #0
 8006596:	4806      	ldr	r0, [pc, #24]	; (80065b0 <USBD_LL_Init+0x94>)
 8006598:	f7fb fef6 	bl	8002388 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800659c:	2280      	movs	r2, #128	; 0x80
 800659e:	2101      	movs	r1, #1
 80065a0:	4803      	ldr	r0, [pc, #12]	; (80065b0 <USBD_LL_Init+0x94>)
 80065a2:	f7fb fef1 	bl	8002388 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3708      	adds	r7, #8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	20000708 	.word	0x20000708

080065b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065bc:	2300      	movs	r3, #0
 80065be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065c0:	2300      	movs	r3, #0
 80065c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7fa fef2 	bl	80013b4 <HAL_PCD_Start>
 80065d0:	4603      	mov	r3, r0
 80065d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f000 f918 	bl	800680c <USBD_Get_USB_Status>
 80065dc:	4603      	mov	r3, r0
 80065de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	4608      	mov	r0, r1
 80065f4:	4611      	mov	r1, r2
 80065f6:	461a      	mov	r2, r3
 80065f8:	4603      	mov	r3, r0
 80065fa:	70fb      	strb	r3, [r7, #3]
 80065fc:	460b      	mov	r3, r1
 80065fe:	70bb      	strb	r3, [r7, #2]
 8006600:	4613      	mov	r3, r2
 8006602:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006604:	2300      	movs	r3, #0
 8006606:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006612:	78bb      	ldrb	r3, [r7, #2]
 8006614:	883a      	ldrh	r2, [r7, #0]
 8006616:	78f9      	ldrb	r1, [r7, #3]
 8006618:	f7fb fad6 	bl	8001bc8 <HAL_PCD_EP_Open>
 800661c:	4603      	mov	r3, r0
 800661e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006620:	7bfb      	ldrb	r3, [r7, #15]
 8006622:	4618      	mov	r0, r3
 8006624:	f000 f8f2 	bl	800680c <USBD_Get_USB_Status>
 8006628:	4603      	mov	r3, r0
 800662a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800662c:	7bbb      	ldrb	r3, [r7, #14]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b084      	sub	sp, #16
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
 800663e:	460b      	mov	r3, r1
 8006640:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006642:	2300      	movs	r3, #0
 8006644:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006646:	2300      	movs	r3, #0
 8006648:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006650:	78fa      	ldrb	r2, [r7, #3]
 8006652:	4611      	mov	r1, r2
 8006654:	4618      	mov	r0, r3
 8006656:	f7fb fb1f 	bl	8001c98 <HAL_PCD_EP_Close>
 800665a:	4603      	mov	r3, r0
 800665c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800665e:	7bfb      	ldrb	r3, [r7, #15]
 8006660:	4618      	mov	r0, r3
 8006662:	f000 f8d3 	bl	800680c <USBD_Get_USB_Status>
 8006666:	4603      	mov	r3, r0
 8006668:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800666a:	7bbb      	ldrb	r3, [r7, #14]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	460b      	mov	r3, r1
 800667e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006680:	2300      	movs	r3, #0
 8006682:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006684:	2300      	movs	r3, #0
 8006686:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800668e:	78fa      	ldrb	r2, [r7, #3]
 8006690:	4611      	mov	r1, r2
 8006692:	4618      	mov	r0, r3
 8006694:	f7fb fbdf 	bl	8001e56 <HAL_PCD_EP_SetStall>
 8006698:	4603      	mov	r3, r0
 800669a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800669c:	7bfb      	ldrb	r3, [r7, #15]
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 f8b4 	bl	800680c <USBD_Get_USB_Status>
 80066a4:	4603      	mov	r3, r0
 80066a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b084      	sub	sp, #16
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	460b      	mov	r3, r1
 80066bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80066cc:	78fa      	ldrb	r2, [r7, #3]
 80066ce:	4611      	mov	r1, r2
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7fb fc24 	bl	8001f1e <HAL_PCD_EP_ClrStall>
 80066d6:	4603      	mov	r3, r0
 80066d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 f895 	bl	800680c <USBD_Get_USB_Status>
 80066e2:	4603      	mov	r3, r0
 80066e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	460b      	mov	r3, r1
 80066fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006702:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006704:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006708:	2b00      	cmp	r3, #0
 800670a:	da0b      	bge.n	8006724 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800670c:	78fb      	ldrb	r3, [r7, #3]
 800670e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006712:	68f9      	ldr	r1, [r7, #12]
 8006714:	4613      	mov	r3, r2
 8006716:	00db      	lsls	r3, r3, #3
 8006718:	1a9b      	subs	r3, r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	440b      	add	r3, r1
 800671e:	333e      	adds	r3, #62	; 0x3e
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	e00b      	b.n	800673c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006724:	78fb      	ldrb	r3, [r7, #3]
 8006726:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800672a:	68f9      	ldr	r1, [r7, #12]
 800672c:	4613      	mov	r3, r2
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	1a9b      	subs	r3, r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	440b      	add	r3, r1
 8006736:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800673a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800673c:	4618      	mov	r0, r3
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	460b      	mov	r3, r1
 8006752:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006754:	2300      	movs	r3, #0
 8006756:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006758:	2300      	movs	r3, #0
 800675a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006762:	78fa      	ldrb	r2, [r7, #3]
 8006764:	4611      	mov	r1, r2
 8006766:	4618      	mov	r0, r3
 8006768:	f7fb fa09 	bl	8001b7e <HAL_PCD_SetAddress>
 800676c:	4603      	mov	r3, r0
 800676e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006770:	7bfb      	ldrb	r3, [r7, #15]
 8006772:	4618      	mov	r0, r3
 8006774:	f000 f84a 	bl	800680c <USBD_Get_USB_Status>
 8006778:	4603      	mov	r3, r0
 800677a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800677c:	7bbb      	ldrb	r3, [r7, #14]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b086      	sub	sp, #24
 800678a:	af00      	add	r7, sp, #0
 800678c:	60f8      	str	r0, [r7, #12]
 800678e:	607a      	str	r2, [r7, #4]
 8006790:	603b      	str	r3, [r7, #0]
 8006792:	460b      	mov	r3, r1
 8006794:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800679a:	2300      	movs	r3, #0
 800679c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80067a4:	7af9      	ldrb	r1, [r7, #11]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	f7fb fb0a 	bl	8001dc2 <HAL_PCD_EP_Transmit>
 80067ae:	4603      	mov	r3, r0
 80067b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80067b2:	7dfb      	ldrb	r3, [r7, #23]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 f829 	bl	800680c <USBD_Get_USB_Status>
 80067ba:	4603      	mov	r3, r0
 80067bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80067be:	7dbb      	ldrb	r3, [r7, #22]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3718      	adds	r7, #24
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	607a      	str	r2, [r7, #4]
 80067d2:	603b      	str	r3, [r7, #0]
 80067d4:	460b      	mov	r3, r1
 80067d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067d8:	2300      	movs	r3, #0
 80067da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067dc:	2300      	movs	r3, #0
 80067de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80067e6:	7af9      	ldrb	r1, [r7, #11]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	f7fb fa9e 	bl	8001d2c <HAL_PCD_EP_Receive>
 80067f0:	4603      	mov	r3, r0
 80067f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80067f4:	7dfb      	ldrb	r3, [r7, #23]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 f808 	bl	800680c <USBD_Get_USB_Status>
 80067fc:	4603      	mov	r3, r0
 80067fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006800:	7dbb      	ldrb	r3, [r7, #22]
}
 8006802:	4618      	mov	r0, r3
 8006804:	3718      	adds	r7, #24
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
	...

0800680c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	4603      	mov	r3, r0
 8006814:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006816:	2300      	movs	r3, #0
 8006818:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800681a:	79fb      	ldrb	r3, [r7, #7]
 800681c:	2b03      	cmp	r3, #3
 800681e:	d817      	bhi.n	8006850 <USBD_Get_USB_Status+0x44>
 8006820:	a201      	add	r2, pc, #4	; (adr r2, 8006828 <USBD_Get_USB_Status+0x1c>)
 8006822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006826:	bf00      	nop
 8006828:	08006839 	.word	0x08006839
 800682c:	0800683f 	.word	0x0800683f
 8006830:	08006845 	.word	0x08006845
 8006834:	0800684b 	.word	0x0800684b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006838:	2300      	movs	r3, #0
 800683a:	73fb      	strb	r3, [r7, #15]
    break;
 800683c:	e00b      	b.n	8006856 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800683e:	2303      	movs	r3, #3
 8006840:	73fb      	strb	r3, [r7, #15]
    break;
 8006842:	e008      	b.n	8006856 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006844:	2301      	movs	r3, #1
 8006846:	73fb      	strb	r3, [r7, #15]
    break;
 8006848:	e005      	b.n	8006856 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800684a:	2303      	movs	r3, #3
 800684c:	73fb      	strb	r3, [r7, #15]
    break;
 800684e:	e002      	b.n	8006856 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006850:	2303      	movs	r3, #3
 8006852:	73fb      	strb	r3, [r7, #15]
    break;
 8006854:	bf00      	nop
  }
  return usb_status;
 8006856:	7bfb      	ldrb	r3, [r7, #15]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <__errno>:
 8006864:	4b01      	ldr	r3, [pc, #4]	; (800686c <__errno+0x8>)
 8006866:	6818      	ldr	r0, [r3, #0]
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	20000164 	.word	0x20000164

08006870 <__libc_init_array>:
 8006870:	b570      	push	{r4, r5, r6, lr}
 8006872:	4e0d      	ldr	r6, [pc, #52]	; (80068a8 <__libc_init_array+0x38>)
 8006874:	4c0d      	ldr	r4, [pc, #52]	; (80068ac <__libc_init_array+0x3c>)
 8006876:	1ba4      	subs	r4, r4, r6
 8006878:	10a4      	asrs	r4, r4, #2
 800687a:	2500      	movs	r5, #0
 800687c:	42a5      	cmp	r5, r4
 800687e:	d109      	bne.n	8006894 <__libc_init_array+0x24>
 8006880:	4e0b      	ldr	r6, [pc, #44]	; (80068b0 <__libc_init_array+0x40>)
 8006882:	4c0c      	ldr	r4, [pc, #48]	; (80068b4 <__libc_init_array+0x44>)
 8006884:	f000 f8ea 	bl	8006a5c <_init>
 8006888:	1ba4      	subs	r4, r4, r6
 800688a:	10a4      	asrs	r4, r4, #2
 800688c:	2500      	movs	r5, #0
 800688e:	42a5      	cmp	r5, r4
 8006890:	d105      	bne.n	800689e <__libc_init_array+0x2e>
 8006892:	bd70      	pop	{r4, r5, r6, pc}
 8006894:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006898:	4798      	blx	r3
 800689a:	3501      	adds	r5, #1
 800689c:	e7ee      	b.n	800687c <__libc_init_array+0xc>
 800689e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068a2:	4798      	blx	r3
 80068a4:	3501      	adds	r5, #1
 80068a6:	e7f2      	b.n	800688e <__libc_init_array+0x1e>
 80068a8:	08006adc 	.word	0x08006adc
 80068ac:	08006adc 	.word	0x08006adc
 80068b0:	08006adc 	.word	0x08006adc
 80068b4:	08006ae0 	.word	0x08006ae0

080068b8 <malloc>:
 80068b8:	4b02      	ldr	r3, [pc, #8]	; (80068c4 <malloc+0xc>)
 80068ba:	4601      	mov	r1, r0
 80068bc:	6818      	ldr	r0, [r3, #0]
 80068be:	f000 b861 	b.w	8006984 <_malloc_r>
 80068c2:	bf00      	nop
 80068c4:	20000164 	.word	0x20000164

080068c8 <free>:
 80068c8:	4b02      	ldr	r3, [pc, #8]	; (80068d4 <free+0xc>)
 80068ca:	4601      	mov	r1, r0
 80068cc:	6818      	ldr	r0, [r3, #0]
 80068ce:	f000 b80b 	b.w	80068e8 <_free_r>
 80068d2:	bf00      	nop
 80068d4:	20000164 	.word	0x20000164

080068d8 <memset>:
 80068d8:	4402      	add	r2, r0
 80068da:	4603      	mov	r3, r0
 80068dc:	4293      	cmp	r3, r2
 80068de:	d100      	bne.n	80068e2 <memset+0xa>
 80068e0:	4770      	bx	lr
 80068e2:	f803 1b01 	strb.w	r1, [r3], #1
 80068e6:	e7f9      	b.n	80068dc <memset+0x4>

080068e8 <_free_r>:
 80068e8:	b538      	push	{r3, r4, r5, lr}
 80068ea:	4605      	mov	r5, r0
 80068ec:	2900      	cmp	r1, #0
 80068ee:	d045      	beq.n	800697c <_free_r+0x94>
 80068f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068f4:	1f0c      	subs	r4, r1, #4
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	bfb8      	it	lt
 80068fa:	18e4      	addlt	r4, r4, r3
 80068fc:	f000 f8ac 	bl	8006a58 <__malloc_lock>
 8006900:	4a1f      	ldr	r2, [pc, #124]	; (8006980 <_free_r+0x98>)
 8006902:	6813      	ldr	r3, [r2, #0]
 8006904:	4610      	mov	r0, r2
 8006906:	b933      	cbnz	r3, 8006916 <_free_r+0x2e>
 8006908:	6063      	str	r3, [r4, #4]
 800690a:	6014      	str	r4, [r2, #0]
 800690c:	4628      	mov	r0, r5
 800690e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006912:	f000 b8a2 	b.w	8006a5a <__malloc_unlock>
 8006916:	42a3      	cmp	r3, r4
 8006918:	d90c      	bls.n	8006934 <_free_r+0x4c>
 800691a:	6821      	ldr	r1, [r4, #0]
 800691c:	1862      	adds	r2, r4, r1
 800691e:	4293      	cmp	r3, r2
 8006920:	bf04      	itt	eq
 8006922:	681a      	ldreq	r2, [r3, #0]
 8006924:	685b      	ldreq	r3, [r3, #4]
 8006926:	6063      	str	r3, [r4, #4]
 8006928:	bf04      	itt	eq
 800692a:	1852      	addeq	r2, r2, r1
 800692c:	6022      	streq	r2, [r4, #0]
 800692e:	6004      	str	r4, [r0, #0]
 8006930:	e7ec      	b.n	800690c <_free_r+0x24>
 8006932:	4613      	mov	r3, r2
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	b10a      	cbz	r2, 800693c <_free_r+0x54>
 8006938:	42a2      	cmp	r2, r4
 800693a:	d9fa      	bls.n	8006932 <_free_r+0x4a>
 800693c:	6819      	ldr	r1, [r3, #0]
 800693e:	1858      	adds	r0, r3, r1
 8006940:	42a0      	cmp	r0, r4
 8006942:	d10b      	bne.n	800695c <_free_r+0x74>
 8006944:	6820      	ldr	r0, [r4, #0]
 8006946:	4401      	add	r1, r0
 8006948:	1858      	adds	r0, r3, r1
 800694a:	4282      	cmp	r2, r0
 800694c:	6019      	str	r1, [r3, #0]
 800694e:	d1dd      	bne.n	800690c <_free_r+0x24>
 8006950:	6810      	ldr	r0, [r2, #0]
 8006952:	6852      	ldr	r2, [r2, #4]
 8006954:	605a      	str	r2, [r3, #4]
 8006956:	4401      	add	r1, r0
 8006958:	6019      	str	r1, [r3, #0]
 800695a:	e7d7      	b.n	800690c <_free_r+0x24>
 800695c:	d902      	bls.n	8006964 <_free_r+0x7c>
 800695e:	230c      	movs	r3, #12
 8006960:	602b      	str	r3, [r5, #0]
 8006962:	e7d3      	b.n	800690c <_free_r+0x24>
 8006964:	6820      	ldr	r0, [r4, #0]
 8006966:	1821      	adds	r1, r4, r0
 8006968:	428a      	cmp	r2, r1
 800696a:	bf04      	itt	eq
 800696c:	6811      	ldreq	r1, [r2, #0]
 800696e:	6852      	ldreq	r2, [r2, #4]
 8006970:	6062      	str	r2, [r4, #4]
 8006972:	bf04      	itt	eq
 8006974:	1809      	addeq	r1, r1, r0
 8006976:	6021      	streq	r1, [r4, #0]
 8006978:	605c      	str	r4, [r3, #4]
 800697a:	e7c7      	b.n	800690c <_free_r+0x24>
 800697c:	bd38      	pop	{r3, r4, r5, pc}
 800697e:	bf00      	nop
 8006980:	200001ec 	.word	0x200001ec

08006984 <_malloc_r>:
 8006984:	b570      	push	{r4, r5, r6, lr}
 8006986:	1ccd      	adds	r5, r1, #3
 8006988:	f025 0503 	bic.w	r5, r5, #3
 800698c:	3508      	adds	r5, #8
 800698e:	2d0c      	cmp	r5, #12
 8006990:	bf38      	it	cc
 8006992:	250c      	movcc	r5, #12
 8006994:	2d00      	cmp	r5, #0
 8006996:	4606      	mov	r6, r0
 8006998:	db01      	blt.n	800699e <_malloc_r+0x1a>
 800699a:	42a9      	cmp	r1, r5
 800699c:	d903      	bls.n	80069a6 <_malloc_r+0x22>
 800699e:	230c      	movs	r3, #12
 80069a0:	6033      	str	r3, [r6, #0]
 80069a2:	2000      	movs	r0, #0
 80069a4:	bd70      	pop	{r4, r5, r6, pc}
 80069a6:	f000 f857 	bl	8006a58 <__malloc_lock>
 80069aa:	4a21      	ldr	r2, [pc, #132]	; (8006a30 <_malloc_r+0xac>)
 80069ac:	6814      	ldr	r4, [r2, #0]
 80069ae:	4621      	mov	r1, r4
 80069b0:	b991      	cbnz	r1, 80069d8 <_malloc_r+0x54>
 80069b2:	4c20      	ldr	r4, [pc, #128]	; (8006a34 <_malloc_r+0xb0>)
 80069b4:	6823      	ldr	r3, [r4, #0]
 80069b6:	b91b      	cbnz	r3, 80069c0 <_malloc_r+0x3c>
 80069b8:	4630      	mov	r0, r6
 80069ba:	f000 f83d 	bl	8006a38 <_sbrk_r>
 80069be:	6020      	str	r0, [r4, #0]
 80069c0:	4629      	mov	r1, r5
 80069c2:	4630      	mov	r0, r6
 80069c4:	f000 f838 	bl	8006a38 <_sbrk_r>
 80069c8:	1c43      	adds	r3, r0, #1
 80069ca:	d124      	bne.n	8006a16 <_malloc_r+0x92>
 80069cc:	230c      	movs	r3, #12
 80069ce:	6033      	str	r3, [r6, #0]
 80069d0:	4630      	mov	r0, r6
 80069d2:	f000 f842 	bl	8006a5a <__malloc_unlock>
 80069d6:	e7e4      	b.n	80069a2 <_malloc_r+0x1e>
 80069d8:	680b      	ldr	r3, [r1, #0]
 80069da:	1b5b      	subs	r3, r3, r5
 80069dc:	d418      	bmi.n	8006a10 <_malloc_r+0x8c>
 80069de:	2b0b      	cmp	r3, #11
 80069e0:	d90f      	bls.n	8006a02 <_malloc_r+0x7e>
 80069e2:	600b      	str	r3, [r1, #0]
 80069e4:	50cd      	str	r5, [r1, r3]
 80069e6:	18cc      	adds	r4, r1, r3
 80069e8:	4630      	mov	r0, r6
 80069ea:	f000 f836 	bl	8006a5a <__malloc_unlock>
 80069ee:	f104 000b 	add.w	r0, r4, #11
 80069f2:	1d23      	adds	r3, r4, #4
 80069f4:	f020 0007 	bic.w	r0, r0, #7
 80069f8:	1ac3      	subs	r3, r0, r3
 80069fa:	d0d3      	beq.n	80069a4 <_malloc_r+0x20>
 80069fc:	425a      	negs	r2, r3
 80069fe:	50e2      	str	r2, [r4, r3]
 8006a00:	e7d0      	b.n	80069a4 <_malloc_r+0x20>
 8006a02:	428c      	cmp	r4, r1
 8006a04:	684b      	ldr	r3, [r1, #4]
 8006a06:	bf16      	itet	ne
 8006a08:	6063      	strne	r3, [r4, #4]
 8006a0a:	6013      	streq	r3, [r2, #0]
 8006a0c:	460c      	movne	r4, r1
 8006a0e:	e7eb      	b.n	80069e8 <_malloc_r+0x64>
 8006a10:	460c      	mov	r4, r1
 8006a12:	6849      	ldr	r1, [r1, #4]
 8006a14:	e7cc      	b.n	80069b0 <_malloc_r+0x2c>
 8006a16:	1cc4      	adds	r4, r0, #3
 8006a18:	f024 0403 	bic.w	r4, r4, #3
 8006a1c:	42a0      	cmp	r0, r4
 8006a1e:	d005      	beq.n	8006a2c <_malloc_r+0xa8>
 8006a20:	1a21      	subs	r1, r4, r0
 8006a22:	4630      	mov	r0, r6
 8006a24:	f000 f808 	bl	8006a38 <_sbrk_r>
 8006a28:	3001      	adds	r0, #1
 8006a2a:	d0cf      	beq.n	80069cc <_malloc_r+0x48>
 8006a2c:	6025      	str	r5, [r4, #0]
 8006a2e:	e7db      	b.n	80069e8 <_malloc_r+0x64>
 8006a30:	200001ec 	.word	0x200001ec
 8006a34:	200001f0 	.word	0x200001f0

08006a38 <_sbrk_r>:
 8006a38:	b538      	push	{r3, r4, r5, lr}
 8006a3a:	4c06      	ldr	r4, [pc, #24]	; (8006a54 <_sbrk_r+0x1c>)
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	4605      	mov	r5, r0
 8006a40:	4608      	mov	r0, r1
 8006a42:	6023      	str	r3, [r4, #0]
 8006a44:	f7f9 ffa2 	bl	800098c <_sbrk>
 8006a48:	1c43      	adds	r3, r0, #1
 8006a4a:	d102      	bne.n	8006a52 <_sbrk_r+0x1a>
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	b103      	cbz	r3, 8006a52 <_sbrk_r+0x1a>
 8006a50:	602b      	str	r3, [r5, #0]
 8006a52:	bd38      	pop	{r3, r4, r5, pc}
 8006a54:	20000b10 	.word	0x20000b10

08006a58 <__malloc_lock>:
 8006a58:	4770      	bx	lr

08006a5a <__malloc_unlock>:
 8006a5a:	4770      	bx	lr

08006a5c <_init>:
 8006a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a5e:	bf00      	nop
 8006a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a62:	bc08      	pop	{r3}
 8006a64:	469e      	mov	lr, r3
 8006a66:	4770      	bx	lr

08006a68 <_fini>:
 8006a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a6a:	bf00      	nop
 8006a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a6e:	bc08      	pop	{r3}
 8006a70:	469e      	mov	lr, r3
 8006a72:	4770      	bx	lr
