
CV05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003144  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08003204  08003204  00013204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003424  08003424  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08003424  08003424  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003424  08003424  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003424  08003424  00013424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003428  08003428  00013428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800342c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  200001dc  08003608  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08003608  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007592  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016ce  00000000  00000000  00027796  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006e0  00000000  00000000  00028e68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000630  00000000  00000000  00029548  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000d10d  00000000  00000000  00029b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007982  00000000  00000000  00036c85  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00045d1c  00000000  00000000  0003e607  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00084323  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e80  00000000  00000000  000843a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080031ec 	.word	0x080031ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	080031ec 	.word	0x080031ec

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <uart_process_command>:
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

static void uart_process_command(char *cmd)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	//printf("Prijato: '%s' \n ",cmd);
	char *token;
	token = strtok(cmd, " ");
 8000228:	4a5b      	ldr	r2, [pc, #364]	; (8000398 <uart_process_command+0x178>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	0011      	movs	r1, r2
 800022e:	0018      	movs	r0, r3
 8000230:	f002 fb12 	bl	8002858 <strtok>
 8000234:	0003      	movs	r3, r0
 8000236:	617b      	str	r3, [r7, #20]

	if (strcasecmp(token, "HELLO") == 0)		//pokud napiseme "HELLO"
 8000238:	4a58      	ldr	r2, [pc, #352]	; (800039c <uart_process_command+0x17c>)
 800023a:	697b      	ldr	r3, [r7, #20]
 800023c:	0011      	movs	r1, r2
 800023e:	0018      	movs	r0, r3
 8000240:	f002 faec 	bl	800281c <strcasecmp>
 8000244:	1e03      	subs	r3, r0, #0
 8000246:	d104      	bne.n	8000252 <uart_process_command+0x32>
	{
		printf("Komunikace OK\n");
 8000248:	4b55      	ldr	r3, [pc, #340]	; (80003a0 <uart_process_command+0x180>)
 800024a:	0018      	movs	r0, r3
 800024c:	f002 fadc 	bl	8002808 <puts>
	{
		printf("Neznamy prikaz\n");
	}
		//else if (strcasecmp...

}
 8000250:	e09d      	b.n	800038e <uart_process_command+0x16e>
	else if (strcasecmp(token, "LED1") == 0)		//pokud napiseme "LED1"
 8000252:	4a54      	ldr	r2, [pc, #336]	; (80003a4 <uart_process_command+0x184>)
 8000254:	697b      	ldr	r3, [r7, #20]
 8000256:	0011      	movs	r1, r2
 8000258:	0018      	movs	r0, r3
 800025a:	f002 fadf 	bl	800281c <strcasecmp>
 800025e:	1e03      	subs	r3, r0, #0
 8000260:	d12a      	bne.n	80002b8 <uart_process_command+0x98>
		token = strtok(NULL, " ");
 8000262:	4b4d      	ldr	r3, [pc, #308]	; (8000398 <uart_process_command+0x178>)
 8000264:	0019      	movs	r1, r3
 8000266:	2000      	movs	r0, #0
 8000268:	f002 faf6 	bl	8002858 <strtok>
 800026c:	0003      	movs	r3, r0
 800026e:	617b      	str	r3, [r7, #20]
		if (strcasecmp(token, "ON") == 0)  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000270:	4a4d      	ldr	r2, [pc, #308]	; (80003a8 <uart_process_command+0x188>)
 8000272:	697b      	ldr	r3, [r7, #20]
 8000274:	0011      	movs	r1, r2
 8000276:	0018      	movs	r0, r3
 8000278:	f002 fad0 	bl	800281c <strcasecmp>
 800027c:	1e03      	subs	r3, r0, #0
 800027e:	d107      	bne.n	8000290 <uart_process_command+0x70>
 8000280:	2390      	movs	r3, #144	; 0x90
 8000282:	05db      	lsls	r3, r3, #23
 8000284:	2201      	movs	r2, #1
 8000286:	2110      	movs	r1, #16
 8000288:	0018      	movs	r0, r3
 800028a:	f001 f840 	bl	800130e <HAL_GPIO_WritePin>
 800028e:	e00e      	b.n	80002ae <uart_process_command+0x8e>
		else if (strcasecmp(token, "OFF") ==0)  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000290:	4a46      	ldr	r2, [pc, #280]	; (80003ac <uart_process_command+0x18c>)
 8000292:	697b      	ldr	r3, [r7, #20]
 8000294:	0011      	movs	r1, r2
 8000296:	0018      	movs	r0, r3
 8000298:	f002 fac0 	bl	800281c <strcasecmp>
 800029c:	1e03      	subs	r3, r0, #0
 800029e:	d106      	bne.n	80002ae <uart_process_command+0x8e>
 80002a0:	2390      	movs	r3, #144	; 0x90
 80002a2:	05db      	lsls	r3, r3, #23
 80002a4:	2200      	movs	r2, #0
 80002a6:	2110      	movs	r1, #16
 80002a8:	0018      	movs	r0, r3
 80002aa:	f001 f830 	bl	800130e <HAL_GPIO_WritePin>
		printf("OK\n");
 80002ae:	4b40      	ldr	r3, [pc, #256]	; (80003b0 <uart_process_command+0x190>)
 80002b0:	0018      	movs	r0, r3
 80002b2:	f002 faa9 	bl	8002808 <puts>
}
 80002b6:	e06a      	b.n	800038e <uart_process_command+0x16e>
	else if (strcasecmp(token, "LED2") == 0) 			//pokud napiseme "LED2"
 80002b8:	4a3e      	ldr	r2, [pc, #248]	; (80003b4 <uart_process_command+0x194>)
 80002ba:	697b      	ldr	r3, [r7, #20]
 80002bc:	0011      	movs	r1, r2
 80002be:	0018      	movs	r0, r3
 80002c0:	f002 faac 	bl	800281c <strcasecmp>
 80002c4:	1e03      	subs	r3, r0, #0
 80002c6:	d128      	bne.n	800031a <uart_process_command+0xfa>
			token = strtok(NULL, " ");
 80002c8:	4b33      	ldr	r3, [pc, #204]	; (8000398 <uart_process_command+0x178>)
 80002ca:	0019      	movs	r1, r3
 80002cc:	2000      	movs	r0, #0
 80002ce:	f002 fac3 	bl	8002858 <strtok>
 80002d2:	0003      	movs	r3, r0
 80002d4:	617b      	str	r3, [r7, #20]
			if (strcasecmp(token, "ON") == 0)  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80002d6:	4a34      	ldr	r2, [pc, #208]	; (80003a8 <uart_process_command+0x188>)
 80002d8:	697b      	ldr	r3, [r7, #20]
 80002da:	0011      	movs	r1, r2
 80002dc:	0018      	movs	r0, r3
 80002de:	f002 fa9d 	bl	800281c <strcasecmp>
 80002e2:	1e03      	subs	r3, r0, #0
 80002e4:	d106      	bne.n	80002f4 <uart_process_command+0xd4>
 80002e6:	4b34      	ldr	r3, [pc, #208]	; (80003b8 <uart_process_command+0x198>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	2101      	movs	r1, #1
 80002ec:	0018      	movs	r0, r3
 80002ee:	f001 f80e 	bl	800130e <HAL_GPIO_WritePin>
 80002f2:	e00d      	b.n	8000310 <uart_process_command+0xf0>
			else if (strcasecmp(token, "OFF") == 0)  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80002f4:	4a2d      	ldr	r2, [pc, #180]	; (80003ac <uart_process_command+0x18c>)
 80002f6:	697b      	ldr	r3, [r7, #20]
 80002f8:	0011      	movs	r1, r2
 80002fa:	0018      	movs	r0, r3
 80002fc:	f002 fa8e 	bl	800281c <strcasecmp>
 8000300:	1e03      	subs	r3, r0, #0
 8000302:	d105      	bne.n	8000310 <uart_process_command+0xf0>
 8000304:	4b2c      	ldr	r3, [pc, #176]	; (80003b8 <uart_process_command+0x198>)
 8000306:	2200      	movs	r2, #0
 8000308:	2101      	movs	r1, #1
 800030a:	0018      	movs	r0, r3
 800030c:	f000 ffff 	bl	800130e <HAL_GPIO_WritePin>
			printf("OK\n");
 8000310:	4b27      	ldr	r3, [pc, #156]	; (80003b0 <uart_process_command+0x190>)
 8000312:	0018      	movs	r0, r3
 8000314:	f002 fa78 	bl	8002808 <puts>
}
 8000318:	e039      	b.n	800038e <uart_process_command+0x16e>
	else if (strcasecmp(token, "STATUS") == 0) 			//pokud napiseme "STATUS"
 800031a:	4a28      	ldr	r2, [pc, #160]	; (80003bc <uart_process_command+0x19c>)
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	0011      	movs	r1, r2
 8000320:	0018      	movs	r0, r3
 8000322:	f002 fa7b 	bl	800281c <strcasecmp>
 8000326:	1e03      	subs	r3, r0, #0
 8000328:	d12d      	bne.n	8000386 <uart_process_command+0x166>
		int state_led1 = HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin); 		//nacti set/reset hodnotu pinu
 800032a:	2390      	movs	r3, #144	; 0x90
 800032c:	05db      	lsls	r3, r3, #23
 800032e:	2110      	movs	r1, #16
 8000330:	0018      	movs	r0, r3
 8000332:	f000 ffcf 	bl	80012d4 <HAL_GPIO_ReadPin>
 8000336:	0003      	movs	r3, r0
 8000338:	613b      	str	r3, [r7, #16]
		if (state_led1 == 0)
 800033a:	693b      	ldr	r3, [r7, #16]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d104      	bne.n	800034a <uart_process_command+0x12a>
			printf("LED1 OFF\n");
 8000340:	4b1f      	ldr	r3, [pc, #124]	; (80003c0 <uart_process_command+0x1a0>)
 8000342:	0018      	movs	r0, r3
 8000344:	f002 fa60 	bl	8002808 <puts>
 8000348:	e006      	b.n	8000358 <uart_process_command+0x138>
		else if (state_led1 == 1)
 800034a:	693b      	ldr	r3, [r7, #16]
 800034c:	2b01      	cmp	r3, #1
 800034e:	d103      	bne.n	8000358 <uart_process_command+0x138>
			printf("LED1 ON\n");
 8000350:	4b1c      	ldr	r3, [pc, #112]	; (80003c4 <uart_process_command+0x1a4>)
 8000352:	0018      	movs	r0, r3
 8000354:	f002 fa58 	bl	8002808 <puts>
		int state_led2 = HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin);
 8000358:	4b17      	ldr	r3, [pc, #92]	; (80003b8 <uart_process_command+0x198>)
 800035a:	2101      	movs	r1, #1
 800035c:	0018      	movs	r0, r3
 800035e:	f000 ffb9 	bl	80012d4 <HAL_GPIO_ReadPin>
 8000362:	0003      	movs	r3, r0
 8000364:	60fb      	str	r3, [r7, #12]
		if (state_led2 == 0)
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d104      	bne.n	8000376 <uart_process_command+0x156>
			printf("LED2 OFF\n");
 800036c:	4b16      	ldr	r3, [pc, #88]	; (80003c8 <uart_process_command+0x1a8>)
 800036e:	0018      	movs	r0, r3
 8000370:	f002 fa4a 	bl	8002808 <puts>
}
 8000374:	e00b      	b.n	800038e <uart_process_command+0x16e>
		else if (state_led2 == 1)
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	2b01      	cmp	r3, #1
 800037a:	d108      	bne.n	800038e <uart_process_command+0x16e>
			printf("LED2 ON\n");
 800037c:	4b13      	ldr	r3, [pc, #76]	; (80003cc <uart_process_command+0x1ac>)
 800037e:	0018      	movs	r0, r3
 8000380:	f002 fa42 	bl	8002808 <puts>
}
 8000384:	e003      	b.n	800038e <uart_process_command+0x16e>
		printf("Neznamy prikaz\n");
 8000386:	4b12      	ldr	r3, [pc, #72]	; (80003d0 <uart_process_command+0x1b0>)
 8000388:	0018      	movs	r0, r3
 800038a:	f002 fa3d 	bl	8002808 <puts>
}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	46bd      	mov	sp, r7
 8000392:	b006      	add	sp, #24
 8000394:	bd80      	pop	{r7, pc}
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	08003204 	.word	0x08003204
 800039c:	08003208 	.word	0x08003208
 80003a0:	08003210 	.word	0x08003210
 80003a4:	08003220 	.word	0x08003220
 80003a8:	08003228 	.word	0x08003228
 80003ac:	0800322c 	.word	0x0800322c
 80003b0:	08003230 	.word	0x08003230
 80003b4:	08003234 	.word	0x08003234
 80003b8:	48000400 	.word	0x48000400
 80003bc:	0800323c 	.word	0x0800323c
 80003c0:	08003244 	.word	0x08003244
 80003c4:	08003250 	.word	0x08003250
 80003c8:	08003258 	.word	0x08003258
 80003cc:	08003264 	.word	0x08003264
 80003d0:	0800326c 	.word	0x0800326c

080003d4 <_write>:



int _write(int file, char const *buf, int n)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b084      	sub	sp, #16
 80003d8:	af00      	add	r7, sp, #0
 80003da:	60f8      	str	r0, [r7, #12]
 80003dc:	60b9      	str	r1, [r7, #8]
 80003de:	607a      	str	r2, [r7, #4]
	/* stdout redirection to UART2 */
	HAL_UART_Transmit(&huart2, (uint8_t*) (buf), n, HAL_MAX_DELAY);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	b29a      	uxth	r2, r3
 80003e4:	2301      	movs	r3, #1
 80003e6:	425b      	negs	r3, r3
 80003e8:	68b9      	ldr	r1, [r7, #8]
 80003ea:	4804      	ldr	r0, [pc, #16]	; (80003fc <_write+0x28>)
 80003ec:	f001 fc6e 	bl	8001ccc <HAL_UART_Transmit>
	return n;
 80003f0:	687b      	ldr	r3, [r7, #4]
}
 80003f2:	0018      	movs	r0, r3
 80003f4:	46bd      	mov	sp, r7
 80003f6:	b004      	add	sp, #16
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	200002cc 	.word	0x200002cc

08000400 <uart_byte_available>:

static void uart_byte_available(uint8_t c)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	0002      	movs	r2, r0
 8000408:	1dfb      	adds	r3, r7, #7
 800040a:	701a      	strb	r2, [r3, #0]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];

	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 126)
 800040c:	4b19      	ldr	r3, [pc, #100]	; (8000474 <uart_byte_available+0x74>)
 800040e:	881b      	ldrh	r3, [r3, #0]
 8000410:	2b3f      	cmp	r3, #63	; 0x3f
 8000412:	d812      	bhi.n	800043a <uart_byte_available+0x3a>
 8000414:	1dfb      	adds	r3, r7, #7
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b1f      	cmp	r3, #31
 800041a:	d90e      	bls.n	800043a <uart_byte_available+0x3a>
 800041c:	1dfb      	adds	r3, r7, #7
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	2b7e      	cmp	r3, #126	; 0x7e
 8000422:	d80a      	bhi.n	800043a <uart_byte_available+0x3a>
		data[cnt++] = c;
 8000424:	4b13      	ldr	r3, [pc, #76]	; (8000474 <uart_byte_available+0x74>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	1c5a      	adds	r2, r3, #1
 800042a:	b291      	uxth	r1, r2
 800042c:	4a11      	ldr	r2, [pc, #68]	; (8000474 <uart_byte_available+0x74>)
 800042e:	8011      	strh	r1, [r2, #0]
 8000430:	0019      	movs	r1, r3
 8000432:	4b11      	ldr	r3, [pc, #68]	; (8000478 <uart_byte_available+0x78>)
 8000434:	1dfa      	adds	r2, r7, #7
 8000436:	7812      	ldrb	r2, [r2, #0]
 8000438:	545a      	strb	r2, [r3, r1]
	if ((c == '\n' || c == '\r') && cnt > 0)
 800043a:	1dfb      	adds	r3, r7, #7
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	2b0a      	cmp	r3, #10
 8000440:	d003      	beq.n	800044a <uart_byte_available+0x4a>
 8000442:	1dfb      	adds	r3, r7, #7
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b0d      	cmp	r3, #13
 8000448:	d110      	bne.n	800046c <uart_byte_available+0x6c>
 800044a:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <uart_byte_available+0x74>)
 800044c:	881b      	ldrh	r3, [r3, #0]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d00c      	beq.n	800046c <uart_byte_available+0x6c>
	{
		data[cnt] = '\0';
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <uart_byte_available+0x74>)
 8000454:	881b      	ldrh	r3, [r3, #0]
 8000456:	001a      	movs	r2, r3
 8000458:	4b07      	ldr	r3, [pc, #28]	; (8000478 <uart_byte_available+0x78>)
 800045a:	2100      	movs	r1, #0
 800045c:	5499      	strb	r1, [r3, r2]
		uart_process_command(data);
 800045e:	4b06      	ldr	r3, [pc, #24]	; (8000478 <uart_byte_available+0x78>)
 8000460:	0018      	movs	r0, r3
 8000462:	f7ff fedd 	bl	8000220 <uart_process_command>
		cnt = 0;
 8000466:	4b03      	ldr	r3, [pc, #12]	; (8000474 <uart_byte_available+0x74>)
 8000468:	2200      	movs	r2, #0
 800046a:	801a      	strh	r2, [r3, #0]
	}
}
 800046c:	46c0      	nop			; (mov r8, r8)
 800046e:	46bd      	mov	sp, r7
 8000470:	b002      	add	sp, #8
 8000472:	bd80      	pop	{r7, pc}
 8000474:	2000023a 	.word	0x2000023a
 8000478:	2000023c 	.word	0x2000023c

0800047c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000482:	f000 fadd 	bl	8000a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000486:	f000 f83b 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048a:	f000 f8d1 	bl	8000630 <MX_GPIO_Init>
  MX_DMA_Init();
 800048e:	f000 f8b1 	bl	80005f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000492:	f000 f87f 	bl	8000594 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart2, uart_rx_buf, RX_BUFFER_LEN);
 8000496:	4916      	ldr	r1, [pc, #88]	; (80004f0 <main+0x74>)
 8000498:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <main+0x78>)
 800049a:	2240      	movs	r2, #64	; 0x40
 800049c:	0018      	movs	r0, r3
 800049e:	f001 fcbd 	bl	8001e1c <HAL_UART_Receive_DMA>
/*	 uint8_t c; 										//kod, kdy vse co posilame do kitu se vraci zpet
	 HAL_UART_Receive(&huart2, &c, 1, HAL_MAX_DELAY);
	 HAL_UART_Transmit(&huart2, &c, 1, HAL_MAX_DELAY);
*/

	  while (uart_rx_read_ptr != uart_rx_write_ptr)
 80004a2:	e019      	b.n	80004d8 <main+0x5c>
	  {
		  uint8_t b = uart_rx_buf[uart_rx_read_ptr];
 80004a4:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <main+0x7c>)
 80004a6:	881b      	ldrh	r3, [r3, #0]
 80004a8:	b29b      	uxth	r3, r3
 80004aa:	0019      	movs	r1, r3
 80004ac:	1dfb      	adds	r3, r7, #7
 80004ae:	4a10      	ldr	r2, [pc, #64]	; (80004f0 <main+0x74>)
 80004b0:	5c52      	ldrb	r2, [r2, r1]
 80004b2:	701a      	strb	r2, [r3, #0]
		  if (++uart_rx_read_ptr >= RX_BUFFER_LEN)
 80004b4:	4b10      	ldr	r3, [pc, #64]	; (80004f8 <main+0x7c>)
 80004b6:	881b      	ldrh	r3, [r3, #0]
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	3301      	adds	r3, #1
 80004bc:	b29b      	uxth	r3, r3
 80004be:	4a0e      	ldr	r2, [pc, #56]	; (80004f8 <main+0x7c>)
 80004c0:	1c19      	adds	r1, r3, #0
 80004c2:	8011      	strh	r1, [r2, #0]
 80004c4:	2b3f      	cmp	r3, #63	; 0x3f
 80004c6:	d902      	bls.n	80004ce <main+0x52>
			  uart_rx_read_ptr = 0; 					// increase read pointer
 80004c8:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <main+0x7c>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	801a      	strh	r2, [r3, #0]
		  uart_byte_available(b);						// process every received byte with the RX state machine
 80004ce:	1dfb      	adds	r3, r7, #7
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	0018      	movs	r0, r3
 80004d4:	f7ff ff94 	bl	8000400 <uart_byte_available>
	  while (uart_rx_read_ptr != uart_rx_write_ptr)
 80004d8:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <main+0x7c>)
 80004da:	881b      	ldrh	r3, [r3, #0]
 80004dc:	b29b      	uxth	r3, r3
 80004de:	0019      	movs	r1, r3
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <main+0x80>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	685b      	ldr	r3, [r3, #4]
 80004e6:	2240      	movs	r2, #64	; 0x40
 80004e8:	1ad3      	subs	r3, r2, r3
 80004ea:	4299      	cmp	r1, r3
 80004ec:	d1da      	bne.n	80004a4 <main+0x28>
 80004ee:	e7f3      	b.n	80004d8 <main+0x5c>
 80004f0:	200001f8 	.word	0x200001f8
 80004f4:	200002cc 	.word	0x200002cc
 80004f8:	20000238 	.word	0x20000238
 80004fc:	20000288 	.word	0x20000288

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b091      	sub	sp, #68	; 0x44
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	2410      	movs	r4, #16
 8000508:	193b      	adds	r3, r7, r4
 800050a:	0018      	movs	r0, r3
 800050c:	2330      	movs	r3, #48	; 0x30
 800050e:	001a      	movs	r2, r3
 8000510:	2100      	movs	r1, #0
 8000512:	f002 f911 	bl	8002738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000516:	003b      	movs	r3, r7
 8000518:	0018      	movs	r0, r3
 800051a:	2310      	movs	r3, #16
 800051c:	001a      	movs	r2, r3
 800051e:	2100      	movs	r1, #0
 8000520:	f002 f90a 	bl	8002738 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000524:	0021      	movs	r1, r4
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2202      	movs	r2, #2
 800052a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2201      	movs	r2, #1
 8000530:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2210      	movs	r2, #16
 8000536:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2202      	movs	r2, #2
 800053c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2200      	movs	r2, #0
 8000542:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	22a0      	movs	r2, #160	; 0xa0
 8000548:	0392      	lsls	r2, r2, #14
 800054a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2200      	movs	r2, #0
 8000550:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000552:	187b      	adds	r3, r7, r1
 8000554:	0018      	movs	r0, r3
 8000556:	f000 fef7 	bl	8001348 <HAL_RCC_OscConfig>
 800055a:	1e03      	subs	r3, r0, #0
 800055c:	d001      	beq.n	8000562 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800055e:	f000 f8f9 	bl	8000754 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000562:	003b      	movs	r3, r7
 8000564:	2207      	movs	r2, #7
 8000566:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000568:	003b      	movs	r3, r7
 800056a:	2202      	movs	r2, #2
 800056c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056e:	003b      	movs	r3, r7
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000574:	003b      	movs	r3, r7
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800057a:	003b      	movs	r3, r7
 800057c:	2101      	movs	r1, #1
 800057e:	0018      	movs	r0, r3
 8000580:	f001 f9fe 	bl	8001980 <HAL_RCC_ClockConfig>
 8000584:	1e03      	subs	r3, r0, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000588:	f000 f8e4 	bl	8000754 <Error_Handler>
  }
}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	b011      	add	sp, #68	; 0x44
 8000592:	bd90      	pop	{r4, r7, pc}

08000594 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000598:	4b14      	ldr	r3, [pc, #80]	; (80005ec <MX_USART2_UART_Init+0x58>)
 800059a:	4a15      	ldr	r2, [pc, #84]	; (80005f0 <MX_USART2_UART_Init+0x5c>)
 800059c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800059e:	4b13      	ldr	r3, [pc, #76]	; (80005ec <MX_USART2_UART_Init+0x58>)
 80005a0:	2296      	movs	r2, #150	; 0x96
 80005a2:	0212      	lsls	r2, r2, #8
 80005a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005a6:	4b11      	ldr	r3, [pc, #68]	; (80005ec <MX_USART2_UART_Init+0x58>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <MX_USART2_UART_Init+0x58>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <MX_USART2_UART_Init+0x58>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <MX_USART2_UART_Init+0x58>)
 80005ba:	220c      	movs	r2, #12
 80005bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <MX_USART2_UART_Init+0x58>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c4:	4b09      	ldr	r3, [pc, #36]	; (80005ec <MX_USART2_UART_Init+0x58>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ca:	4b08      	ldr	r3, [pc, #32]	; (80005ec <MX_USART2_UART_Init+0x58>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <MX_USART2_UART_Init+0x58>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005d6:	4b05      	ldr	r3, [pc, #20]	; (80005ec <MX_USART2_UART_Init+0x58>)
 80005d8:	0018      	movs	r0, r3
 80005da:	f001 fb23 	bl	8001c24 <HAL_UART_Init>
 80005de:	1e03      	subs	r3, r0, #0
 80005e0:	d001      	beq.n	80005e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005e2:	f000 f8b7 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	200002cc 	.word	0x200002cc
 80005f0:	40004400 	.word	0x40004400

080005f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <MX_DMA_Init+0x38>)
 80005fc:	695a      	ldr	r2, [r3, #20]
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <MX_DMA_Init+0x38>)
 8000600:	2101      	movs	r1, #1
 8000602:	430a      	orrs	r2, r1
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <MX_DMA_Init+0x38>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	2201      	movs	r2, #1
 800060c:	4013      	ands	r3, r2
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2100      	movs	r1, #0
 8000616:	200b      	movs	r0, #11
 8000618:	f000 fb22 	bl	8000c60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 800061c:	200b      	movs	r0, #11
 800061e:	f000 fb34 	bl	8000c8a <HAL_NVIC_EnableIRQ>

}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	b002      	add	sp, #8
 8000628:	bd80      	pop	{r7, pc}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	40021000 	.word	0x40021000

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b08b      	sub	sp, #44	; 0x2c
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	2414      	movs	r4, #20
 8000638:	193b      	adds	r3, r7, r4
 800063a:	0018      	movs	r0, r3
 800063c:	2314      	movs	r3, #20
 800063e:	001a      	movs	r2, r3
 8000640:	2100      	movs	r1, #0
 8000642:	f002 f879 	bl	8002738 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000646:	4b3f      	ldr	r3, [pc, #252]	; (8000744 <MX_GPIO_Init+0x114>)
 8000648:	695a      	ldr	r2, [r3, #20]
 800064a:	4b3e      	ldr	r3, [pc, #248]	; (8000744 <MX_GPIO_Init+0x114>)
 800064c:	2180      	movs	r1, #128	; 0x80
 800064e:	0309      	lsls	r1, r1, #12
 8000650:	430a      	orrs	r2, r1
 8000652:	615a      	str	r2, [r3, #20]
 8000654:	4b3b      	ldr	r3, [pc, #236]	; (8000744 <MX_GPIO_Init+0x114>)
 8000656:	695a      	ldr	r2, [r3, #20]
 8000658:	2380      	movs	r3, #128	; 0x80
 800065a:	031b      	lsls	r3, r3, #12
 800065c:	4013      	ands	r3, r2
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000662:	4b38      	ldr	r3, [pc, #224]	; (8000744 <MX_GPIO_Init+0x114>)
 8000664:	695a      	ldr	r2, [r3, #20]
 8000666:	4b37      	ldr	r3, [pc, #220]	; (8000744 <MX_GPIO_Init+0x114>)
 8000668:	2180      	movs	r1, #128	; 0x80
 800066a:	03c9      	lsls	r1, r1, #15
 800066c:	430a      	orrs	r2, r1
 800066e:	615a      	str	r2, [r3, #20]
 8000670:	4b34      	ldr	r3, [pc, #208]	; (8000744 <MX_GPIO_Init+0x114>)
 8000672:	695a      	ldr	r2, [r3, #20]
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	03db      	lsls	r3, r3, #15
 8000678:	4013      	ands	r3, r2
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b31      	ldr	r3, [pc, #196]	; (8000744 <MX_GPIO_Init+0x114>)
 8000680:	695a      	ldr	r2, [r3, #20]
 8000682:	4b30      	ldr	r3, [pc, #192]	; (8000744 <MX_GPIO_Init+0x114>)
 8000684:	2180      	movs	r1, #128	; 0x80
 8000686:	0289      	lsls	r1, r1, #10
 8000688:	430a      	orrs	r2, r1
 800068a:	615a      	str	r2, [r3, #20]
 800068c:	4b2d      	ldr	r3, [pc, #180]	; (8000744 <MX_GPIO_Init+0x114>)
 800068e:	695a      	ldr	r2, [r3, #20]
 8000690:	2380      	movs	r3, #128	; 0x80
 8000692:	029b      	lsls	r3, r3, #10
 8000694:	4013      	ands	r3, r2
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	4b2a      	ldr	r3, [pc, #168]	; (8000744 <MX_GPIO_Init+0x114>)
 800069c:	695a      	ldr	r2, [r3, #20]
 800069e:	4b29      	ldr	r3, [pc, #164]	; (8000744 <MX_GPIO_Init+0x114>)
 80006a0:	2180      	movs	r1, #128	; 0x80
 80006a2:	02c9      	lsls	r1, r1, #11
 80006a4:	430a      	orrs	r2, r1
 80006a6:	615a      	str	r2, [r3, #20]
 80006a8:	4b26      	ldr	r3, [pc, #152]	; (8000744 <MX_GPIO_Init+0x114>)
 80006aa:	695a      	ldr	r2, [r3, #20]
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	02db      	lsls	r3, r3, #11
 80006b0:	4013      	ands	r3, r2
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006b6:	2390      	movs	r3, #144	; 0x90
 80006b8:	05db      	lsls	r3, r3, #23
 80006ba:	2200      	movs	r2, #0
 80006bc:	2130      	movs	r1, #48	; 0x30
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 fe25 	bl	800130e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80006c4:	4b20      	ldr	r3, [pc, #128]	; (8000748 <MX_GPIO_Init+0x118>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	2101      	movs	r1, #1
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 fe1f 	bl	800130e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	2280      	movs	r2, #128	; 0x80
 80006d4:	0192      	lsls	r2, r2, #6
 80006d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	4a1c      	ldr	r2, [pc, #112]	; (800074c <MX_GPIO_Init+0x11c>)
 80006dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	4a1a      	ldr	r2, [pc, #104]	; (8000750 <MX_GPIO_Init+0x120>)
 80006e8:	0019      	movs	r1, r3
 80006ea:	0010      	movs	r0, r2
 80006ec:	f000 fc82 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LD2_Pin;
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	2230      	movs	r2, #48	; 0x30
 80006f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	2201      	movs	r2, #1
 80006fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	193b      	adds	r3, r7, r4
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000708:	193a      	adds	r2, r7, r4
 800070a:	2390      	movs	r3, #144	; 0x90
 800070c:	05db      	lsls	r3, r3, #23
 800070e:	0011      	movs	r1, r2
 8000710:	0018      	movs	r0, r3
 8000712:	f000 fc6f 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000716:	0021      	movs	r1, r4
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2201      	movs	r2, #1
 800071c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2201      	movs	r2, #1
 8000722:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000730:	187b      	adds	r3, r7, r1
 8000732:	4a05      	ldr	r2, [pc, #20]	; (8000748 <MX_GPIO_Init+0x118>)
 8000734:	0019      	movs	r1, r3
 8000736:	0010      	movs	r0, r2
 8000738:	f000 fc5c 	bl	8000ff4 <HAL_GPIO_Init>

}
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	b00b      	add	sp, #44	; 0x2c
 8000742:	bd90      	pop	{r4, r7, pc}
 8000744:	40021000 	.word	0x40021000
 8000748:	48000400 	.word	0x48000400
 800074c:	10210000 	.word	0x10210000
 8000750:	48000800 	.word	0x48000800

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <HAL_MspInit+0x44>)
 8000768:	699a      	ldr	r2, [r3, #24]
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <HAL_MspInit+0x44>)
 800076c:	2101      	movs	r1, #1
 800076e:	430a      	orrs	r2, r1
 8000770:	619a      	str	r2, [r3, #24]
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <HAL_MspInit+0x44>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	2201      	movs	r2, #1
 8000778:	4013      	ands	r3, r2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <HAL_MspInit+0x44>)
 8000780:	69da      	ldr	r2, [r3, #28]
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <HAL_MspInit+0x44>)
 8000784:	2180      	movs	r1, #128	; 0x80
 8000786:	0549      	lsls	r1, r1, #21
 8000788:	430a      	orrs	r2, r1
 800078a:	61da      	str	r2, [r3, #28]
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <HAL_MspInit+0x44>)
 800078e:	69da      	ldr	r2, [r3, #28]
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	055b      	lsls	r3, r3, #21
 8000794:	4013      	ands	r3, r2
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	b002      	add	sp, #8
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	40021000 	.word	0x40021000

080007a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	2314      	movs	r3, #20
 80007b2:	18fb      	adds	r3, r7, r3
 80007b4:	0018      	movs	r0, r3
 80007b6:	2314      	movs	r3, #20
 80007b8:	001a      	movs	r2, r3
 80007ba:	2100      	movs	r1, #0
 80007bc:	f001 ffbc 	bl	8002738 <memset>
  if(huart->Instance==USART2)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a2f      	ldr	r2, [pc, #188]	; (8000884 <HAL_UART_MspInit+0xdc>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d158      	bne.n	800087c <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007ca:	4b2f      	ldr	r3, [pc, #188]	; (8000888 <HAL_UART_MspInit+0xe0>)
 80007cc:	69da      	ldr	r2, [r3, #28]
 80007ce:	4b2e      	ldr	r3, [pc, #184]	; (8000888 <HAL_UART_MspInit+0xe0>)
 80007d0:	2180      	movs	r1, #128	; 0x80
 80007d2:	0289      	lsls	r1, r1, #10
 80007d4:	430a      	orrs	r2, r1
 80007d6:	61da      	str	r2, [r3, #28]
 80007d8:	4b2b      	ldr	r3, [pc, #172]	; (8000888 <HAL_UART_MspInit+0xe0>)
 80007da:	69da      	ldr	r2, [r3, #28]
 80007dc:	2380      	movs	r3, #128	; 0x80
 80007de:	029b      	lsls	r3, r3, #10
 80007e0:	4013      	ands	r3, r2
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b28      	ldr	r3, [pc, #160]	; (8000888 <HAL_UART_MspInit+0xe0>)
 80007e8:	695a      	ldr	r2, [r3, #20]
 80007ea:	4b27      	ldr	r3, [pc, #156]	; (8000888 <HAL_UART_MspInit+0xe0>)
 80007ec:	2180      	movs	r1, #128	; 0x80
 80007ee:	0289      	lsls	r1, r1, #10
 80007f0:	430a      	orrs	r2, r1
 80007f2:	615a      	str	r2, [r3, #20]
 80007f4:	4b24      	ldr	r3, [pc, #144]	; (8000888 <HAL_UART_MspInit+0xe0>)
 80007f6:	695a      	ldr	r2, [r3, #20]
 80007f8:	2380      	movs	r3, #128	; 0x80
 80007fa:	029b      	lsls	r3, r3, #10
 80007fc:	4013      	ands	r3, r2
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000802:	2114      	movs	r1, #20
 8000804:	187b      	adds	r3, r7, r1
 8000806:	220c      	movs	r2, #12
 8000808:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2202      	movs	r2, #2
 800080e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	187b      	adds	r3, r7, r1
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800081c:	187b      	adds	r3, r7, r1
 800081e:	2201      	movs	r2, #1
 8000820:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000822:	187a      	adds	r2, r7, r1
 8000824:	2390      	movs	r3, #144	; 0x90
 8000826:	05db      	lsls	r3, r3, #23
 8000828:	0011      	movs	r1, r2
 800082a:	0018      	movs	r0, r3
 800082c:	f000 fbe2 	bl	8000ff4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000830:	4b16      	ldr	r3, [pc, #88]	; (800088c <HAL_UART_MspInit+0xe4>)
 8000832:	4a17      	ldr	r2, [pc, #92]	; (8000890 <HAL_UART_MspInit+0xe8>)
 8000834:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <HAL_UART_MspInit+0xe4>)
 8000838:	2200      	movs	r2, #0
 800083a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800083c:	4b13      	ldr	r3, [pc, #76]	; (800088c <HAL_UART_MspInit+0xe4>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <HAL_UART_MspInit+0xe4>)
 8000844:	2280      	movs	r2, #128	; 0x80
 8000846:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000848:	4b10      	ldr	r3, [pc, #64]	; (800088c <HAL_UART_MspInit+0xe4>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <HAL_UART_MspInit+0xe4>)
 8000850:	2200      	movs	r2, #0
 8000852:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000854:	4b0d      	ldr	r3, [pc, #52]	; (800088c <HAL_UART_MspInit+0xe4>)
 8000856:	2220      	movs	r2, #32
 8000858:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <HAL_UART_MspInit+0xe4>)
 800085c:	2200      	movs	r2, #0
 800085e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <HAL_UART_MspInit+0xe4>)
 8000862:	0018      	movs	r0, r3
 8000864:	f000 fa2e 	bl	8000cc4 <HAL_DMA_Init>
 8000868:	1e03      	subs	r3, r0, #0
 800086a:	d001      	beq.n	8000870 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 800086c:	f7ff ff72 	bl	8000754 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a06      	ldr	r2, [pc, #24]	; (800088c <HAL_UART_MspInit+0xe4>)
 8000874:	66da      	str	r2, [r3, #108]	; 0x6c
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <HAL_UART_MspInit+0xe4>)
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	b00a      	add	sp, #40	; 0x28
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40004400 	.word	0x40004400
 8000888:	40021000 	.word	0x40021000
 800088c:	20000288 	.word	0x20000288
 8000890:	40020058 	.word	0x40020058

08000894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <HardFault_Handler+0x4>

080008a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008bc:	f000 f908 	bl	8000ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80008cc:	4b03      	ldr	r3, [pc, #12]	; (80008dc <DMA1_Channel4_5_IRQHandler+0x14>)
 80008ce:	0018      	movs	r0, r3
 80008d0:	f000 faa6 	bl	8000e20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	20000288 	.word	0x20000288

080008e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	e00a      	b.n	8000908 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008f2:	e000      	b.n	80008f6 <_read+0x16>
 80008f4:	bf00      	nop
 80008f6:	0001      	movs	r1, r0
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	1c5a      	adds	r2, r3, #1
 80008fc:	60ba      	str	r2, [r7, #8]
 80008fe:	b2ca      	uxtb	r2, r1
 8000900:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	3301      	adds	r3, #1
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697a      	ldr	r2, [r7, #20]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	429a      	cmp	r2, r3
 800090e:	dbf0      	blt.n	80008f2 <_read+0x12>
	}

return len;
 8000910:	687b      	ldr	r3, [r7, #4]
}
 8000912:	0018      	movs	r0, r3
 8000914:	46bd      	mov	sp, r7
 8000916:	b006      	add	sp, #24
 8000918:	bd80      	pop	{r7, pc}

0800091a <_close>:
	}
	return len;
}

int _close(int file)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
	return -1;
 8000922:	2301      	movs	r3, #1
 8000924:	425b      	negs	r3, r3
}
 8000926:	0018      	movs	r0, r3
 8000928:	46bd      	mov	sp, r7
 800092a:	b002      	add	sp, #8
 800092c:	bd80      	pop	{r7, pc}

0800092e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
 8000936:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	2280      	movs	r2, #128	; 0x80
 800093c:	0192      	lsls	r2, r2, #6
 800093e:	605a      	str	r2, [r3, #4]
	return 0;
 8000940:	2300      	movs	r3, #0
}
 8000942:	0018      	movs	r0, r3
 8000944:	46bd      	mov	sp, r7
 8000946:	b002      	add	sp, #8
 8000948:	bd80      	pop	{r7, pc}

0800094a <_isatty>:

int _isatty(int file)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
	return 1;
 8000952:	2301      	movs	r3, #1
}
 8000954:	0018      	movs	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	b002      	add	sp, #8
 800095a:	bd80      	pop	{r7, pc}

0800095c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
	return 0;
 8000968:	2300      	movs	r3, #0
}
 800096a:	0018      	movs	r0, r3
 800096c:	46bd      	mov	sp, r7
 800096e:	b004      	add	sp, #16
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800097c:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <_sbrk+0x5c>)
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <_sbrk+0x60>)
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000988:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <_sbrk+0x64>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d102      	bne.n	8000996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <_sbrk+0x64>)
 8000992:	4a12      	ldr	r2, [pc, #72]	; (80009dc <_sbrk+0x68>)
 8000994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	18d3      	adds	r3, r2, r3
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d207      	bcs.n	80009b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a4:	f001 fe9e 	bl	80026e4 <__errno>
 80009a8:	0003      	movs	r3, r0
 80009aa:	220c      	movs	r2, #12
 80009ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	425b      	negs	r3, r3
 80009b2:	e009      	b.n	80009c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <_sbrk+0x64>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <_sbrk+0x64>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	18d2      	adds	r2, r2, r3
 80009c2:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <_sbrk+0x64>)
 80009c4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80009c6:	68fb      	ldr	r3, [r7, #12]
}
 80009c8:	0018      	movs	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b006      	add	sp, #24
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20002000 	.word	0x20002000
 80009d4:	00000400 	.word	0x00000400
 80009d8:	2000027c 	.word	0x2000027c
 80009dc:	20000358 	.word	0x20000358

080009e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009e4:	46c0      	nop			; (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009ec:	480d      	ldr	r0, [pc, #52]	; (8000a24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f0:	480d      	ldr	r0, [pc, #52]	; (8000a28 <LoopForever+0x6>)
  ldr r1, =_edata
 80009f2:	490e      	ldr	r1, [pc, #56]	; (8000a2c <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f4:	4a0e      	ldr	r2, [pc, #56]	; (8000a30 <LoopForever+0xe>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f8:	e002      	b.n	8000a00 <LoopCopyDataInit>

080009fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fe:	3304      	adds	r3, #4

08000a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a04:	d3f9      	bcc.n	80009fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a06:	4a0b      	ldr	r2, [pc, #44]	; (8000a34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a08:	4c0b      	ldr	r4, [pc, #44]	; (8000a38 <LoopForever+0x16>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a0c:	e001      	b.n	8000a12 <LoopFillZerobss>

08000a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a10:	3204      	adds	r2, #4

08000a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a14:	d3fb      	bcc.n	8000a0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a16:	f7ff ffe3 	bl	80009e0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a1a:	f001 fe69 	bl	80026f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a1e:	f7ff fd2d 	bl	800047c <main>

08000a22 <LoopForever>:

LoopForever:
    b LoopForever
 8000a22:	e7fe      	b.n	8000a22 <LoopForever>
  ldr   r0, =_estack
 8000a24:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a2c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8000a30:	0800342c 	.word	0x0800342c
  ldr r2, =_sbss
 8000a34:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000a38:	20000354 	.word	0x20000354

08000a3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a3c:	e7fe      	b.n	8000a3c <ADC1_IRQHandler>
	...

08000a40 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <HAL_Init+0x24>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_Init+0x24>)
 8000a4a:	2110      	movs	r1, #16
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a50:	2000      	movs	r0, #0
 8000a52:	f000 f809 	bl	8000a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a56:	f7ff fe83 	bl	8000760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a5a:	2300      	movs	r3, #0
}
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	40022000 	.word	0x40022000

08000a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <HAL_InitTick+0x5c>)
 8000a72:	681c      	ldr	r4, [r3, #0]
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <HAL_InitTick+0x60>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	0019      	movs	r1, r3
 8000a7a:	23fa      	movs	r3, #250	; 0xfa
 8000a7c:	0098      	lsls	r0, r3, #2
 8000a7e:	f7ff fb43 	bl	8000108 <__udivsi3>
 8000a82:	0003      	movs	r3, r0
 8000a84:	0019      	movs	r1, r3
 8000a86:	0020      	movs	r0, r4
 8000a88:	f7ff fb3e 	bl	8000108 <__udivsi3>
 8000a8c:	0003      	movs	r3, r0
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f000 f90b 	bl	8000caa <HAL_SYSTICK_Config>
 8000a94:	1e03      	subs	r3, r0, #0
 8000a96:	d001      	beq.n	8000a9c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e00f      	b.n	8000abc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b03      	cmp	r3, #3
 8000aa0:	d80b      	bhi.n	8000aba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	425b      	negs	r3, r3
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f000 f8d8 	bl	8000c60 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_InitTick+0x64>)
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e000      	b.n	8000abc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	0018      	movs	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b003      	add	sp, #12
 8000ac2:	bd90      	pop	{r4, r7, pc}
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	20000004 	.word	0x20000004

08000ad0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <HAL_IncTick+0x1c>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	001a      	movs	r2, r3
 8000ada:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <HAL_IncTick+0x20>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	18d2      	adds	r2, r2, r3
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <HAL_IncTick+0x20>)
 8000ae2:	601a      	str	r2, [r3, #0]
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	20000008 	.word	0x20000008
 8000af0:	2000034c 	.word	0x2000034c

08000af4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  return uwTick;
 8000af8:	4b02      	ldr	r3, [pc, #8]	; (8000b04 <HAL_GetTick+0x10>)
 8000afa:	681b      	ldr	r3, [r3, #0]
}
 8000afc:	0018      	movs	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	2000034c 	.word	0x2000034c

08000b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	0002      	movs	r2, r0
 8000b10:	1dfb      	adds	r3, r7, #7
 8000b12:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b14:	1dfb      	adds	r3, r7, #7
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b7f      	cmp	r3, #127	; 0x7f
 8000b1a:	d809      	bhi.n	8000b30 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b1c:	1dfb      	adds	r3, r7, #7
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	001a      	movs	r2, r3
 8000b22:	231f      	movs	r3, #31
 8000b24:	401a      	ands	r2, r3
 8000b26:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <__NVIC_EnableIRQ+0x30>)
 8000b28:	2101      	movs	r1, #1
 8000b2a:	4091      	lsls	r1, r2
 8000b2c:	000a      	movs	r2, r1
 8000b2e:	601a      	str	r2, [r3, #0]
  }
}
 8000b30:	46c0      	nop			; (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b002      	add	sp, #8
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	e000e100 	.word	0xe000e100

08000b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	0002      	movs	r2, r0
 8000b44:	6039      	str	r1, [r7, #0]
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b50:	d828      	bhi.n	8000ba4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b52:	4a2f      	ldr	r2, [pc, #188]	; (8000c10 <__NVIC_SetPriority+0xd4>)
 8000b54:	1dfb      	adds	r3, r7, #7
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	b25b      	sxtb	r3, r3
 8000b5a:	089b      	lsrs	r3, r3, #2
 8000b5c:	33c0      	adds	r3, #192	; 0xc0
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	589b      	ldr	r3, [r3, r2]
 8000b62:	1dfa      	adds	r2, r7, #7
 8000b64:	7812      	ldrb	r2, [r2, #0]
 8000b66:	0011      	movs	r1, r2
 8000b68:	2203      	movs	r2, #3
 8000b6a:	400a      	ands	r2, r1
 8000b6c:	00d2      	lsls	r2, r2, #3
 8000b6e:	21ff      	movs	r1, #255	; 0xff
 8000b70:	4091      	lsls	r1, r2
 8000b72:	000a      	movs	r2, r1
 8000b74:	43d2      	mvns	r2, r2
 8000b76:	401a      	ands	r2, r3
 8000b78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	019b      	lsls	r3, r3, #6
 8000b7e:	22ff      	movs	r2, #255	; 0xff
 8000b80:	401a      	ands	r2, r3
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	0018      	movs	r0, r3
 8000b88:	2303      	movs	r3, #3
 8000b8a:	4003      	ands	r3, r0
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b90:	481f      	ldr	r0, [pc, #124]	; (8000c10 <__NVIC_SetPriority+0xd4>)
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	b25b      	sxtb	r3, r3
 8000b98:	089b      	lsrs	r3, r3, #2
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	33c0      	adds	r3, #192	; 0xc0
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ba2:	e031      	b.n	8000c08 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba4:	4a1b      	ldr	r2, [pc, #108]	; (8000c14 <__NVIC_SetPriority+0xd8>)
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	0019      	movs	r1, r3
 8000bac:	230f      	movs	r3, #15
 8000bae:	400b      	ands	r3, r1
 8000bb0:	3b08      	subs	r3, #8
 8000bb2:	089b      	lsrs	r3, r3, #2
 8000bb4:	3306      	adds	r3, #6
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	18d3      	adds	r3, r2, r3
 8000bba:	3304      	adds	r3, #4
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	1dfa      	adds	r2, r7, #7
 8000bc0:	7812      	ldrb	r2, [r2, #0]
 8000bc2:	0011      	movs	r1, r2
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	400a      	ands	r2, r1
 8000bc8:	00d2      	lsls	r2, r2, #3
 8000bca:	21ff      	movs	r1, #255	; 0xff
 8000bcc:	4091      	lsls	r1, r2
 8000bce:	000a      	movs	r2, r1
 8000bd0:	43d2      	mvns	r2, r2
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	019b      	lsls	r3, r3, #6
 8000bda:	22ff      	movs	r2, #255	; 0xff
 8000bdc:	401a      	ands	r2, r3
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	0018      	movs	r0, r3
 8000be4:	2303      	movs	r3, #3
 8000be6:	4003      	ands	r3, r0
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bec:	4809      	ldr	r0, [pc, #36]	; (8000c14 <__NVIC_SetPriority+0xd8>)
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	001c      	movs	r4, r3
 8000bf4:	230f      	movs	r3, #15
 8000bf6:	4023      	ands	r3, r4
 8000bf8:	3b08      	subs	r3, #8
 8000bfa:	089b      	lsrs	r3, r3, #2
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	3306      	adds	r3, #6
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	18c3      	adds	r3, r0, r3
 8000c04:	3304      	adds	r3, #4
 8000c06:	601a      	str	r2, [r3, #0]
}
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b003      	add	sp, #12
 8000c0e:	bd90      	pop	{r4, r7, pc}
 8000c10:	e000e100 	.word	0xe000e100
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	4a0c      	ldr	r2, [pc, #48]	; (8000c58 <SysTick_Config+0x40>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d901      	bls.n	8000c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e010      	b.n	8000c50 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <SysTick_Config+0x44>)
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	3a01      	subs	r2, #1
 8000c34:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c36:	2301      	movs	r3, #1
 8000c38:	425b      	negs	r3, r3
 8000c3a:	2103      	movs	r1, #3
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f7ff ff7d 	bl	8000b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <SysTick_Config+0x44>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <SysTick_Config+0x44>)
 8000c4a:	2207      	movs	r2, #7
 8000c4c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c4e:	2300      	movs	r3, #0
}
 8000c50:	0018      	movs	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b002      	add	sp, #8
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	00ffffff 	.word	0x00ffffff
 8000c5c:	e000e010 	.word	0xe000e010

08000c60 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60b9      	str	r1, [r7, #8]
 8000c68:	607a      	str	r2, [r7, #4]
 8000c6a:	210f      	movs	r1, #15
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	1c02      	adds	r2, r0, #0
 8000c70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	b25b      	sxtb	r3, r3
 8000c7a:	0011      	movs	r1, r2
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f7ff ff5d 	bl	8000b3c <__NVIC_SetPriority>
}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b004      	add	sp, #16
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	0002      	movs	r2, r0
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c96:	1dfb      	adds	r3, r7, #7
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	b25b      	sxtb	r3, r3
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f7ff ff33 	bl	8000b08 <__NVIC_EnableIRQ>
}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b002      	add	sp, #8
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f7ff ffaf 	bl	8000c18 <SysTick_Config>
 8000cba:	0003      	movs	r3, r0
}
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b002      	add	sp, #8
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d101      	bne.n	8000cda <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e036      	b.n	8000d48 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2221      	movs	r2, #33	; 0x21
 8000cde:	2102      	movs	r1, #2
 8000ce0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	4a18      	ldr	r2, [pc, #96]	; (8000d50 <HAL_DMA_Init+0x8c>)
 8000cee:	4013      	ands	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000cfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	695b      	ldr	r3, [r3, #20]
 8000d0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	69db      	ldr	r3, [r3, #28]
 8000d18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f000 f946 	bl	8000fbc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2200      	movs	r2, #0
 8000d34:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2221      	movs	r2, #33	; 0x21
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2220      	movs	r2, #32
 8000d42:	2100      	movs	r1, #0
 8000d44:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
}  
 8000d48:	0018      	movs	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b004      	add	sp, #16
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	ffffc00f 	.word	0xffffc00f

08000d54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
 8000d60:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000d62:	2317      	movs	r3, #23
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	2220      	movs	r2, #32
 8000d6e:	5c9b      	ldrb	r3, [r3, r2]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d101      	bne.n	8000d78 <HAL_DMA_Start_IT+0x24>
 8000d74:	2302      	movs	r3, #2
 8000d76:	e04f      	b.n	8000e18 <HAL_DMA_Start_IT+0xc4>
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2220      	movs	r2, #32
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2221      	movs	r2, #33	; 0x21
 8000d84:	5c9b      	ldrb	r3, [r3, r2]
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d13a      	bne.n	8000e02 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2221      	movs	r2, #33	; 0x21
 8000d90:	2102      	movs	r1, #2
 8000d92:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2200      	movs	r2, #0
 8000d98:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2101      	movs	r1, #1
 8000da6:	438a      	bics	r2, r1
 8000da8:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	68b9      	ldr	r1, [r7, #8]
 8000db0:	68f8      	ldr	r0, [r7, #12]
 8000db2:	f000 f8d7 	bl	8000f64 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d008      	beq.n	8000dd0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	210e      	movs	r1, #14
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	e00f      	b.n	8000df0 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	210a      	movs	r1, #10
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2104      	movs	r1, #4
 8000dec:	438a      	bics	r2, r1
 8000dee:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	e007      	b.n	8000e12 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2220      	movs	r2, #32
 8000e06:	2100      	movs	r1, #0
 8000e08:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000e0a:	2317      	movs	r3, #23
 8000e0c:	18fb      	adds	r3, r7, r3
 8000e0e:	2202      	movs	r2, #2
 8000e10:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000e12:	2317      	movs	r3, #23
 8000e14:	18fb      	adds	r3, r7, r3
 8000e16:	781b      	ldrb	r3, [r3, #0]
} 
 8000e18:	0018      	movs	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b006      	add	sp, #24
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	2204      	movs	r2, #4
 8000e3e:	409a      	lsls	r2, r3
 8000e40:	0013      	movs	r3, r2
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	4013      	ands	r3, r2
 8000e46:	d024      	beq.n	8000e92 <HAL_DMA_IRQHandler+0x72>
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	2204      	movs	r2, #4
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	d020      	beq.n	8000e92 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2220      	movs	r2, #32
 8000e58:	4013      	ands	r3, r2
 8000e5a:	d107      	bne.n	8000e6c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2104      	movs	r1, #4
 8000e68:	438a      	bics	r2, r1
 8000e6a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e74:	2104      	movs	r1, #4
 8000e76:	4091      	lsls	r1, r2
 8000e78:	000a      	movs	r2, r1
 8000e7a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d100      	bne.n	8000e86 <HAL_DMA_IRQHandler+0x66>
 8000e84:	e06a      	b.n	8000f5c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	0010      	movs	r0, r2
 8000e8e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000e90:	e064      	b.n	8000f5c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	2202      	movs	r2, #2
 8000e98:	409a      	lsls	r2, r3
 8000e9a:	0013      	movs	r3, r2
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d02b      	beq.n	8000efa <HAL_DMA_IRQHandler+0xda>
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	d027      	beq.n	8000efa <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2220      	movs	r2, #32
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	d10b      	bne.n	8000ece <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	210a      	movs	r1, #10
 8000ec2:	438a      	bics	r2, r1
 8000ec4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2221      	movs	r2, #33	; 0x21
 8000eca:	2101      	movs	r1, #1
 8000ecc:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ed6:	2102      	movs	r1, #2
 8000ed8:	4091      	lsls	r1, r2
 8000eda:	000a      	movs	r2, r1
 8000edc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2220      	movs	r2, #32
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d036      	beq.n	8000f5c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	0010      	movs	r0, r2
 8000ef6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000ef8:	e030      	b.n	8000f5c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	2208      	movs	r2, #8
 8000f00:	409a      	lsls	r2, r3
 8000f02:	0013      	movs	r3, r2
 8000f04:	68fa      	ldr	r2, [r7, #12]
 8000f06:	4013      	ands	r3, r2
 8000f08:	d028      	beq.n	8000f5c <HAL_DMA_IRQHandler+0x13c>
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	2208      	movs	r2, #8
 8000f0e:	4013      	ands	r3, r2
 8000f10:	d024      	beq.n	8000f5c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	210e      	movs	r1, #14
 8000f1e:	438a      	bics	r2, r1
 8000f20:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	4091      	lsls	r1, r2
 8000f2e:	000a      	movs	r2, r1
 8000f30:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2201      	movs	r2, #1
 8000f36:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2221      	movs	r2, #33	; 0x21
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2220      	movs	r2, #32
 8000f44:	2100      	movs	r1, #0
 8000f46:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d005      	beq.n	8000f5c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	0010      	movs	r0, r2
 8000f58:	4798      	blx	r3
    }
   }
}  
 8000f5a:	e7ff      	b.n	8000f5c <HAL_DMA_IRQHandler+0x13c>
 8000f5c:	46c0      	nop			; (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b004      	add	sp, #16
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
 8000f70:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	000a      	movs	r2, r1
 8000f80:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	683a      	ldr	r2, [r7, #0]
 8000f88:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b10      	cmp	r3, #16
 8000f90:	d108      	bne.n	8000fa4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000fa2:	e007      	b.n	8000fb4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	68ba      	ldr	r2, [r7, #8]
 8000faa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	60da      	str	r2, [r3, #12]
}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b004      	add	sp, #16
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a08      	ldr	r2, [pc, #32]	; (8000fec <DMA_CalcBaseAndBitshift+0x30>)
 8000fca:	4694      	mov	ip, r2
 8000fcc:	4463      	add	r3, ip
 8000fce:	2114      	movs	r1, #20
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f7ff f899 	bl	8000108 <__udivsi3>
 8000fd6:	0003      	movs	r3, r0
 8000fd8:	009a      	lsls	r2, r3, #2
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a03      	ldr	r2, [pc, #12]	; (8000ff0 <DMA_CalcBaseAndBitshift+0x34>)
 8000fe2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b002      	add	sp, #8
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	bffdfff8 	.word	0xbffdfff8
 8000ff0:	40020000 	.word	0x40020000

08000ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001002:	e14f      	b.n	80012a4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2101      	movs	r1, #1
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	4091      	lsls	r1, r2
 800100e:	000a      	movs	r2, r1
 8001010:	4013      	ands	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d100      	bne.n	800101c <HAL_GPIO_Init+0x28>
 800101a:	e140      	b.n	800129e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d00b      	beq.n	800103c <HAL_GPIO_Init+0x48>
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b02      	cmp	r3, #2
 800102a:	d007      	beq.n	800103c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001030:	2b11      	cmp	r3, #17
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b12      	cmp	r3, #18
 800103a:	d130      	bne.n	800109e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	409a      	lsls	r2, r3
 800104a:	0013      	movs	r3, r2
 800104c:	43da      	mvns	r2, r3
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	409a      	lsls	r2, r3
 800105e:	0013      	movs	r3, r2
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001072:	2201      	movs	r2, #1
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
 8001078:	0013      	movs	r3, r2
 800107a:	43da      	mvns	r2, r3
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	091b      	lsrs	r3, r3, #4
 8001088:	2201      	movs	r2, #1
 800108a:	401a      	ands	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	409a      	lsls	r2, r3
 8001090:	0013      	movs	r3, r2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	2203      	movs	r2, #3
 80010aa:	409a      	lsls	r2, r3
 80010ac:	0013      	movs	r3, r2
 80010ae:	43da      	mvns	r2, r3
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	409a      	lsls	r2, r3
 80010c0:	0013      	movs	r3, r2
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0xea>
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b12      	cmp	r3, #18
 80010dc:	d123      	bne.n	8001126 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	08da      	lsrs	r2, r3, #3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3208      	adds	r2, #8
 80010e6:	0092      	lsls	r2, r2, #2
 80010e8:	58d3      	ldr	r3, [r2, r3]
 80010ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	2207      	movs	r2, #7
 80010f0:	4013      	ands	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	220f      	movs	r2, #15
 80010f6:	409a      	lsls	r2, r3
 80010f8:	0013      	movs	r3, r2
 80010fa:	43da      	mvns	r2, r3
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	691a      	ldr	r2, [r3, #16]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	2107      	movs	r1, #7
 800110a:	400b      	ands	r3, r1
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	409a      	lsls	r2, r3
 8001110:	0013      	movs	r3, r2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	08da      	lsrs	r2, r3, #3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3208      	adds	r2, #8
 8001120:	0092      	lsls	r2, r2, #2
 8001122:	6939      	ldr	r1, [r7, #16]
 8001124:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	2203      	movs	r2, #3
 8001132:	409a      	lsls	r2, r3
 8001134:	0013      	movs	r3, r2
 8001136:	43da      	mvns	r2, r3
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2203      	movs	r2, #3
 8001144:	401a      	ands	r2, r3
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	409a      	lsls	r2, r3
 800114c:	0013      	movs	r3, r2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	2380      	movs	r3, #128	; 0x80
 8001160:	055b      	lsls	r3, r3, #21
 8001162:	4013      	ands	r3, r2
 8001164:	d100      	bne.n	8001168 <HAL_GPIO_Init+0x174>
 8001166:	e09a      	b.n	800129e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001168:	4b54      	ldr	r3, [pc, #336]	; (80012bc <HAL_GPIO_Init+0x2c8>)
 800116a:	699a      	ldr	r2, [r3, #24]
 800116c:	4b53      	ldr	r3, [pc, #332]	; (80012bc <HAL_GPIO_Init+0x2c8>)
 800116e:	2101      	movs	r1, #1
 8001170:	430a      	orrs	r2, r1
 8001172:	619a      	str	r2, [r3, #24]
 8001174:	4b51      	ldr	r3, [pc, #324]	; (80012bc <HAL_GPIO_Init+0x2c8>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	2201      	movs	r2, #1
 800117a:	4013      	ands	r3, r2
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001180:	4a4f      	ldr	r2, [pc, #316]	; (80012c0 <HAL_GPIO_Init+0x2cc>)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	089b      	lsrs	r3, r3, #2
 8001186:	3302      	adds	r3, #2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	589b      	ldr	r3, [r3, r2]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	2203      	movs	r2, #3
 8001192:	4013      	ands	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	220f      	movs	r2, #15
 8001198:	409a      	lsls	r2, r3
 800119a:	0013      	movs	r3, r2
 800119c:	43da      	mvns	r2, r3
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	2390      	movs	r3, #144	; 0x90
 80011a8:	05db      	lsls	r3, r3, #23
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d013      	beq.n	80011d6 <HAL_GPIO_Init+0x1e2>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a44      	ldr	r2, [pc, #272]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d00d      	beq.n	80011d2 <HAL_GPIO_Init+0x1de>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a43      	ldr	r2, [pc, #268]	; (80012c8 <HAL_GPIO_Init+0x2d4>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d007      	beq.n	80011ce <HAL_GPIO_Init+0x1da>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a42      	ldr	r2, [pc, #264]	; (80012cc <HAL_GPIO_Init+0x2d8>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d101      	bne.n	80011ca <HAL_GPIO_Init+0x1d6>
 80011c6:	2303      	movs	r3, #3
 80011c8:	e006      	b.n	80011d8 <HAL_GPIO_Init+0x1e4>
 80011ca:	2305      	movs	r3, #5
 80011cc:	e004      	b.n	80011d8 <HAL_GPIO_Init+0x1e4>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e002      	b.n	80011d8 <HAL_GPIO_Init+0x1e4>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <HAL_GPIO_Init+0x1e4>
 80011d6:	2300      	movs	r3, #0
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	2103      	movs	r1, #3
 80011dc:	400a      	ands	r2, r1
 80011de:	0092      	lsls	r2, r2, #2
 80011e0:	4093      	lsls	r3, r2
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011e8:	4935      	ldr	r1, [pc, #212]	; (80012c0 <HAL_GPIO_Init+0x2cc>)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	089b      	lsrs	r3, r3, #2
 80011ee:	3302      	adds	r3, #2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f6:	4b36      	ldr	r3, [pc, #216]	; (80012d0 <HAL_GPIO_Init+0x2dc>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	43da      	mvns	r2, r3
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	025b      	lsls	r3, r3, #9
 800120e:	4013      	ands	r3, r2
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4313      	orrs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800121a:	4b2d      	ldr	r3, [pc, #180]	; (80012d0 <HAL_GPIO_Init+0x2dc>)
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001220:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <HAL_GPIO_Init+0x2dc>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	43da      	mvns	r2, r3
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	029b      	lsls	r3, r3, #10
 8001238:	4013      	ands	r3, r2
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001244:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <HAL_GPIO_Init+0x2dc>)
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <HAL_GPIO_Init+0x2dc>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	43da      	mvns	r2, r3
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	035b      	lsls	r3, r3, #13
 8001262:	4013      	ands	r3, r2
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800126e:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <HAL_GPIO_Init+0x2dc>)
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <HAL_GPIO_Init+0x2dc>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	43da      	mvns	r2, r3
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	039b      	lsls	r3, r3, #14
 800128c:	4013      	ands	r3, r2
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001298:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <HAL_GPIO_Init+0x2dc>)
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	3301      	adds	r3, #1
 80012a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	40da      	lsrs	r2, r3
 80012ac:	1e13      	subs	r3, r2, #0
 80012ae:	d000      	beq.n	80012b2 <HAL_GPIO_Init+0x2be>
 80012b0:	e6a8      	b.n	8001004 <HAL_GPIO_Init+0x10>
  } 
}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b006      	add	sp, #24
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40010000 	.word	0x40010000
 80012c4:	48000400 	.word	0x48000400
 80012c8:	48000800 	.word	0x48000800
 80012cc:	48000c00 	.word	0x48000c00
 80012d0:	40010400 	.word	0x40010400

080012d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	000a      	movs	r2, r1
 80012de:	1cbb      	adds	r3, r7, #2
 80012e0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	1cba      	adds	r2, r7, #2
 80012e8:	8812      	ldrh	r2, [r2, #0]
 80012ea:	4013      	ands	r3, r2
 80012ec:	d004      	beq.n	80012f8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80012ee:	230f      	movs	r3, #15
 80012f0:	18fb      	adds	r3, r7, r3
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
 80012f6:	e003      	b.n	8001300 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012f8:	230f      	movs	r3, #15
 80012fa:	18fb      	adds	r3, r7, r3
 80012fc:	2200      	movs	r2, #0
 80012fe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001300:	230f      	movs	r3, #15
 8001302:	18fb      	adds	r3, r7, r3
 8001304:	781b      	ldrb	r3, [r3, #0]
  }
 8001306:	0018      	movs	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	b004      	add	sp, #16
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	0008      	movs	r0, r1
 8001318:	0011      	movs	r1, r2
 800131a:	1cbb      	adds	r3, r7, #2
 800131c:	1c02      	adds	r2, r0, #0
 800131e:	801a      	strh	r2, [r3, #0]
 8001320:	1c7b      	adds	r3, r7, #1
 8001322:	1c0a      	adds	r2, r1, #0
 8001324:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001326:	1c7b      	adds	r3, r7, #1
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d004      	beq.n	8001338 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800132e:	1cbb      	adds	r3, r7, #2
 8001330:	881a      	ldrh	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001336:	e003      	b.n	8001340 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001338:	1cbb      	adds	r3, r7, #2
 800133a:	881a      	ldrh	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001340:	46c0      	nop			; (mov r8, r8)
 8001342:	46bd      	mov	sp, r7
 8001344:	b002      	add	sp, #8
 8001346:	bd80      	pop	{r7, pc}

08001348 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e303      	b.n	8001962 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2201      	movs	r2, #1
 8001360:	4013      	ands	r3, r2
 8001362:	d100      	bne.n	8001366 <HAL_RCC_OscConfig+0x1e>
 8001364:	e08d      	b.n	8001482 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001366:	4bc4      	ldr	r3, [pc, #784]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	220c      	movs	r2, #12
 800136c:	4013      	ands	r3, r2
 800136e:	2b04      	cmp	r3, #4
 8001370:	d00e      	beq.n	8001390 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001372:	4bc1      	ldr	r3, [pc, #772]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	220c      	movs	r2, #12
 8001378:	4013      	ands	r3, r2
 800137a:	2b08      	cmp	r3, #8
 800137c:	d116      	bne.n	80013ac <HAL_RCC_OscConfig+0x64>
 800137e:	4bbe      	ldr	r3, [pc, #760]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	025b      	lsls	r3, r3, #9
 8001386:	401a      	ands	r2, r3
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	025b      	lsls	r3, r3, #9
 800138c:	429a      	cmp	r2, r3
 800138e:	d10d      	bne.n	80013ac <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001390:	4bb9      	ldr	r3, [pc, #740]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	2380      	movs	r3, #128	; 0x80
 8001396:	029b      	lsls	r3, r3, #10
 8001398:	4013      	ands	r3, r2
 800139a:	d100      	bne.n	800139e <HAL_RCC_OscConfig+0x56>
 800139c:	e070      	b.n	8001480 <HAL_RCC_OscConfig+0x138>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d000      	beq.n	80013a8 <HAL_RCC_OscConfig+0x60>
 80013a6:	e06b      	b.n	8001480 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e2da      	b.n	8001962 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d107      	bne.n	80013c4 <HAL_RCC_OscConfig+0x7c>
 80013b4:	4bb0      	ldr	r3, [pc, #704]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4baf      	ldr	r3, [pc, #700]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 80013ba:	2180      	movs	r1, #128	; 0x80
 80013bc:	0249      	lsls	r1, r1, #9
 80013be:	430a      	orrs	r2, r1
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	e02f      	b.n	8001424 <HAL_RCC_OscConfig+0xdc>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d10c      	bne.n	80013e6 <HAL_RCC_OscConfig+0x9e>
 80013cc:	4baa      	ldr	r3, [pc, #680]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4ba9      	ldr	r3, [pc, #676]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 80013d2:	49aa      	ldr	r1, [pc, #680]	; (800167c <HAL_RCC_OscConfig+0x334>)
 80013d4:	400a      	ands	r2, r1
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	4ba7      	ldr	r3, [pc, #668]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4ba6      	ldr	r3, [pc, #664]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 80013de:	49a8      	ldr	r1, [pc, #672]	; (8001680 <HAL_RCC_OscConfig+0x338>)
 80013e0:	400a      	ands	r2, r1
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	e01e      	b.n	8001424 <HAL_RCC_OscConfig+0xdc>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b05      	cmp	r3, #5
 80013ec:	d10e      	bne.n	800140c <HAL_RCC_OscConfig+0xc4>
 80013ee:	4ba2      	ldr	r3, [pc, #648]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4ba1      	ldr	r3, [pc, #644]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 80013f4:	2180      	movs	r1, #128	; 0x80
 80013f6:	02c9      	lsls	r1, r1, #11
 80013f8:	430a      	orrs	r2, r1
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	4b9e      	ldr	r3, [pc, #632]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b9d      	ldr	r3, [pc, #628]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 8001402:	2180      	movs	r1, #128	; 0x80
 8001404:	0249      	lsls	r1, r1, #9
 8001406:	430a      	orrs	r2, r1
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	e00b      	b.n	8001424 <HAL_RCC_OscConfig+0xdc>
 800140c:	4b9a      	ldr	r3, [pc, #616]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b99      	ldr	r3, [pc, #612]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 8001412:	499a      	ldr	r1, [pc, #616]	; (800167c <HAL_RCC_OscConfig+0x334>)
 8001414:	400a      	ands	r2, r1
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	4b97      	ldr	r3, [pc, #604]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b96      	ldr	r3, [pc, #600]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 800141e:	4998      	ldr	r1, [pc, #608]	; (8001680 <HAL_RCC_OscConfig+0x338>)
 8001420:	400a      	ands	r2, r1
 8001422:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d014      	beq.n	8001456 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fb62 	bl	8000af4 <HAL_GetTick>
 8001430:	0003      	movs	r3, r0
 8001432:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001436:	f7ff fb5d 	bl	8000af4 <HAL_GetTick>
 800143a:	0002      	movs	r2, r0
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b64      	cmp	r3, #100	; 0x64
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e28c      	b.n	8001962 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001448:	4b8b      	ldr	r3, [pc, #556]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	029b      	lsls	r3, r3, #10
 8001450:	4013      	ands	r3, r2
 8001452:	d0f0      	beq.n	8001436 <HAL_RCC_OscConfig+0xee>
 8001454:	e015      	b.n	8001482 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001456:	f7ff fb4d 	bl	8000af4 <HAL_GetTick>
 800145a:	0003      	movs	r3, r0
 800145c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001460:	f7ff fb48 	bl	8000af4 <HAL_GetTick>
 8001464:	0002      	movs	r2, r0
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b64      	cmp	r3, #100	; 0x64
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e277      	b.n	8001962 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001472:	4b81      	ldr	r3, [pc, #516]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	029b      	lsls	r3, r3, #10
 800147a:	4013      	ands	r3, r2
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0x118>
 800147e:	e000      	b.n	8001482 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001480:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2202      	movs	r2, #2
 8001488:	4013      	ands	r3, r2
 800148a:	d100      	bne.n	800148e <HAL_RCC_OscConfig+0x146>
 800148c:	e069      	b.n	8001562 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800148e:	4b7a      	ldr	r3, [pc, #488]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	220c      	movs	r2, #12
 8001494:	4013      	ands	r3, r2
 8001496:	d00b      	beq.n	80014b0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001498:	4b77      	ldr	r3, [pc, #476]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	220c      	movs	r2, #12
 800149e:	4013      	ands	r3, r2
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d11c      	bne.n	80014de <HAL_RCC_OscConfig+0x196>
 80014a4:	4b74      	ldr	r3, [pc, #464]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	2380      	movs	r3, #128	; 0x80
 80014aa:	025b      	lsls	r3, r3, #9
 80014ac:	4013      	ands	r3, r2
 80014ae:	d116      	bne.n	80014de <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b0:	4b71      	ldr	r3, [pc, #452]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2202      	movs	r2, #2
 80014b6:	4013      	ands	r3, r2
 80014b8:	d005      	beq.n	80014c6 <HAL_RCC_OscConfig+0x17e>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d001      	beq.n	80014c6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e24d      	b.n	8001962 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c6:	4b6c      	ldr	r3, [pc, #432]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	22f8      	movs	r2, #248	; 0xf8
 80014cc:	4393      	bics	r3, r2
 80014ce:	0019      	movs	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	00da      	lsls	r2, r3, #3
 80014d6:	4b68      	ldr	r3, [pc, #416]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 80014d8:	430a      	orrs	r2, r1
 80014da:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014dc:	e041      	b.n	8001562 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d024      	beq.n	8001530 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e6:	4b64      	ldr	r3, [pc, #400]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4b63      	ldr	r3, [pc, #396]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 80014ec:	2101      	movs	r1, #1
 80014ee:	430a      	orrs	r2, r1
 80014f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f2:	f7ff faff 	bl	8000af4 <HAL_GetTick>
 80014f6:	0003      	movs	r3, r0
 80014f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014fc:	f7ff fafa 	bl	8000af4 <HAL_GetTick>
 8001500:	0002      	movs	r2, r0
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e229      	b.n	8001962 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150e:	4b5a      	ldr	r3, [pc, #360]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2202      	movs	r2, #2
 8001514:	4013      	ands	r3, r2
 8001516:	d0f1      	beq.n	80014fc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001518:	4b57      	ldr	r3, [pc, #348]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	22f8      	movs	r2, #248	; 0xf8
 800151e:	4393      	bics	r3, r2
 8001520:	0019      	movs	r1, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	00da      	lsls	r2, r3, #3
 8001528:	4b53      	ldr	r3, [pc, #332]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 800152a:	430a      	orrs	r2, r1
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	e018      	b.n	8001562 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001530:	4b51      	ldr	r3, [pc, #324]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b50      	ldr	r3, [pc, #320]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 8001536:	2101      	movs	r1, #1
 8001538:	438a      	bics	r2, r1
 800153a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff fada 	bl	8000af4 <HAL_GetTick>
 8001540:	0003      	movs	r3, r0
 8001542:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001546:	f7ff fad5 	bl	8000af4 <HAL_GetTick>
 800154a:	0002      	movs	r2, r0
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e204      	b.n	8001962 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001558:	4b47      	ldr	r3, [pc, #284]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2202      	movs	r2, #2
 800155e:	4013      	ands	r3, r2
 8001560:	d1f1      	bne.n	8001546 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2208      	movs	r2, #8
 8001568:	4013      	ands	r3, r2
 800156a:	d036      	beq.n	80015da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d019      	beq.n	80015a8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001574:	4b40      	ldr	r3, [pc, #256]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 8001576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001578:	4b3f      	ldr	r3, [pc, #252]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 800157a:	2101      	movs	r1, #1
 800157c:	430a      	orrs	r2, r1
 800157e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001580:	f7ff fab8 	bl	8000af4 <HAL_GetTick>
 8001584:	0003      	movs	r3, r0
 8001586:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800158a:	f7ff fab3 	bl	8000af4 <HAL_GetTick>
 800158e:	0002      	movs	r2, r0
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e1e2      	b.n	8001962 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159c:	4b36      	ldr	r3, [pc, #216]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 800159e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a0:	2202      	movs	r2, #2
 80015a2:	4013      	ands	r3, r2
 80015a4:	d0f1      	beq.n	800158a <HAL_RCC_OscConfig+0x242>
 80015a6:	e018      	b.n	80015da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a8:	4b33      	ldr	r3, [pc, #204]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 80015aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015ac:	4b32      	ldr	r3, [pc, #200]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 80015ae:	2101      	movs	r1, #1
 80015b0:	438a      	bics	r2, r1
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b4:	f7ff fa9e 	bl	8000af4 <HAL_GetTick>
 80015b8:	0003      	movs	r3, r0
 80015ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015be:	f7ff fa99 	bl	8000af4 <HAL_GetTick>
 80015c2:	0002      	movs	r2, r0
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e1c8      	b.n	8001962 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d0:	4b29      	ldr	r3, [pc, #164]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	2202      	movs	r2, #2
 80015d6:	4013      	ands	r3, r2
 80015d8:	d1f1      	bne.n	80015be <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2204      	movs	r2, #4
 80015e0:	4013      	ands	r3, r2
 80015e2:	d100      	bne.n	80015e6 <HAL_RCC_OscConfig+0x29e>
 80015e4:	e0b6      	b.n	8001754 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e6:	231f      	movs	r3, #31
 80015e8:	18fb      	adds	r3, r7, r3
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ee:	4b22      	ldr	r3, [pc, #136]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 80015f0:	69da      	ldr	r2, [r3, #28]
 80015f2:	2380      	movs	r3, #128	; 0x80
 80015f4:	055b      	lsls	r3, r3, #21
 80015f6:	4013      	ands	r3, r2
 80015f8:	d111      	bne.n	800161e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 80015fc:	69da      	ldr	r2, [r3, #28]
 80015fe:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 8001600:	2180      	movs	r1, #128	; 0x80
 8001602:	0549      	lsls	r1, r1, #21
 8001604:	430a      	orrs	r2, r1
 8001606:	61da      	str	r2, [r3, #28]
 8001608:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 800160a:	69da      	ldr	r2, [r3, #28]
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	055b      	lsls	r3, r3, #21
 8001610:	4013      	ands	r3, r2
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001616:	231f      	movs	r3, #31
 8001618:	18fb      	adds	r3, r7, r3
 800161a:	2201      	movs	r2, #1
 800161c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161e:	4b19      	ldr	r3, [pc, #100]	; (8001684 <HAL_RCC_OscConfig+0x33c>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	2380      	movs	r3, #128	; 0x80
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4013      	ands	r3, r2
 8001628:	d11a      	bne.n	8001660 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800162a:	4b16      	ldr	r3, [pc, #88]	; (8001684 <HAL_RCC_OscConfig+0x33c>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <HAL_RCC_OscConfig+0x33c>)
 8001630:	2180      	movs	r1, #128	; 0x80
 8001632:	0049      	lsls	r1, r1, #1
 8001634:	430a      	orrs	r2, r1
 8001636:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001638:	f7ff fa5c 	bl	8000af4 <HAL_GetTick>
 800163c:	0003      	movs	r3, r0
 800163e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001642:	f7ff fa57 	bl	8000af4 <HAL_GetTick>
 8001646:	0002      	movs	r2, r0
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b64      	cmp	r3, #100	; 0x64
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e186      	b.n	8001962 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_RCC_OscConfig+0x33c>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4013      	ands	r3, r2
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d10f      	bne.n	8001688 <HAL_RCC_OscConfig+0x340>
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 800166a:	6a1a      	ldr	r2, [r3, #32]
 800166c:	4b02      	ldr	r3, [pc, #8]	; (8001678 <HAL_RCC_OscConfig+0x330>)
 800166e:	2101      	movs	r1, #1
 8001670:	430a      	orrs	r2, r1
 8001672:	621a      	str	r2, [r3, #32]
 8001674:	e036      	b.n	80016e4 <HAL_RCC_OscConfig+0x39c>
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	40021000 	.word	0x40021000
 800167c:	fffeffff 	.word	0xfffeffff
 8001680:	fffbffff 	.word	0xfffbffff
 8001684:	40007000 	.word	0x40007000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10c      	bne.n	80016aa <HAL_RCC_OscConfig+0x362>
 8001690:	4bb6      	ldr	r3, [pc, #728]	; (800196c <HAL_RCC_OscConfig+0x624>)
 8001692:	6a1a      	ldr	r2, [r3, #32]
 8001694:	4bb5      	ldr	r3, [pc, #724]	; (800196c <HAL_RCC_OscConfig+0x624>)
 8001696:	2101      	movs	r1, #1
 8001698:	438a      	bics	r2, r1
 800169a:	621a      	str	r2, [r3, #32]
 800169c:	4bb3      	ldr	r3, [pc, #716]	; (800196c <HAL_RCC_OscConfig+0x624>)
 800169e:	6a1a      	ldr	r2, [r3, #32]
 80016a0:	4bb2      	ldr	r3, [pc, #712]	; (800196c <HAL_RCC_OscConfig+0x624>)
 80016a2:	2104      	movs	r1, #4
 80016a4:	438a      	bics	r2, r1
 80016a6:	621a      	str	r2, [r3, #32]
 80016a8:	e01c      	b.n	80016e4 <HAL_RCC_OscConfig+0x39c>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b05      	cmp	r3, #5
 80016b0:	d10c      	bne.n	80016cc <HAL_RCC_OscConfig+0x384>
 80016b2:	4bae      	ldr	r3, [pc, #696]	; (800196c <HAL_RCC_OscConfig+0x624>)
 80016b4:	6a1a      	ldr	r2, [r3, #32]
 80016b6:	4bad      	ldr	r3, [pc, #692]	; (800196c <HAL_RCC_OscConfig+0x624>)
 80016b8:	2104      	movs	r1, #4
 80016ba:	430a      	orrs	r2, r1
 80016bc:	621a      	str	r2, [r3, #32]
 80016be:	4bab      	ldr	r3, [pc, #684]	; (800196c <HAL_RCC_OscConfig+0x624>)
 80016c0:	6a1a      	ldr	r2, [r3, #32]
 80016c2:	4baa      	ldr	r3, [pc, #680]	; (800196c <HAL_RCC_OscConfig+0x624>)
 80016c4:	2101      	movs	r1, #1
 80016c6:	430a      	orrs	r2, r1
 80016c8:	621a      	str	r2, [r3, #32]
 80016ca:	e00b      	b.n	80016e4 <HAL_RCC_OscConfig+0x39c>
 80016cc:	4ba7      	ldr	r3, [pc, #668]	; (800196c <HAL_RCC_OscConfig+0x624>)
 80016ce:	6a1a      	ldr	r2, [r3, #32]
 80016d0:	4ba6      	ldr	r3, [pc, #664]	; (800196c <HAL_RCC_OscConfig+0x624>)
 80016d2:	2101      	movs	r1, #1
 80016d4:	438a      	bics	r2, r1
 80016d6:	621a      	str	r2, [r3, #32]
 80016d8:	4ba4      	ldr	r3, [pc, #656]	; (800196c <HAL_RCC_OscConfig+0x624>)
 80016da:	6a1a      	ldr	r2, [r3, #32]
 80016dc:	4ba3      	ldr	r3, [pc, #652]	; (800196c <HAL_RCC_OscConfig+0x624>)
 80016de:	2104      	movs	r1, #4
 80016e0:	438a      	bics	r2, r1
 80016e2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d014      	beq.n	8001716 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ec:	f7ff fa02 	bl	8000af4 <HAL_GetTick>
 80016f0:	0003      	movs	r3, r0
 80016f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f4:	e009      	b.n	800170a <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016f6:	f7ff f9fd 	bl	8000af4 <HAL_GetTick>
 80016fa:	0002      	movs	r2, r0
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	4a9b      	ldr	r2, [pc, #620]	; (8001970 <HAL_RCC_OscConfig+0x628>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e12b      	b.n	8001962 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800170a:	4b98      	ldr	r3, [pc, #608]	; (800196c <HAL_RCC_OscConfig+0x624>)
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	2202      	movs	r2, #2
 8001710:	4013      	ands	r3, r2
 8001712:	d0f0      	beq.n	80016f6 <HAL_RCC_OscConfig+0x3ae>
 8001714:	e013      	b.n	800173e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001716:	f7ff f9ed 	bl	8000af4 <HAL_GetTick>
 800171a:	0003      	movs	r3, r0
 800171c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800171e:	e009      	b.n	8001734 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001720:	f7ff f9e8 	bl	8000af4 <HAL_GetTick>
 8001724:	0002      	movs	r2, r0
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	4a91      	ldr	r2, [pc, #580]	; (8001970 <HAL_RCC_OscConfig+0x628>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e116      	b.n	8001962 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001734:	4b8d      	ldr	r3, [pc, #564]	; (800196c <HAL_RCC_OscConfig+0x624>)
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	2202      	movs	r2, #2
 800173a:	4013      	ands	r3, r2
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800173e:	231f      	movs	r3, #31
 8001740:	18fb      	adds	r3, r7, r3
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d105      	bne.n	8001754 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001748:	4b88      	ldr	r3, [pc, #544]	; (800196c <HAL_RCC_OscConfig+0x624>)
 800174a:	69da      	ldr	r2, [r3, #28]
 800174c:	4b87      	ldr	r3, [pc, #540]	; (800196c <HAL_RCC_OscConfig+0x624>)
 800174e:	4989      	ldr	r1, [pc, #548]	; (8001974 <HAL_RCC_OscConfig+0x62c>)
 8001750:	400a      	ands	r2, r1
 8001752:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2210      	movs	r2, #16
 800175a:	4013      	ands	r3, r2
 800175c:	d063      	beq.n	8001826 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d12a      	bne.n	80017bc <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001766:	4b81      	ldr	r3, [pc, #516]	; (800196c <HAL_RCC_OscConfig+0x624>)
 8001768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800176a:	4b80      	ldr	r3, [pc, #512]	; (800196c <HAL_RCC_OscConfig+0x624>)
 800176c:	2104      	movs	r1, #4
 800176e:	430a      	orrs	r2, r1
 8001770:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001772:	4b7e      	ldr	r3, [pc, #504]	; (800196c <HAL_RCC_OscConfig+0x624>)
 8001774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001776:	4b7d      	ldr	r3, [pc, #500]	; (800196c <HAL_RCC_OscConfig+0x624>)
 8001778:	2101      	movs	r1, #1
 800177a:	430a      	orrs	r2, r1
 800177c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177e:	f7ff f9b9 	bl	8000af4 <HAL_GetTick>
 8001782:	0003      	movs	r3, r0
 8001784:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001788:	f7ff f9b4 	bl	8000af4 <HAL_GetTick>
 800178c:	0002      	movs	r2, r0
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e0e3      	b.n	8001962 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800179a:	4b74      	ldr	r3, [pc, #464]	; (800196c <HAL_RCC_OscConfig+0x624>)
 800179c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800179e:	2202      	movs	r2, #2
 80017a0:	4013      	ands	r3, r2
 80017a2:	d0f1      	beq.n	8001788 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017a4:	4b71      	ldr	r3, [pc, #452]	; (800196c <HAL_RCC_OscConfig+0x624>)
 80017a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a8:	22f8      	movs	r2, #248	; 0xf8
 80017aa:	4393      	bics	r3, r2
 80017ac:	0019      	movs	r1, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	00da      	lsls	r2, r3, #3
 80017b4:	4b6d      	ldr	r3, [pc, #436]	; (800196c <HAL_RCC_OscConfig+0x624>)
 80017b6:	430a      	orrs	r2, r1
 80017b8:	635a      	str	r2, [r3, #52]	; 0x34
 80017ba:	e034      	b.n	8001826 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	3305      	adds	r3, #5
 80017c2:	d111      	bne.n	80017e8 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80017c4:	4b69      	ldr	r3, [pc, #420]	; (800196c <HAL_RCC_OscConfig+0x624>)
 80017c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017c8:	4b68      	ldr	r3, [pc, #416]	; (800196c <HAL_RCC_OscConfig+0x624>)
 80017ca:	2104      	movs	r1, #4
 80017cc:	438a      	bics	r2, r1
 80017ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017d0:	4b66      	ldr	r3, [pc, #408]	; (800196c <HAL_RCC_OscConfig+0x624>)
 80017d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d4:	22f8      	movs	r2, #248	; 0xf8
 80017d6:	4393      	bics	r3, r2
 80017d8:	0019      	movs	r1, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	00da      	lsls	r2, r3, #3
 80017e0:	4b62      	ldr	r3, [pc, #392]	; (800196c <HAL_RCC_OscConfig+0x624>)
 80017e2:	430a      	orrs	r2, r1
 80017e4:	635a      	str	r2, [r3, #52]	; 0x34
 80017e6:	e01e      	b.n	8001826 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017e8:	4b60      	ldr	r3, [pc, #384]	; (800196c <HAL_RCC_OscConfig+0x624>)
 80017ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ec:	4b5f      	ldr	r3, [pc, #380]	; (800196c <HAL_RCC_OscConfig+0x624>)
 80017ee:	2104      	movs	r1, #4
 80017f0:	430a      	orrs	r2, r1
 80017f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80017f4:	4b5d      	ldr	r3, [pc, #372]	; (800196c <HAL_RCC_OscConfig+0x624>)
 80017f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017f8:	4b5c      	ldr	r3, [pc, #368]	; (800196c <HAL_RCC_OscConfig+0x624>)
 80017fa:	2101      	movs	r1, #1
 80017fc:	438a      	bics	r2, r1
 80017fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001800:	f7ff f978 	bl	8000af4 <HAL_GetTick>
 8001804:	0003      	movs	r3, r0
 8001806:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800180a:	f7ff f973 	bl	8000af4 <HAL_GetTick>
 800180e:	0002      	movs	r2, r0
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e0a2      	b.n	8001962 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800181c:	4b53      	ldr	r3, [pc, #332]	; (800196c <HAL_RCC_OscConfig+0x624>)
 800181e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001820:	2202      	movs	r2, #2
 8001822:	4013      	ands	r3, r2
 8001824:	d1f1      	bne.n	800180a <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d100      	bne.n	8001830 <HAL_RCC_OscConfig+0x4e8>
 800182e:	e097      	b.n	8001960 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001830:	4b4e      	ldr	r3, [pc, #312]	; (800196c <HAL_RCC_OscConfig+0x624>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	220c      	movs	r2, #12
 8001836:	4013      	ands	r3, r2
 8001838:	2b08      	cmp	r3, #8
 800183a:	d100      	bne.n	800183e <HAL_RCC_OscConfig+0x4f6>
 800183c:	e06b      	b.n	8001916 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d14c      	bne.n	80018e0 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001846:	4b49      	ldr	r3, [pc, #292]	; (800196c <HAL_RCC_OscConfig+0x624>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	4b48      	ldr	r3, [pc, #288]	; (800196c <HAL_RCC_OscConfig+0x624>)
 800184c:	494a      	ldr	r1, [pc, #296]	; (8001978 <HAL_RCC_OscConfig+0x630>)
 800184e:	400a      	ands	r2, r1
 8001850:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001852:	f7ff f94f 	bl	8000af4 <HAL_GetTick>
 8001856:	0003      	movs	r3, r0
 8001858:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800185c:	f7ff f94a 	bl	8000af4 <HAL_GetTick>
 8001860:	0002      	movs	r2, r0
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e079      	b.n	8001962 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800186e:	4b3f      	ldr	r3, [pc, #252]	; (800196c <HAL_RCC_OscConfig+0x624>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	049b      	lsls	r3, r3, #18
 8001876:	4013      	ands	r3, r2
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800187a:	4b3c      	ldr	r3, [pc, #240]	; (800196c <HAL_RCC_OscConfig+0x624>)
 800187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187e:	220f      	movs	r2, #15
 8001880:	4393      	bics	r3, r2
 8001882:	0019      	movs	r1, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001888:	4b38      	ldr	r3, [pc, #224]	; (800196c <HAL_RCC_OscConfig+0x624>)
 800188a:	430a      	orrs	r2, r1
 800188c:	62da      	str	r2, [r3, #44]	; 0x2c
 800188e:	4b37      	ldr	r3, [pc, #220]	; (800196c <HAL_RCC_OscConfig+0x624>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	4a3a      	ldr	r2, [pc, #232]	; (800197c <HAL_RCC_OscConfig+0x634>)
 8001894:	4013      	ands	r3, r2
 8001896:	0019      	movs	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	431a      	orrs	r2, r3
 80018a2:	4b32      	ldr	r3, [pc, #200]	; (800196c <HAL_RCC_OscConfig+0x624>)
 80018a4:	430a      	orrs	r2, r1
 80018a6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a8:	4b30      	ldr	r3, [pc, #192]	; (800196c <HAL_RCC_OscConfig+0x624>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b2f      	ldr	r3, [pc, #188]	; (800196c <HAL_RCC_OscConfig+0x624>)
 80018ae:	2180      	movs	r1, #128	; 0x80
 80018b0:	0449      	lsls	r1, r1, #17
 80018b2:	430a      	orrs	r2, r1
 80018b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b6:	f7ff f91d 	bl	8000af4 <HAL_GetTick>
 80018ba:	0003      	movs	r3, r0
 80018bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c0:	f7ff f918 	bl	8000af4 <HAL_GetTick>
 80018c4:	0002      	movs	r2, r0
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e047      	b.n	8001962 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018d2:	4b26      	ldr	r3, [pc, #152]	; (800196c <HAL_RCC_OscConfig+0x624>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	049b      	lsls	r3, r3, #18
 80018da:	4013      	ands	r3, r2
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0x578>
 80018de:	e03f      	b.n	8001960 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e0:	4b22      	ldr	r3, [pc, #136]	; (800196c <HAL_RCC_OscConfig+0x624>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b21      	ldr	r3, [pc, #132]	; (800196c <HAL_RCC_OscConfig+0x624>)
 80018e6:	4924      	ldr	r1, [pc, #144]	; (8001978 <HAL_RCC_OscConfig+0x630>)
 80018e8:	400a      	ands	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7ff f902 	bl	8000af4 <HAL_GetTick>
 80018f0:	0003      	movs	r3, r0
 80018f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f6:	f7ff f8fd 	bl	8000af4 <HAL_GetTick>
 80018fa:	0002      	movs	r2, r0
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e02c      	b.n	8001962 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001908:	4b18      	ldr	r3, [pc, #96]	; (800196c <HAL_RCC_OscConfig+0x624>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	049b      	lsls	r3, r3, #18
 8001910:	4013      	ands	r3, r2
 8001912:	d1f0      	bne.n	80018f6 <HAL_RCC_OscConfig+0x5ae>
 8001914:	e024      	b.n	8001960 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d101      	bne.n	8001922 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e01f      	b.n	8001962 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001922:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_RCC_OscConfig+0x624>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001928:	4b10      	ldr	r3, [pc, #64]	; (800196c <HAL_RCC_OscConfig+0x624>)
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	025b      	lsls	r3, r3, #9
 8001934:	401a      	ands	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	429a      	cmp	r2, r3
 800193c:	d10e      	bne.n	800195c <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	220f      	movs	r2, #15
 8001942:	401a      	ands	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d107      	bne.n	800195c <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	23f0      	movs	r3, #240	; 0xf0
 8001950:	039b      	lsls	r3, r3, #14
 8001952:	401a      	ands	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001958:	429a      	cmp	r2, r3
 800195a:	d001      	beq.n	8001960 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e000      	b.n	8001962 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	0018      	movs	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	b008      	add	sp, #32
 8001968:	bd80      	pop	{r7, pc}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	40021000 	.word	0x40021000
 8001970:	00001388 	.word	0x00001388
 8001974:	efffffff 	.word	0xefffffff
 8001978:	feffffff 	.word	0xfeffffff
 800197c:	ffc2ffff 	.word	0xffc2ffff

08001980 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0b3      	b.n	8001afc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001994:	4b5b      	ldr	r3, [pc, #364]	; (8001b04 <HAL_RCC_ClockConfig+0x184>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2201      	movs	r2, #1
 800199a:	4013      	ands	r3, r2
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d911      	bls.n	80019c6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a2:	4b58      	ldr	r3, [pc, #352]	; (8001b04 <HAL_RCC_ClockConfig+0x184>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2201      	movs	r2, #1
 80019a8:	4393      	bics	r3, r2
 80019aa:	0019      	movs	r1, r3
 80019ac:	4b55      	ldr	r3, [pc, #340]	; (8001b04 <HAL_RCC_ClockConfig+0x184>)
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b4:	4b53      	ldr	r3, [pc, #332]	; (8001b04 <HAL_RCC_ClockConfig+0x184>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2201      	movs	r2, #1
 80019ba:	4013      	ands	r3, r2
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d001      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e09a      	b.n	8001afc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2202      	movs	r2, #2
 80019cc:	4013      	ands	r3, r2
 80019ce:	d015      	beq.n	80019fc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2204      	movs	r2, #4
 80019d6:	4013      	ands	r3, r2
 80019d8:	d006      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019da:	4b4b      	ldr	r3, [pc, #300]	; (8001b08 <HAL_RCC_ClockConfig+0x188>)
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	4b4a      	ldr	r3, [pc, #296]	; (8001b08 <HAL_RCC_ClockConfig+0x188>)
 80019e0:	21e0      	movs	r1, #224	; 0xe0
 80019e2:	00c9      	lsls	r1, r1, #3
 80019e4:	430a      	orrs	r2, r1
 80019e6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e8:	4b47      	ldr	r3, [pc, #284]	; (8001b08 <HAL_RCC_ClockConfig+0x188>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	22f0      	movs	r2, #240	; 0xf0
 80019ee:	4393      	bics	r3, r2
 80019f0:	0019      	movs	r1, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	4b44      	ldr	r3, [pc, #272]	; (8001b08 <HAL_RCC_ClockConfig+0x188>)
 80019f8:	430a      	orrs	r2, r1
 80019fa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2201      	movs	r2, #1
 8001a02:	4013      	ands	r3, r2
 8001a04:	d040      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d107      	bne.n	8001a1e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0e:	4b3e      	ldr	r3, [pc, #248]	; (8001b08 <HAL_RCC_ClockConfig+0x188>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	2380      	movs	r3, #128	; 0x80
 8001a14:	029b      	lsls	r3, r3, #10
 8001a16:	4013      	ands	r3, r2
 8001a18:	d114      	bne.n	8001a44 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e06e      	b.n	8001afc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d107      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a26:	4b38      	ldr	r3, [pc, #224]	; (8001b08 <HAL_RCC_ClockConfig+0x188>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	049b      	lsls	r3, r3, #18
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d108      	bne.n	8001a44 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e062      	b.n	8001afc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a36:	4b34      	ldr	r3, [pc, #208]	; (8001b08 <HAL_RCC_ClockConfig+0x188>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d101      	bne.n	8001a44 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e05b      	b.n	8001afc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a44:	4b30      	ldr	r3, [pc, #192]	; (8001b08 <HAL_RCC_ClockConfig+0x188>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2203      	movs	r2, #3
 8001a4a:	4393      	bics	r3, r2
 8001a4c:	0019      	movs	r1, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	4b2d      	ldr	r3, [pc, #180]	; (8001b08 <HAL_RCC_ClockConfig+0x188>)
 8001a54:	430a      	orrs	r2, r1
 8001a56:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a58:	f7ff f84c 	bl	8000af4 <HAL_GetTick>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a60:	e009      	b.n	8001a76 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a62:	f7ff f847 	bl	8000af4 <HAL_GetTick>
 8001a66:	0002      	movs	r2, r0
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	4a27      	ldr	r2, [pc, #156]	; (8001b0c <HAL_RCC_ClockConfig+0x18c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e042      	b.n	8001afc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a76:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <HAL_RCC_ClockConfig+0x188>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	401a      	ands	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d1ec      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a88:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <HAL_RCC_ClockConfig+0x184>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	4013      	ands	r3, r2
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d211      	bcs.n	8001aba <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a96:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <HAL_RCC_ClockConfig+0x184>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	4393      	bics	r3, r2
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <HAL_RCC_ClockConfig+0x184>)
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa8:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <HAL_RCC_ClockConfig+0x184>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2201      	movs	r2, #1
 8001aae:	4013      	ands	r3, r2
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d001      	beq.n	8001aba <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e020      	b.n	8001afc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2204      	movs	r2, #4
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d009      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac4:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <HAL_RCC_ClockConfig+0x188>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	4a11      	ldr	r2, [pc, #68]	; (8001b10 <HAL_RCC_ClockConfig+0x190>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	0019      	movs	r1, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <HAL_RCC_ClockConfig+0x188>)
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ad8:	f000 f820 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 8001adc:	0001      	movs	r1, r0
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <HAL_RCC_ClockConfig+0x188>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	091b      	lsrs	r3, r3, #4
 8001ae4:	220f      	movs	r2, #15
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <HAL_RCC_ClockConfig+0x194>)
 8001aea:	5cd3      	ldrb	r3, [r2, r3]
 8001aec:	000a      	movs	r2, r1
 8001aee:	40da      	lsrs	r2, r3
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_RCC_ClockConfig+0x198>)
 8001af2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001af4:	2000      	movs	r0, #0
 8001af6:	f7fe ffb7 	bl	8000a68 <HAL_InitTick>
  
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	0018      	movs	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b004      	add	sp, #16
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40022000 	.word	0x40022000
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	00001388 	.word	0x00001388
 8001b10:	fffff8ff 	.word	0xfffff8ff
 8001b14:	0800329c 	.word	0x0800329c
 8001b18:	20000000 	.word	0x20000000

08001b1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b1c:	b590      	push	{r4, r7, lr}
 8001b1e:	b08f      	sub	sp, #60	; 0x3c
 8001b20:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001b22:	2314      	movs	r3, #20
 8001b24:	18fb      	adds	r3, r7, r3
 8001b26:	4a2b      	ldr	r2, [pc, #172]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b28:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b2a:	c313      	stmia	r3!, {r0, r1, r4}
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001b30:	1d3b      	adds	r3, r7, #4
 8001b32:	4a29      	ldr	r2, [pc, #164]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b34:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b36:	c313      	stmia	r3!, {r0, r1, r4}
 8001b38:	6812      	ldr	r2, [r2, #0]
 8001b3a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b40:	2300      	movs	r3, #0
 8001b42:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b44:	2300      	movs	r3, #0
 8001b46:	637b      	str	r3, [r7, #52]	; 0x34
 8001b48:	2300      	movs	r3, #0
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001b50:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b58:	220c      	movs	r2, #12
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	d002      	beq.n	8001b66 <HAL_RCC_GetSysClockFreq+0x4a>
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d003      	beq.n	8001b6c <HAL_RCC_GetSysClockFreq+0x50>
 8001b64:	e02d      	b.n	8001bc2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b66:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b68:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b6a:	e02d      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b6e:	0c9b      	lsrs	r3, r3, #18
 8001b70:	220f      	movs	r2, #15
 8001b72:	4013      	ands	r3, r2
 8001b74:	2214      	movs	r2, #20
 8001b76:	18ba      	adds	r2, r7, r2
 8001b78:	5cd3      	ldrb	r3, [r2, r3]
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b7c:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	220f      	movs	r2, #15
 8001b82:	4013      	ands	r3, r2
 8001b84:	1d3a      	adds	r2, r7, #4
 8001b86:	5cd3      	ldrb	r3, [r2, r3]
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	025b      	lsls	r3, r3, #9
 8001b90:	4013      	ands	r3, r2
 8001b92:	d009      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b96:	4812      	ldr	r0, [pc, #72]	; (8001be0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b98:	f7fe fab6 	bl	8000108 <__udivsi3>
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	001a      	movs	r2, r3
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	4353      	muls	r3, r2
 8001ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ba6:	e009      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001ba8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001baa:	000a      	movs	r2, r1
 8001bac:	0152      	lsls	r2, r2, #5
 8001bae:	1a52      	subs	r2, r2, r1
 8001bb0:	0193      	lsls	r3, r2, #6
 8001bb2:	1a9b      	subs	r3, r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	185b      	adds	r3, r3, r1
 8001bb8:	021b      	lsls	r3, r3, #8
 8001bba:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bbe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bc0:	e002      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bc2:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001bc4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bc6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001bca:	0018      	movs	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	b00f      	add	sp, #60	; 0x3c
 8001bd0:	bd90      	pop	{r4, r7, pc}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	0800327c 	.word	0x0800327c
 8001bd8:	0800328c 	.word	0x0800328c
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	007a1200 	.word	0x007a1200

08001be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001be8:	4b02      	ldr	r3, [pc, #8]	; (8001bf4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	0018      	movs	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	20000000 	.word	0x20000000

08001bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001bfc:	f7ff fff2 	bl	8001be4 <HAL_RCC_GetHCLKFreq>
 8001c00:	0001      	movs	r1, r0
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	0a1b      	lsrs	r3, r3, #8
 8001c08:	2207      	movs	r2, #7
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c0e:	5cd3      	ldrb	r3, [r2, r3]
 8001c10:	40d9      	lsrs	r1, r3
 8001c12:	000b      	movs	r3, r1
}    
 8001c14:	0018      	movs	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	080032ac 	.word	0x080032ac

08001c24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e044      	b.n	8001cc0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d107      	bne.n	8001c4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2270      	movs	r2, #112	; 0x70
 8001c42:	2100      	movs	r1, #0
 8001c44:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f7fe fdad 	bl	80007a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2224      	movs	r2, #36	; 0x24
 8001c52:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2101      	movs	r1, #1
 8001c60:	438a      	bics	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	0018      	movs	r0, r3
 8001c68:	f000 f988 	bl	8001f7c <UART_SetConfig>
 8001c6c:	0003      	movs	r3, r0
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e024      	b.n	8001cc0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	0018      	movs	r0, r3
 8001c82:	f000 fb01 	bl	8002288 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	490d      	ldr	r1, [pc, #52]	; (8001cc8 <HAL_UART_Init+0xa4>)
 8001c92:	400a      	ands	r2, r1
 8001c94:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2108      	movs	r1, #8
 8001ca2:	438a      	bics	r2, r1
 8001ca4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f000 fb99 	bl	80023f0 <UART_CheckIdleState>
 8001cbe:	0003      	movs	r3, r0
}
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b002      	add	sp, #8
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	fffff7ff 	.word	0xfffff7ff

08001ccc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af02      	add	r7, sp, #8
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	603b      	str	r3, [r7, #0]
 8001cd8:	1dbb      	adds	r3, r7, #6
 8001cda:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce0:	2b20      	cmp	r3, #32
 8001ce2:	d000      	beq.n	8001ce6 <HAL_UART_Transmit+0x1a>
 8001ce4:	e095      	b.n	8001e12 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_UART_Transmit+0x28>
 8001cec:	1dbb      	adds	r3, r7, #6
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e08d      	b.n	8001e14 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	015b      	lsls	r3, r3, #5
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d109      	bne.n	8001d18 <HAL_UART_Transmit+0x4c>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d105      	bne.n	8001d18 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	4013      	ands	r3, r2
 8001d12:	d001      	beq.n	8001d18 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e07d      	b.n	8001e14 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2270      	movs	r2, #112	; 0x70
 8001d1c:	5c9b      	ldrb	r3, [r3, r2]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_UART_Transmit+0x5a>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e076      	b.n	8001e14 <HAL_UART_Transmit+0x148>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2270      	movs	r2, #112	; 0x70
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2221      	movs	r2, #33	; 0x21
 8001d38:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001d3a:	f7fe fedb 	bl	8000af4 <HAL_GetTick>
 8001d3e:	0003      	movs	r3, r0
 8001d40:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	1dba      	adds	r2, r7, #6
 8001d46:	2150      	movs	r1, #80	; 0x50
 8001d48:	8812      	ldrh	r2, [r2, #0]
 8001d4a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	1dba      	adds	r2, r7, #6
 8001d50:	2152      	movs	r1, #82	; 0x52
 8001d52:	8812      	ldrh	r2, [r2, #0]
 8001d54:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	2380      	movs	r3, #128	; 0x80
 8001d5c:	015b      	lsls	r3, r3, #5
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d108      	bne.n	8001d74 <HAL_UART_Transmit+0xa8>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d104      	bne.n	8001d74 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	61bb      	str	r3, [r7, #24]
 8001d72:	e003      	b.n	8001d7c <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001d7c:	e02d      	b.n	8001dda <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	0013      	movs	r3, r2
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2180      	movs	r1, #128	; 0x80
 8001d8c:	f000 fb76 	bl	800247c <UART_WaitOnFlagUntilTimeout>
 8001d90:	1e03      	subs	r3, r0, #0
 8001d92:	d001      	beq.n	8001d98 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e03d      	b.n	8001e14 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10b      	bne.n	8001db6 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	881a      	ldrh	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	05d2      	lsls	r2, r2, #23
 8001da8:	0dd2      	lsrs	r2, r2, #23
 8001daa:	b292      	uxth	r2, r2
 8001dac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	3302      	adds	r3, #2
 8001db2:	61bb      	str	r3, [r7, #24]
 8001db4:	e008      	b.n	8001dc8 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	781a      	ldrb	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	b292      	uxth	r2, r2
 8001dc0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2252      	movs	r2, #82	; 0x52
 8001dcc:	5a9b      	ldrh	r3, [r3, r2]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	b299      	uxth	r1, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2252      	movs	r2, #82	; 0x52
 8001dd8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2252      	movs	r2, #82	; 0x52
 8001dde:	5a9b      	ldrh	r3, [r3, r2]
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1cb      	bne.n	8001d7e <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	0013      	movs	r3, r2
 8001df0:	2200      	movs	r2, #0
 8001df2:	2140      	movs	r1, #64	; 0x40
 8001df4:	f000 fb42 	bl	800247c <UART_WaitOnFlagUntilTimeout>
 8001df8:	1e03      	subs	r3, r0, #0
 8001dfa:	d001      	beq.n	8001e00 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e009      	b.n	8001e14 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2220      	movs	r2, #32
 8001e04:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2270      	movs	r2, #112	; 0x70
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e000      	b.n	8001e14 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8001e12:	2302      	movs	r3, #2
  }
}
 8001e14:	0018      	movs	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	b008      	add	sp, #32
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	1dbb      	adds	r3, r7, #6
 8001e28:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e2e:	2b20      	cmp	r3, #32
 8001e30:	d000      	beq.n	8001e34 <HAL_UART_Receive_DMA+0x18>
 8001e32:	e07f      	b.n	8001f34 <HAL_UART_Receive_DMA+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_UART_Receive_DMA+0x26>
 8001e3a:	1dbb      	adds	r3, r7, #6
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e077      	b.n	8001f36 <HAL_UART_Receive_DMA+0x11a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	2380      	movs	r3, #128	; 0x80
 8001e4c:	015b      	lsls	r3, r3, #5
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d109      	bne.n	8001e66 <HAL_UART_Receive_DMA+0x4a>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d105      	bne.n	8001e66 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d001      	beq.n	8001e66 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e067      	b.n	8001f36 <HAL_UART_Receive_DMA+0x11a>
      }
    }

    __HAL_LOCK(huart);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2270      	movs	r2, #112	; 0x70
 8001e6a:	5c9b      	ldrb	r3, [r3, r2]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <HAL_UART_Receive_DMA+0x58>
 8001e70:	2302      	movs	r3, #2
 8001e72:	e060      	b.n	8001f36 <HAL_UART_Receive_DMA+0x11a>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2270      	movs	r2, #112	; 0x70
 8001e78:	2101      	movs	r1, #1
 8001e7a:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1dba      	adds	r2, r7, #6
 8001e86:	2158      	movs	r1, #88	; 0x58
 8001e88:	8812      	ldrh	r2, [r2, #0]
 8001e8a:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2222      	movs	r2, #34	; 0x22
 8001e96:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d02a      	beq.n	8001ef6 <HAL_UART_Receive_DMA+0xda>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ea4:	4a26      	ldr	r2, [pc, #152]	; (8001f40 <HAL_UART_Receive_DMA+0x124>)
 8001ea6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eac:	4a25      	ldr	r2, [pc, #148]	; (8001f44 <HAL_UART_Receive_DMA+0x128>)
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eb4:	4a24      	ldr	r2, [pc, #144]	; (8001f48 <HAL_UART_Receive_DMA+0x12c>)
 8001eb6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	3324      	adds	r3, #36	; 0x24
 8001eca:	0019      	movs	r1, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed0:	001a      	movs	r2, r3
 8001ed2:	1dbb      	adds	r3, r7, #6
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	f7fe ff3d 	bl	8000d54 <HAL_DMA_Start_IT>
 8001eda:	1e03      	subs	r3, r0, #0
 8001edc:	d00b      	beq.n	8001ef6 <HAL_UART_Receive_DMA+0xda>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2210      	movs	r2, #16
 8001ee2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2270      	movs	r2, #112	; 0x70
 8001ee8:	2100      	movs	r1, #0
 8001eea:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e01f      	b.n	8001f36 <HAL_UART_Receive_DMA+0x11a>
      }
    }
    __HAL_UNLOCK(huart);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2270      	movs	r2, #112	; 0x70
 8001efa:	2100      	movs	r1, #0
 8001efc:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2180      	movs	r1, #128	; 0x80
 8001f0a:	0049      	lsls	r1, r1, #1
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2140      	movs	r1, #64	; 0x40
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	e000      	b.n	8001f36 <HAL_UART_Receive_DMA+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8001f34:	2302      	movs	r3, #2
  }
}
 8001f36:	0018      	movs	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	b004      	add	sp, #16
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	080025e1 	.word	0x080025e1
 8001f44:	08002649 	.word	0x08002649
 8001f48:	08002667 	.word	0x08002667

08001f4c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8001f54:	46c0      	nop			; (mov r8, r8)
 8001f56:	46bd      	mov	sp, r7
 8001f58:	b002      	add	sp, #8
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8001f64:	46c0      	nop			; (mov r8, r8)
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b002      	add	sp, #8
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001f74:	46c0      	nop			; (mov r8, r8)
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b002      	add	sp, #8
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f88:	2317      	movs	r3, #23
 8001f8a:	18fb      	adds	r3, r7, r3
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4aad      	ldr	r2, [pc, #692]	; (8002264 <UART_SetConfig+0x2e8>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4aa8      	ldr	r2, [pc, #672]	; (8002268 <UART_SetConfig+0x2ec>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	0019      	movs	r1, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	4a9f      	ldr	r2, [pc, #636]	; (800226c <UART_SetConfig+0x2f0>)
 8001fee:	4013      	ands	r3, r2
 8001ff0:	0019      	movs	r1, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a9b      	ldr	r2, [pc, #620]	; (8002270 <UART_SetConfig+0x2f4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d125      	bne.n	8002052 <UART_SetConfig+0xd6>
 8002006:	4b9b      	ldr	r3, [pc, #620]	; (8002274 <UART_SetConfig+0x2f8>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	2203      	movs	r2, #3
 800200c:	4013      	ands	r3, r2
 800200e:	2b01      	cmp	r3, #1
 8002010:	d00f      	beq.n	8002032 <UART_SetConfig+0xb6>
 8002012:	d304      	bcc.n	800201e <UART_SetConfig+0xa2>
 8002014:	2b02      	cmp	r3, #2
 8002016:	d011      	beq.n	800203c <UART_SetConfig+0xc0>
 8002018:	2b03      	cmp	r3, #3
 800201a:	d005      	beq.n	8002028 <UART_SetConfig+0xac>
 800201c:	e013      	b.n	8002046 <UART_SetConfig+0xca>
 800201e:	231f      	movs	r3, #31
 8002020:	18fb      	adds	r3, r7, r3
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
 8002026:	e022      	b.n	800206e <UART_SetConfig+0xf2>
 8002028:	231f      	movs	r3, #31
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	2202      	movs	r2, #2
 800202e:	701a      	strb	r2, [r3, #0]
 8002030:	e01d      	b.n	800206e <UART_SetConfig+0xf2>
 8002032:	231f      	movs	r3, #31
 8002034:	18fb      	adds	r3, r7, r3
 8002036:	2204      	movs	r2, #4
 8002038:	701a      	strb	r2, [r3, #0]
 800203a:	e018      	b.n	800206e <UART_SetConfig+0xf2>
 800203c:	231f      	movs	r3, #31
 800203e:	18fb      	adds	r3, r7, r3
 8002040:	2208      	movs	r2, #8
 8002042:	701a      	strb	r2, [r3, #0]
 8002044:	e013      	b.n	800206e <UART_SetConfig+0xf2>
 8002046:	231f      	movs	r3, #31
 8002048:	18fb      	adds	r3, r7, r3
 800204a:	2210      	movs	r2, #16
 800204c:	701a      	strb	r2, [r3, #0]
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	e00d      	b.n	800206e <UART_SetConfig+0xf2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a88      	ldr	r2, [pc, #544]	; (8002278 <UART_SetConfig+0x2fc>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d104      	bne.n	8002066 <UART_SetConfig+0xea>
 800205c:	231f      	movs	r3, #31
 800205e:	18fb      	adds	r3, r7, r3
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
 8002064:	e003      	b.n	800206e <UART_SetConfig+0xf2>
 8002066:	231f      	movs	r3, #31
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	2210      	movs	r2, #16
 800206c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69da      	ldr	r2, [r3, #28]
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	429a      	cmp	r2, r3
 8002078:	d000      	beq.n	800207c <UART_SetConfig+0x100>
 800207a:	e07d      	b.n	8002178 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 800207c:	231f      	movs	r3, #31
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d01c      	beq.n	80020c0 <UART_SetConfig+0x144>
 8002086:	dc02      	bgt.n	800208e <UART_SetConfig+0x112>
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <UART_SetConfig+0x11c>
 800208c:	e04b      	b.n	8002126 <UART_SetConfig+0x1aa>
 800208e:	2b04      	cmp	r3, #4
 8002090:	d025      	beq.n	80020de <UART_SetConfig+0x162>
 8002092:	2b08      	cmp	r3, #8
 8002094:	d037      	beq.n	8002106 <UART_SetConfig+0x18a>
 8002096:	e046      	b.n	8002126 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002098:	f7ff fdae 	bl	8001bf8 <HAL_RCC_GetPCLK1Freq>
 800209c:	0003      	movs	r3, r0
 800209e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	005a      	lsls	r2, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	085b      	lsrs	r3, r3, #1
 80020aa:	18d2      	adds	r2, r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	0019      	movs	r1, r3
 80020b2:	0010      	movs	r0, r2
 80020b4:	f7fe f828 	bl	8000108 <__udivsi3>
 80020b8:	0003      	movs	r3, r0
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	61bb      	str	r3, [r7, #24]
        break;
 80020be:	e037      	b.n	8002130 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	085b      	lsrs	r3, r3, #1
 80020c6:	4a6d      	ldr	r2, [pc, #436]	; (800227c <UART_SetConfig+0x300>)
 80020c8:	189a      	adds	r2, r3, r2
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	0019      	movs	r1, r3
 80020d0:	0010      	movs	r0, r2
 80020d2:	f7fe f819 	bl	8000108 <__udivsi3>
 80020d6:	0003      	movs	r3, r0
 80020d8:	b29b      	uxth	r3, r3
 80020da:	61bb      	str	r3, [r7, #24]
        break;
 80020dc:	e028      	b.n	8002130 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80020de:	f7ff fd1d 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 80020e2:	0003      	movs	r3, r0
 80020e4:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	005a      	lsls	r2, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	085b      	lsrs	r3, r3, #1
 80020f0:	18d2      	adds	r2, r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	0019      	movs	r1, r3
 80020f8:	0010      	movs	r0, r2
 80020fa:	f7fe f805 	bl	8000108 <__udivsi3>
 80020fe:	0003      	movs	r3, r0
 8002100:	b29b      	uxth	r3, r3
 8002102:	61bb      	str	r3, [r7, #24]
        break;
 8002104:	e014      	b.n	8002130 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	085b      	lsrs	r3, r3, #1
 800210c:	2280      	movs	r2, #128	; 0x80
 800210e:	0252      	lsls	r2, r2, #9
 8002110:	189a      	adds	r2, r3, r2
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	0019      	movs	r1, r3
 8002118:	0010      	movs	r0, r2
 800211a:	f7fd fff5 	bl	8000108 <__udivsi3>
 800211e:	0003      	movs	r3, r0
 8002120:	b29b      	uxth	r3, r3
 8002122:	61bb      	str	r3, [r7, #24]
        break;
 8002124:	e004      	b.n	8002130 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8002126:	2317      	movs	r3, #23
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	2201      	movs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
        break;
 800212e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	2b0f      	cmp	r3, #15
 8002134:	d91b      	bls.n	800216e <UART_SetConfig+0x1f2>
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	4a51      	ldr	r2, [pc, #324]	; (8002280 <UART_SetConfig+0x304>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d817      	bhi.n	800216e <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	b29a      	uxth	r2, r3
 8002142:	200a      	movs	r0, #10
 8002144:	183b      	adds	r3, r7, r0
 8002146:	210f      	movs	r1, #15
 8002148:	438a      	bics	r2, r1
 800214a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	085b      	lsrs	r3, r3, #1
 8002150:	b29b      	uxth	r3, r3
 8002152:	2207      	movs	r2, #7
 8002154:	4013      	ands	r3, r2
 8002156:	b299      	uxth	r1, r3
 8002158:	183b      	adds	r3, r7, r0
 800215a:	183a      	adds	r2, r7, r0
 800215c:	8812      	ldrh	r2, [r2, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	183a      	adds	r2, r7, r0
 8002168:	8812      	ldrh	r2, [r2, #0]
 800216a:	60da      	str	r2, [r3, #12]
 800216c:	e06c      	b.n	8002248 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 800216e:	2317      	movs	r3, #23
 8002170:	18fb      	adds	r3, r7, r3
 8002172:	2201      	movs	r2, #1
 8002174:	701a      	strb	r2, [r3, #0]
 8002176:	e067      	b.n	8002248 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8002178:	231f      	movs	r3, #31
 800217a:	18fb      	adds	r3, r7, r3
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d01b      	beq.n	80021ba <UART_SetConfig+0x23e>
 8002182:	dc02      	bgt.n	800218a <UART_SetConfig+0x20e>
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <UART_SetConfig+0x218>
 8002188:	e049      	b.n	800221e <UART_SetConfig+0x2a2>
 800218a:	2b04      	cmp	r3, #4
 800218c:	d024      	beq.n	80021d8 <UART_SetConfig+0x25c>
 800218e:	2b08      	cmp	r3, #8
 8002190:	d035      	beq.n	80021fe <UART_SetConfig+0x282>
 8002192:	e044      	b.n	800221e <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002194:	f7ff fd30 	bl	8001bf8 <HAL_RCC_GetPCLK1Freq>
 8002198:	0003      	movs	r3, r0
 800219a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	085a      	lsrs	r2, r3, #1
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	18d2      	adds	r2, r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	0019      	movs	r1, r3
 80021ac:	0010      	movs	r0, r2
 80021ae:	f7fd ffab 	bl	8000108 <__udivsi3>
 80021b2:	0003      	movs	r3, r0
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	61bb      	str	r3, [r7, #24]
        break;
 80021b8:	e036      	b.n	8002228 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	085b      	lsrs	r3, r3, #1
 80021c0:	4a30      	ldr	r2, [pc, #192]	; (8002284 <UART_SetConfig+0x308>)
 80021c2:	189a      	adds	r2, r3, r2
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	0019      	movs	r1, r3
 80021ca:	0010      	movs	r0, r2
 80021cc:	f7fd ff9c 	bl	8000108 <__udivsi3>
 80021d0:	0003      	movs	r3, r0
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	61bb      	str	r3, [r7, #24]
        break;
 80021d6:	e027      	b.n	8002228 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80021d8:	f7ff fca0 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 80021dc:	0003      	movs	r3, r0
 80021de:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	085a      	lsrs	r2, r3, #1
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	18d2      	adds	r2, r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	0019      	movs	r1, r3
 80021f0:	0010      	movs	r0, r2
 80021f2:	f7fd ff89 	bl	8000108 <__udivsi3>
 80021f6:	0003      	movs	r3, r0
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	61bb      	str	r3, [r7, #24]
        break;
 80021fc:	e014      	b.n	8002228 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	085b      	lsrs	r3, r3, #1
 8002204:	2280      	movs	r2, #128	; 0x80
 8002206:	0212      	lsls	r2, r2, #8
 8002208:	189a      	adds	r2, r3, r2
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	0019      	movs	r1, r3
 8002210:	0010      	movs	r0, r2
 8002212:	f7fd ff79 	bl	8000108 <__udivsi3>
 8002216:	0003      	movs	r3, r0
 8002218:	b29b      	uxth	r3, r3
 800221a:	61bb      	str	r3, [r7, #24]
        break;
 800221c:	e004      	b.n	8002228 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 800221e:	2317      	movs	r3, #23
 8002220:	18fb      	adds	r3, r7, r3
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]
        break;
 8002226:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	2b0f      	cmp	r3, #15
 800222c:	d908      	bls.n	8002240 <UART_SetConfig+0x2c4>
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	4a13      	ldr	r2, [pc, #76]	; (8002280 <UART_SetConfig+0x304>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d804      	bhi.n	8002240 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	e003      	b.n	8002248 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8002240:	2317      	movs	r3, #23
 8002242:	18fb      	adds	r3, r7, r3
 8002244:	2201      	movs	r2, #1
 8002246:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002254:	2317      	movs	r3, #23
 8002256:	18fb      	adds	r3, r7, r3
 8002258:	781b      	ldrb	r3, [r3, #0]
}
 800225a:	0018      	movs	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	b008      	add	sp, #32
 8002260:	bd80      	pop	{r7, pc}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	ffff69f3 	.word	0xffff69f3
 8002268:	ffffcfff 	.word	0xffffcfff
 800226c:	fffff4ff 	.word	0xfffff4ff
 8002270:	40013800 	.word	0x40013800
 8002274:	40021000 	.word	0x40021000
 8002278:	40004400 	.word	0x40004400
 800227c:	00f42400 	.word	0x00f42400
 8002280:	0000ffff 	.word	0x0000ffff
 8002284:	007a1200 	.word	0x007a1200

08002288 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	2201      	movs	r2, #1
 8002296:	4013      	ands	r3, r2
 8002298:	d00b      	beq.n	80022b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4a4a      	ldr	r2, [pc, #296]	; (80023cc <UART_AdvFeatureConfig+0x144>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	0019      	movs	r1, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	2202      	movs	r2, #2
 80022b8:	4013      	ands	r3, r2
 80022ba:	d00b      	beq.n	80022d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	4a43      	ldr	r2, [pc, #268]	; (80023d0 <UART_AdvFeatureConfig+0x148>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	0019      	movs	r1, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	2204      	movs	r2, #4
 80022da:	4013      	ands	r3, r2
 80022dc:	d00b      	beq.n	80022f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	4a3b      	ldr	r2, [pc, #236]	; (80023d4 <UART_AdvFeatureConfig+0x14c>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	0019      	movs	r1, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	2208      	movs	r2, #8
 80022fc:	4013      	ands	r3, r2
 80022fe:	d00b      	beq.n	8002318 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	4a34      	ldr	r2, [pc, #208]	; (80023d8 <UART_AdvFeatureConfig+0x150>)
 8002308:	4013      	ands	r3, r2
 800230a:	0019      	movs	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	2210      	movs	r2, #16
 800231e:	4013      	ands	r3, r2
 8002320:	d00b      	beq.n	800233a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	4a2c      	ldr	r2, [pc, #176]	; (80023dc <UART_AdvFeatureConfig+0x154>)
 800232a:	4013      	ands	r3, r2
 800232c:	0019      	movs	r1, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	2220      	movs	r2, #32
 8002340:	4013      	ands	r3, r2
 8002342:	d00b      	beq.n	800235c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	4a25      	ldr	r2, [pc, #148]	; (80023e0 <UART_AdvFeatureConfig+0x158>)
 800234c:	4013      	ands	r3, r2
 800234e:	0019      	movs	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	2240      	movs	r2, #64	; 0x40
 8002362:	4013      	ands	r3, r2
 8002364:	d01d      	beq.n	80023a2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4a1d      	ldr	r2, [pc, #116]	; (80023e4 <UART_AdvFeatureConfig+0x15c>)
 800236e:	4013      	ands	r3, r2
 8002370:	0019      	movs	r1, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002382:	2380      	movs	r3, #128	; 0x80
 8002384:	035b      	lsls	r3, r3, #13
 8002386:	429a      	cmp	r2, r3
 8002388:	d10b      	bne.n	80023a2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	4a15      	ldr	r2, [pc, #84]	; (80023e8 <UART_AdvFeatureConfig+0x160>)
 8002392:	4013      	ands	r3, r2
 8002394:	0019      	movs	r1, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	2280      	movs	r2, #128	; 0x80
 80023a8:	4013      	ands	r3, r2
 80023aa:	d00b      	beq.n	80023c4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	4a0e      	ldr	r2, [pc, #56]	; (80023ec <UART_AdvFeatureConfig+0x164>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	0019      	movs	r1, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	605a      	str	r2, [r3, #4]
  }
}
 80023c4:	46c0      	nop			; (mov r8, r8)
 80023c6:	46bd      	mov	sp, r7
 80023c8:	b002      	add	sp, #8
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	fffdffff 	.word	0xfffdffff
 80023d0:	fffeffff 	.word	0xfffeffff
 80023d4:	fffbffff 	.word	0xfffbffff
 80023d8:	ffff7fff 	.word	0xffff7fff
 80023dc:	ffffefff 	.word	0xffffefff
 80023e0:	ffffdfff 	.word	0xffffdfff
 80023e4:	ffefffff 	.word	0xffefffff
 80023e8:	ff9fffff 	.word	0xff9fffff
 80023ec:	fff7ffff 	.word	0xfff7ffff

080023f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af02      	add	r7, sp, #8
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80023fe:	f7fe fb79 	bl	8000af4 <HAL_GetTick>
 8002402:	0003      	movs	r3, r0
 8002404:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2208      	movs	r2, #8
 800240e:	4013      	ands	r3, r2
 8002410:	2b08      	cmp	r3, #8
 8002412:	d10d      	bne.n	8002430 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	0399      	lsls	r1, r3, #14
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	4b16      	ldr	r3, [pc, #88]	; (8002478 <UART_CheckIdleState+0x88>)
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	0013      	movs	r3, r2
 8002422:	2200      	movs	r2, #0
 8002424:	f000 f82a 	bl	800247c <UART_WaitOnFlagUntilTimeout>
 8002428:	1e03      	subs	r3, r0, #0
 800242a:	d001      	beq.n	8002430 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e01f      	b.n	8002470 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2204      	movs	r2, #4
 8002438:	4013      	ands	r3, r2
 800243a:	2b04      	cmp	r3, #4
 800243c:	d10d      	bne.n	800245a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	03d9      	lsls	r1, r3, #15
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <UART_CheckIdleState+0x88>)
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	0013      	movs	r3, r2
 800244c:	2200      	movs	r2, #0
 800244e:	f000 f815 	bl	800247c <UART_WaitOnFlagUntilTimeout>
 8002452:	1e03      	subs	r3, r0, #0
 8002454:	d001      	beq.n	800245a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e00a      	b.n	8002470 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2220      	movs	r2, #32
 800245e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2220      	movs	r2, #32
 8002464:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2270      	movs	r2, #112	; 0x70
 800246a:	2100      	movs	r1, #0
 800246c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	0018      	movs	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	b004      	add	sp, #16
 8002476:	bd80      	pop	{r7, pc}
 8002478:	01ffffff 	.word	0x01ffffff

0800247c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	1dfb      	adds	r3, r7, #7
 800248a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800248c:	e05d      	b.n	800254a <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	3301      	adds	r3, #1
 8002492:	d05a      	beq.n	800254a <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002494:	f7fe fb2e 	bl	8000af4 <HAL_GetTick>
 8002498:	0002      	movs	r2, r0
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d302      	bcc.n	80024aa <UART_WaitOnFlagUntilTimeout+0x2e>
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d11b      	bne.n	80024e2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	492f      	ldr	r1, [pc, #188]	; (8002574 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80024b6:	400a      	ands	r2, r1
 80024b8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2101      	movs	r1, #1
 80024c6:	438a      	bics	r2, r1
 80024c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2220      	movs	r2, #32
 80024ce:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2220      	movs	r2, #32
 80024d4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2270      	movs	r2, #112	; 0x70
 80024da:	2100      	movs	r1, #0
 80024dc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e043      	b.n	800256a <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2204      	movs	r2, #4
 80024ea:	4013      	ands	r3, r2
 80024ec:	d02d      	beq.n	800254a <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	69da      	ldr	r2, [r3, #28]
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	401a      	ands	r2, r3
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	429a      	cmp	r2, r3
 8002500:	d123      	bne.n	800254a <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2280      	movs	r2, #128	; 0x80
 8002508:	0112      	lsls	r2, r2, #4
 800250a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4917      	ldr	r1, [pc, #92]	; (8002574 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002518:	400a      	ands	r2, r1
 800251a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2101      	movs	r1, #1
 8002528:	438a      	bics	r2, r1
 800252a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2220      	movs	r2, #32
 8002530:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2220      	movs	r2, #32
 8002536:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2220      	movs	r2, #32
 800253c:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2270      	movs	r2, #112	; 0x70
 8002542:	2100      	movs	r1, #0
 8002544:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e00f      	b.n	800256a <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	4013      	ands	r3, r2
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	425a      	negs	r2, r3
 800255a:	4153      	adcs	r3, r2
 800255c:	b2db      	uxtb	r3, r3
 800255e:	001a      	movs	r2, r3
 8002560:	1dfb      	adds	r3, r7, #7
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d092      	beq.n	800248e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	0018      	movs	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	b004      	add	sp, #16
 8002570:	bd80      	pop	{r7, pc}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	fffffe5f 	.word	0xfffffe5f

08002578 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	21c0      	movs	r1, #192	; 0xc0
 800258c:	438a      	bics	r2, r1
 800258e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2220      	movs	r2, #32
 8002594:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	46bd      	mov	sp, r7
 800259a:	b002      	add	sp, #8
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	490a      	ldr	r1, [pc, #40]	; (80025dc <UART_EndRxTransfer+0x3c>)
 80025b4:	400a      	ands	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2101      	movs	r1, #1
 80025c4:	438a      	bics	r2, r1
 80025c6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2220      	movs	r2, #32
 80025cc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	661a      	str	r2, [r3, #96]	; 0x60
}
 80025d4:	46c0      	nop			; (mov r8, r8)
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b002      	add	sp, #8
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	fffffedf 	.word	0xfffffedf

080025e0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	d01e      	beq.n	8002634 <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	225a      	movs	r2, #90	; 0x5a
 80025fa:	2100      	movs	r1, #0
 80025fc:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	490e      	ldr	r1, [pc, #56]	; (8002644 <UART_DMAReceiveCplt+0x64>)
 800260a:	400a      	ands	r2, r1
 800260c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2101      	movs	r1, #1
 800261a:	438a      	bics	r2, r1
 800261c:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2140      	movs	r1, #64	; 0x40
 800262a:	438a      	bics	r2, r1
 800262c:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2220      	movs	r2, #32
 8002632:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	0018      	movs	r0, r3
 8002638:	f7ff fc88 	bl	8001f4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800263c:	46c0      	nop			; (mov r8, r8)
 800263e:	46bd      	mov	sp, r7
 8002640:	b004      	add	sp, #16
 8002642:	bd80      	pop	{r7, pc}
 8002644:	fffffeff 	.word	0xfffffeff

08002648 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	0018      	movs	r0, r3
 800265a:	f7ff fc7f 	bl	8001f5c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	46bd      	mov	sp, r7
 8002662:	b004      	add	sp, #16
 8002664:	bd80      	pop	{r7, pc}

08002666 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b086      	sub	sp, #24
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002678:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800267e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2280      	movs	r2, #128	; 0x80
 8002688:	4013      	ands	r3, r2
 800268a:	2b80      	cmp	r3, #128	; 0x80
 800268c:	d10a      	bne.n	80026a4 <UART_DMAError+0x3e>
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	2b21      	cmp	r3, #33	; 0x21
 8002692:	d107      	bne.n	80026a4 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2252      	movs	r2, #82	; 0x52
 8002698:	2100      	movs	r1, #0
 800269a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	0018      	movs	r0, r3
 80026a0:	f7ff ff6a 	bl	8002578 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2240      	movs	r2, #64	; 0x40
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b40      	cmp	r3, #64	; 0x40
 80026b0:	d10a      	bne.n	80026c8 <UART_DMAError+0x62>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2b22      	cmp	r3, #34	; 0x22
 80026b6:	d107      	bne.n	80026c8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	225a      	movs	r2, #90	; 0x5a
 80026bc:	2100      	movs	r1, #0
 80026be:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	0018      	movs	r0, r3
 80026c4:	f7ff ff6c 	bl	80025a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026cc:	2210      	movs	r2, #16
 80026ce:	431a      	orrs	r2, r3
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	0018      	movs	r0, r3
 80026d8:	f7ff fc48 	bl	8001f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026dc:	46c0      	nop			; (mov r8, r8)
 80026de:	46bd      	mov	sp, r7
 80026e0:	b006      	add	sp, #24
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <__errno>:
 80026e4:	4b01      	ldr	r3, [pc, #4]	; (80026ec <__errno+0x8>)
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	4770      	bx	lr
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	2000000c 	.word	0x2000000c

080026f0 <__libc_init_array>:
 80026f0:	b570      	push	{r4, r5, r6, lr}
 80026f2:	2600      	movs	r6, #0
 80026f4:	4d0c      	ldr	r5, [pc, #48]	; (8002728 <__libc_init_array+0x38>)
 80026f6:	4c0d      	ldr	r4, [pc, #52]	; (800272c <__libc_init_array+0x3c>)
 80026f8:	1b64      	subs	r4, r4, r5
 80026fa:	10a4      	asrs	r4, r4, #2
 80026fc:	42a6      	cmp	r6, r4
 80026fe:	d109      	bne.n	8002714 <__libc_init_array+0x24>
 8002700:	2600      	movs	r6, #0
 8002702:	f000 fd73 	bl	80031ec <_init>
 8002706:	4d0a      	ldr	r5, [pc, #40]	; (8002730 <__libc_init_array+0x40>)
 8002708:	4c0a      	ldr	r4, [pc, #40]	; (8002734 <__libc_init_array+0x44>)
 800270a:	1b64      	subs	r4, r4, r5
 800270c:	10a4      	asrs	r4, r4, #2
 800270e:	42a6      	cmp	r6, r4
 8002710:	d105      	bne.n	800271e <__libc_init_array+0x2e>
 8002712:	bd70      	pop	{r4, r5, r6, pc}
 8002714:	00b3      	lsls	r3, r6, #2
 8002716:	58eb      	ldr	r3, [r5, r3]
 8002718:	4798      	blx	r3
 800271a:	3601      	adds	r6, #1
 800271c:	e7ee      	b.n	80026fc <__libc_init_array+0xc>
 800271e:	00b3      	lsls	r3, r6, #2
 8002720:	58eb      	ldr	r3, [r5, r3]
 8002722:	4798      	blx	r3
 8002724:	3601      	adds	r6, #1
 8002726:	e7f2      	b.n	800270e <__libc_init_array+0x1e>
 8002728:	08003424 	.word	0x08003424
 800272c:	08003424 	.word	0x08003424
 8002730:	08003424 	.word	0x08003424
 8002734:	08003428 	.word	0x08003428

08002738 <memset>:
 8002738:	0003      	movs	r3, r0
 800273a:	1812      	adds	r2, r2, r0
 800273c:	4293      	cmp	r3, r2
 800273e:	d100      	bne.n	8002742 <memset+0xa>
 8002740:	4770      	bx	lr
 8002742:	7019      	strb	r1, [r3, #0]
 8002744:	3301      	adds	r3, #1
 8002746:	e7f9      	b.n	800273c <memset+0x4>

08002748 <_puts_r>:
 8002748:	b570      	push	{r4, r5, r6, lr}
 800274a:	0005      	movs	r5, r0
 800274c:	000e      	movs	r6, r1
 800274e:	2800      	cmp	r0, #0
 8002750:	d004      	beq.n	800275c <_puts_r+0x14>
 8002752:	6983      	ldr	r3, [r0, #24]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <_puts_r+0x14>
 8002758:	f000 fa98 	bl	8002c8c <__sinit>
 800275c:	69ab      	ldr	r3, [r5, #24]
 800275e:	68ac      	ldr	r4, [r5, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d102      	bne.n	800276a <_puts_r+0x22>
 8002764:	0028      	movs	r0, r5
 8002766:	f000 fa91 	bl	8002c8c <__sinit>
 800276a:	4b24      	ldr	r3, [pc, #144]	; (80027fc <_puts_r+0xb4>)
 800276c:	429c      	cmp	r4, r3
 800276e:	d10f      	bne.n	8002790 <_puts_r+0x48>
 8002770:	686c      	ldr	r4, [r5, #4]
 8002772:	89a3      	ldrh	r3, [r4, #12]
 8002774:	071b      	lsls	r3, r3, #28
 8002776:	d502      	bpl.n	800277e <_puts_r+0x36>
 8002778:	6923      	ldr	r3, [r4, #16]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d11f      	bne.n	80027be <_puts_r+0x76>
 800277e:	0021      	movs	r1, r4
 8002780:	0028      	movs	r0, r5
 8002782:	f000 f915 	bl	80029b0 <__swsetup_r>
 8002786:	2800      	cmp	r0, #0
 8002788:	d019      	beq.n	80027be <_puts_r+0x76>
 800278a:	2001      	movs	r0, #1
 800278c:	4240      	negs	r0, r0
 800278e:	bd70      	pop	{r4, r5, r6, pc}
 8002790:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <_puts_r+0xb8>)
 8002792:	429c      	cmp	r4, r3
 8002794:	d101      	bne.n	800279a <_puts_r+0x52>
 8002796:	68ac      	ldr	r4, [r5, #8]
 8002798:	e7eb      	b.n	8002772 <_puts_r+0x2a>
 800279a:	4b1a      	ldr	r3, [pc, #104]	; (8002804 <_puts_r+0xbc>)
 800279c:	429c      	cmp	r4, r3
 800279e:	d1e8      	bne.n	8002772 <_puts_r+0x2a>
 80027a0:	68ec      	ldr	r4, [r5, #12]
 80027a2:	e7e6      	b.n	8002772 <_puts_r+0x2a>
 80027a4:	3601      	adds	r6, #1
 80027a6:	60a3      	str	r3, [r4, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	da04      	bge.n	80027b6 <_puts_r+0x6e>
 80027ac:	69a2      	ldr	r2, [r4, #24]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	dc16      	bgt.n	80027e0 <_puts_r+0x98>
 80027b2:	290a      	cmp	r1, #10
 80027b4:	d014      	beq.n	80027e0 <_puts_r+0x98>
 80027b6:	6823      	ldr	r3, [r4, #0]
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	6022      	str	r2, [r4, #0]
 80027bc:	7019      	strb	r1, [r3, #0]
 80027be:	68a3      	ldr	r3, [r4, #8]
 80027c0:	7831      	ldrb	r1, [r6, #0]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	2900      	cmp	r1, #0
 80027c6:	d1ed      	bne.n	80027a4 <_puts_r+0x5c>
 80027c8:	60a3      	str	r3, [r4, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	da0f      	bge.n	80027ee <_puts_r+0xa6>
 80027ce:	0022      	movs	r2, r4
 80027d0:	310a      	adds	r1, #10
 80027d2:	0028      	movs	r0, r5
 80027d4:	f000 f896 	bl	8002904 <__swbuf_r>
 80027d8:	1c43      	adds	r3, r0, #1
 80027da:	d0d6      	beq.n	800278a <_puts_r+0x42>
 80027dc:	200a      	movs	r0, #10
 80027de:	e7d6      	b.n	800278e <_puts_r+0x46>
 80027e0:	0022      	movs	r2, r4
 80027e2:	0028      	movs	r0, r5
 80027e4:	f000 f88e 	bl	8002904 <__swbuf_r>
 80027e8:	1c43      	adds	r3, r0, #1
 80027ea:	d1e8      	bne.n	80027be <_puts_r+0x76>
 80027ec:	e7cd      	b.n	800278a <_puts_r+0x42>
 80027ee:	200a      	movs	r0, #10
 80027f0:	6823      	ldr	r3, [r4, #0]
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	6022      	str	r2, [r4, #0]
 80027f6:	7018      	strb	r0, [r3, #0]
 80027f8:	e7c9      	b.n	800278e <_puts_r+0x46>
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	080032d8 	.word	0x080032d8
 8002800:	080032f8 	.word	0x080032f8
 8002804:	080032b8 	.word	0x080032b8

08002808 <puts>:
 8002808:	b510      	push	{r4, lr}
 800280a:	4b03      	ldr	r3, [pc, #12]	; (8002818 <puts+0x10>)
 800280c:	0001      	movs	r1, r0
 800280e:	6818      	ldr	r0, [r3, #0]
 8002810:	f7ff ff9a 	bl	8002748 <_puts_r>
 8002814:	bd10      	pop	{r4, pc}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	2000000c 	.word	0x2000000c

0800281c <strcasecmp>:
 800281c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281e:	0007      	movs	r7, r0
 8002820:	000e      	movs	r6, r1
 8002822:	783c      	ldrb	r4, [r7, #0]
 8002824:	f000 fac6 	bl	8002db4 <__locale_ctype_ptr>
 8002828:	2203      	movs	r2, #3
 800282a:	1900      	adds	r0, r0, r4
 800282c:	7843      	ldrb	r3, [r0, #1]
 800282e:	4013      	ands	r3, r2
 8002830:	2b01      	cmp	r3, #1
 8002832:	d100      	bne.n	8002836 <strcasecmp+0x1a>
 8002834:	3420      	adds	r4, #32
 8002836:	7835      	ldrb	r5, [r6, #0]
 8002838:	f000 fabc 	bl	8002db4 <__locale_ctype_ptr>
 800283c:	2203      	movs	r2, #3
 800283e:	1940      	adds	r0, r0, r5
 8002840:	7843      	ldrb	r3, [r0, #1]
 8002842:	4013      	ands	r3, r2
 8002844:	2b01      	cmp	r3, #1
 8002846:	d100      	bne.n	800284a <strcasecmp+0x2e>
 8002848:	3520      	adds	r5, #32
 800284a:	1b60      	subs	r0, r4, r5
 800284c:	d103      	bne.n	8002856 <strcasecmp+0x3a>
 800284e:	3701      	adds	r7, #1
 8002850:	3601      	adds	r6, #1
 8002852:	2d00      	cmp	r5, #0
 8002854:	d1e5      	bne.n	8002822 <strcasecmp+0x6>
 8002856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002858 <strtok>:
 8002858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800285a:	4b12      	ldr	r3, [pc, #72]	; (80028a4 <strtok+0x4c>)
 800285c:	0006      	movs	r6, r0
 800285e:	681d      	ldr	r5, [r3, #0]
 8002860:	000f      	movs	r7, r1
 8002862:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8002864:	2c00      	cmp	r4, #0
 8002866:	d116      	bne.n	8002896 <strtok+0x3e>
 8002868:	2050      	movs	r0, #80	; 0x50
 800286a:	f000 fb1d 	bl	8002ea8 <malloc>
 800286e:	65a8      	str	r0, [r5, #88]	; 0x58
 8002870:	6004      	str	r4, [r0, #0]
 8002872:	6044      	str	r4, [r0, #4]
 8002874:	6084      	str	r4, [r0, #8]
 8002876:	60c4      	str	r4, [r0, #12]
 8002878:	6104      	str	r4, [r0, #16]
 800287a:	6144      	str	r4, [r0, #20]
 800287c:	6184      	str	r4, [r0, #24]
 800287e:	6284      	str	r4, [r0, #40]	; 0x28
 8002880:	62c4      	str	r4, [r0, #44]	; 0x2c
 8002882:	6304      	str	r4, [r0, #48]	; 0x30
 8002884:	6344      	str	r4, [r0, #52]	; 0x34
 8002886:	6384      	str	r4, [r0, #56]	; 0x38
 8002888:	63c4      	str	r4, [r0, #60]	; 0x3c
 800288a:	6404      	str	r4, [r0, #64]	; 0x40
 800288c:	6444      	str	r4, [r0, #68]	; 0x44
 800288e:	6484      	str	r4, [r0, #72]	; 0x48
 8002890:	64c4      	str	r4, [r0, #76]	; 0x4c
 8002892:	7704      	strb	r4, [r0, #28]
 8002894:	6244      	str	r4, [r0, #36]	; 0x24
 8002896:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8002898:	0039      	movs	r1, r7
 800289a:	0030      	movs	r0, r6
 800289c:	2301      	movs	r3, #1
 800289e:	f000 f803 	bl	80028a8 <__strtok_r>
 80028a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028a4:	2000000c 	.word	0x2000000c

080028a8 <__strtok_r>:
 80028a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028aa:	2800      	cmp	r0, #0
 80028ac:	d104      	bne.n	80028b8 <__strtok_r+0x10>
 80028ae:	6810      	ldr	r0, [r2, #0]
 80028b0:	2800      	cmp	r0, #0
 80028b2:	d101      	bne.n	80028b8 <__strtok_r+0x10>
 80028b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028b6:	0020      	movs	r0, r4
 80028b8:	000e      	movs	r6, r1
 80028ba:	7805      	ldrb	r5, [r0, #0]
 80028bc:	1c44      	adds	r4, r0, #1
 80028be:	7837      	ldrb	r7, [r6, #0]
 80028c0:	2f00      	cmp	r7, #0
 80028c2:	d104      	bne.n	80028ce <__strtok_r+0x26>
 80028c4:	2d00      	cmp	r5, #0
 80028c6:	d110      	bne.n	80028ea <__strtok_r+0x42>
 80028c8:	6015      	str	r5, [r2, #0]
 80028ca:	0028      	movs	r0, r5
 80028cc:	e7f2      	b.n	80028b4 <__strtok_r+0xc>
 80028ce:	3601      	adds	r6, #1
 80028d0:	42bd      	cmp	r5, r7
 80028d2:	d1f4      	bne.n	80028be <__strtok_r+0x16>
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1ee      	bne.n	80028b6 <__strtok_r+0xe>
 80028d8:	6014      	str	r4, [r2, #0]
 80028da:	7003      	strb	r3, [r0, #0]
 80028dc:	e7ea      	b.n	80028b4 <__strtok_r+0xc>
 80028de:	0033      	movs	r3, r6
 80028e0:	e00d      	b.n	80028fe <__strtok_r+0x56>
 80028e2:	3501      	adds	r5, #1
 80028e4:	2f00      	cmp	r7, #0
 80028e6:	d103      	bne.n	80028f0 <__strtok_r+0x48>
 80028e8:	001c      	movs	r4, r3
 80028ea:	000d      	movs	r5, r1
 80028ec:	7826      	ldrb	r6, [r4, #0]
 80028ee:	1c63      	adds	r3, r4, #1
 80028f0:	782f      	ldrb	r7, [r5, #0]
 80028f2:	42be      	cmp	r6, r7
 80028f4:	d1f5      	bne.n	80028e2 <__strtok_r+0x3a>
 80028f6:	2e00      	cmp	r6, #0
 80028f8:	d0f1      	beq.n	80028de <__strtok_r+0x36>
 80028fa:	2100      	movs	r1, #0
 80028fc:	7021      	strb	r1, [r4, #0]
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	e7d8      	b.n	80028b4 <__strtok_r+0xc>
	...

08002904 <__swbuf_r>:
 8002904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002906:	0005      	movs	r5, r0
 8002908:	000e      	movs	r6, r1
 800290a:	0014      	movs	r4, r2
 800290c:	2800      	cmp	r0, #0
 800290e:	d004      	beq.n	800291a <__swbuf_r+0x16>
 8002910:	6983      	ldr	r3, [r0, #24]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <__swbuf_r+0x16>
 8002916:	f000 f9b9 	bl	8002c8c <__sinit>
 800291a:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <__swbuf_r+0xa0>)
 800291c:	429c      	cmp	r4, r3
 800291e:	d12d      	bne.n	800297c <__swbuf_r+0x78>
 8002920:	686c      	ldr	r4, [r5, #4]
 8002922:	69a3      	ldr	r3, [r4, #24]
 8002924:	60a3      	str	r3, [r4, #8]
 8002926:	89a3      	ldrh	r3, [r4, #12]
 8002928:	071b      	lsls	r3, r3, #28
 800292a:	d531      	bpl.n	8002990 <__swbuf_r+0x8c>
 800292c:	6923      	ldr	r3, [r4, #16]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d02e      	beq.n	8002990 <__swbuf_r+0x8c>
 8002932:	6823      	ldr	r3, [r4, #0]
 8002934:	6922      	ldr	r2, [r4, #16]
 8002936:	b2f7      	uxtb	r7, r6
 8002938:	1a98      	subs	r0, r3, r2
 800293a:	6963      	ldr	r3, [r4, #20]
 800293c:	b2f6      	uxtb	r6, r6
 800293e:	4283      	cmp	r3, r0
 8002940:	dc05      	bgt.n	800294e <__swbuf_r+0x4a>
 8002942:	0021      	movs	r1, r4
 8002944:	0028      	movs	r0, r5
 8002946:	f000 f933 	bl	8002bb0 <_fflush_r>
 800294a:	2800      	cmp	r0, #0
 800294c:	d126      	bne.n	800299c <__swbuf_r+0x98>
 800294e:	68a3      	ldr	r3, [r4, #8]
 8002950:	3001      	adds	r0, #1
 8002952:	3b01      	subs	r3, #1
 8002954:	60a3      	str	r3, [r4, #8]
 8002956:	6823      	ldr	r3, [r4, #0]
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	6022      	str	r2, [r4, #0]
 800295c:	701f      	strb	r7, [r3, #0]
 800295e:	6963      	ldr	r3, [r4, #20]
 8002960:	4283      	cmp	r3, r0
 8002962:	d004      	beq.n	800296e <__swbuf_r+0x6a>
 8002964:	89a3      	ldrh	r3, [r4, #12]
 8002966:	07db      	lsls	r3, r3, #31
 8002968:	d51a      	bpl.n	80029a0 <__swbuf_r+0x9c>
 800296a:	2e0a      	cmp	r6, #10
 800296c:	d118      	bne.n	80029a0 <__swbuf_r+0x9c>
 800296e:	0021      	movs	r1, r4
 8002970:	0028      	movs	r0, r5
 8002972:	f000 f91d 	bl	8002bb0 <_fflush_r>
 8002976:	2800      	cmp	r0, #0
 8002978:	d012      	beq.n	80029a0 <__swbuf_r+0x9c>
 800297a:	e00f      	b.n	800299c <__swbuf_r+0x98>
 800297c:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <__swbuf_r+0xa4>)
 800297e:	429c      	cmp	r4, r3
 8002980:	d101      	bne.n	8002986 <__swbuf_r+0x82>
 8002982:	68ac      	ldr	r4, [r5, #8]
 8002984:	e7cd      	b.n	8002922 <__swbuf_r+0x1e>
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <__swbuf_r+0xa8>)
 8002988:	429c      	cmp	r4, r3
 800298a:	d1ca      	bne.n	8002922 <__swbuf_r+0x1e>
 800298c:	68ec      	ldr	r4, [r5, #12]
 800298e:	e7c8      	b.n	8002922 <__swbuf_r+0x1e>
 8002990:	0021      	movs	r1, r4
 8002992:	0028      	movs	r0, r5
 8002994:	f000 f80c 	bl	80029b0 <__swsetup_r>
 8002998:	2800      	cmp	r0, #0
 800299a:	d0ca      	beq.n	8002932 <__swbuf_r+0x2e>
 800299c:	2601      	movs	r6, #1
 800299e:	4276      	negs	r6, r6
 80029a0:	0030      	movs	r0, r6
 80029a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029a4:	080032d8 	.word	0x080032d8
 80029a8:	080032f8 	.word	0x080032f8
 80029ac:	080032b8 	.word	0x080032b8

080029b0 <__swsetup_r>:
 80029b0:	4b36      	ldr	r3, [pc, #216]	; (8002a8c <__swsetup_r+0xdc>)
 80029b2:	b570      	push	{r4, r5, r6, lr}
 80029b4:	681d      	ldr	r5, [r3, #0]
 80029b6:	0006      	movs	r6, r0
 80029b8:	000c      	movs	r4, r1
 80029ba:	2d00      	cmp	r5, #0
 80029bc:	d005      	beq.n	80029ca <__swsetup_r+0x1a>
 80029be:	69ab      	ldr	r3, [r5, #24]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d102      	bne.n	80029ca <__swsetup_r+0x1a>
 80029c4:	0028      	movs	r0, r5
 80029c6:	f000 f961 	bl	8002c8c <__sinit>
 80029ca:	4b31      	ldr	r3, [pc, #196]	; (8002a90 <__swsetup_r+0xe0>)
 80029cc:	429c      	cmp	r4, r3
 80029ce:	d10f      	bne.n	80029f0 <__swsetup_r+0x40>
 80029d0:	686c      	ldr	r4, [r5, #4]
 80029d2:	230c      	movs	r3, #12
 80029d4:	5ee2      	ldrsh	r2, [r4, r3]
 80029d6:	b293      	uxth	r3, r2
 80029d8:	0719      	lsls	r1, r3, #28
 80029da:	d42d      	bmi.n	8002a38 <__swsetup_r+0x88>
 80029dc:	06d9      	lsls	r1, r3, #27
 80029de:	d411      	bmi.n	8002a04 <__swsetup_r+0x54>
 80029e0:	2309      	movs	r3, #9
 80029e2:	2001      	movs	r0, #1
 80029e4:	6033      	str	r3, [r6, #0]
 80029e6:	3337      	adds	r3, #55	; 0x37
 80029e8:	4313      	orrs	r3, r2
 80029ea:	81a3      	strh	r3, [r4, #12]
 80029ec:	4240      	negs	r0, r0
 80029ee:	bd70      	pop	{r4, r5, r6, pc}
 80029f0:	4b28      	ldr	r3, [pc, #160]	; (8002a94 <__swsetup_r+0xe4>)
 80029f2:	429c      	cmp	r4, r3
 80029f4:	d101      	bne.n	80029fa <__swsetup_r+0x4a>
 80029f6:	68ac      	ldr	r4, [r5, #8]
 80029f8:	e7eb      	b.n	80029d2 <__swsetup_r+0x22>
 80029fa:	4b27      	ldr	r3, [pc, #156]	; (8002a98 <__swsetup_r+0xe8>)
 80029fc:	429c      	cmp	r4, r3
 80029fe:	d1e8      	bne.n	80029d2 <__swsetup_r+0x22>
 8002a00:	68ec      	ldr	r4, [r5, #12]
 8002a02:	e7e6      	b.n	80029d2 <__swsetup_r+0x22>
 8002a04:	075b      	lsls	r3, r3, #29
 8002a06:	d513      	bpl.n	8002a30 <__swsetup_r+0x80>
 8002a08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a0a:	2900      	cmp	r1, #0
 8002a0c:	d008      	beq.n	8002a20 <__swsetup_r+0x70>
 8002a0e:	0023      	movs	r3, r4
 8002a10:	3344      	adds	r3, #68	; 0x44
 8002a12:	4299      	cmp	r1, r3
 8002a14:	d002      	beq.n	8002a1c <__swsetup_r+0x6c>
 8002a16:	0030      	movs	r0, r6
 8002a18:	f000 fa62 	bl	8002ee0 <_free_r>
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	6363      	str	r3, [r4, #52]	; 0x34
 8002a20:	2224      	movs	r2, #36	; 0x24
 8002a22:	89a3      	ldrh	r3, [r4, #12]
 8002a24:	4393      	bics	r3, r2
 8002a26:	81a3      	strh	r3, [r4, #12]
 8002a28:	2300      	movs	r3, #0
 8002a2a:	6063      	str	r3, [r4, #4]
 8002a2c:	6923      	ldr	r3, [r4, #16]
 8002a2e:	6023      	str	r3, [r4, #0]
 8002a30:	2308      	movs	r3, #8
 8002a32:	89a2      	ldrh	r2, [r4, #12]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	81a3      	strh	r3, [r4, #12]
 8002a38:	6923      	ldr	r3, [r4, #16]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10b      	bne.n	8002a56 <__swsetup_r+0xa6>
 8002a3e:	21a0      	movs	r1, #160	; 0xa0
 8002a40:	2280      	movs	r2, #128	; 0x80
 8002a42:	89a3      	ldrh	r3, [r4, #12]
 8002a44:	0089      	lsls	r1, r1, #2
 8002a46:	0092      	lsls	r2, r2, #2
 8002a48:	400b      	ands	r3, r1
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d003      	beq.n	8002a56 <__swsetup_r+0xa6>
 8002a4e:	0021      	movs	r1, r4
 8002a50:	0030      	movs	r0, r6
 8002a52:	f000 f9e5 	bl	8002e20 <__smakebuf_r>
 8002a56:	2301      	movs	r3, #1
 8002a58:	89a2      	ldrh	r2, [r4, #12]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d011      	beq.n	8002a82 <__swsetup_r+0xd2>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60a3      	str	r3, [r4, #8]
 8002a62:	6963      	ldr	r3, [r4, #20]
 8002a64:	425b      	negs	r3, r3
 8002a66:	61a3      	str	r3, [r4, #24]
 8002a68:	2000      	movs	r0, #0
 8002a6a:	6923      	ldr	r3, [r4, #16]
 8002a6c:	4283      	cmp	r3, r0
 8002a6e:	d1be      	bne.n	80029ee <__swsetup_r+0x3e>
 8002a70:	230c      	movs	r3, #12
 8002a72:	5ee2      	ldrsh	r2, [r4, r3]
 8002a74:	0613      	lsls	r3, r2, #24
 8002a76:	d5ba      	bpl.n	80029ee <__swsetup_r+0x3e>
 8002a78:	2340      	movs	r3, #64	; 0x40
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	81a3      	strh	r3, [r4, #12]
 8002a7e:	3801      	subs	r0, #1
 8002a80:	e7b5      	b.n	80029ee <__swsetup_r+0x3e>
 8002a82:	0792      	lsls	r2, r2, #30
 8002a84:	d400      	bmi.n	8002a88 <__swsetup_r+0xd8>
 8002a86:	6963      	ldr	r3, [r4, #20]
 8002a88:	60a3      	str	r3, [r4, #8]
 8002a8a:	e7ed      	b.n	8002a68 <__swsetup_r+0xb8>
 8002a8c:	2000000c 	.word	0x2000000c
 8002a90:	080032d8 	.word	0x080032d8
 8002a94:	080032f8 	.word	0x080032f8
 8002a98:	080032b8 	.word	0x080032b8

08002a9c <__sflush_r>:
 8002a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a9e:	898a      	ldrh	r2, [r1, #12]
 8002aa0:	0005      	movs	r5, r0
 8002aa2:	000c      	movs	r4, r1
 8002aa4:	0713      	lsls	r3, r2, #28
 8002aa6:	d460      	bmi.n	8002b6a <__sflush_r+0xce>
 8002aa8:	684b      	ldr	r3, [r1, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	dc04      	bgt.n	8002ab8 <__sflush_r+0x1c>
 8002aae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	dc01      	bgt.n	8002ab8 <__sflush_r+0x1c>
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002ab8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002aba:	2f00      	cmp	r7, #0
 8002abc:	d0fa      	beq.n	8002ab4 <__sflush_r+0x18>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	682e      	ldr	r6, [r5, #0]
 8002ac2:	602b      	str	r3, [r5, #0]
 8002ac4:	2380      	movs	r3, #128	; 0x80
 8002ac6:	015b      	lsls	r3, r3, #5
 8002ac8:	6a21      	ldr	r1, [r4, #32]
 8002aca:	401a      	ands	r2, r3
 8002acc:	d034      	beq.n	8002b38 <__sflush_r+0x9c>
 8002ace:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ad0:	89a3      	ldrh	r3, [r4, #12]
 8002ad2:	075b      	lsls	r3, r3, #29
 8002ad4:	d506      	bpl.n	8002ae4 <__sflush_r+0x48>
 8002ad6:	6863      	ldr	r3, [r4, #4]
 8002ad8:	1ac0      	subs	r0, r0, r3
 8002ada:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <__sflush_r+0x48>
 8002ae0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ae2:	1ac0      	subs	r0, r0, r3
 8002ae4:	0002      	movs	r2, r0
 8002ae6:	6a21      	ldr	r1, [r4, #32]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	0028      	movs	r0, r5
 8002aec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002aee:	47b8      	blx	r7
 8002af0:	89a1      	ldrh	r1, [r4, #12]
 8002af2:	1c43      	adds	r3, r0, #1
 8002af4:	d106      	bne.n	8002b04 <__sflush_r+0x68>
 8002af6:	682b      	ldr	r3, [r5, #0]
 8002af8:	2b1d      	cmp	r3, #29
 8002afa:	d830      	bhi.n	8002b5e <__sflush_r+0xc2>
 8002afc:	4a2b      	ldr	r2, [pc, #172]	; (8002bac <__sflush_r+0x110>)
 8002afe:	40da      	lsrs	r2, r3
 8002b00:	07d3      	lsls	r3, r2, #31
 8002b02:	d52c      	bpl.n	8002b5e <__sflush_r+0xc2>
 8002b04:	2300      	movs	r3, #0
 8002b06:	6063      	str	r3, [r4, #4]
 8002b08:	6923      	ldr	r3, [r4, #16]
 8002b0a:	6023      	str	r3, [r4, #0]
 8002b0c:	04cb      	lsls	r3, r1, #19
 8002b0e:	d505      	bpl.n	8002b1c <__sflush_r+0x80>
 8002b10:	1c43      	adds	r3, r0, #1
 8002b12:	d102      	bne.n	8002b1a <__sflush_r+0x7e>
 8002b14:	682b      	ldr	r3, [r5, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d100      	bne.n	8002b1c <__sflush_r+0x80>
 8002b1a:	6560      	str	r0, [r4, #84]	; 0x54
 8002b1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b1e:	602e      	str	r6, [r5, #0]
 8002b20:	2900      	cmp	r1, #0
 8002b22:	d0c7      	beq.n	8002ab4 <__sflush_r+0x18>
 8002b24:	0023      	movs	r3, r4
 8002b26:	3344      	adds	r3, #68	; 0x44
 8002b28:	4299      	cmp	r1, r3
 8002b2a:	d002      	beq.n	8002b32 <__sflush_r+0x96>
 8002b2c:	0028      	movs	r0, r5
 8002b2e:	f000 f9d7 	bl	8002ee0 <_free_r>
 8002b32:	2000      	movs	r0, #0
 8002b34:	6360      	str	r0, [r4, #52]	; 0x34
 8002b36:	e7be      	b.n	8002ab6 <__sflush_r+0x1a>
 8002b38:	2301      	movs	r3, #1
 8002b3a:	0028      	movs	r0, r5
 8002b3c:	47b8      	blx	r7
 8002b3e:	1c43      	adds	r3, r0, #1
 8002b40:	d1c6      	bne.n	8002ad0 <__sflush_r+0x34>
 8002b42:	682b      	ldr	r3, [r5, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0c3      	beq.n	8002ad0 <__sflush_r+0x34>
 8002b48:	2b1d      	cmp	r3, #29
 8002b4a:	d001      	beq.n	8002b50 <__sflush_r+0xb4>
 8002b4c:	2b16      	cmp	r3, #22
 8002b4e:	d101      	bne.n	8002b54 <__sflush_r+0xb8>
 8002b50:	602e      	str	r6, [r5, #0]
 8002b52:	e7af      	b.n	8002ab4 <__sflush_r+0x18>
 8002b54:	2340      	movs	r3, #64	; 0x40
 8002b56:	89a2      	ldrh	r2, [r4, #12]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	81a3      	strh	r3, [r4, #12]
 8002b5c:	e7ab      	b.n	8002ab6 <__sflush_r+0x1a>
 8002b5e:	2340      	movs	r3, #64	; 0x40
 8002b60:	430b      	orrs	r3, r1
 8002b62:	2001      	movs	r0, #1
 8002b64:	81a3      	strh	r3, [r4, #12]
 8002b66:	4240      	negs	r0, r0
 8002b68:	e7a5      	b.n	8002ab6 <__sflush_r+0x1a>
 8002b6a:	690f      	ldr	r7, [r1, #16]
 8002b6c:	2f00      	cmp	r7, #0
 8002b6e:	d0a1      	beq.n	8002ab4 <__sflush_r+0x18>
 8002b70:	680b      	ldr	r3, [r1, #0]
 8002b72:	600f      	str	r7, [r1, #0]
 8002b74:	1bdb      	subs	r3, r3, r7
 8002b76:	9301      	str	r3, [sp, #4]
 8002b78:	2300      	movs	r3, #0
 8002b7a:	0792      	lsls	r2, r2, #30
 8002b7c:	d100      	bne.n	8002b80 <__sflush_r+0xe4>
 8002b7e:	694b      	ldr	r3, [r1, #20]
 8002b80:	60a3      	str	r3, [r4, #8]
 8002b82:	9b01      	ldr	r3, [sp, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	dc00      	bgt.n	8002b8a <__sflush_r+0xee>
 8002b88:	e794      	b.n	8002ab4 <__sflush_r+0x18>
 8002b8a:	9b01      	ldr	r3, [sp, #4]
 8002b8c:	003a      	movs	r2, r7
 8002b8e:	6a21      	ldr	r1, [r4, #32]
 8002b90:	0028      	movs	r0, r5
 8002b92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002b94:	47b0      	blx	r6
 8002b96:	2800      	cmp	r0, #0
 8002b98:	dc03      	bgt.n	8002ba2 <__sflush_r+0x106>
 8002b9a:	2340      	movs	r3, #64	; 0x40
 8002b9c:	89a2      	ldrh	r2, [r4, #12]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	e7df      	b.n	8002b62 <__sflush_r+0xc6>
 8002ba2:	9b01      	ldr	r3, [sp, #4]
 8002ba4:	183f      	adds	r7, r7, r0
 8002ba6:	1a1b      	subs	r3, r3, r0
 8002ba8:	9301      	str	r3, [sp, #4]
 8002baa:	e7ea      	b.n	8002b82 <__sflush_r+0xe6>
 8002bac:	20400001 	.word	0x20400001

08002bb0 <_fflush_r>:
 8002bb0:	690b      	ldr	r3, [r1, #16]
 8002bb2:	b570      	push	{r4, r5, r6, lr}
 8002bb4:	0005      	movs	r5, r0
 8002bb6:	000c      	movs	r4, r1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <_fflush_r+0x10>
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	bd70      	pop	{r4, r5, r6, pc}
 8002bc0:	2800      	cmp	r0, #0
 8002bc2:	d004      	beq.n	8002bce <_fflush_r+0x1e>
 8002bc4:	6983      	ldr	r3, [r0, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <_fflush_r+0x1e>
 8002bca:	f000 f85f 	bl	8002c8c <__sinit>
 8002bce:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <_fflush_r+0x4c>)
 8002bd0:	429c      	cmp	r4, r3
 8002bd2:	d109      	bne.n	8002be8 <_fflush_r+0x38>
 8002bd4:	686c      	ldr	r4, [r5, #4]
 8002bd6:	220c      	movs	r2, #12
 8002bd8:	5ea3      	ldrsh	r3, [r4, r2]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0ee      	beq.n	8002bbc <_fflush_r+0xc>
 8002bde:	0021      	movs	r1, r4
 8002be0:	0028      	movs	r0, r5
 8002be2:	f7ff ff5b 	bl	8002a9c <__sflush_r>
 8002be6:	e7ea      	b.n	8002bbe <_fflush_r+0xe>
 8002be8:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <_fflush_r+0x50>)
 8002bea:	429c      	cmp	r4, r3
 8002bec:	d101      	bne.n	8002bf2 <_fflush_r+0x42>
 8002bee:	68ac      	ldr	r4, [r5, #8]
 8002bf0:	e7f1      	b.n	8002bd6 <_fflush_r+0x26>
 8002bf2:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <_fflush_r+0x54>)
 8002bf4:	429c      	cmp	r4, r3
 8002bf6:	d1ee      	bne.n	8002bd6 <_fflush_r+0x26>
 8002bf8:	68ec      	ldr	r4, [r5, #12]
 8002bfa:	e7ec      	b.n	8002bd6 <_fflush_r+0x26>
 8002bfc:	080032d8 	.word	0x080032d8
 8002c00:	080032f8 	.word	0x080032f8
 8002c04:	080032b8 	.word	0x080032b8

08002c08 <std>:
 8002c08:	2300      	movs	r3, #0
 8002c0a:	b510      	push	{r4, lr}
 8002c0c:	0004      	movs	r4, r0
 8002c0e:	6003      	str	r3, [r0, #0]
 8002c10:	6043      	str	r3, [r0, #4]
 8002c12:	6083      	str	r3, [r0, #8]
 8002c14:	8181      	strh	r1, [r0, #12]
 8002c16:	6643      	str	r3, [r0, #100]	; 0x64
 8002c18:	81c2      	strh	r2, [r0, #14]
 8002c1a:	6103      	str	r3, [r0, #16]
 8002c1c:	6143      	str	r3, [r0, #20]
 8002c1e:	6183      	str	r3, [r0, #24]
 8002c20:	0019      	movs	r1, r3
 8002c22:	2208      	movs	r2, #8
 8002c24:	305c      	adds	r0, #92	; 0x5c
 8002c26:	f7ff fd87 	bl	8002738 <memset>
 8002c2a:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <std+0x38>)
 8002c2c:	6224      	str	r4, [r4, #32]
 8002c2e:	6263      	str	r3, [r4, #36]	; 0x24
 8002c30:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <std+0x3c>)
 8002c32:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c34:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <std+0x40>)
 8002c36:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c38:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <std+0x44>)
 8002c3a:	6323      	str	r3, [r4, #48]	; 0x30
 8002c3c:	bd10      	pop	{r4, pc}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	08003055 	.word	0x08003055
 8002c44:	0800307d 	.word	0x0800307d
 8002c48:	080030b5 	.word	0x080030b5
 8002c4c:	080030e1 	.word	0x080030e1

08002c50 <_cleanup_r>:
 8002c50:	b510      	push	{r4, lr}
 8002c52:	4902      	ldr	r1, [pc, #8]	; (8002c5c <_cleanup_r+0xc>)
 8002c54:	f000 f88c 	bl	8002d70 <_fwalk_reent>
 8002c58:	bd10      	pop	{r4, pc}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	08002bb1 	.word	0x08002bb1

08002c60 <__sfmoreglue>:
 8002c60:	b570      	push	{r4, r5, r6, lr}
 8002c62:	2568      	movs	r5, #104	; 0x68
 8002c64:	1e4a      	subs	r2, r1, #1
 8002c66:	4355      	muls	r5, r2
 8002c68:	000e      	movs	r6, r1
 8002c6a:	0029      	movs	r1, r5
 8002c6c:	3174      	adds	r1, #116	; 0x74
 8002c6e:	f000 f981 	bl	8002f74 <_malloc_r>
 8002c72:	1e04      	subs	r4, r0, #0
 8002c74:	d008      	beq.n	8002c88 <__sfmoreglue+0x28>
 8002c76:	2100      	movs	r1, #0
 8002c78:	002a      	movs	r2, r5
 8002c7a:	6001      	str	r1, [r0, #0]
 8002c7c:	6046      	str	r6, [r0, #4]
 8002c7e:	300c      	adds	r0, #12
 8002c80:	60a0      	str	r0, [r4, #8]
 8002c82:	3268      	adds	r2, #104	; 0x68
 8002c84:	f7ff fd58 	bl	8002738 <memset>
 8002c88:	0020      	movs	r0, r4
 8002c8a:	bd70      	pop	{r4, r5, r6, pc}

08002c8c <__sinit>:
 8002c8c:	6983      	ldr	r3, [r0, #24]
 8002c8e:	b513      	push	{r0, r1, r4, lr}
 8002c90:	0004      	movs	r4, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d128      	bne.n	8002ce8 <__sinit+0x5c>
 8002c96:	6483      	str	r3, [r0, #72]	; 0x48
 8002c98:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002c9a:	6503      	str	r3, [r0, #80]	; 0x50
 8002c9c:	4b13      	ldr	r3, [pc, #76]	; (8002cec <__sinit+0x60>)
 8002c9e:	4a14      	ldr	r2, [pc, #80]	; (8002cf0 <__sinit+0x64>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6282      	str	r2, [r0, #40]	; 0x28
 8002ca4:	9301      	str	r3, [sp, #4]
 8002ca6:	4298      	cmp	r0, r3
 8002ca8:	d101      	bne.n	8002cae <__sinit+0x22>
 8002caa:	2301      	movs	r3, #1
 8002cac:	6183      	str	r3, [r0, #24]
 8002cae:	0020      	movs	r0, r4
 8002cb0:	f000 f820 	bl	8002cf4 <__sfp>
 8002cb4:	6060      	str	r0, [r4, #4]
 8002cb6:	0020      	movs	r0, r4
 8002cb8:	f000 f81c 	bl	8002cf4 <__sfp>
 8002cbc:	60a0      	str	r0, [r4, #8]
 8002cbe:	0020      	movs	r0, r4
 8002cc0:	f000 f818 	bl	8002cf4 <__sfp>
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	60e0      	str	r0, [r4, #12]
 8002cc8:	2104      	movs	r1, #4
 8002cca:	6860      	ldr	r0, [r4, #4]
 8002ccc:	f7ff ff9c 	bl	8002c08 <std>
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	2109      	movs	r1, #9
 8002cd4:	68a0      	ldr	r0, [r4, #8]
 8002cd6:	f7ff ff97 	bl	8002c08 <std>
 8002cda:	2202      	movs	r2, #2
 8002cdc:	2112      	movs	r1, #18
 8002cde:	68e0      	ldr	r0, [r4, #12]
 8002ce0:	f7ff ff92 	bl	8002c08 <std>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	61a3      	str	r3, [r4, #24]
 8002ce8:	bd13      	pop	{r0, r1, r4, pc}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	080032b4 	.word	0x080032b4
 8002cf0:	08002c51 	.word	0x08002c51

08002cf4 <__sfp>:
 8002cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf6:	4b1c      	ldr	r3, [pc, #112]	; (8002d68 <__sfp+0x74>)
 8002cf8:	0007      	movs	r7, r0
 8002cfa:	681e      	ldr	r6, [r3, #0]
 8002cfc:	69b3      	ldr	r3, [r6, #24]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d102      	bne.n	8002d08 <__sfp+0x14>
 8002d02:	0030      	movs	r0, r6
 8002d04:	f7ff ffc2 	bl	8002c8c <__sinit>
 8002d08:	3648      	adds	r6, #72	; 0x48
 8002d0a:	68b4      	ldr	r4, [r6, #8]
 8002d0c:	6873      	ldr	r3, [r6, #4]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	d504      	bpl.n	8002d1c <__sfp+0x28>
 8002d12:	6833      	ldr	r3, [r6, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d007      	beq.n	8002d28 <__sfp+0x34>
 8002d18:	6836      	ldr	r6, [r6, #0]
 8002d1a:	e7f6      	b.n	8002d0a <__sfp+0x16>
 8002d1c:	220c      	movs	r2, #12
 8002d1e:	5ea5      	ldrsh	r5, [r4, r2]
 8002d20:	2d00      	cmp	r5, #0
 8002d22:	d00d      	beq.n	8002d40 <__sfp+0x4c>
 8002d24:	3468      	adds	r4, #104	; 0x68
 8002d26:	e7f2      	b.n	8002d0e <__sfp+0x1a>
 8002d28:	2104      	movs	r1, #4
 8002d2a:	0038      	movs	r0, r7
 8002d2c:	f7ff ff98 	bl	8002c60 <__sfmoreglue>
 8002d30:	6030      	str	r0, [r6, #0]
 8002d32:	2800      	cmp	r0, #0
 8002d34:	d1f0      	bne.n	8002d18 <__sfp+0x24>
 8002d36:	230c      	movs	r3, #12
 8002d38:	0004      	movs	r4, r0
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	0020      	movs	r0, r4
 8002d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d40:	0020      	movs	r0, r4
 8002d42:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <__sfp+0x78>)
 8002d44:	6665      	str	r5, [r4, #100]	; 0x64
 8002d46:	6025      	str	r5, [r4, #0]
 8002d48:	6065      	str	r5, [r4, #4]
 8002d4a:	60a5      	str	r5, [r4, #8]
 8002d4c:	60e3      	str	r3, [r4, #12]
 8002d4e:	6125      	str	r5, [r4, #16]
 8002d50:	6165      	str	r5, [r4, #20]
 8002d52:	61a5      	str	r5, [r4, #24]
 8002d54:	2208      	movs	r2, #8
 8002d56:	0029      	movs	r1, r5
 8002d58:	305c      	adds	r0, #92	; 0x5c
 8002d5a:	f7ff fced 	bl	8002738 <memset>
 8002d5e:	6365      	str	r5, [r4, #52]	; 0x34
 8002d60:	63a5      	str	r5, [r4, #56]	; 0x38
 8002d62:	64a5      	str	r5, [r4, #72]	; 0x48
 8002d64:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002d66:	e7e9      	b.n	8002d3c <__sfp+0x48>
 8002d68:	080032b4 	.word	0x080032b4
 8002d6c:	ffff0001 	.word	0xffff0001

08002d70 <_fwalk_reent>:
 8002d70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d72:	0004      	movs	r4, r0
 8002d74:	0007      	movs	r7, r0
 8002d76:	2600      	movs	r6, #0
 8002d78:	9101      	str	r1, [sp, #4]
 8002d7a:	3448      	adds	r4, #72	; 0x48
 8002d7c:	2c00      	cmp	r4, #0
 8002d7e:	d101      	bne.n	8002d84 <_fwalk_reent+0x14>
 8002d80:	0030      	movs	r0, r6
 8002d82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002d84:	6863      	ldr	r3, [r4, #4]
 8002d86:	68a5      	ldr	r5, [r4, #8]
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	9b00      	ldr	r3, [sp, #0]
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	d501      	bpl.n	8002d96 <_fwalk_reent+0x26>
 8002d92:	6824      	ldr	r4, [r4, #0]
 8002d94:	e7f2      	b.n	8002d7c <_fwalk_reent+0xc>
 8002d96:	89ab      	ldrh	r3, [r5, #12]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d908      	bls.n	8002dae <_fwalk_reent+0x3e>
 8002d9c:	220e      	movs	r2, #14
 8002d9e:	5eab      	ldrsh	r3, [r5, r2]
 8002da0:	3301      	adds	r3, #1
 8002da2:	d004      	beq.n	8002dae <_fwalk_reent+0x3e>
 8002da4:	0029      	movs	r1, r5
 8002da6:	0038      	movs	r0, r7
 8002da8:	9b01      	ldr	r3, [sp, #4]
 8002daa:	4798      	blx	r3
 8002dac:	4306      	orrs	r6, r0
 8002dae:	3568      	adds	r5, #104	; 0x68
 8002db0:	e7eb      	b.n	8002d8a <_fwalk_reent+0x1a>
	...

08002db4 <__locale_ctype_ptr>:
 8002db4:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <__locale_ctype_ptr+0x14>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d100      	bne.n	8002dc0 <__locale_ctype_ptr+0xc>
 8002dbe:	4b03      	ldr	r3, [pc, #12]	; (8002dcc <__locale_ctype_ptr+0x18>)
 8002dc0:	33ec      	adds	r3, #236	; 0xec
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	4770      	bx	lr
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	2000000c 	.word	0x2000000c
 8002dcc:	20000070 	.word	0x20000070

08002dd0 <__swhatbuf_r>:
 8002dd0:	b570      	push	{r4, r5, r6, lr}
 8002dd2:	000e      	movs	r6, r1
 8002dd4:	001d      	movs	r5, r3
 8002dd6:	230e      	movs	r3, #14
 8002dd8:	5ec9      	ldrsh	r1, [r1, r3]
 8002dda:	b096      	sub	sp, #88	; 0x58
 8002ddc:	0014      	movs	r4, r2
 8002dde:	2900      	cmp	r1, #0
 8002de0:	da07      	bge.n	8002df2 <__swhatbuf_r+0x22>
 8002de2:	2300      	movs	r3, #0
 8002de4:	602b      	str	r3, [r5, #0]
 8002de6:	89b3      	ldrh	r3, [r6, #12]
 8002de8:	061b      	lsls	r3, r3, #24
 8002dea:	d411      	bmi.n	8002e10 <__swhatbuf_r+0x40>
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	e00f      	b.n	8002e12 <__swhatbuf_r+0x42>
 8002df2:	466a      	mov	r2, sp
 8002df4:	f000 f9ac 	bl	8003150 <_fstat_r>
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	dbf2      	blt.n	8002de2 <__swhatbuf_r+0x12>
 8002dfc:	22f0      	movs	r2, #240	; 0xf0
 8002dfe:	9b01      	ldr	r3, [sp, #4]
 8002e00:	0212      	lsls	r2, r2, #8
 8002e02:	4013      	ands	r3, r2
 8002e04:	4a05      	ldr	r2, [pc, #20]	; (8002e1c <__swhatbuf_r+0x4c>)
 8002e06:	189b      	adds	r3, r3, r2
 8002e08:	425a      	negs	r2, r3
 8002e0a:	4153      	adcs	r3, r2
 8002e0c:	602b      	str	r3, [r5, #0]
 8002e0e:	e7ed      	b.n	8002dec <__swhatbuf_r+0x1c>
 8002e10:	2340      	movs	r3, #64	; 0x40
 8002e12:	2000      	movs	r0, #0
 8002e14:	6023      	str	r3, [r4, #0]
 8002e16:	b016      	add	sp, #88	; 0x58
 8002e18:	bd70      	pop	{r4, r5, r6, pc}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	ffffe000 	.word	0xffffe000

08002e20 <__smakebuf_r>:
 8002e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e22:	2602      	movs	r6, #2
 8002e24:	898b      	ldrh	r3, [r1, #12]
 8002e26:	0005      	movs	r5, r0
 8002e28:	000c      	movs	r4, r1
 8002e2a:	4233      	tst	r3, r6
 8002e2c:	d006      	beq.n	8002e3c <__smakebuf_r+0x1c>
 8002e2e:	0023      	movs	r3, r4
 8002e30:	3347      	adds	r3, #71	; 0x47
 8002e32:	6023      	str	r3, [r4, #0]
 8002e34:	6123      	str	r3, [r4, #16]
 8002e36:	2301      	movs	r3, #1
 8002e38:	6163      	str	r3, [r4, #20]
 8002e3a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002e3c:	ab01      	add	r3, sp, #4
 8002e3e:	466a      	mov	r2, sp
 8002e40:	f7ff ffc6 	bl	8002dd0 <__swhatbuf_r>
 8002e44:	9900      	ldr	r1, [sp, #0]
 8002e46:	0007      	movs	r7, r0
 8002e48:	0028      	movs	r0, r5
 8002e4a:	f000 f893 	bl	8002f74 <_malloc_r>
 8002e4e:	2800      	cmp	r0, #0
 8002e50:	d108      	bne.n	8002e64 <__smakebuf_r+0x44>
 8002e52:	220c      	movs	r2, #12
 8002e54:	5ea3      	ldrsh	r3, [r4, r2]
 8002e56:	059a      	lsls	r2, r3, #22
 8002e58:	d4ef      	bmi.n	8002e3a <__smakebuf_r+0x1a>
 8002e5a:	2203      	movs	r2, #3
 8002e5c:	4393      	bics	r3, r2
 8002e5e:	431e      	orrs	r6, r3
 8002e60:	81a6      	strh	r6, [r4, #12]
 8002e62:	e7e4      	b.n	8002e2e <__smakebuf_r+0xe>
 8002e64:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <__smakebuf_r+0x84>)
 8002e66:	62ab      	str	r3, [r5, #40]	; 0x28
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	89a2      	ldrh	r2, [r4, #12]
 8002e6c:	6020      	str	r0, [r4, #0]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	81a3      	strh	r3, [r4, #12]
 8002e72:	9b00      	ldr	r3, [sp, #0]
 8002e74:	6120      	str	r0, [r4, #16]
 8002e76:	6163      	str	r3, [r4, #20]
 8002e78:	9b01      	ldr	r3, [sp, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00d      	beq.n	8002e9a <__smakebuf_r+0x7a>
 8002e7e:	230e      	movs	r3, #14
 8002e80:	5ee1      	ldrsh	r1, [r4, r3]
 8002e82:	0028      	movs	r0, r5
 8002e84:	f000 f976 	bl	8003174 <_isatty_r>
 8002e88:	2800      	cmp	r0, #0
 8002e8a:	d006      	beq.n	8002e9a <__smakebuf_r+0x7a>
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	89a3      	ldrh	r3, [r4, #12]
 8002e90:	4393      	bics	r3, r2
 8002e92:	001a      	movs	r2, r3
 8002e94:	2301      	movs	r3, #1
 8002e96:	4313      	orrs	r3, r2
 8002e98:	81a3      	strh	r3, [r4, #12]
 8002e9a:	89a0      	ldrh	r0, [r4, #12]
 8002e9c:	4338      	orrs	r0, r7
 8002e9e:	81a0      	strh	r0, [r4, #12]
 8002ea0:	e7cb      	b.n	8002e3a <__smakebuf_r+0x1a>
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	08002c51 	.word	0x08002c51

08002ea8 <malloc>:
 8002ea8:	b510      	push	{r4, lr}
 8002eaa:	4b03      	ldr	r3, [pc, #12]	; (8002eb8 <malloc+0x10>)
 8002eac:	0001      	movs	r1, r0
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	f000 f860 	bl	8002f74 <_malloc_r>
 8002eb4:	bd10      	pop	{r4, pc}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	2000000c 	.word	0x2000000c

08002ebc <__ascii_mbtowc>:
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	2900      	cmp	r1, #0
 8002ec0:	d100      	bne.n	8002ec4 <__ascii_mbtowc+0x8>
 8002ec2:	a901      	add	r1, sp, #4
 8002ec4:	1e10      	subs	r0, r2, #0
 8002ec6:	d006      	beq.n	8002ed6 <__ascii_mbtowc+0x1a>
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d006      	beq.n	8002eda <__ascii_mbtowc+0x1e>
 8002ecc:	7813      	ldrb	r3, [r2, #0]
 8002ece:	600b      	str	r3, [r1, #0]
 8002ed0:	7810      	ldrb	r0, [r2, #0]
 8002ed2:	1e43      	subs	r3, r0, #1
 8002ed4:	4198      	sbcs	r0, r3
 8002ed6:	b002      	add	sp, #8
 8002ed8:	4770      	bx	lr
 8002eda:	2002      	movs	r0, #2
 8002edc:	4240      	negs	r0, r0
 8002ede:	e7fa      	b.n	8002ed6 <__ascii_mbtowc+0x1a>

08002ee0 <_free_r>:
 8002ee0:	b570      	push	{r4, r5, r6, lr}
 8002ee2:	0005      	movs	r5, r0
 8002ee4:	2900      	cmp	r1, #0
 8002ee6:	d010      	beq.n	8002f0a <_free_r+0x2a>
 8002ee8:	1f0c      	subs	r4, r1, #4
 8002eea:	6823      	ldr	r3, [r4, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	da00      	bge.n	8002ef2 <_free_r+0x12>
 8002ef0:	18e4      	adds	r4, r4, r3
 8002ef2:	0028      	movs	r0, r5
 8002ef4:	f000 f964 	bl	80031c0 <__malloc_lock>
 8002ef8:	4a1d      	ldr	r2, [pc, #116]	; (8002f70 <_free_r+0x90>)
 8002efa:	6813      	ldr	r3, [r2, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d105      	bne.n	8002f0c <_free_r+0x2c>
 8002f00:	6063      	str	r3, [r4, #4]
 8002f02:	6014      	str	r4, [r2, #0]
 8002f04:	0028      	movs	r0, r5
 8002f06:	f000 f95c 	bl	80031c2 <__malloc_unlock>
 8002f0a:	bd70      	pop	{r4, r5, r6, pc}
 8002f0c:	42a3      	cmp	r3, r4
 8002f0e:	d909      	bls.n	8002f24 <_free_r+0x44>
 8002f10:	6821      	ldr	r1, [r4, #0]
 8002f12:	1860      	adds	r0, r4, r1
 8002f14:	4283      	cmp	r3, r0
 8002f16:	d1f3      	bne.n	8002f00 <_free_r+0x20>
 8002f18:	6818      	ldr	r0, [r3, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	1841      	adds	r1, r0, r1
 8002f1e:	6021      	str	r1, [r4, #0]
 8002f20:	e7ee      	b.n	8002f00 <_free_r+0x20>
 8002f22:	0013      	movs	r3, r2
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	2a00      	cmp	r2, #0
 8002f28:	d001      	beq.n	8002f2e <_free_r+0x4e>
 8002f2a:	42a2      	cmp	r2, r4
 8002f2c:	d9f9      	bls.n	8002f22 <_free_r+0x42>
 8002f2e:	6819      	ldr	r1, [r3, #0]
 8002f30:	1858      	adds	r0, r3, r1
 8002f32:	42a0      	cmp	r0, r4
 8002f34:	d10b      	bne.n	8002f4e <_free_r+0x6e>
 8002f36:	6820      	ldr	r0, [r4, #0]
 8002f38:	1809      	adds	r1, r1, r0
 8002f3a:	1858      	adds	r0, r3, r1
 8002f3c:	6019      	str	r1, [r3, #0]
 8002f3e:	4282      	cmp	r2, r0
 8002f40:	d1e0      	bne.n	8002f04 <_free_r+0x24>
 8002f42:	6810      	ldr	r0, [r2, #0]
 8002f44:	6852      	ldr	r2, [r2, #4]
 8002f46:	1841      	adds	r1, r0, r1
 8002f48:	6019      	str	r1, [r3, #0]
 8002f4a:	605a      	str	r2, [r3, #4]
 8002f4c:	e7da      	b.n	8002f04 <_free_r+0x24>
 8002f4e:	42a0      	cmp	r0, r4
 8002f50:	d902      	bls.n	8002f58 <_free_r+0x78>
 8002f52:	230c      	movs	r3, #12
 8002f54:	602b      	str	r3, [r5, #0]
 8002f56:	e7d5      	b.n	8002f04 <_free_r+0x24>
 8002f58:	6821      	ldr	r1, [r4, #0]
 8002f5a:	1860      	adds	r0, r4, r1
 8002f5c:	4282      	cmp	r2, r0
 8002f5e:	d103      	bne.n	8002f68 <_free_r+0x88>
 8002f60:	6810      	ldr	r0, [r2, #0]
 8002f62:	6852      	ldr	r2, [r2, #4]
 8002f64:	1841      	adds	r1, r0, r1
 8002f66:	6021      	str	r1, [r4, #0]
 8002f68:	6062      	str	r2, [r4, #4]
 8002f6a:	605c      	str	r4, [r3, #4]
 8002f6c:	e7ca      	b.n	8002f04 <_free_r+0x24>
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	20000280 	.word	0x20000280

08002f74 <_malloc_r>:
 8002f74:	2303      	movs	r3, #3
 8002f76:	b570      	push	{r4, r5, r6, lr}
 8002f78:	1ccd      	adds	r5, r1, #3
 8002f7a:	439d      	bics	r5, r3
 8002f7c:	3508      	adds	r5, #8
 8002f7e:	0006      	movs	r6, r0
 8002f80:	2d0c      	cmp	r5, #12
 8002f82:	d21e      	bcs.n	8002fc2 <_malloc_r+0x4e>
 8002f84:	250c      	movs	r5, #12
 8002f86:	42a9      	cmp	r1, r5
 8002f88:	d81d      	bhi.n	8002fc6 <_malloc_r+0x52>
 8002f8a:	0030      	movs	r0, r6
 8002f8c:	f000 f918 	bl	80031c0 <__malloc_lock>
 8002f90:	4a25      	ldr	r2, [pc, #148]	; (8003028 <_malloc_r+0xb4>)
 8002f92:	6814      	ldr	r4, [r2, #0]
 8002f94:	0021      	movs	r1, r4
 8002f96:	2900      	cmp	r1, #0
 8002f98:	d119      	bne.n	8002fce <_malloc_r+0x5a>
 8002f9a:	4c24      	ldr	r4, [pc, #144]	; (800302c <_malloc_r+0xb8>)
 8002f9c:	6823      	ldr	r3, [r4, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d103      	bne.n	8002faa <_malloc_r+0x36>
 8002fa2:	0030      	movs	r0, r6
 8002fa4:	f000 f844 	bl	8003030 <_sbrk_r>
 8002fa8:	6020      	str	r0, [r4, #0]
 8002faa:	0029      	movs	r1, r5
 8002fac:	0030      	movs	r0, r6
 8002fae:	f000 f83f 	bl	8003030 <_sbrk_r>
 8002fb2:	1c43      	adds	r3, r0, #1
 8002fb4:	d12b      	bne.n	800300e <_malloc_r+0x9a>
 8002fb6:	230c      	movs	r3, #12
 8002fb8:	0030      	movs	r0, r6
 8002fba:	6033      	str	r3, [r6, #0]
 8002fbc:	f000 f901 	bl	80031c2 <__malloc_unlock>
 8002fc0:	e003      	b.n	8002fca <_malloc_r+0x56>
 8002fc2:	2d00      	cmp	r5, #0
 8002fc4:	dadf      	bge.n	8002f86 <_malloc_r+0x12>
 8002fc6:	230c      	movs	r3, #12
 8002fc8:	6033      	str	r3, [r6, #0]
 8002fca:	2000      	movs	r0, #0
 8002fcc:	bd70      	pop	{r4, r5, r6, pc}
 8002fce:	680b      	ldr	r3, [r1, #0]
 8002fd0:	1b5b      	subs	r3, r3, r5
 8002fd2:	d419      	bmi.n	8003008 <_malloc_r+0x94>
 8002fd4:	2b0b      	cmp	r3, #11
 8002fd6:	d903      	bls.n	8002fe0 <_malloc_r+0x6c>
 8002fd8:	600b      	str	r3, [r1, #0]
 8002fda:	18cc      	adds	r4, r1, r3
 8002fdc:	6025      	str	r5, [r4, #0]
 8002fde:	e003      	b.n	8002fe8 <_malloc_r+0x74>
 8002fe0:	684b      	ldr	r3, [r1, #4]
 8002fe2:	428c      	cmp	r4, r1
 8002fe4:	d10d      	bne.n	8003002 <_malloc_r+0x8e>
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	0030      	movs	r0, r6
 8002fea:	f000 f8ea 	bl	80031c2 <__malloc_unlock>
 8002fee:	0020      	movs	r0, r4
 8002ff0:	2207      	movs	r2, #7
 8002ff2:	300b      	adds	r0, #11
 8002ff4:	1d23      	adds	r3, r4, #4
 8002ff6:	4390      	bics	r0, r2
 8002ff8:	1ac3      	subs	r3, r0, r3
 8002ffa:	d0e7      	beq.n	8002fcc <_malloc_r+0x58>
 8002ffc:	425a      	negs	r2, r3
 8002ffe:	50e2      	str	r2, [r4, r3]
 8003000:	e7e4      	b.n	8002fcc <_malloc_r+0x58>
 8003002:	6063      	str	r3, [r4, #4]
 8003004:	000c      	movs	r4, r1
 8003006:	e7ef      	b.n	8002fe8 <_malloc_r+0x74>
 8003008:	000c      	movs	r4, r1
 800300a:	6849      	ldr	r1, [r1, #4]
 800300c:	e7c3      	b.n	8002f96 <_malloc_r+0x22>
 800300e:	2303      	movs	r3, #3
 8003010:	1cc4      	adds	r4, r0, #3
 8003012:	439c      	bics	r4, r3
 8003014:	42a0      	cmp	r0, r4
 8003016:	d0e1      	beq.n	8002fdc <_malloc_r+0x68>
 8003018:	1a21      	subs	r1, r4, r0
 800301a:	0030      	movs	r0, r6
 800301c:	f000 f808 	bl	8003030 <_sbrk_r>
 8003020:	1c43      	adds	r3, r0, #1
 8003022:	d1db      	bne.n	8002fdc <_malloc_r+0x68>
 8003024:	e7c7      	b.n	8002fb6 <_malloc_r+0x42>
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	20000280 	.word	0x20000280
 800302c:	20000284 	.word	0x20000284

08003030 <_sbrk_r>:
 8003030:	2300      	movs	r3, #0
 8003032:	b570      	push	{r4, r5, r6, lr}
 8003034:	4c06      	ldr	r4, [pc, #24]	; (8003050 <_sbrk_r+0x20>)
 8003036:	0005      	movs	r5, r0
 8003038:	0008      	movs	r0, r1
 800303a:	6023      	str	r3, [r4, #0]
 800303c:	f7fd fc9a 	bl	8000974 <_sbrk>
 8003040:	1c43      	adds	r3, r0, #1
 8003042:	d103      	bne.n	800304c <_sbrk_r+0x1c>
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d000      	beq.n	800304c <_sbrk_r+0x1c>
 800304a:	602b      	str	r3, [r5, #0]
 800304c:	bd70      	pop	{r4, r5, r6, pc}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	20000350 	.word	0x20000350

08003054 <__sread>:
 8003054:	b570      	push	{r4, r5, r6, lr}
 8003056:	000c      	movs	r4, r1
 8003058:	250e      	movs	r5, #14
 800305a:	5f49      	ldrsh	r1, [r1, r5]
 800305c:	f000 f8b2 	bl	80031c4 <_read_r>
 8003060:	2800      	cmp	r0, #0
 8003062:	db03      	blt.n	800306c <__sread+0x18>
 8003064:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003066:	181b      	adds	r3, r3, r0
 8003068:	6563      	str	r3, [r4, #84]	; 0x54
 800306a:	bd70      	pop	{r4, r5, r6, pc}
 800306c:	89a3      	ldrh	r3, [r4, #12]
 800306e:	4a02      	ldr	r2, [pc, #8]	; (8003078 <__sread+0x24>)
 8003070:	4013      	ands	r3, r2
 8003072:	81a3      	strh	r3, [r4, #12]
 8003074:	e7f9      	b.n	800306a <__sread+0x16>
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	ffffefff 	.word	0xffffefff

0800307c <__swrite>:
 800307c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307e:	001f      	movs	r7, r3
 8003080:	898b      	ldrh	r3, [r1, #12]
 8003082:	0005      	movs	r5, r0
 8003084:	000c      	movs	r4, r1
 8003086:	0016      	movs	r6, r2
 8003088:	05db      	lsls	r3, r3, #23
 800308a:	d505      	bpl.n	8003098 <__swrite+0x1c>
 800308c:	230e      	movs	r3, #14
 800308e:	5ec9      	ldrsh	r1, [r1, r3]
 8003090:	2200      	movs	r2, #0
 8003092:	2302      	movs	r3, #2
 8003094:	f000 f880 	bl	8003198 <_lseek_r>
 8003098:	89a3      	ldrh	r3, [r4, #12]
 800309a:	4a05      	ldr	r2, [pc, #20]	; (80030b0 <__swrite+0x34>)
 800309c:	0028      	movs	r0, r5
 800309e:	4013      	ands	r3, r2
 80030a0:	81a3      	strh	r3, [r4, #12]
 80030a2:	0032      	movs	r2, r6
 80030a4:	230e      	movs	r3, #14
 80030a6:	5ee1      	ldrsh	r1, [r4, r3]
 80030a8:	003b      	movs	r3, r7
 80030aa:	f000 f82b 	bl	8003104 <_write_r>
 80030ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030b0:	ffffefff 	.word	0xffffefff

080030b4 <__sseek>:
 80030b4:	b570      	push	{r4, r5, r6, lr}
 80030b6:	000c      	movs	r4, r1
 80030b8:	250e      	movs	r5, #14
 80030ba:	5f49      	ldrsh	r1, [r1, r5]
 80030bc:	f000 f86c 	bl	8003198 <_lseek_r>
 80030c0:	89a3      	ldrh	r3, [r4, #12]
 80030c2:	1c42      	adds	r2, r0, #1
 80030c4:	d103      	bne.n	80030ce <__sseek+0x1a>
 80030c6:	4a05      	ldr	r2, [pc, #20]	; (80030dc <__sseek+0x28>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	81a3      	strh	r3, [r4, #12]
 80030cc:	bd70      	pop	{r4, r5, r6, pc}
 80030ce:	2280      	movs	r2, #128	; 0x80
 80030d0:	0152      	lsls	r2, r2, #5
 80030d2:	4313      	orrs	r3, r2
 80030d4:	81a3      	strh	r3, [r4, #12]
 80030d6:	6560      	str	r0, [r4, #84]	; 0x54
 80030d8:	e7f8      	b.n	80030cc <__sseek+0x18>
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	ffffefff 	.word	0xffffefff

080030e0 <__sclose>:
 80030e0:	b510      	push	{r4, lr}
 80030e2:	230e      	movs	r3, #14
 80030e4:	5ec9      	ldrsh	r1, [r1, r3]
 80030e6:	f000 f821 	bl	800312c <_close_r>
 80030ea:	bd10      	pop	{r4, pc}

080030ec <__ascii_wctomb>:
 80030ec:	1e0b      	subs	r3, r1, #0
 80030ee:	d004      	beq.n	80030fa <__ascii_wctomb+0xe>
 80030f0:	2aff      	cmp	r2, #255	; 0xff
 80030f2:	d904      	bls.n	80030fe <__ascii_wctomb+0x12>
 80030f4:	238a      	movs	r3, #138	; 0x8a
 80030f6:	6003      	str	r3, [r0, #0]
 80030f8:	3b8b      	subs	r3, #139	; 0x8b
 80030fa:	0018      	movs	r0, r3
 80030fc:	4770      	bx	lr
 80030fe:	700a      	strb	r2, [r1, #0]
 8003100:	2301      	movs	r3, #1
 8003102:	e7fa      	b.n	80030fa <__ascii_wctomb+0xe>

08003104 <_write_r>:
 8003104:	b570      	push	{r4, r5, r6, lr}
 8003106:	0005      	movs	r5, r0
 8003108:	0008      	movs	r0, r1
 800310a:	0011      	movs	r1, r2
 800310c:	2200      	movs	r2, #0
 800310e:	4c06      	ldr	r4, [pc, #24]	; (8003128 <_write_r+0x24>)
 8003110:	6022      	str	r2, [r4, #0]
 8003112:	001a      	movs	r2, r3
 8003114:	f7fd f95e 	bl	80003d4 <_write>
 8003118:	1c43      	adds	r3, r0, #1
 800311a:	d103      	bne.n	8003124 <_write_r+0x20>
 800311c:	6823      	ldr	r3, [r4, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d000      	beq.n	8003124 <_write_r+0x20>
 8003122:	602b      	str	r3, [r5, #0]
 8003124:	bd70      	pop	{r4, r5, r6, pc}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	20000350 	.word	0x20000350

0800312c <_close_r>:
 800312c:	2300      	movs	r3, #0
 800312e:	b570      	push	{r4, r5, r6, lr}
 8003130:	4c06      	ldr	r4, [pc, #24]	; (800314c <_close_r+0x20>)
 8003132:	0005      	movs	r5, r0
 8003134:	0008      	movs	r0, r1
 8003136:	6023      	str	r3, [r4, #0]
 8003138:	f7fd fbef 	bl	800091a <_close>
 800313c:	1c43      	adds	r3, r0, #1
 800313e:	d103      	bne.n	8003148 <_close_r+0x1c>
 8003140:	6823      	ldr	r3, [r4, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d000      	beq.n	8003148 <_close_r+0x1c>
 8003146:	602b      	str	r3, [r5, #0]
 8003148:	bd70      	pop	{r4, r5, r6, pc}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	20000350 	.word	0x20000350

08003150 <_fstat_r>:
 8003150:	2300      	movs	r3, #0
 8003152:	b570      	push	{r4, r5, r6, lr}
 8003154:	4c06      	ldr	r4, [pc, #24]	; (8003170 <_fstat_r+0x20>)
 8003156:	0005      	movs	r5, r0
 8003158:	0008      	movs	r0, r1
 800315a:	0011      	movs	r1, r2
 800315c:	6023      	str	r3, [r4, #0]
 800315e:	f7fd fbe6 	bl	800092e <_fstat>
 8003162:	1c43      	adds	r3, r0, #1
 8003164:	d103      	bne.n	800316e <_fstat_r+0x1e>
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d000      	beq.n	800316e <_fstat_r+0x1e>
 800316c:	602b      	str	r3, [r5, #0]
 800316e:	bd70      	pop	{r4, r5, r6, pc}
 8003170:	20000350 	.word	0x20000350

08003174 <_isatty_r>:
 8003174:	2300      	movs	r3, #0
 8003176:	b570      	push	{r4, r5, r6, lr}
 8003178:	4c06      	ldr	r4, [pc, #24]	; (8003194 <_isatty_r+0x20>)
 800317a:	0005      	movs	r5, r0
 800317c:	0008      	movs	r0, r1
 800317e:	6023      	str	r3, [r4, #0]
 8003180:	f7fd fbe3 	bl	800094a <_isatty>
 8003184:	1c43      	adds	r3, r0, #1
 8003186:	d103      	bne.n	8003190 <_isatty_r+0x1c>
 8003188:	6823      	ldr	r3, [r4, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d000      	beq.n	8003190 <_isatty_r+0x1c>
 800318e:	602b      	str	r3, [r5, #0]
 8003190:	bd70      	pop	{r4, r5, r6, pc}
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	20000350 	.word	0x20000350

08003198 <_lseek_r>:
 8003198:	b570      	push	{r4, r5, r6, lr}
 800319a:	0005      	movs	r5, r0
 800319c:	0008      	movs	r0, r1
 800319e:	0011      	movs	r1, r2
 80031a0:	2200      	movs	r2, #0
 80031a2:	4c06      	ldr	r4, [pc, #24]	; (80031bc <_lseek_r+0x24>)
 80031a4:	6022      	str	r2, [r4, #0]
 80031a6:	001a      	movs	r2, r3
 80031a8:	f7fd fbd8 	bl	800095c <_lseek>
 80031ac:	1c43      	adds	r3, r0, #1
 80031ae:	d103      	bne.n	80031b8 <_lseek_r+0x20>
 80031b0:	6823      	ldr	r3, [r4, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d000      	beq.n	80031b8 <_lseek_r+0x20>
 80031b6:	602b      	str	r3, [r5, #0]
 80031b8:	bd70      	pop	{r4, r5, r6, pc}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	20000350 	.word	0x20000350

080031c0 <__malloc_lock>:
 80031c0:	4770      	bx	lr

080031c2 <__malloc_unlock>:
 80031c2:	4770      	bx	lr

080031c4 <_read_r>:
 80031c4:	b570      	push	{r4, r5, r6, lr}
 80031c6:	0005      	movs	r5, r0
 80031c8:	0008      	movs	r0, r1
 80031ca:	0011      	movs	r1, r2
 80031cc:	2200      	movs	r2, #0
 80031ce:	4c06      	ldr	r4, [pc, #24]	; (80031e8 <_read_r+0x24>)
 80031d0:	6022      	str	r2, [r4, #0]
 80031d2:	001a      	movs	r2, r3
 80031d4:	f7fd fb84 	bl	80008e0 <_read>
 80031d8:	1c43      	adds	r3, r0, #1
 80031da:	d103      	bne.n	80031e4 <_read_r+0x20>
 80031dc:	6823      	ldr	r3, [r4, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d000      	beq.n	80031e4 <_read_r+0x20>
 80031e2:	602b      	str	r3, [r5, #0]
 80031e4:	bd70      	pop	{r4, r5, r6, pc}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	20000350 	.word	0x20000350

080031ec <_init>:
 80031ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031f2:	bc08      	pop	{r3}
 80031f4:	469e      	mov	lr, r3
 80031f6:	4770      	bx	lr

080031f8 <_fini>:
 80031f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031fe:	bc08      	pop	{r3}
 8003200:	469e      	mov	lr, r3
 8003202:	4770      	bx	lr
