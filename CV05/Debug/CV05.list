
CV05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032b4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08003374  08003374  00013374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003458  08003458  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003458  08003458  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003458  08003458  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003458  08003458  00013458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800345c  0800345c  0001345c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000070  080034d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  080034d0  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007542  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016c7  00000000  00000000  000275da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006e0  00000000  00000000  00028ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000618  00000000  00000000  00029388  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000d08f  00000000  00000000  000299a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000078fe  00000000  00000000  00036a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00045c45  00000000  00000000  0003e32d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00083f72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dc4  00000000  00000000  00083ff0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800335c 	.word	0x0800335c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	0800335c 	.word	0x0800335c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <uart_process_command>:
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

static void uart_process_command(char *cmd)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	printf("Prijato: '%s' \n ",cmd);
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <uart_process_command+0x1c>)
 800022c:	0011      	movs	r1, r2
 800022e:	0018      	movs	r0, r3
 8000230:	f002 f97c 	bl	800252c <iprintf>
}
 8000234:	46c0      	nop			; (mov r8, r8)
 8000236:	46bd      	mov	sp, r7
 8000238:	b002      	add	sp, #8
 800023a:	bd80      	pop	{r7, pc}
 800023c:	08003374 	.word	0x08003374

08000240 <_write>:

int _write(int file, char const *buf, int n)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
	/* stdout redirection to UART2 */
	HAL_UART_Transmit(&huart2, (uint8_t*) (buf), n, HAL_MAX_DELAY);
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	b29a      	uxth	r2, r3
 8000250:	2301      	movs	r3, #1
 8000252:	425b      	negs	r3, r3
 8000254:	68b9      	ldr	r1, [r7, #8]
 8000256:	4804      	ldr	r0, [pc, #16]	; (8000268 <_write+0x28>)
 8000258:	f001 fc2a 	bl	8001ab0 <HAL_UART_Transmit>
	return n;
 800025c:	687b      	ldr	r3, [r7, #4]
}
 800025e:	0018      	movs	r0, r3
 8000260:	46bd      	mov	sp, r7
 8000262:	b004      	add	sp, #16
 8000264:	bd80      	pop	{r7, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	20000160 	.word	0x20000160

0800026c <uart_byte_available>:

static void uart_byte_available(uint8_t c)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	0002      	movs	r2, r0
 8000274:	1dfb      	adds	r3, r7, #7
 8000276:	701a      	strb	r2, [r3, #0]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];

	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 126)
 8000278:	4b19      	ldr	r3, [pc, #100]	; (80002e0 <uart_byte_available+0x74>)
 800027a:	881b      	ldrh	r3, [r3, #0]
 800027c:	2b3f      	cmp	r3, #63	; 0x3f
 800027e:	d812      	bhi.n	80002a6 <uart_byte_available+0x3a>
 8000280:	1dfb      	adds	r3, r7, #7
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b1f      	cmp	r3, #31
 8000286:	d90e      	bls.n	80002a6 <uart_byte_available+0x3a>
 8000288:	1dfb      	adds	r3, r7, #7
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	2b7e      	cmp	r3, #126	; 0x7e
 800028e:	d80a      	bhi.n	80002a6 <uart_byte_available+0x3a>
		data[cnt++] = c;
 8000290:	4b13      	ldr	r3, [pc, #76]	; (80002e0 <uart_byte_available+0x74>)
 8000292:	881b      	ldrh	r3, [r3, #0]
 8000294:	1c5a      	adds	r2, r3, #1
 8000296:	b291      	uxth	r1, r2
 8000298:	4a11      	ldr	r2, [pc, #68]	; (80002e0 <uart_byte_available+0x74>)
 800029a:	8011      	strh	r1, [r2, #0]
 800029c:	0019      	movs	r1, r3
 800029e:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <uart_byte_available+0x78>)
 80002a0:	1dfa      	adds	r2, r7, #7
 80002a2:	7812      	ldrb	r2, [r2, #0]
 80002a4:	545a      	strb	r2, [r3, r1]
	if ((c == '\n' || c == '\r') && cnt > 0)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	2b0a      	cmp	r3, #10
 80002ac:	d003      	beq.n	80002b6 <uart_byte_available+0x4a>
 80002ae:	1dfb      	adds	r3, r7, #7
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	2b0d      	cmp	r3, #13
 80002b4:	d110      	bne.n	80002d8 <uart_byte_available+0x6c>
 80002b6:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <uart_byte_available+0x74>)
 80002b8:	881b      	ldrh	r3, [r3, #0]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d00c      	beq.n	80002d8 <uart_byte_available+0x6c>
	{
		data[cnt] = '\0';
 80002be:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <uart_byte_available+0x74>)
 80002c0:	881b      	ldrh	r3, [r3, #0]
 80002c2:	001a      	movs	r2, r3
 80002c4:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <uart_byte_available+0x78>)
 80002c6:	2100      	movs	r1, #0
 80002c8:	5499      	strb	r1, [r3, r2]
		uart_process_command(data);
 80002ca:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <uart_byte_available+0x78>)
 80002cc:	0018      	movs	r0, r3
 80002ce:	f7ff ffa7 	bl	8000220 <uart_process_command>
		cnt = 0;
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <uart_byte_available+0x74>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	801a      	strh	r2, [r3, #0]
	}
}
 80002d8:	46c0      	nop			; (mov r8, r8)
 80002da:	46bd      	mov	sp, r7
 80002dc:	b002      	add	sp, #8
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	200000ce 	.word	0x200000ce
 80002e4:	200000d0 	.word	0x200000d0

080002e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ee:	f000 fab5 	bl	800085c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f2:	f000 f83b 	bl	800036c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f6:	f000 f8d1 	bl	800049c <MX_GPIO_Init>
  MX_DMA_Init();
 80002fa:	f000 f8b1 	bl	8000460 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80002fe:	f000 f87f 	bl	8000400 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart2, uart_rx_buf, RX_BUFFER_LEN);
 8000302:	4916      	ldr	r1, [pc, #88]	; (800035c <main+0x74>)
 8000304:	4b16      	ldr	r3, [pc, #88]	; (8000360 <main+0x78>)
 8000306:	2240      	movs	r2, #64	; 0x40
 8000308:	0018      	movs	r0, r3
 800030a:	f001 fc79 	bl	8001c00 <HAL_UART_Receive_DMA>
/*	 uint8_t c; 										//kod, kdy vse co posilame do kitu se vraci zpet
	 HAL_UART_Receive(&huart2, &c, 1, HAL_MAX_DELAY);
	 HAL_UART_Transmit(&huart2, &c, 1, HAL_MAX_DELAY);
*/

	  while (uart_rx_read_ptr != uart_rx_write_ptr)
 800030e:	e019      	b.n	8000344 <main+0x5c>
	  {
		  uint8_t b = uart_rx_buf[uart_rx_read_ptr];
 8000310:	4b14      	ldr	r3, [pc, #80]	; (8000364 <main+0x7c>)
 8000312:	881b      	ldrh	r3, [r3, #0]
 8000314:	b29b      	uxth	r3, r3
 8000316:	0019      	movs	r1, r3
 8000318:	1dfb      	adds	r3, r7, #7
 800031a:	4a10      	ldr	r2, [pc, #64]	; (800035c <main+0x74>)
 800031c:	5c52      	ldrb	r2, [r2, r1]
 800031e:	701a      	strb	r2, [r3, #0]
		  if (++uart_rx_read_ptr >= RX_BUFFER_LEN)
 8000320:	4b10      	ldr	r3, [pc, #64]	; (8000364 <main+0x7c>)
 8000322:	881b      	ldrh	r3, [r3, #0]
 8000324:	b29b      	uxth	r3, r3
 8000326:	3301      	adds	r3, #1
 8000328:	b29b      	uxth	r3, r3
 800032a:	4a0e      	ldr	r2, [pc, #56]	; (8000364 <main+0x7c>)
 800032c:	1c19      	adds	r1, r3, #0
 800032e:	8011      	strh	r1, [r2, #0]
 8000330:	2b3f      	cmp	r3, #63	; 0x3f
 8000332:	d902      	bls.n	800033a <main+0x52>
			  uart_rx_read_ptr = 0; 					// increase read pointer
 8000334:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <main+0x7c>)
 8000336:	2200      	movs	r2, #0
 8000338:	801a      	strh	r2, [r3, #0]
		  uart_byte_available(b);						// process every received byte with the RX state machine
 800033a:	1dfb      	adds	r3, r7, #7
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	0018      	movs	r0, r3
 8000340:	f7ff ff94 	bl	800026c <uart_byte_available>
	  while (uart_rx_read_ptr != uart_rx_write_ptr)
 8000344:	4b07      	ldr	r3, [pc, #28]	; (8000364 <main+0x7c>)
 8000346:	881b      	ldrh	r3, [r3, #0]
 8000348:	b29b      	uxth	r3, r3
 800034a:	0019      	movs	r1, r3
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <main+0x80>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	2240      	movs	r2, #64	; 0x40
 8000354:	1ad3      	subs	r3, r2, r3
 8000356:	4299      	cmp	r1, r3
 8000358:	d1da      	bne.n	8000310 <main+0x28>
 800035a:	e7f3      	b.n	8000344 <main+0x5c>
 800035c:	2000008c 	.word	0x2000008c
 8000360:	20000160 	.word	0x20000160
 8000364:	200000cc 	.word	0x200000cc
 8000368:	2000011c 	.word	0x2000011c

0800036c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800036c:	b590      	push	{r4, r7, lr}
 800036e:	b091      	sub	sp, #68	; 0x44
 8000370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000372:	2410      	movs	r4, #16
 8000374:	193b      	adds	r3, r7, r4
 8000376:	0018      	movs	r0, r3
 8000378:	2330      	movs	r3, #48	; 0x30
 800037a:	001a      	movs	r2, r3
 800037c:	2100      	movs	r1, #0
 800037e:	f002 f8cd 	bl	800251c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000382:	003b      	movs	r3, r7
 8000384:	0018      	movs	r0, r3
 8000386:	2310      	movs	r3, #16
 8000388:	001a      	movs	r2, r3
 800038a:	2100      	movs	r1, #0
 800038c:	f002 f8c6 	bl	800251c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000390:	0021      	movs	r1, r4
 8000392:	187b      	adds	r3, r7, r1
 8000394:	2202      	movs	r2, #2
 8000396:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000398:	187b      	adds	r3, r7, r1
 800039a:	2201      	movs	r2, #1
 800039c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2210      	movs	r2, #16
 80003a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2202      	movs	r2, #2
 80003a8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	2200      	movs	r2, #0
 80003ae:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80003b0:	187b      	adds	r3, r7, r1
 80003b2:	22a0      	movs	r2, #160	; 0xa0
 80003b4:	0392      	lsls	r2, r2, #14
 80003b6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003b8:	187b      	adds	r3, r7, r1
 80003ba:	2200      	movs	r2, #0
 80003bc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003be:	187b      	adds	r3, r7, r1
 80003c0:	0018      	movs	r0, r3
 80003c2:	f000 feb3 	bl	800112c <HAL_RCC_OscConfig>
 80003c6:	1e03      	subs	r3, r0, #0
 80003c8:	d001      	beq.n	80003ce <SystemClock_Config+0x62>
  {
    Error_Handler();
 80003ca:	f000 f8d1 	bl	8000570 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ce:	003b      	movs	r3, r7
 80003d0:	2207      	movs	r2, #7
 80003d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d4:	003b      	movs	r3, r7
 80003d6:	2202      	movs	r2, #2
 80003d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003da:	003b      	movs	r3, r7
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e0:	003b      	movs	r3, r7
 80003e2:	2200      	movs	r2, #0
 80003e4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003e6:	003b      	movs	r3, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	0018      	movs	r0, r3
 80003ec:	f001 f9ba 	bl	8001764 <HAL_RCC_ClockConfig>
 80003f0:	1e03      	subs	r3, r0, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80003f4:	f000 f8bc 	bl	8000570 <Error_Handler>
  }
}
 80003f8:	46c0      	nop			; (mov r8, r8)
 80003fa:	46bd      	mov	sp, r7
 80003fc:	b011      	add	sp, #68	; 0x44
 80003fe:	bd90      	pop	{r4, r7, pc}

08000400 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000404:	4b14      	ldr	r3, [pc, #80]	; (8000458 <MX_USART2_UART_Init+0x58>)
 8000406:	4a15      	ldr	r2, [pc, #84]	; (800045c <MX_USART2_UART_Init+0x5c>)
 8000408:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800040a:	4b13      	ldr	r3, [pc, #76]	; (8000458 <MX_USART2_UART_Init+0x58>)
 800040c:	2296      	movs	r2, #150	; 0x96
 800040e:	0212      	lsls	r2, r2, #8
 8000410:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000412:	4b11      	ldr	r3, [pc, #68]	; (8000458 <MX_USART2_UART_Init+0x58>)
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000418:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <MX_USART2_UART_Init+0x58>)
 800041a:	2200      	movs	r2, #0
 800041c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800041e:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <MX_USART2_UART_Init+0x58>)
 8000420:	2200      	movs	r2, #0
 8000422:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000424:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <MX_USART2_UART_Init+0x58>)
 8000426:	220c      	movs	r2, #12
 8000428:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800042a:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <MX_USART2_UART_Init+0x58>)
 800042c:	2200      	movs	r2, #0
 800042e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000430:	4b09      	ldr	r3, [pc, #36]	; (8000458 <MX_USART2_UART_Init+0x58>)
 8000432:	2200      	movs	r2, #0
 8000434:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000436:	4b08      	ldr	r3, [pc, #32]	; (8000458 <MX_USART2_UART_Init+0x58>)
 8000438:	2200      	movs	r2, #0
 800043a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <MX_USART2_UART_Init+0x58>)
 800043e:	2200      	movs	r2, #0
 8000440:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000442:	4b05      	ldr	r3, [pc, #20]	; (8000458 <MX_USART2_UART_Init+0x58>)
 8000444:	0018      	movs	r0, r3
 8000446:	f001 fadf 	bl	8001a08 <HAL_UART_Init>
 800044a:	1e03      	subs	r3, r0, #0
 800044c:	d001      	beq.n	8000452 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800044e:	f000 f88f 	bl	8000570 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20000160 	.word	0x20000160
 800045c:	40004400 	.word	0x40004400

08000460 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000466:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <MX_DMA_Init+0x38>)
 8000468:	695a      	ldr	r2, [r3, #20]
 800046a:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <MX_DMA_Init+0x38>)
 800046c:	2101      	movs	r1, #1
 800046e:	430a      	orrs	r2, r1
 8000470:	615a      	str	r2, [r3, #20]
 8000472:	4b09      	ldr	r3, [pc, #36]	; (8000498 <MX_DMA_Init+0x38>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	2201      	movs	r2, #1
 8000478:	4013      	ands	r3, r2
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800047e:	2200      	movs	r2, #0
 8000480:	2100      	movs	r1, #0
 8000482:	200b      	movs	r0, #11
 8000484:	f000 fafa 	bl	8000a7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000488:	200b      	movs	r0, #11
 800048a:	f000 fb0c 	bl	8000aa6 <HAL_NVIC_EnableIRQ>

}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	b002      	add	sp, #8
 8000494:	bd80      	pop	{r7, pc}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	40021000 	.word	0x40021000

0800049c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b089      	sub	sp, #36	; 0x24
 80004a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a2:	240c      	movs	r4, #12
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	0018      	movs	r0, r3
 80004a8:	2314      	movs	r3, #20
 80004aa:	001a      	movs	r2, r3
 80004ac:	2100      	movs	r1, #0
 80004ae:	f002 f835 	bl	800251c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b2:	4b2c      	ldr	r3, [pc, #176]	; (8000564 <MX_GPIO_Init+0xc8>)
 80004b4:	695a      	ldr	r2, [r3, #20]
 80004b6:	4b2b      	ldr	r3, [pc, #172]	; (8000564 <MX_GPIO_Init+0xc8>)
 80004b8:	2180      	movs	r1, #128	; 0x80
 80004ba:	0309      	lsls	r1, r1, #12
 80004bc:	430a      	orrs	r2, r1
 80004be:	615a      	str	r2, [r3, #20]
 80004c0:	4b28      	ldr	r3, [pc, #160]	; (8000564 <MX_GPIO_Init+0xc8>)
 80004c2:	695a      	ldr	r2, [r3, #20]
 80004c4:	2380      	movs	r3, #128	; 0x80
 80004c6:	031b      	lsls	r3, r3, #12
 80004c8:	4013      	ands	r3, r2
 80004ca:	60bb      	str	r3, [r7, #8]
 80004cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ce:	4b25      	ldr	r3, [pc, #148]	; (8000564 <MX_GPIO_Init+0xc8>)
 80004d0:	695a      	ldr	r2, [r3, #20]
 80004d2:	4b24      	ldr	r3, [pc, #144]	; (8000564 <MX_GPIO_Init+0xc8>)
 80004d4:	2180      	movs	r1, #128	; 0x80
 80004d6:	03c9      	lsls	r1, r1, #15
 80004d8:	430a      	orrs	r2, r1
 80004da:	615a      	str	r2, [r3, #20]
 80004dc:	4b21      	ldr	r3, [pc, #132]	; (8000564 <MX_GPIO_Init+0xc8>)
 80004de:	695a      	ldr	r2, [r3, #20]
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	03db      	lsls	r3, r3, #15
 80004e4:	4013      	ands	r3, r2
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ea:	4b1e      	ldr	r3, [pc, #120]	; (8000564 <MX_GPIO_Init+0xc8>)
 80004ec:	695a      	ldr	r2, [r3, #20]
 80004ee:	4b1d      	ldr	r3, [pc, #116]	; (8000564 <MX_GPIO_Init+0xc8>)
 80004f0:	2180      	movs	r1, #128	; 0x80
 80004f2:	0289      	lsls	r1, r1, #10
 80004f4:	430a      	orrs	r2, r1
 80004f6:	615a      	str	r2, [r3, #20]
 80004f8:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <MX_GPIO_Init+0xc8>)
 80004fa:	695a      	ldr	r2, [r3, #20]
 80004fc:	2380      	movs	r3, #128	; 0x80
 80004fe:	029b      	lsls	r3, r3, #10
 8000500:	4013      	ands	r3, r2
 8000502:	603b      	str	r3, [r7, #0]
 8000504:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000506:	2390      	movs	r3, #144	; 0x90
 8000508:	05db      	lsls	r3, r3, #23
 800050a:	2200      	movs	r2, #0
 800050c:	2120      	movs	r1, #32
 800050e:	0018      	movs	r0, r3
 8000510:	f000 fdee 	bl	80010f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000514:	193b      	adds	r3, r7, r4
 8000516:	2280      	movs	r2, #128	; 0x80
 8000518:	0192      	lsls	r2, r2, #6
 800051a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800051c:	193b      	adds	r3, r7, r4
 800051e:	4a12      	ldr	r2, [pc, #72]	; (8000568 <MX_GPIO_Init+0xcc>)
 8000520:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	193b      	adds	r3, r7, r4
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000528:	193b      	adds	r3, r7, r4
 800052a:	4a10      	ldr	r2, [pc, #64]	; (800056c <MX_GPIO_Init+0xd0>)
 800052c:	0019      	movs	r1, r3
 800052e:	0010      	movs	r0, r2
 8000530:	f000 fc6e 	bl	8000e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000534:	0021      	movs	r1, r4
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2220      	movs	r2, #32
 800053a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2201      	movs	r2, #1
 8000540:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800054e:	187a      	adds	r2, r7, r1
 8000550:	2390      	movs	r3, #144	; 0x90
 8000552:	05db      	lsls	r3, r3, #23
 8000554:	0011      	movs	r1, r2
 8000556:	0018      	movs	r0, r3
 8000558:	f000 fc5a 	bl	8000e10 <HAL_GPIO_Init>

}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b009      	add	sp, #36	; 0x24
 8000562:	bd90      	pop	{r4, r7, pc}
 8000564:	40021000 	.word	0x40021000
 8000568:	10210000 	.word	0x10210000
 800056c:	48000800 	.word	0x48000800

08000570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000574:	46c0      	nop			; (mov r8, r8)
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
	...

0800057c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <HAL_MspInit+0x44>)
 8000584:	699a      	ldr	r2, [r3, #24]
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_MspInit+0x44>)
 8000588:	2101      	movs	r1, #1
 800058a:	430a      	orrs	r2, r1
 800058c:	619a      	str	r2, [r3, #24]
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <HAL_MspInit+0x44>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	2201      	movs	r2, #1
 8000594:	4013      	ands	r3, r2
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <HAL_MspInit+0x44>)
 800059c:	69da      	ldr	r2, [r3, #28]
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_MspInit+0x44>)
 80005a0:	2180      	movs	r1, #128	; 0x80
 80005a2:	0549      	lsls	r1, r1, #21
 80005a4:	430a      	orrs	r2, r1
 80005a6:	61da      	str	r2, [r3, #28]
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <HAL_MspInit+0x44>)
 80005aa:	69da      	ldr	r2, [r3, #28]
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	055b      	lsls	r3, r3, #21
 80005b0:	4013      	ands	r3, r2
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	b002      	add	sp, #8
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	40021000 	.word	0x40021000

080005c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08a      	sub	sp, #40	; 0x28
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005cc:	2314      	movs	r3, #20
 80005ce:	18fb      	adds	r3, r7, r3
 80005d0:	0018      	movs	r0, r3
 80005d2:	2314      	movs	r3, #20
 80005d4:	001a      	movs	r2, r3
 80005d6:	2100      	movs	r1, #0
 80005d8:	f001 ffa0 	bl	800251c <memset>
  if(huart->Instance==USART2)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a2f      	ldr	r2, [pc, #188]	; (80006a0 <HAL_UART_MspInit+0xdc>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d158      	bne.n	8000698 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005e6:	4b2f      	ldr	r3, [pc, #188]	; (80006a4 <HAL_UART_MspInit+0xe0>)
 80005e8:	69da      	ldr	r2, [r3, #28]
 80005ea:	4b2e      	ldr	r3, [pc, #184]	; (80006a4 <HAL_UART_MspInit+0xe0>)
 80005ec:	2180      	movs	r1, #128	; 0x80
 80005ee:	0289      	lsls	r1, r1, #10
 80005f0:	430a      	orrs	r2, r1
 80005f2:	61da      	str	r2, [r3, #28]
 80005f4:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <HAL_UART_MspInit+0xe0>)
 80005f6:	69da      	ldr	r2, [r3, #28]
 80005f8:	2380      	movs	r3, #128	; 0x80
 80005fa:	029b      	lsls	r3, r3, #10
 80005fc:	4013      	ands	r3, r2
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <HAL_UART_MspInit+0xe0>)
 8000604:	695a      	ldr	r2, [r3, #20]
 8000606:	4b27      	ldr	r3, [pc, #156]	; (80006a4 <HAL_UART_MspInit+0xe0>)
 8000608:	2180      	movs	r1, #128	; 0x80
 800060a:	0289      	lsls	r1, r1, #10
 800060c:	430a      	orrs	r2, r1
 800060e:	615a      	str	r2, [r3, #20]
 8000610:	4b24      	ldr	r3, [pc, #144]	; (80006a4 <HAL_UART_MspInit+0xe0>)
 8000612:	695a      	ldr	r2, [r3, #20]
 8000614:	2380      	movs	r3, #128	; 0x80
 8000616:	029b      	lsls	r3, r3, #10
 8000618:	4013      	ands	r3, r2
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800061e:	2114      	movs	r1, #20
 8000620:	187b      	adds	r3, r7, r1
 8000622:	220c      	movs	r2, #12
 8000624:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2202      	movs	r2, #2
 800062a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2201      	movs	r2, #1
 800063c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063e:	187a      	adds	r2, r7, r1
 8000640:	2390      	movs	r3, #144	; 0x90
 8000642:	05db      	lsls	r3, r3, #23
 8000644:	0011      	movs	r1, r2
 8000646:	0018      	movs	r0, r3
 8000648:	f000 fbe2 	bl	8000e10 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 800064c:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <HAL_UART_MspInit+0xe4>)
 800064e:	4a17      	ldr	r2, [pc, #92]	; (80006ac <HAL_UART_MspInit+0xe8>)
 8000650:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <HAL_UART_MspInit+0xe4>)
 8000654:	2200      	movs	r2, #0
 8000656:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000658:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <HAL_UART_MspInit+0xe4>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <HAL_UART_MspInit+0xe4>)
 8000660:	2280      	movs	r2, #128	; 0x80
 8000662:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000664:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <HAL_UART_MspInit+0xe4>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <HAL_UART_MspInit+0xe4>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000670:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <HAL_UART_MspInit+0xe4>)
 8000672:	2220      	movs	r2, #32
 8000674:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <HAL_UART_MspInit+0xe4>)
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <HAL_UART_MspInit+0xe4>)
 800067e:	0018      	movs	r0, r3
 8000680:	f000 fa2e 	bl	8000ae0 <HAL_DMA_Init>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d001      	beq.n	800068c <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000688:	f7ff ff72 	bl	8000570 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a06      	ldr	r2, [pc, #24]	; (80006a8 <HAL_UART_MspInit+0xe4>)
 8000690:	66da      	str	r2, [r3, #108]	; 0x6c
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <HAL_UART_MspInit+0xe4>)
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000698:	46c0      	nop			; (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	b00a      	add	sp, #40	; 0x28
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40004400 	.word	0x40004400
 80006a4:	40021000 	.word	0x40021000
 80006a8:	2000011c 	.word	0x2000011c
 80006ac:	40020058 	.word	0x40020058

080006b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006be:	e7fe      	b.n	80006be <HardFault_Handler+0x4>

080006c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d8:	f000 f908 	bl	80008ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80006e8:	4b03      	ldr	r3, [pc, #12]	; (80006f8 <DMA1_Channel4_5_IRQHandler+0x14>)
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 faa6 	bl	8000c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	2000011c 	.word	0x2000011c

080006fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	e00a      	b.n	8000724 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800070e:	e000      	b.n	8000712 <_read+0x16>
 8000710:	bf00      	nop
 8000712:	0001      	movs	r1, r0
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	1c5a      	adds	r2, r3, #1
 8000718:	60ba      	str	r2, [r7, #8]
 800071a:	b2ca      	uxtb	r2, r1
 800071c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	3301      	adds	r3, #1
 8000722:	617b      	str	r3, [r7, #20]
 8000724:	697a      	ldr	r2, [r7, #20]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	429a      	cmp	r2, r3
 800072a:	dbf0      	blt.n	800070e <_read+0x12>
	}

return len;
 800072c:	687b      	ldr	r3, [r7, #4]
}
 800072e:	0018      	movs	r0, r3
 8000730:	46bd      	mov	sp, r7
 8000732:	b006      	add	sp, #24
 8000734:	bd80      	pop	{r7, pc}

08000736 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	b082      	sub	sp, #8
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
	return -1;
 800073e:	2301      	movs	r3, #1
 8000740:	425b      	negs	r3, r3
}
 8000742:	0018      	movs	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	b002      	add	sp, #8
 8000748:	bd80      	pop	{r7, pc}

0800074a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
 8000752:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	2280      	movs	r2, #128	; 0x80
 8000758:	0192      	lsls	r2, r2, #6
 800075a:	605a      	str	r2, [r3, #4]
	return 0;
 800075c:	2300      	movs	r3, #0
}
 800075e:	0018      	movs	r0, r3
 8000760:	46bd      	mov	sp, r7
 8000762:	b002      	add	sp, #8
 8000764:	bd80      	pop	{r7, pc}

08000766 <_isatty>:

int _isatty(int file)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
	return 1;
 800076e:	2301      	movs	r3, #1
}
 8000770:	0018      	movs	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	b002      	add	sp, #8
 8000776:	bd80      	pop	{r7, pc}

08000778 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
	return 0;
 8000784:	2300      	movs	r3, #0
}
 8000786:	0018      	movs	r0, r3
 8000788:	46bd      	mov	sp, r7
 800078a:	b004      	add	sp, #16
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000798:	4a14      	ldr	r2, [pc, #80]	; (80007ec <_sbrk+0x5c>)
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <_sbrk+0x60>)
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <_sbrk+0x64>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d102      	bne.n	80007b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <_sbrk+0x64>)
 80007ae:	4a12      	ldr	r2, [pc, #72]	; (80007f8 <_sbrk+0x68>)
 80007b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <_sbrk+0x64>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	18d3      	adds	r3, r2, r3
 80007ba:	693a      	ldr	r2, [r7, #16]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d207      	bcs.n	80007d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007c0:	f001 fe82 	bl	80024c8 <__errno>
 80007c4:	0003      	movs	r3, r0
 80007c6:	220c      	movs	r2, #12
 80007c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ca:	2301      	movs	r3, #1
 80007cc:	425b      	negs	r3, r3
 80007ce:	e009      	b.n	80007e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <_sbrk+0x64>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <_sbrk+0x64>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	18d2      	adds	r2, r2, r3
 80007de:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <_sbrk+0x64>)
 80007e0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80007e2:	68fb      	ldr	r3, [r7, #12]
}
 80007e4:	0018      	movs	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b006      	add	sp, #24
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20002000 	.word	0x20002000
 80007f0:	00000400 	.word	0x00000400
 80007f4:	20000110 	.word	0x20000110
 80007f8:	200001e8 	.word	0x200001e8

080007fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000808:	480d      	ldr	r0, [pc, #52]	; (8000840 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800080a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800080c:	480d      	ldr	r0, [pc, #52]	; (8000844 <LoopForever+0x6>)
  ldr r1, =_edata
 800080e:	490e      	ldr	r1, [pc, #56]	; (8000848 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000810:	4a0e      	ldr	r2, [pc, #56]	; (800084c <LoopForever+0xe>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000814:	e002      	b.n	800081c <LoopCopyDataInit>

08000816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081a:	3304      	adds	r3, #4

0800081c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800081c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000820:	d3f9      	bcc.n	8000816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000822:	4a0b      	ldr	r2, [pc, #44]	; (8000850 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000824:	4c0b      	ldr	r4, [pc, #44]	; (8000854 <LoopForever+0x16>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000828:	e001      	b.n	800082e <LoopFillZerobss>

0800082a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800082c:	3204      	adds	r2, #4

0800082e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000830:	d3fb      	bcc.n	800082a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000832:	f7ff ffe3 	bl	80007fc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000836:	f001 fe4d 	bl	80024d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800083a:	f7ff fd55 	bl	80002e8 <main>

0800083e <LoopForever>:

LoopForever:
    b LoopForever
 800083e:	e7fe      	b.n	800083e <LoopForever>
  ldr   r0, =_estack
 8000840:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000848:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800084c:	08003460 	.word	0x08003460
  ldr r2, =_sbss
 8000850:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000854:	200001e8 	.word	0x200001e8

08000858 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000858:	e7fe      	b.n	8000858 <ADC1_IRQHandler>
	...

0800085c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <HAL_Init+0x24>)
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_Init+0x24>)
 8000866:	2110      	movs	r1, #16
 8000868:	430a      	orrs	r2, r1
 800086a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800086c:	2000      	movs	r0, #0
 800086e:	f000 f809 	bl	8000884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000872:	f7ff fe83 	bl	800057c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000876:	2300      	movs	r3, #0
}
 8000878:	0018      	movs	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	40022000 	.word	0x40022000

08000884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <HAL_InitTick+0x5c>)
 800088e:	681c      	ldr	r4, [r3, #0]
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <HAL_InitTick+0x60>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	0019      	movs	r1, r3
 8000896:	23fa      	movs	r3, #250	; 0xfa
 8000898:	0098      	lsls	r0, r3, #2
 800089a:	f7ff fc35 	bl	8000108 <__udivsi3>
 800089e:	0003      	movs	r3, r0
 80008a0:	0019      	movs	r1, r3
 80008a2:	0020      	movs	r0, r4
 80008a4:	f7ff fc30 	bl	8000108 <__udivsi3>
 80008a8:	0003      	movs	r3, r0
 80008aa:	0018      	movs	r0, r3
 80008ac:	f000 f90b 	bl	8000ac6 <HAL_SYSTICK_Config>
 80008b0:	1e03      	subs	r3, r0, #0
 80008b2:	d001      	beq.n	80008b8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008b4:	2301      	movs	r3, #1
 80008b6:	e00f      	b.n	80008d8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d80b      	bhi.n	80008d6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008be:	6879      	ldr	r1, [r7, #4]
 80008c0:	2301      	movs	r3, #1
 80008c2:	425b      	negs	r3, r3
 80008c4:	2200      	movs	r2, #0
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 f8d8 	bl	8000a7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_InitTick+0x64>)
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008d2:	2300      	movs	r3, #0
 80008d4:	e000      	b.n	80008d8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
}
 80008d8:	0018      	movs	r0, r3
 80008da:	46bd      	mov	sp, r7
 80008dc:	b003      	add	sp, #12
 80008de:	bd90      	pop	{r4, r7, pc}
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20000008 	.word	0x20000008
 80008e8:	20000004 	.word	0x20000004

080008ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <HAL_IncTick+0x1c>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	001a      	movs	r2, r3
 80008f6:	4b05      	ldr	r3, [pc, #20]	; (800090c <HAL_IncTick+0x20>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	18d2      	adds	r2, r2, r3
 80008fc:	4b03      	ldr	r3, [pc, #12]	; (800090c <HAL_IncTick+0x20>)
 80008fe:	601a      	str	r2, [r3, #0]
}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	20000008 	.word	0x20000008
 800090c:	200001e0 	.word	0x200001e0

08000910 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  return uwTick;
 8000914:	4b02      	ldr	r3, [pc, #8]	; (8000920 <HAL_GetTick+0x10>)
 8000916:	681b      	ldr	r3, [r3, #0]
}
 8000918:	0018      	movs	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	200001e0 	.word	0x200001e0

08000924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	0002      	movs	r2, r0
 800092c:	1dfb      	adds	r3, r7, #7
 800092e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000930:	1dfb      	adds	r3, r7, #7
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b7f      	cmp	r3, #127	; 0x7f
 8000936:	d809      	bhi.n	800094c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000938:	1dfb      	adds	r3, r7, #7
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	001a      	movs	r2, r3
 800093e:	231f      	movs	r3, #31
 8000940:	401a      	ands	r2, r3
 8000942:	4b04      	ldr	r3, [pc, #16]	; (8000954 <__NVIC_EnableIRQ+0x30>)
 8000944:	2101      	movs	r1, #1
 8000946:	4091      	lsls	r1, r2
 8000948:	000a      	movs	r2, r1
 800094a:	601a      	str	r2, [r3, #0]
  }
}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	b002      	add	sp, #8
 8000952:	bd80      	pop	{r7, pc}
 8000954:	e000e100 	.word	0xe000e100

08000958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	0002      	movs	r2, r0
 8000960:	6039      	str	r1, [r7, #0]
 8000962:	1dfb      	adds	r3, r7, #7
 8000964:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b7f      	cmp	r3, #127	; 0x7f
 800096c:	d828      	bhi.n	80009c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800096e:	4a2f      	ldr	r2, [pc, #188]	; (8000a2c <__NVIC_SetPriority+0xd4>)
 8000970:	1dfb      	adds	r3, r7, #7
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b25b      	sxtb	r3, r3
 8000976:	089b      	lsrs	r3, r3, #2
 8000978:	33c0      	adds	r3, #192	; 0xc0
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	589b      	ldr	r3, [r3, r2]
 800097e:	1dfa      	adds	r2, r7, #7
 8000980:	7812      	ldrb	r2, [r2, #0]
 8000982:	0011      	movs	r1, r2
 8000984:	2203      	movs	r2, #3
 8000986:	400a      	ands	r2, r1
 8000988:	00d2      	lsls	r2, r2, #3
 800098a:	21ff      	movs	r1, #255	; 0xff
 800098c:	4091      	lsls	r1, r2
 800098e:	000a      	movs	r2, r1
 8000990:	43d2      	mvns	r2, r2
 8000992:	401a      	ands	r2, r3
 8000994:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	019b      	lsls	r3, r3, #6
 800099a:	22ff      	movs	r2, #255	; 0xff
 800099c:	401a      	ands	r2, r3
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	0018      	movs	r0, r3
 80009a4:	2303      	movs	r3, #3
 80009a6:	4003      	ands	r3, r0
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ac:	481f      	ldr	r0, [pc, #124]	; (8000a2c <__NVIC_SetPriority+0xd4>)
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	b25b      	sxtb	r3, r3
 80009b4:	089b      	lsrs	r3, r3, #2
 80009b6:	430a      	orrs	r2, r1
 80009b8:	33c0      	adds	r3, #192	; 0xc0
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009be:	e031      	b.n	8000a24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009c0:	4a1b      	ldr	r2, [pc, #108]	; (8000a30 <__NVIC_SetPriority+0xd8>)
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	0019      	movs	r1, r3
 80009c8:	230f      	movs	r3, #15
 80009ca:	400b      	ands	r3, r1
 80009cc:	3b08      	subs	r3, #8
 80009ce:	089b      	lsrs	r3, r3, #2
 80009d0:	3306      	adds	r3, #6
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	18d3      	adds	r3, r2, r3
 80009d6:	3304      	adds	r3, #4
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	1dfa      	adds	r2, r7, #7
 80009dc:	7812      	ldrb	r2, [r2, #0]
 80009de:	0011      	movs	r1, r2
 80009e0:	2203      	movs	r2, #3
 80009e2:	400a      	ands	r2, r1
 80009e4:	00d2      	lsls	r2, r2, #3
 80009e6:	21ff      	movs	r1, #255	; 0xff
 80009e8:	4091      	lsls	r1, r2
 80009ea:	000a      	movs	r2, r1
 80009ec:	43d2      	mvns	r2, r2
 80009ee:	401a      	ands	r2, r3
 80009f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	019b      	lsls	r3, r3, #6
 80009f6:	22ff      	movs	r2, #255	; 0xff
 80009f8:	401a      	ands	r2, r3
 80009fa:	1dfb      	adds	r3, r7, #7
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	0018      	movs	r0, r3
 8000a00:	2303      	movs	r3, #3
 8000a02:	4003      	ands	r3, r0
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a08:	4809      	ldr	r0, [pc, #36]	; (8000a30 <__NVIC_SetPriority+0xd8>)
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	001c      	movs	r4, r3
 8000a10:	230f      	movs	r3, #15
 8000a12:	4023      	ands	r3, r4
 8000a14:	3b08      	subs	r3, #8
 8000a16:	089b      	lsrs	r3, r3, #2
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	3306      	adds	r3, #6
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	18c3      	adds	r3, r0, r3
 8000a20:	3304      	adds	r3, #4
 8000a22:	601a      	str	r2, [r3, #0]
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b003      	add	sp, #12
 8000a2a:	bd90      	pop	{r4, r7, pc}
 8000a2c:	e000e100 	.word	0xe000e100
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	4a0c      	ldr	r2, [pc, #48]	; (8000a74 <SysTick_Config+0x40>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d901      	bls.n	8000a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a46:	2301      	movs	r3, #1
 8000a48:	e010      	b.n	8000a6c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <SysTick_Config+0x44>)
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	3a01      	subs	r2, #1
 8000a50:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a52:	2301      	movs	r3, #1
 8000a54:	425b      	negs	r3, r3
 8000a56:	2103      	movs	r1, #3
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f7ff ff7d 	bl	8000958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <SysTick_Config+0x44>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <SysTick_Config+0x44>)
 8000a66:	2207      	movs	r2, #7
 8000a68:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a6a:	2300      	movs	r3, #0
}
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b002      	add	sp, #8
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	00ffffff 	.word	0x00ffffff
 8000a78:	e000e010 	.word	0xe000e010

08000a7c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	607a      	str	r2, [r7, #4]
 8000a86:	210f      	movs	r1, #15
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	1c02      	adds	r2, r0, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	b25b      	sxtb	r3, r3
 8000a96:	0011      	movs	r1, r2
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f7ff ff5d 	bl	8000958 <__NVIC_SetPriority>
}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b004      	add	sp, #16
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	0002      	movs	r2, r0
 8000aae:	1dfb      	adds	r3, r7, #7
 8000ab0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	b25b      	sxtb	r3, r3
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f7ff ff33 	bl	8000924 <__NVIC_EnableIRQ>
}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b002      	add	sp, #8
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f7ff ffaf 	bl	8000a34 <SysTick_Config>
 8000ad6:	0003      	movs	r3, r0
}
 8000ad8:	0018      	movs	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b002      	add	sp, #8
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d101      	bne.n	8000af6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e036      	b.n	8000b64 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2221      	movs	r2, #33	; 0x21
 8000afa:	2102      	movs	r1, #2
 8000afc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	4a18      	ldr	r2, [pc, #96]	; (8000b6c <HAL_DMA_Init+0x8c>)
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	695b      	ldr	r3, [r3, #20]
 8000b28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	69db      	ldr	r3, [r3, #28]
 8000b34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	68fa      	ldr	r2, [r7, #12]
 8000b42:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	0018      	movs	r0, r3
 8000b48:	f000 f946 	bl	8000dd8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2221      	movs	r2, #33	; 0x21
 8000b56:	2101      	movs	r1, #1
 8000b58:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2220      	movs	r2, #32
 8000b5e:	2100      	movs	r1, #0
 8000b60:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000b62:	2300      	movs	r3, #0
}  
 8000b64:	0018      	movs	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b004      	add	sp, #16
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	ffffc00f 	.word	0xffffc00f

08000b70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
 8000b7c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000b7e:	2317      	movs	r3, #23
 8000b80:	18fb      	adds	r3, r7, r3
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	2220      	movs	r2, #32
 8000b8a:	5c9b      	ldrb	r3, [r3, r2]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d101      	bne.n	8000b94 <HAL_DMA_Start_IT+0x24>
 8000b90:	2302      	movs	r3, #2
 8000b92:	e04f      	b.n	8000c34 <HAL_DMA_Start_IT+0xc4>
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2220      	movs	r2, #32
 8000b98:	2101      	movs	r1, #1
 8000b9a:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	2221      	movs	r2, #33	; 0x21
 8000ba0:	5c9b      	ldrb	r3, [r3, r2]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d13a      	bne.n	8000c1e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	2221      	movs	r2, #33	; 0x21
 8000bac:	2102      	movs	r1, #2
 8000bae:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	438a      	bics	r2, r1
 8000bc4:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	68b9      	ldr	r1, [r7, #8]
 8000bcc:	68f8      	ldr	r0, [r7, #12]
 8000bce:	f000 f8d7 	bl	8000d80 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d008      	beq.n	8000bec <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	210e      	movs	r1, #14
 8000be6:	430a      	orrs	r2, r1
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	e00f      	b.n	8000c0c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	210a      	movs	r1, #10
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2104      	movs	r1, #4
 8000c08:	438a      	bics	r2, r1
 8000c0a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2101      	movs	r1, #1
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	e007      	b.n	8000c2e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	2220      	movs	r2, #32
 8000c22:	2100      	movs	r1, #0
 8000c24:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000c26:	2317      	movs	r3, #23
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	2202      	movs	r2, #2
 8000c2c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000c2e:	2317      	movs	r3, #23
 8000c30:	18fb      	adds	r3, r7, r3
 8000c32:	781b      	ldrb	r3, [r3, #0]
} 
 8000c34:	0018      	movs	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b006      	add	sp, #24
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	2204      	movs	r2, #4
 8000c5a:	409a      	lsls	r2, r3
 8000c5c:	0013      	movs	r3, r2
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	4013      	ands	r3, r2
 8000c62:	d024      	beq.n	8000cae <HAL_DMA_IRQHandler+0x72>
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	2204      	movs	r2, #4
 8000c68:	4013      	ands	r3, r2
 8000c6a:	d020      	beq.n	8000cae <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2220      	movs	r2, #32
 8000c74:	4013      	ands	r3, r2
 8000c76:	d107      	bne.n	8000c88 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2104      	movs	r1, #4
 8000c84:	438a      	bics	r2, r1
 8000c86:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c90:	2104      	movs	r1, #4
 8000c92:	4091      	lsls	r1, r2
 8000c94:	000a      	movs	r2, r1
 8000c96:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d100      	bne.n	8000ca2 <HAL_DMA_IRQHandler+0x66>
 8000ca0:	e06a      	b.n	8000d78 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	0010      	movs	r0, r2
 8000caa:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000cac:	e064      	b.n	8000d78 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	409a      	lsls	r2, r3
 8000cb6:	0013      	movs	r3, r2
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	d02b      	beq.n	8000d16 <HAL_DMA_IRQHandler+0xda>
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	d027      	beq.n	8000d16 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2220      	movs	r2, #32
 8000cce:	4013      	ands	r3, r2
 8000cd0:	d10b      	bne.n	8000cea <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	210a      	movs	r1, #10
 8000cde:	438a      	bics	r2, r1
 8000ce0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2221      	movs	r2, #33	; 0x21
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cf2:	2102      	movs	r1, #2
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	000a      	movs	r2, r1
 8000cf8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2220      	movs	r2, #32
 8000cfe:	2100      	movs	r1, #0
 8000d00:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d036      	beq.n	8000d78 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	0010      	movs	r0, r2
 8000d12:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000d14:	e030      	b.n	8000d78 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	2208      	movs	r2, #8
 8000d1c:	409a      	lsls	r2, r3
 8000d1e:	0013      	movs	r3, r2
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	4013      	ands	r3, r2
 8000d24:	d028      	beq.n	8000d78 <HAL_DMA_IRQHandler+0x13c>
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	2208      	movs	r2, #8
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	d024      	beq.n	8000d78 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	210e      	movs	r1, #14
 8000d3a:	438a      	bics	r2, r1
 8000d3c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d46:	2101      	movs	r1, #1
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	000a      	movs	r2, r1
 8000d4c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2201      	movs	r2, #1
 8000d52:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2221      	movs	r2, #33	; 0x21
 8000d58:	2101      	movs	r1, #1
 8000d5a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2220      	movs	r2, #32
 8000d60:	2100      	movs	r1, #0
 8000d62:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d005      	beq.n	8000d78 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	0010      	movs	r0, r2
 8000d74:	4798      	blx	r3
    }
   }
}  
 8000d76:	e7ff      	b.n	8000d78 <HAL_DMA_IRQHandler+0x13c>
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b004      	add	sp, #16
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d96:	2101      	movs	r1, #1
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	000a      	movs	r2, r1
 8000d9c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	683a      	ldr	r2, [r7, #0]
 8000da4:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2b10      	cmp	r3, #16
 8000dac:	d108      	bne.n	8000dc0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000dbe:	e007      	b.n	8000dd0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	68ba      	ldr	r2, [r7, #8]
 8000dc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	60da      	str	r2, [r3, #12]
}
 8000dd0:	46c0      	nop			; (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b004      	add	sp, #16
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a08      	ldr	r2, [pc, #32]	; (8000e08 <DMA_CalcBaseAndBitshift+0x30>)
 8000de6:	4694      	mov	ip, r2
 8000de8:	4463      	add	r3, ip
 8000dea:	2114      	movs	r1, #20
 8000dec:	0018      	movs	r0, r3
 8000dee:	f7ff f98b 	bl	8000108 <__udivsi3>
 8000df2:	0003      	movs	r3, r0
 8000df4:	009a      	lsls	r2, r3, #2
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a03      	ldr	r2, [pc, #12]	; (8000e0c <DMA_CalcBaseAndBitshift+0x34>)
 8000dfe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000e00:	46c0      	nop			; (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b002      	add	sp, #8
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	bffdfff8 	.word	0xbffdfff8
 8000e0c:	40020000 	.word	0x40020000

08000e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e1e:	e14f      	b.n	80010c0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2101      	movs	r1, #1
 8000e26:	697a      	ldr	r2, [r7, #20]
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	000a      	movs	r2, r1
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d100      	bne.n	8000e38 <HAL_GPIO_Init+0x28>
 8000e36:	e140      	b.n	80010ba <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d00b      	beq.n	8000e58 <HAL_GPIO_Init+0x48>
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d007      	beq.n	8000e58 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e4c:	2b11      	cmp	r3, #17
 8000e4e:	d003      	beq.n	8000e58 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b12      	cmp	r3, #18
 8000e56:	d130      	bne.n	8000eba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2203      	movs	r2, #3
 8000e64:	409a      	lsls	r2, r3
 8000e66:	0013      	movs	r3, r2
 8000e68:	43da      	mvns	r2, r3
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	409a      	lsls	r2, r3
 8000e7a:	0013      	movs	r3, r2
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e8e:	2201      	movs	r2, #1
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
 8000e94:	0013      	movs	r3, r2
 8000e96:	43da      	mvns	r2, r3
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	091b      	lsrs	r3, r3, #4
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
 8000eac:	0013      	movs	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	409a      	lsls	r2, r3
 8000ec8:	0013      	movs	r3, r2
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	689a      	ldr	r2, [r3, #8]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	409a      	lsls	r2, r3
 8000edc:	0013      	movs	r3, r2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0xea>
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	2b12      	cmp	r3, #18
 8000ef8:	d123      	bne.n	8000f42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	08da      	lsrs	r2, r3, #3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3208      	adds	r2, #8
 8000f02:	0092      	lsls	r2, r2, #2
 8000f04:	58d3      	ldr	r3, [r2, r3]
 8000f06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	2207      	movs	r2, #7
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	220f      	movs	r2, #15
 8000f12:	409a      	lsls	r2, r3
 8000f14:	0013      	movs	r3, r2
 8000f16:	43da      	mvns	r2, r3
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	691a      	ldr	r2, [r3, #16]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	2107      	movs	r1, #7
 8000f26:	400b      	ands	r3, r1
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	0013      	movs	r3, r2
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	08da      	lsrs	r2, r3, #3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3208      	adds	r2, #8
 8000f3c:	0092      	lsls	r2, r2, #2
 8000f3e:	6939      	ldr	r1, [r7, #16]
 8000f40:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	0013      	movs	r3, r2
 8000f52:	43da      	mvns	r2, r3
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2203      	movs	r2, #3
 8000f60:	401a      	ands	r2, r3
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	409a      	lsls	r2, r3
 8000f68:	0013      	movs	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685a      	ldr	r2, [r3, #4]
 8000f7a:	2380      	movs	r3, #128	; 0x80
 8000f7c:	055b      	lsls	r3, r3, #21
 8000f7e:	4013      	ands	r3, r2
 8000f80:	d100      	bne.n	8000f84 <HAL_GPIO_Init+0x174>
 8000f82:	e09a      	b.n	80010ba <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f84:	4b54      	ldr	r3, [pc, #336]	; (80010d8 <HAL_GPIO_Init+0x2c8>)
 8000f86:	699a      	ldr	r2, [r3, #24]
 8000f88:	4b53      	ldr	r3, [pc, #332]	; (80010d8 <HAL_GPIO_Init+0x2c8>)
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	619a      	str	r2, [r3, #24]
 8000f90:	4b51      	ldr	r3, [pc, #324]	; (80010d8 <HAL_GPIO_Init+0x2c8>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	2201      	movs	r2, #1
 8000f96:	4013      	ands	r3, r2
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f9c:	4a4f      	ldr	r2, [pc, #316]	; (80010dc <HAL_GPIO_Init+0x2cc>)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	089b      	lsrs	r3, r3, #2
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	589b      	ldr	r3, [r3, r2]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	2203      	movs	r2, #3
 8000fae:	4013      	ands	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	220f      	movs	r2, #15
 8000fb4:	409a      	lsls	r2, r3
 8000fb6:	0013      	movs	r3, r2
 8000fb8:	43da      	mvns	r2, r3
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	2390      	movs	r3, #144	; 0x90
 8000fc4:	05db      	lsls	r3, r3, #23
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d013      	beq.n	8000ff2 <HAL_GPIO_Init+0x1e2>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a44      	ldr	r2, [pc, #272]	; (80010e0 <HAL_GPIO_Init+0x2d0>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d00d      	beq.n	8000fee <HAL_GPIO_Init+0x1de>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a43      	ldr	r2, [pc, #268]	; (80010e4 <HAL_GPIO_Init+0x2d4>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d007      	beq.n	8000fea <HAL_GPIO_Init+0x1da>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a42      	ldr	r2, [pc, #264]	; (80010e8 <HAL_GPIO_Init+0x2d8>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d101      	bne.n	8000fe6 <HAL_GPIO_Init+0x1d6>
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e006      	b.n	8000ff4 <HAL_GPIO_Init+0x1e4>
 8000fe6:	2305      	movs	r3, #5
 8000fe8:	e004      	b.n	8000ff4 <HAL_GPIO_Init+0x1e4>
 8000fea:	2302      	movs	r3, #2
 8000fec:	e002      	b.n	8000ff4 <HAL_GPIO_Init+0x1e4>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e000      	b.n	8000ff4 <HAL_GPIO_Init+0x1e4>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	697a      	ldr	r2, [r7, #20]
 8000ff6:	2103      	movs	r1, #3
 8000ff8:	400a      	ands	r2, r1
 8000ffa:	0092      	lsls	r2, r2, #2
 8000ffc:	4093      	lsls	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001004:	4935      	ldr	r1, [pc, #212]	; (80010dc <HAL_GPIO_Init+0x2cc>)
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	089b      	lsrs	r3, r3, #2
 800100a:	3302      	adds	r3, #2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001012:	4b36      	ldr	r3, [pc, #216]	; (80010ec <HAL_GPIO_Init+0x2dc>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	43da      	mvns	r2, r3
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	2380      	movs	r3, #128	; 0x80
 8001028:	025b      	lsls	r3, r3, #9
 800102a:	4013      	ands	r3, r2
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4313      	orrs	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001036:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <HAL_GPIO_Init+0x2dc>)
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800103c:	4b2b      	ldr	r3, [pc, #172]	; (80010ec <HAL_GPIO_Init+0x2dc>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	43da      	mvns	r2, r3
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	029b      	lsls	r3, r3, #10
 8001054:	4013      	ands	r3, r2
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001060:	4b22      	ldr	r3, [pc, #136]	; (80010ec <HAL_GPIO_Init+0x2dc>)
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001066:	4b21      	ldr	r3, [pc, #132]	; (80010ec <HAL_GPIO_Init+0x2dc>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	43da      	mvns	r2, r3
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	2380      	movs	r3, #128	; 0x80
 800107c:	035b      	lsls	r3, r3, #13
 800107e:	4013      	ands	r3, r2
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <HAL_GPIO_Init+0x2dc>)
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001090:	4b16      	ldr	r3, [pc, #88]	; (80010ec <HAL_GPIO_Init+0x2dc>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	43da      	mvns	r2, r3
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	039b      	lsls	r3, r3, #14
 80010a8:	4013      	ands	r3, r2
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010b4:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <HAL_GPIO_Init+0x2dc>)
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	3301      	adds	r3, #1
 80010be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	40da      	lsrs	r2, r3
 80010c8:	1e13      	subs	r3, r2, #0
 80010ca:	d000      	beq.n	80010ce <HAL_GPIO_Init+0x2be>
 80010cc:	e6a8      	b.n	8000e20 <HAL_GPIO_Init+0x10>
  } 
}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	46bd      	mov	sp, r7
 80010d2:	b006      	add	sp, #24
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40010000 	.word	0x40010000
 80010e0:	48000400 	.word	0x48000400
 80010e4:	48000800 	.word	0x48000800
 80010e8:	48000c00 	.word	0x48000c00
 80010ec:	40010400 	.word	0x40010400

080010f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	0008      	movs	r0, r1
 80010fa:	0011      	movs	r1, r2
 80010fc:	1cbb      	adds	r3, r7, #2
 80010fe:	1c02      	adds	r2, r0, #0
 8001100:	801a      	strh	r2, [r3, #0]
 8001102:	1c7b      	adds	r3, r7, #1
 8001104:	1c0a      	adds	r2, r1, #0
 8001106:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001108:	1c7b      	adds	r3, r7, #1
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d004      	beq.n	800111a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001110:	1cbb      	adds	r3, r7, #2
 8001112:	881a      	ldrh	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001118:	e003      	b.n	8001122 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800111a:	1cbb      	adds	r3, r7, #2
 800111c:	881a      	ldrh	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	46bd      	mov	sp, r7
 8001126:	b002      	add	sp, #8
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e303      	b.n	8001746 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2201      	movs	r2, #1
 8001144:	4013      	ands	r3, r2
 8001146:	d100      	bne.n	800114a <HAL_RCC_OscConfig+0x1e>
 8001148:	e08d      	b.n	8001266 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800114a:	4bc4      	ldr	r3, [pc, #784]	; (800145c <HAL_RCC_OscConfig+0x330>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	220c      	movs	r2, #12
 8001150:	4013      	ands	r3, r2
 8001152:	2b04      	cmp	r3, #4
 8001154:	d00e      	beq.n	8001174 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001156:	4bc1      	ldr	r3, [pc, #772]	; (800145c <HAL_RCC_OscConfig+0x330>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	220c      	movs	r2, #12
 800115c:	4013      	ands	r3, r2
 800115e:	2b08      	cmp	r3, #8
 8001160:	d116      	bne.n	8001190 <HAL_RCC_OscConfig+0x64>
 8001162:	4bbe      	ldr	r3, [pc, #760]	; (800145c <HAL_RCC_OscConfig+0x330>)
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	025b      	lsls	r3, r3, #9
 800116a:	401a      	ands	r2, r3
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	025b      	lsls	r3, r3, #9
 8001170:	429a      	cmp	r2, r3
 8001172:	d10d      	bne.n	8001190 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001174:	4bb9      	ldr	r3, [pc, #740]	; (800145c <HAL_RCC_OscConfig+0x330>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	029b      	lsls	r3, r3, #10
 800117c:	4013      	ands	r3, r2
 800117e:	d100      	bne.n	8001182 <HAL_RCC_OscConfig+0x56>
 8001180:	e070      	b.n	8001264 <HAL_RCC_OscConfig+0x138>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d000      	beq.n	800118c <HAL_RCC_OscConfig+0x60>
 800118a:	e06b      	b.n	8001264 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e2da      	b.n	8001746 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d107      	bne.n	80011a8 <HAL_RCC_OscConfig+0x7c>
 8001198:	4bb0      	ldr	r3, [pc, #704]	; (800145c <HAL_RCC_OscConfig+0x330>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4baf      	ldr	r3, [pc, #700]	; (800145c <HAL_RCC_OscConfig+0x330>)
 800119e:	2180      	movs	r1, #128	; 0x80
 80011a0:	0249      	lsls	r1, r1, #9
 80011a2:	430a      	orrs	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	e02f      	b.n	8001208 <HAL_RCC_OscConfig+0xdc>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d10c      	bne.n	80011ca <HAL_RCC_OscConfig+0x9e>
 80011b0:	4baa      	ldr	r3, [pc, #680]	; (800145c <HAL_RCC_OscConfig+0x330>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4ba9      	ldr	r3, [pc, #676]	; (800145c <HAL_RCC_OscConfig+0x330>)
 80011b6:	49aa      	ldr	r1, [pc, #680]	; (8001460 <HAL_RCC_OscConfig+0x334>)
 80011b8:	400a      	ands	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	4ba7      	ldr	r3, [pc, #668]	; (800145c <HAL_RCC_OscConfig+0x330>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4ba6      	ldr	r3, [pc, #664]	; (800145c <HAL_RCC_OscConfig+0x330>)
 80011c2:	49a8      	ldr	r1, [pc, #672]	; (8001464 <HAL_RCC_OscConfig+0x338>)
 80011c4:	400a      	ands	r2, r1
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	e01e      	b.n	8001208 <HAL_RCC_OscConfig+0xdc>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	2b05      	cmp	r3, #5
 80011d0:	d10e      	bne.n	80011f0 <HAL_RCC_OscConfig+0xc4>
 80011d2:	4ba2      	ldr	r3, [pc, #648]	; (800145c <HAL_RCC_OscConfig+0x330>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	4ba1      	ldr	r3, [pc, #644]	; (800145c <HAL_RCC_OscConfig+0x330>)
 80011d8:	2180      	movs	r1, #128	; 0x80
 80011da:	02c9      	lsls	r1, r1, #11
 80011dc:	430a      	orrs	r2, r1
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	4b9e      	ldr	r3, [pc, #632]	; (800145c <HAL_RCC_OscConfig+0x330>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b9d      	ldr	r3, [pc, #628]	; (800145c <HAL_RCC_OscConfig+0x330>)
 80011e6:	2180      	movs	r1, #128	; 0x80
 80011e8:	0249      	lsls	r1, r1, #9
 80011ea:	430a      	orrs	r2, r1
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	e00b      	b.n	8001208 <HAL_RCC_OscConfig+0xdc>
 80011f0:	4b9a      	ldr	r3, [pc, #616]	; (800145c <HAL_RCC_OscConfig+0x330>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b99      	ldr	r3, [pc, #612]	; (800145c <HAL_RCC_OscConfig+0x330>)
 80011f6:	499a      	ldr	r1, [pc, #616]	; (8001460 <HAL_RCC_OscConfig+0x334>)
 80011f8:	400a      	ands	r2, r1
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	4b97      	ldr	r3, [pc, #604]	; (800145c <HAL_RCC_OscConfig+0x330>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b96      	ldr	r3, [pc, #600]	; (800145c <HAL_RCC_OscConfig+0x330>)
 8001202:	4998      	ldr	r1, [pc, #608]	; (8001464 <HAL_RCC_OscConfig+0x338>)
 8001204:	400a      	ands	r2, r1
 8001206:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d014      	beq.n	800123a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001210:	f7ff fb7e 	bl	8000910 <HAL_GetTick>
 8001214:	0003      	movs	r3, r0
 8001216:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800121a:	f7ff fb79 	bl	8000910 <HAL_GetTick>
 800121e:	0002      	movs	r2, r0
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b64      	cmp	r3, #100	; 0x64
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e28c      	b.n	8001746 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122c:	4b8b      	ldr	r3, [pc, #556]	; (800145c <HAL_RCC_OscConfig+0x330>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	2380      	movs	r3, #128	; 0x80
 8001232:	029b      	lsls	r3, r3, #10
 8001234:	4013      	ands	r3, r2
 8001236:	d0f0      	beq.n	800121a <HAL_RCC_OscConfig+0xee>
 8001238:	e015      	b.n	8001266 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123a:	f7ff fb69 	bl	8000910 <HAL_GetTick>
 800123e:	0003      	movs	r3, r0
 8001240:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001244:	f7ff fb64 	bl	8000910 <HAL_GetTick>
 8001248:	0002      	movs	r2, r0
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b64      	cmp	r3, #100	; 0x64
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e277      	b.n	8001746 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001256:	4b81      	ldr	r3, [pc, #516]	; (800145c <HAL_RCC_OscConfig+0x330>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	2380      	movs	r3, #128	; 0x80
 800125c:	029b      	lsls	r3, r3, #10
 800125e:	4013      	ands	r3, r2
 8001260:	d1f0      	bne.n	8001244 <HAL_RCC_OscConfig+0x118>
 8001262:	e000      	b.n	8001266 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001264:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2202      	movs	r2, #2
 800126c:	4013      	ands	r3, r2
 800126e:	d100      	bne.n	8001272 <HAL_RCC_OscConfig+0x146>
 8001270:	e069      	b.n	8001346 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001272:	4b7a      	ldr	r3, [pc, #488]	; (800145c <HAL_RCC_OscConfig+0x330>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	220c      	movs	r2, #12
 8001278:	4013      	ands	r3, r2
 800127a:	d00b      	beq.n	8001294 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800127c:	4b77      	ldr	r3, [pc, #476]	; (800145c <HAL_RCC_OscConfig+0x330>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	220c      	movs	r2, #12
 8001282:	4013      	ands	r3, r2
 8001284:	2b08      	cmp	r3, #8
 8001286:	d11c      	bne.n	80012c2 <HAL_RCC_OscConfig+0x196>
 8001288:	4b74      	ldr	r3, [pc, #464]	; (800145c <HAL_RCC_OscConfig+0x330>)
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	025b      	lsls	r3, r3, #9
 8001290:	4013      	ands	r3, r2
 8001292:	d116      	bne.n	80012c2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001294:	4b71      	ldr	r3, [pc, #452]	; (800145c <HAL_RCC_OscConfig+0x330>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2202      	movs	r2, #2
 800129a:	4013      	ands	r3, r2
 800129c:	d005      	beq.n	80012aa <HAL_RCC_OscConfig+0x17e>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d001      	beq.n	80012aa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e24d      	b.n	8001746 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012aa:	4b6c      	ldr	r3, [pc, #432]	; (800145c <HAL_RCC_OscConfig+0x330>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	22f8      	movs	r2, #248	; 0xf8
 80012b0:	4393      	bics	r3, r2
 80012b2:	0019      	movs	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	00da      	lsls	r2, r3, #3
 80012ba:	4b68      	ldr	r3, [pc, #416]	; (800145c <HAL_RCC_OscConfig+0x330>)
 80012bc:	430a      	orrs	r2, r1
 80012be:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c0:	e041      	b.n	8001346 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d024      	beq.n	8001314 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012ca:	4b64      	ldr	r3, [pc, #400]	; (800145c <HAL_RCC_OscConfig+0x330>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4b63      	ldr	r3, [pc, #396]	; (800145c <HAL_RCC_OscConfig+0x330>)
 80012d0:	2101      	movs	r1, #1
 80012d2:	430a      	orrs	r2, r1
 80012d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d6:	f7ff fb1b 	bl	8000910 <HAL_GetTick>
 80012da:	0003      	movs	r3, r0
 80012dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e0:	f7ff fb16 	bl	8000910 <HAL_GetTick>
 80012e4:	0002      	movs	r2, r0
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e229      	b.n	8001746 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f2:	4b5a      	ldr	r3, [pc, #360]	; (800145c <HAL_RCC_OscConfig+0x330>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2202      	movs	r2, #2
 80012f8:	4013      	ands	r3, r2
 80012fa:	d0f1      	beq.n	80012e0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fc:	4b57      	ldr	r3, [pc, #348]	; (800145c <HAL_RCC_OscConfig+0x330>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	22f8      	movs	r2, #248	; 0xf8
 8001302:	4393      	bics	r3, r2
 8001304:	0019      	movs	r1, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	00da      	lsls	r2, r3, #3
 800130c:	4b53      	ldr	r3, [pc, #332]	; (800145c <HAL_RCC_OscConfig+0x330>)
 800130e:	430a      	orrs	r2, r1
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	e018      	b.n	8001346 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001314:	4b51      	ldr	r3, [pc, #324]	; (800145c <HAL_RCC_OscConfig+0x330>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b50      	ldr	r3, [pc, #320]	; (800145c <HAL_RCC_OscConfig+0x330>)
 800131a:	2101      	movs	r1, #1
 800131c:	438a      	bics	r2, r1
 800131e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001320:	f7ff faf6 	bl	8000910 <HAL_GetTick>
 8001324:	0003      	movs	r3, r0
 8001326:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800132a:	f7ff faf1 	bl	8000910 <HAL_GetTick>
 800132e:	0002      	movs	r2, r0
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e204      	b.n	8001746 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133c:	4b47      	ldr	r3, [pc, #284]	; (800145c <HAL_RCC_OscConfig+0x330>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2202      	movs	r2, #2
 8001342:	4013      	ands	r3, r2
 8001344:	d1f1      	bne.n	800132a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2208      	movs	r2, #8
 800134c:	4013      	ands	r3, r2
 800134e:	d036      	beq.n	80013be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d019      	beq.n	800138c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001358:	4b40      	ldr	r3, [pc, #256]	; (800145c <HAL_RCC_OscConfig+0x330>)
 800135a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800135c:	4b3f      	ldr	r3, [pc, #252]	; (800145c <HAL_RCC_OscConfig+0x330>)
 800135e:	2101      	movs	r1, #1
 8001360:	430a      	orrs	r2, r1
 8001362:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001364:	f7ff fad4 	bl	8000910 <HAL_GetTick>
 8001368:	0003      	movs	r3, r0
 800136a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800136e:	f7ff facf 	bl	8000910 <HAL_GetTick>
 8001372:	0002      	movs	r2, r0
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e1e2      	b.n	8001746 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001380:	4b36      	ldr	r3, [pc, #216]	; (800145c <HAL_RCC_OscConfig+0x330>)
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	2202      	movs	r2, #2
 8001386:	4013      	ands	r3, r2
 8001388:	d0f1      	beq.n	800136e <HAL_RCC_OscConfig+0x242>
 800138a:	e018      	b.n	80013be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800138c:	4b33      	ldr	r3, [pc, #204]	; (800145c <HAL_RCC_OscConfig+0x330>)
 800138e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001390:	4b32      	ldr	r3, [pc, #200]	; (800145c <HAL_RCC_OscConfig+0x330>)
 8001392:	2101      	movs	r1, #1
 8001394:	438a      	bics	r2, r1
 8001396:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001398:	f7ff faba 	bl	8000910 <HAL_GetTick>
 800139c:	0003      	movs	r3, r0
 800139e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a2:	f7ff fab5 	bl	8000910 <HAL_GetTick>
 80013a6:	0002      	movs	r2, r0
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e1c8      	b.n	8001746 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b4:	4b29      	ldr	r3, [pc, #164]	; (800145c <HAL_RCC_OscConfig+0x330>)
 80013b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b8:	2202      	movs	r2, #2
 80013ba:	4013      	ands	r3, r2
 80013bc:	d1f1      	bne.n	80013a2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2204      	movs	r2, #4
 80013c4:	4013      	ands	r3, r2
 80013c6:	d100      	bne.n	80013ca <HAL_RCC_OscConfig+0x29e>
 80013c8:	e0b6      	b.n	8001538 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ca:	231f      	movs	r3, #31
 80013cc:	18fb      	adds	r3, r7, r3
 80013ce:	2200      	movs	r2, #0
 80013d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013d2:	4b22      	ldr	r3, [pc, #136]	; (800145c <HAL_RCC_OscConfig+0x330>)
 80013d4:	69da      	ldr	r2, [r3, #28]
 80013d6:	2380      	movs	r3, #128	; 0x80
 80013d8:	055b      	lsls	r3, r3, #21
 80013da:	4013      	ands	r3, r2
 80013dc:	d111      	bne.n	8001402 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013de:	4b1f      	ldr	r3, [pc, #124]	; (800145c <HAL_RCC_OscConfig+0x330>)
 80013e0:	69da      	ldr	r2, [r3, #28]
 80013e2:	4b1e      	ldr	r3, [pc, #120]	; (800145c <HAL_RCC_OscConfig+0x330>)
 80013e4:	2180      	movs	r1, #128	; 0x80
 80013e6:	0549      	lsls	r1, r1, #21
 80013e8:	430a      	orrs	r2, r1
 80013ea:	61da      	str	r2, [r3, #28]
 80013ec:	4b1b      	ldr	r3, [pc, #108]	; (800145c <HAL_RCC_OscConfig+0x330>)
 80013ee:	69da      	ldr	r2, [r3, #28]
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	055b      	lsls	r3, r3, #21
 80013f4:	4013      	ands	r3, r2
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013fa:	231f      	movs	r3, #31
 80013fc:	18fb      	adds	r3, r7, r3
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_RCC_OscConfig+0x33c>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4013      	ands	r3, r2
 800140c:	d11a      	bne.n	8001444 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <HAL_RCC_OscConfig+0x33c>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_RCC_OscConfig+0x33c>)
 8001414:	2180      	movs	r1, #128	; 0x80
 8001416:	0049      	lsls	r1, r1, #1
 8001418:	430a      	orrs	r2, r1
 800141a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800141c:	f7ff fa78 	bl	8000910 <HAL_GetTick>
 8001420:	0003      	movs	r3, r0
 8001422:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001426:	f7ff fa73 	bl	8000910 <HAL_GetTick>
 800142a:	0002      	movs	r2, r0
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b64      	cmp	r3, #100	; 0x64
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e186      	b.n	8001746 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <HAL_RCC_OscConfig+0x33c>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	2380      	movs	r3, #128	; 0x80
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	4013      	ands	r3, r2
 8001442:	d0f0      	beq.n	8001426 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d10f      	bne.n	800146c <HAL_RCC_OscConfig+0x340>
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <HAL_RCC_OscConfig+0x330>)
 800144e:	6a1a      	ldr	r2, [r3, #32]
 8001450:	4b02      	ldr	r3, [pc, #8]	; (800145c <HAL_RCC_OscConfig+0x330>)
 8001452:	2101      	movs	r1, #1
 8001454:	430a      	orrs	r2, r1
 8001456:	621a      	str	r2, [r3, #32]
 8001458:	e036      	b.n	80014c8 <HAL_RCC_OscConfig+0x39c>
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	40021000 	.word	0x40021000
 8001460:	fffeffff 	.word	0xfffeffff
 8001464:	fffbffff 	.word	0xfffbffff
 8001468:	40007000 	.word	0x40007000
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d10c      	bne.n	800148e <HAL_RCC_OscConfig+0x362>
 8001474:	4bb6      	ldr	r3, [pc, #728]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 8001476:	6a1a      	ldr	r2, [r3, #32]
 8001478:	4bb5      	ldr	r3, [pc, #724]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 800147a:	2101      	movs	r1, #1
 800147c:	438a      	bics	r2, r1
 800147e:	621a      	str	r2, [r3, #32]
 8001480:	4bb3      	ldr	r3, [pc, #716]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 8001482:	6a1a      	ldr	r2, [r3, #32]
 8001484:	4bb2      	ldr	r3, [pc, #712]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 8001486:	2104      	movs	r1, #4
 8001488:	438a      	bics	r2, r1
 800148a:	621a      	str	r2, [r3, #32]
 800148c:	e01c      	b.n	80014c8 <HAL_RCC_OscConfig+0x39c>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	2b05      	cmp	r3, #5
 8001494:	d10c      	bne.n	80014b0 <HAL_RCC_OscConfig+0x384>
 8001496:	4bae      	ldr	r3, [pc, #696]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 8001498:	6a1a      	ldr	r2, [r3, #32]
 800149a:	4bad      	ldr	r3, [pc, #692]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 800149c:	2104      	movs	r1, #4
 800149e:	430a      	orrs	r2, r1
 80014a0:	621a      	str	r2, [r3, #32]
 80014a2:	4bab      	ldr	r3, [pc, #684]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 80014a4:	6a1a      	ldr	r2, [r3, #32]
 80014a6:	4baa      	ldr	r3, [pc, #680]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 80014a8:	2101      	movs	r1, #1
 80014aa:	430a      	orrs	r2, r1
 80014ac:	621a      	str	r2, [r3, #32]
 80014ae:	e00b      	b.n	80014c8 <HAL_RCC_OscConfig+0x39c>
 80014b0:	4ba7      	ldr	r3, [pc, #668]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 80014b2:	6a1a      	ldr	r2, [r3, #32]
 80014b4:	4ba6      	ldr	r3, [pc, #664]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 80014b6:	2101      	movs	r1, #1
 80014b8:	438a      	bics	r2, r1
 80014ba:	621a      	str	r2, [r3, #32]
 80014bc:	4ba4      	ldr	r3, [pc, #656]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 80014be:	6a1a      	ldr	r2, [r3, #32]
 80014c0:	4ba3      	ldr	r3, [pc, #652]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 80014c2:	2104      	movs	r1, #4
 80014c4:	438a      	bics	r2, r1
 80014c6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d014      	beq.n	80014fa <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d0:	f7ff fa1e 	bl	8000910 <HAL_GetTick>
 80014d4:	0003      	movs	r3, r0
 80014d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d8:	e009      	b.n	80014ee <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014da:	f7ff fa19 	bl	8000910 <HAL_GetTick>
 80014de:	0002      	movs	r2, r0
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	4a9b      	ldr	r2, [pc, #620]	; (8001754 <HAL_RCC_OscConfig+0x628>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e12b      	b.n	8001746 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ee:	4b98      	ldr	r3, [pc, #608]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	2202      	movs	r2, #2
 80014f4:	4013      	ands	r3, r2
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x3ae>
 80014f8:	e013      	b.n	8001522 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fa:	f7ff fa09 	bl	8000910 <HAL_GetTick>
 80014fe:	0003      	movs	r3, r0
 8001500:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001502:	e009      	b.n	8001518 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001504:	f7ff fa04 	bl	8000910 <HAL_GetTick>
 8001508:	0002      	movs	r2, r0
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	4a91      	ldr	r2, [pc, #580]	; (8001754 <HAL_RCC_OscConfig+0x628>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e116      	b.n	8001746 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001518:	4b8d      	ldr	r3, [pc, #564]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	2202      	movs	r2, #2
 800151e:	4013      	ands	r3, r2
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001522:	231f      	movs	r3, #31
 8001524:	18fb      	adds	r3, r7, r3
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d105      	bne.n	8001538 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800152c:	4b88      	ldr	r3, [pc, #544]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 800152e:	69da      	ldr	r2, [r3, #28]
 8001530:	4b87      	ldr	r3, [pc, #540]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 8001532:	4989      	ldr	r1, [pc, #548]	; (8001758 <HAL_RCC_OscConfig+0x62c>)
 8001534:	400a      	ands	r2, r1
 8001536:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2210      	movs	r2, #16
 800153e:	4013      	ands	r3, r2
 8001540:	d063      	beq.n	800160a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d12a      	bne.n	80015a0 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800154a:	4b81      	ldr	r3, [pc, #516]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 800154c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800154e:	4b80      	ldr	r3, [pc, #512]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 8001550:	2104      	movs	r1, #4
 8001552:	430a      	orrs	r2, r1
 8001554:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001556:	4b7e      	ldr	r3, [pc, #504]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 8001558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800155a:	4b7d      	ldr	r3, [pc, #500]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 800155c:	2101      	movs	r1, #1
 800155e:	430a      	orrs	r2, r1
 8001560:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001562:	f7ff f9d5 	bl	8000910 <HAL_GetTick>
 8001566:	0003      	movs	r3, r0
 8001568:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800156c:	f7ff f9d0 	bl	8000910 <HAL_GetTick>
 8001570:	0002      	movs	r2, r0
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e0e3      	b.n	8001746 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800157e:	4b74      	ldr	r3, [pc, #464]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 8001580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001582:	2202      	movs	r2, #2
 8001584:	4013      	ands	r3, r2
 8001586:	d0f1      	beq.n	800156c <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001588:	4b71      	ldr	r3, [pc, #452]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 800158a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800158c:	22f8      	movs	r2, #248	; 0xf8
 800158e:	4393      	bics	r3, r2
 8001590:	0019      	movs	r1, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	00da      	lsls	r2, r3, #3
 8001598:	4b6d      	ldr	r3, [pc, #436]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 800159a:	430a      	orrs	r2, r1
 800159c:	635a      	str	r2, [r3, #52]	; 0x34
 800159e:	e034      	b.n	800160a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	3305      	adds	r3, #5
 80015a6:	d111      	bne.n	80015cc <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80015a8:	4b69      	ldr	r3, [pc, #420]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 80015aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ac:	4b68      	ldr	r3, [pc, #416]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 80015ae:	2104      	movs	r1, #4
 80015b0:	438a      	bics	r2, r1
 80015b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015b4:	4b66      	ldr	r3, [pc, #408]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 80015b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b8:	22f8      	movs	r2, #248	; 0xf8
 80015ba:	4393      	bics	r3, r2
 80015bc:	0019      	movs	r1, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	00da      	lsls	r2, r3, #3
 80015c4:	4b62      	ldr	r3, [pc, #392]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 80015c6:	430a      	orrs	r2, r1
 80015c8:	635a      	str	r2, [r3, #52]	; 0x34
 80015ca:	e01e      	b.n	800160a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80015cc:	4b60      	ldr	r3, [pc, #384]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 80015ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015d0:	4b5f      	ldr	r3, [pc, #380]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 80015d2:	2104      	movs	r1, #4
 80015d4:	430a      	orrs	r2, r1
 80015d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80015d8:	4b5d      	ldr	r3, [pc, #372]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 80015da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015dc:	4b5c      	ldr	r3, [pc, #368]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 80015de:	2101      	movs	r1, #1
 80015e0:	438a      	bics	r2, r1
 80015e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e4:	f7ff f994 	bl	8000910 <HAL_GetTick>
 80015e8:	0003      	movs	r3, r0
 80015ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015ee:	f7ff f98f 	bl	8000910 <HAL_GetTick>
 80015f2:	0002      	movs	r2, r0
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e0a2      	b.n	8001746 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001600:	4b53      	ldr	r3, [pc, #332]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 8001602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001604:	2202      	movs	r2, #2
 8001606:	4013      	ands	r3, r2
 8001608:	d1f1      	bne.n	80015ee <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d100      	bne.n	8001614 <HAL_RCC_OscConfig+0x4e8>
 8001612:	e097      	b.n	8001744 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001614:	4b4e      	ldr	r3, [pc, #312]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	220c      	movs	r2, #12
 800161a:	4013      	ands	r3, r2
 800161c:	2b08      	cmp	r3, #8
 800161e:	d100      	bne.n	8001622 <HAL_RCC_OscConfig+0x4f6>
 8001620:	e06b      	b.n	80016fa <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d14c      	bne.n	80016c4 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800162a:	4b49      	ldr	r3, [pc, #292]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	4b48      	ldr	r3, [pc, #288]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 8001630:	494a      	ldr	r1, [pc, #296]	; (800175c <HAL_RCC_OscConfig+0x630>)
 8001632:	400a      	ands	r2, r1
 8001634:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001636:	f7ff f96b 	bl	8000910 <HAL_GetTick>
 800163a:	0003      	movs	r3, r0
 800163c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001640:	f7ff f966 	bl	8000910 <HAL_GetTick>
 8001644:	0002      	movs	r2, r0
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e079      	b.n	8001746 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001652:	4b3f      	ldr	r3, [pc, #252]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	2380      	movs	r3, #128	; 0x80
 8001658:	049b      	lsls	r3, r3, #18
 800165a:	4013      	ands	r3, r2
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800165e:	4b3c      	ldr	r3, [pc, #240]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 8001660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001662:	220f      	movs	r2, #15
 8001664:	4393      	bics	r3, r2
 8001666:	0019      	movs	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800166c:	4b38      	ldr	r3, [pc, #224]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 800166e:	430a      	orrs	r2, r1
 8001670:	62da      	str	r2, [r3, #44]	; 0x2c
 8001672:	4b37      	ldr	r3, [pc, #220]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	4a3a      	ldr	r2, [pc, #232]	; (8001760 <HAL_RCC_OscConfig+0x634>)
 8001678:	4013      	ands	r3, r2
 800167a:	0019      	movs	r1, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	431a      	orrs	r2, r3
 8001686:	4b32      	ldr	r3, [pc, #200]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 8001688:	430a      	orrs	r2, r1
 800168a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800168c:	4b30      	ldr	r3, [pc, #192]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b2f      	ldr	r3, [pc, #188]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 8001692:	2180      	movs	r1, #128	; 0x80
 8001694:	0449      	lsls	r1, r1, #17
 8001696:	430a      	orrs	r2, r1
 8001698:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169a:	f7ff f939 	bl	8000910 <HAL_GetTick>
 800169e:	0003      	movs	r3, r0
 80016a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a4:	f7ff f934 	bl	8000910 <HAL_GetTick>
 80016a8:	0002      	movs	r2, r0
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e047      	b.n	8001746 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016b6:	4b26      	ldr	r3, [pc, #152]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	2380      	movs	r3, #128	; 0x80
 80016bc:	049b      	lsls	r3, r3, #18
 80016be:	4013      	ands	r3, r2
 80016c0:	d0f0      	beq.n	80016a4 <HAL_RCC_OscConfig+0x578>
 80016c2:	e03f      	b.n	8001744 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c4:	4b22      	ldr	r3, [pc, #136]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b21      	ldr	r3, [pc, #132]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 80016ca:	4924      	ldr	r1, [pc, #144]	; (800175c <HAL_RCC_OscConfig+0x630>)
 80016cc:	400a      	ands	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff f91e 	bl	8000910 <HAL_GetTick>
 80016d4:	0003      	movs	r3, r0
 80016d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016da:	f7ff f919 	bl	8000910 <HAL_GetTick>
 80016de:	0002      	movs	r2, r0
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e02c      	b.n	8001746 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ec:	4b18      	ldr	r3, [pc, #96]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	049b      	lsls	r3, r3, #18
 80016f4:	4013      	ands	r3, r2
 80016f6:	d1f0      	bne.n	80016da <HAL_RCC_OscConfig+0x5ae>
 80016f8:	e024      	b.n	8001744 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d101      	bne.n	8001706 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e01f      	b.n	8001746 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800170c:	4b10      	ldr	r3, [pc, #64]	; (8001750 <HAL_RCC_OscConfig+0x624>)
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	025b      	lsls	r3, r3, #9
 8001718:	401a      	ands	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171e:	429a      	cmp	r2, r3
 8001720:	d10e      	bne.n	8001740 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	220f      	movs	r2, #15
 8001726:	401a      	ands	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800172c:	429a      	cmp	r2, r3
 800172e:	d107      	bne.n	8001740 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	23f0      	movs	r3, #240	; 0xf0
 8001734:	039b      	lsls	r3, r3, #14
 8001736:	401a      	ands	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800173c:	429a      	cmp	r2, r3
 800173e:	d001      	beq.n	8001744 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e000      	b.n	8001746 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	0018      	movs	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	b008      	add	sp, #32
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	40021000 	.word	0x40021000
 8001754:	00001388 	.word	0x00001388
 8001758:	efffffff 	.word	0xefffffff
 800175c:	feffffff 	.word	0xfeffffff
 8001760:	ffc2ffff 	.word	0xffc2ffff

08001764 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0b3      	b.n	80018e0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001778:	4b5b      	ldr	r3, [pc, #364]	; (80018e8 <HAL_RCC_ClockConfig+0x184>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2201      	movs	r2, #1
 800177e:	4013      	ands	r3, r2
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d911      	bls.n	80017aa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001786:	4b58      	ldr	r3, [pc, #352]	; (80018e8 <HAL_RCC_ClockConfig+0x184>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2201      	movs	r2, #1
 800178c:	4393      	bics	r3, r2
 800178e:	0019      	movs	r1, r3
 8001790:	4b55      	ldr	r3, [pc, #340]	; (80018e8 <HAL_RCC_ClockConfig+0x184>)
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001798:	4b53      	ldr	r3, [pc, #332]	; (80018e8 <HAL_RCC_ClockConfig+0x184>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2201      	movs	r2, #1
 800179e:	4013      	ands	r3, r2
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d001      	beq.n	80017aa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e09a      	b.n	80018e0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2202      	movs	r2, #2
 80017b0:	4013      	ands	r3, r2
 80017b2:	d015      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2204      	movs	r2, #4
 80017ba:	4013      	ands	r3, r2
 80017bc:	d006      	beq.n	80017cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017be:	4b4b      	ldr	r3, [pc, #300]	; (80018ec <HAL_RCC_ClockConfig+0x188>)
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	4b4a      	ldr	r3, [pc, #296]	; (80018ec <HAL_RCC_ClockConfig+0x188>)
 80017c4:	21e0      	movs	r1, #224	; 0xe0
 80017c6:	00c9      	lsls	r1, r1, #3
 80017c8:	430a      	orrs	r2, r1
 80017ca:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017cc:	4b47      	ldr	r3, [pc, #284]	; (80018ec <HAL_RCC_ClockConfig+0x188>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	22f0      	movs	r2, #240	; 0xf0
 80017d2:	4393      	bics	r3, r2
 80017d4:	0019      	movs	r1, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	4b44      	ldr	r3, [pc, #272]	; (80018ec <HAL_RCC_ClockConfig+0x188>)
 80017dc:	430a      	orrs	r2, r1
 80017de:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2201      	movs	r2, #1
 80017e6:	4013      	ands	r3, r2
 80017e8:	d040      	beq.n	800186c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d107      	bne.n	8001802 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f2:	4b3e      	ldr	r3, [pc, #248]	; (80018ec <HAL_RCC_ClockConfig+0x188>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	2380      	movs	r3, #128	; 0x80
 80017f8:	029b      	lsls	r3, r3, #10
 80017fa:	4013      	ands	r3, r2
 80017fc:	d114      	bne.n	8001828 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e06e      	b.n	80018e0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d107      	bne.n	800181a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180a:	4b38      	ldr	r3, [pc, #224]	; (80018ec <HAL_RCC_ClockConfig+0x188>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	049b      	lsls	r3, r3, #18
 8001812:	4013      	ands	r3, r2
 8001814:	d108      	bne.n	8001828 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e062      	b.n	80018e0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181a:	4b34      	ldr	r3, [pc, #208]	; (80018ec <HAL_RCC_ClockConfig+0x188>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2202      	movs	r2, #2
 8001820:	4013      	ands	r3, r2
 8001822:	d101      	bne.n	8001828 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e05b      	b.n	80018e0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001828:	4b30      	ldr	r3, [pc, #192]	; (80018ec <HAL_RCC_ClockConfig+0x188>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2203      	movs	r2, #3
 800182e:	4393      	bics	r3, r2
 8001830:	0019      	movs	r1, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	4b2d      	ldr	r3, [pc, #180]	; (80018ec <HAL_RCC_ClockConfig+0x188>)
 8001838:	430a      	orrs	r2, r1
 800183a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800183c:	f7ff f868 	bl	8000910 <HAL_GetTick>
 8001840:	0003      	movs	r3, r0
 8001842:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001844:	e009      	b.n	800185a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001846:	f7ff f863 	bl	8000910 <HAL_GetTick>
 800184a:	0002      	movs	r2, r0
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	4a27      	ldr	r2, [pc, #156]	; (80018f0 <HAL_RCC_ClockConfig+0x18c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d901      	bls.n	800185a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e042      	b.n	80018e0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185a:	4b24      	ldr	r3, [pc, #144]	; (80018ec <HAL_RCC_ClockConfig+0x188>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	220c      	movs	r2, #12
 8001860:	401a      	ands	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	429a      	cmp	r2, r3
 800186a:	d1ec      	bne.n	8001846 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800186c:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <HAL_RCC_ClockConfig+0x184>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2201      	movs	r2, #1
 8001872:	4013      	ands	r3, r2
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d211      	bcs.n	800189e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187a:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <HAL_RCC_ClockConfig+0x184>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2201      	movs	r2, #1
 8001880:	4393      	bics	r3, r2
 8001882:	0019      	movs	r1, r3
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <HAL_RCC_ClockConfig+0x184>)
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800188c:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <HAL_RCC_ClockConfig+0x184>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2201      	movs	r2, #1
 8001892:	4013      	ands	r3, r2
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d001      	beq.n	800189e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e020      	b.n	80018e0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2204      	movs	r2, #4
 80018a4:	4013      	ands	r3, r2
 80018a6:	d009      	beq.n	80018bc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018a8:	4b10      	ldr	r3, [pc, #64]	; (80018ec <HAL_RCC_ClockConfig+0x188>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	4a11      	ldr	r2, [pc, #68]	; (80018f4 <HAL_RCC_ClockConfig+0x190>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	0019      	movs	r1, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68da      	ldr	r2, [r3, #12]
 80018b6:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <HAL_RCC_ClockConfig+0x188>)
 80018b8:	430a      	orrs	r2, r1
 80018ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018bc:	f000 f820 	bl	8001900 <HAL_RCC_GetSysClockFreq>
 80018c0:	0001      	movs	r1, r0
 80018c2:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <HAL_RCC_ClockConfig+0x188>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	091b      	lsrs	r3, r3, #4
 80018c8:	220f      	movs	r2, #15
 80018ca:	4013      	ands	r3, r2
 80018cc:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <HAL_RCC_ClockConfig+0x194>)
 80018ce:	5cd3      	ldrb	r3, [r2, r3]
 80018d0:	000a      	movs	r2, r1
 80018d2:	40da      	lsrs	r2, r3
 80018d4:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_RCC_ClockConfig+0x198>)
 80018d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80018d8:	2000      	movs	r0, #0
 80018da:	f7fe ffd3 	bl	8000884 <HAL_InitTick>
  
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	0018      	movs	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b004      	add	sp, #16
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40022000 	.word	0x40022000
 80018ec:	40021000 	.word	0x40021000
 80018f0:	00001388 	.word	0x00001388
 80018f4:	fffff8ff 	.word	0xfffff8ff
 80018f8:	080033a8 	.word	0x080033a8
 80018fc:	20000000 	.word	0x20000000

08001900 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b08f      	sub	sp, #60	; 0x3c
 8001904:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001906:	2314      	movs	r3, #20
 8001908:	18fb      	adds	r3, r7, r3
 800190a:	4a2b      	ldr	r2, [pc, #172]	; (80019b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800190c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800190e:	c313      	stmia	r3!, {r0, r1, r4}
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	4a29      	ldr	r2, [pc, #164]	; (80019bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001918:	ca13      	ldmia	r2!, {r0, r1, r4}
 800191a:	c313      	stmia	r3!, {r0, r1, r4}
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001924:	2300      	movs	r3, #0
 8001926:	62bb      	str	r3, [r7, #40]	; 0x28
 8001928:	2300      	movs	r3, #0
 800192a:	637b      	str	r3, [r7, #52]	; 0x34
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001934:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800193a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193c:	220c      	movs	r2, #12
 800193e:	4013      	ands	r3, r2
 8001940:	2b04      	cmp	r3, #4
 8001942:	d002      	beq.n	800194a <HAL_RCC_GetSysClockFreq+0x4a>
 8001944:	2b08      	cmp	r3, #8
 8001946:	d003      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x50>
 8001948:	e02d      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800194a:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800194c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800194e:	e02d      	b.n	80019ac <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001952:	0c9b      	lsrs	r3, r3, #18
 8001954:	220f      	movs	r2, #15
 8001956:	4013      	ands	r3, r2
 8001958:	2214      	movs	r2, #20
 800195a:	18ba      	adds	r2, r7, r2
 800195c:	5cd3      	ldrb	r3, [r2, r3]
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001960:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001964:	220f      	movs	r2, #15
 8001966:	4013      	ands	r3, r2
 8001968:	1d3a      	adds	r2, r7, #4
 800196a:	5cd3      	ldrb	r3, [r2, r3]
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800196e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	025b      	lsls	r3, r3, #9
 8001974:	4013      	ands	r3, r2
 8001976:	d009      	beq.n	800198c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800197a:	4812      	ldr	r0, [pc, #72]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800197c:	f7fe fbc4 	bl	8000108 <__udivsi3>
 8001980:	0003      	movs	r3, r0
 8001982:	001a      	movs	r2, r3
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	4353      	muls	r3, r2
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
 800198a:	e009      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800198c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800198e:	000a      	movs	r2, r1
 8001990:	0152      	lsls	r2, r2, #5
 8001992:	1a52      	subs	r2, r2, r1
 8001994:	0193      	lsls	r3, r2, #6
 8001996:	1a9b      	subs	r3, r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	185b      	adds	r3, r3, r1
 800199c:	021b      	lsls	r3, r3, #8
 800199e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80019a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019a4:	e002      	b.n	80019ac <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019a6:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019aa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80019ae:	0018      	movs	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b00f      	add	sp, #60	; 0x3c
 80019b4:	bd90      	pop	{r4, r7, pc}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	08003388 	.word	0x08003388
 80019bc:	08003398 	.word	0x08003398
 80019c0:	40021000 	.word	0x40021000
 80019c4:	007a1200 	.word	0x007a1200

080019c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019cc:	4b02      	ldr	r3, [pc, #8]	; (80019d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	0018      	movs	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	20000000 	.word	0x20000000

080019dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80019e0:	f7ff fff2 	bl	80019c8 <HAL_RCC_GetHCLKFreq>
 80019e4:	0001      	movs	r1, r0
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	0a1b      	lsrs	r3, r3, #8
 80019ec:	2207      	movs	r2, #7
 80019ee:	4013      	ands	r3, r2
 80019f0:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <HAL_RCC_GetPCLK1Freq+0x28>)
 80019f2:	5cd3      	ldrb	r3, [r2, r3]
 80019f4:	40d9      	lsrs	r1, r3
 80019f6:	000b      	movs	r3, r1
}    
 80019f8:	0018      	movs	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	40021000 	.word	0x40021000
 8001a04:	080033b8 	.word	0x080033b8

08001a08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e044      	b.n	8001aa4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d107      	bne.n	8001a32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2270      	movs	r2, #112	; 0x70
 8001a26:	2100      	movs	r1, #0
 8001a28:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f7fe fdc9 	bl	80005c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2224      	movs	r2, #36	; 0x24
 8001a36:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2101      	movs	r1, #1
 8001a44:	438a      	bics	r2, r1
 8001a46:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f000 f988 	bl	8001d60 <UART_SetConfig>
 8001a50:	0003      	movs	r3, r0
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e024      	b.n	8001aa4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	0018      	movs	r0, r3
 8001a66:	f000 fb01 	bl	800206c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	490d      	ldr	r1, [pc, #52]	; (8001aac <HAL_UART_Init+0xa4>)
 8001a76:	400a      	ands	r2, r1
 8001a78:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2108      	movs	r1, #8
 8001a86:	438a      	bics	r2, r1
 8001a88:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2101      	movs	r1, #1
 8001a96:	430a      	orrs	r2, r1
 8001a98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f000 fb99 	bl	80021d4 <UART_CheckIdleState>
 8001aa2:	0003      	movs	r3, r0
}
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b002      	add	sp, #8
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	fffff7ff 	.word	0xfffff7ff

08001ab0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	; 0x28
 8001ab4:	af02      	add	r7, sp, #8
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	1dbb      	adds	r3, r7, #6
 8001abe:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ac4:	2b20      	cmp	r3, #32
 8001ac6:	d000      	beq.n	8001aca <HAL_UART_Transmit+0x1a>
 8001ac8:	e095      	b.n	8001bf6 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_UART_Transmit+0x28>
 8001ad0:	1dbb      	adds	r3, r7, #6
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e08d      	b.n	8001bf8 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	015b      	lsls	r3, r3, #5
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d109      	bne.n	8001afc <HAL_UART_Transmit+0x4c>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d105      	bne.n	8001afc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	2201      	movs	r2, #1
 8001af4:	4013      	ands	r3, r2
 8001af6:	d001      	beq.n	8001afc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e07d      	b.n	8001bf8 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2270      	movs	r2, #112	; 0x70
 8001b00:	5c9b      	ldrb	r3, [r3, r2]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_UART_Transmit+0x5a>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e076      	b.n	8001bf8 <HAL_UART_Transmit+0x148>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2270      	movs	r2, #112	; 0x70
 8001b0e:	2101      	movs	r1, #1
 8001b10:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2221      	movs	r2, #33	; 0x21
 8001b1c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001b1e:	f7fe fef7 	bl	8000910 <HAL_GetTick>
 8001b22:	0003      	movs	r3, r0
 8001b24:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	1dba      	adds	r2, r7, #6
 8001b2a:	2150      	movs	r1, #80	; 0x50
 8001b2c:	8812      	ldrh	r2, [r2, #0]
 8001b2e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	1dba      	adds	r2, r7, #6
 8001b34:	2152      	movs	r1, #82	; 0x52
 8001b36:	8812      	ldrh	r2, [r2, #0]
 8001b38:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	015b      	lsls	r3, r3, #5
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d108      	bne.n	8001b58 <HAL_UART_Transmit+0xa8>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d104      	bne.n	8001b58 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	61bb      	str	r3, [r7, #24]
 8001b56:	e003      	b.n	8001b60 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b60:	e02d      	b.n	8001bbe <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	0013      	movs	r3, r2
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2180      	movs	r1, #128	; 0x80
 8001b70:	f000 fb76 	bl	8002260 <UART_WaitOnFlagUntilTimeout>
 8001b74:	1e03      	subs	r3, r0, #0
 8001b76:	d001      	beq.n	8001b7c <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e03d      	b.n	8001bf8 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10b      	bne.n	8001b9a <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	881a      	ldrh	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	05d2      	lsls	r2, r2, #23
 8001b8c:	0dd2      	lsrs	r2, r2, #23
 8001b8e:	b292      	uxth	r2, r2
 8001b90:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	3302      	adds	r3, #2
 8001b96:	61bb      	str	r3, [r7, #24]
 8001b98:	e008      	b.n	8001bac <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	781a      	ldrb	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	b292      	uxth	r2, r2
 8001ba4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2252      	movs	r2, #82	; 0x52
 8001bb0:	5a9b      	ldrh	r3, [r3, r2]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b299      	uxth	r1, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2252      	movs	r2, #82	; 0x52
 8001bbc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2252      	movs	r2, #82	; 0x52
 8001bc2:	5a9b      	ldrh	r3, [r3, r2]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1cb      	bne.n	8001b62 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	0013      	movs	r3, r2
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2140      	movs	r1, #64	; 0x40
 8001bd8:	f000 fb42 	bl	8002260 <UART_WaitOnFlagUntilTimeout>
 8001bdc:	1e03      	subs	r3, r0, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e009      	b.n	8001bf8 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2220      	movs	r2, #32
 8001be8:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2270      	movs	r2, #112	; 0x70
 8001bee:	2100      	movs	r1, #0
 8001bf0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e000      	b.n	8001bf8 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8001bf6:	2302      	movs	r3, #2
  }
}
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b008      	add	sp, #32
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	1dbb      	adds	r3, r7, #6
 8001c0c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c12:	2b20      	cmp	r3, #32
 8001c14:	d000      	beq.n	8001c18 <HAL_UART_Receive_DMA+0x18>
 8001c16:	e07f      	b.n	8001d18 <HAL_UART_Receive_DMA+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_UART_Receive_DMA+0x26>
 8001c1e:	1dbb      	adds	r3, r7, #6
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e077      	b.n	8001d1a <HAL_UART_Receive_DMA+0x11a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	2380      	movs	r3, #128	; 0x80
 8001c30:	015b      	lsls	r3, r3, #5
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d109      	bne.n	8001c4a <HAL_UART_Receive_DMA+0x4a>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d105      	bne.n	8001c4a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	2201      	movs	r2, #1
 8001c42:	4013      	ands	r3, r2
 8001c44:	d001      	beq.n	8001c4a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e067      	b.n	8001d1a <HAL_UART_Receive_DMA+0x11a>
      }
    }

    __HAL_LOCK(huart);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2270      	movs	r2, #112	; 0x70
 8001c4e:	5c9b      	ldrb	r3, [r3, r2]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d101      	bne.n	8001c58 <HAL_UART_Receive_DMA+0x58>
 8001c54:	2302      	movs	r3, #2
 8001c56:	e060      	b.n	8001d1a <HAL_UART_Receive_DMA+0x11a>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2270      	movs	r2, #112	; 0x70
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	1dba      	adds	r2, r7, #6
 8001c6a:	2158      	movs	r1, #88	; 0x58
 8001c6c:	8812      	ldrh	r2, [r2, #0]
 8001c6e:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2222      	movs	r2, #34	; 0x22
 8001c7a:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d02a      	beq.n	8001cda <HAL_UART_Receive_DMA+0xda>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c88:	4a26      	ldr	r2, [pc, #152]	; (8001d24 <HAL_UART_Receive_DMA+0x124>)
 8001c8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c90:	4a25      	ldr	r2, [pc, #148]	; (8001d28 <HAL_UART_Receive_DMA+0x128>)
 8001c92:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c98:	4a24      	ldr	r2, [pc, #144]	; (8001d2c <HAL_UART_Receive_DMA+0x12c>)
 8001c9a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	3324      	adds	r3, #36	; 0x24
 8001cae:	0019      	movs	r1, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb4:	001a      	movs	r2, r3
 8001cb6:	1dbb      	adds	r3, r7, #6
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	f7fe ff59 	bl	8000b70 <HAL_DMA_Start_IT>
 8001cbe:	1e03      	subs	r3, r0, #0
 8001cc0:	d00b      	beq.n	8001cda <HAL_UART_Receive_DMA+0xda>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2210      	movs	r2, #16
 8001cc6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2270      	movs	r2, #112	; 0x70
 8001ccc:	2100      	movs	r1, #0
 8001cce:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e01f      	b.n	8001d1a <HAL_UART_Receive_DMA+0x11a>
      }
    }
    __HAL_UNLOCK(huart);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2270      	movs	r2, #112	; 0x70
 8001cde:	2100      	movs	r1, #0
 8001ce0:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2180      	movs	r1, #128	; 0x80
 8001cee:	0049      	lsls	r1, r1, #1
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2101      	movs	r1, #1
 8001d00:	430a      	orrs	r2, r1
 8001d02:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2140      	movs	r1, #64	; 0x40
 8001d10:	430a      	orrs	r2, r1
 8001d12:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	e000      	b.n	8001d1a <HAL_UART_Receive_DMA+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8001d18:	2302      	movs	r3, #2
  }
}
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b004      	add	sp, #16
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	080023c5 	.word	0x080023c5
 8001d28:	0800242d 	.word	0x0800242d
 8001d2c:	0800244b 	.word	0x0800244b

08001d30 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8001d38:	46c0      	nop			; (mov r8, r8)
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	b002      	add	sp, #8
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8001d48:	46c0      	nop			; (mov r8, r8)
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	b002      	add	sp, #8
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001d58:	46c0      	nop			; (mov r8, r8)
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b002      	add	sp, #8
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b088      	sub	sp, #32
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d6c:	2317      	movs	r3, #23
 8001d6e:	18fb      	adds	r3, r7, r3
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4aad      	ldr	r2, [pc, #692]	; (8002048 <UART_SetConfig+0x2e8>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	0019      	movs	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	4aa8      	ldr	r2, [pc, #672]	; (800204c <UART_SetConfig+0x2ec>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	0019      	movs	r1, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	4a9f      	ldr	r2, [pc, #636]	; (8002050 <UART_SetConfig+0x2f0>)
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a9b      	ldr	r2, [pc, #620]	; (8002054 <UART_SetConfig+0x2f4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d125      	bne.n	8001e36 <UART_SetConfig+0xd6>
 8001dea:	4b9b      	ldr	r3, [pc, #620]	; (8002058 <UART_SetConfig+0x2f8>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	2203      	movs	r2, #3
 8001df0:	4013      	ands	r3, r2
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d00f      	beq.n	8001e16 <UART_SetConfig+0xb6>
 8001df6:	d304      	bcc.n	8001e02 <UART_SetConfig+0xa2>
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d011      	beq.n	8001e20 <UART_SetConfig+0xc0>
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	d005      	beq.n	8001e0c <UART_SetConfig+0xac>
 8001e00:	e013      	b.n	8001e2a <UART_SetConfig+0xca>
 8001e02:	231f      	movs	r3, #31
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
 8001e0a:	e022      	b.n	8001e52 <UART_SetConfig+0xf2>
 8001e0c:	231f      	movs	r3, #31
 8001e0e:	18fb      	adds	r3, r7, r3
 8001e10:	2202      	movs	r2, #2
 8001e12:	701a      	strb	r2, [r3, #0]
 8001e14:	e01d      	b.n	8001e52 <UART_SetConfig+0xf2>
 8001e16:	231f      	movs	r3, #31
 8001e18:	18fb      	adds	r3, r7, r3
 8001e1a:	2204      	movs	r2, #4
 8001e1c:	701a      	strb	r2, [r3, #0]
 8001e1e:	e018      	b.n	8001e52 <UART_SetConfig+0xf2>
 8001e20:	231f      	movs	r3, #31
 8001e22:	18fb      	adds	r3, r7, r3
 8001e24:	2208      	movs	r2, #8
 8001e26:	701a      	strb	r2, [r3, #0]
 8001e28:	e013      	b.n	8001e52 <UART_SetConfig+0xf2>
 8001e2a:	231f      	movs	r3, #31
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	2210      	movs	r2, #16
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	e00d      	b.n	8001e52 <UART_SetConfig+0xf2>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a88      	ldr	r2, [pc, #544]	; (800205c <UART_SetConfig+0x2fc>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d104      	bne.n	8001e4a <UART_SetConfig+0xea>
 8001e40:	231f      	movs	r3, #31
 8001e42:	18fb      	adds	r3, r7, r3
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
 8001e48:	e003      	b.n	8001e52 <UART_SetConfig+0xf2>
 8001e4a:	231f      	movs	r3, #31
 8001e4c:	18fb      	adds	r3, r7, r3
 8001e4e:	2210      	movs	r2, #16
 8001e50:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69da      	ldr	r2, [r3, #28]
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d000      	beq.n	8001e60 <UART_SetConfig+0x100>
 8001e5e:	e07d      	b.n	8001f5c <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8001e60:	231f      	movs	r3, #31
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d01c      	beq.n	8001ea4 <UART_SetConfig+0x144>
 8001e6a:	dc02      	bgt.n	8001e72 <UART_SetConfig+0x112>
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <UART_SetConfig+0x11c>
 8001e70:	e04b      	b.n	8001f0a <UART_SetConfig+0x1aa>
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d025      	beq.n	8001ec2 <UART_SetConfig+0x162>
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d037      	beq.n	8001eea <UART_SetConfig+0x18a>
 8001e7a:	e046      	b.n	8001f0a <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e7c:	f7ff fdae 	bl	80019dc <HAL_RCC_GetPCLK1Freq>
 8001e80:	0003      	movs	r3, r0
 8001e82:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	005a      	lsls	r2, r3, #1
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	085b      	lsrs	r3, r3, #1
 8001e8e:	18d2      	adds	r2, r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	0019      	movs	r1, r3
 8001e96:	0010      	movs	r0, r2
 8001e98:	f7fe f936 	bl	8000108 <__udivsi3>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	61bb      	str	r3, [r7, #24]
        break;
 8001ea2:	e037      	b.n	8001f14 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	085b      	lsrs	r3, r3, #1
 8001eaa:	4a6d      	ldr	r2, [pc, #436]	; (8002060 <UART_SetConfig+0x300>)
 8001eac:	189a      	adds	r2, r3, r2
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	0019      	movs	r1, r3
 8001eb4:	0010      	movs	r0, r2
 8001eb6:	f7fe f927 	bl	8000108 <__udivsi3>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	61bb      	str	r3, [r7, #24]
        break;
 8001ec0:	e028      	b.n	8001f14 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ec2:	f7ff fd1d 	bl	8001900 <HAL_RCC_GetSysClockFreq>
 8001ec6:	0003      	movs	r3, r0
 8001ec8:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	005a      	lsls	r2, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	085b      	lsrs	r3, r3, #1
 8001ed4:	18d2      	adds	r2, r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	0019      	movs	r1, r3
 8001edc:	0010      	movs	r0, r2
 8001ede:	f7fe f913 	bl	8000108 <__udivsi3>
 8001ee2:	0003      	movs	r3, r0
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	61bb      	str	r3, [r7, #24]
        break;
 8001ee8:	e014      	b.n	8001f14 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	085b      	lsrs	r3, r3, #1
 8001ef0:	2280      	movs	r2, #128	; 0x80
 8001ef2:	0252      	lsls	r2, r2, #9
 8001ef4:	189a      	adds	r2, r3, r2
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	0019      	movs	r1, r3
 8001efc:	0010      	movs	r0, r2
 8001efe:	f7fe f903 	bl	8000108 <__udivsi3>
 8001f02:	0003      	movs	r3, r0
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	61bb      	str	r3, [r7, #24]
        break;
 8001f08:	e004      	b.n	8001f14 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8001f0a:	2317      	movs	r3, #23
 8001f0c:	18fb      	adds	r3, r7, r3
 8001f0e:	2201      	movs	r2, #1
 8001f10:	701a      	strb	r2, [r3, #0]
        break;
 8001f12:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2b0f      	cmp	r3, #15
 8001f18:	d91b      	bls.n	8001f52 <UART_SetConfig+0x1f2>
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	4a51      	ldr	r2, [pc, #324]	; (8002064 <UART_SetConfig+0x304>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d817      	bhi.n	8001f52 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	200a      	movs	r0, #10
 8001f28:	183b      	adds	r3, r7, r0
 8001f2a:	210f      	movs	r1, #15
 8001f2c:	438a      	bics	r2, r1
 8001f2e:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	085b      	lsrs	r3, r3, #1
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	2207      	movs	r2, #7
 8001f38:	4013      	ands	r3, r2
 8001f3a:	b299      	uxth	r1, r3
 8001f3c:	183b      	adds	r3, r7, r0
 8001f3e:	183a      	adds	r2, r7, r0
 8001f40:	8812      	ldrh	r2, [r2, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	183a      	adds	r2, r7, r0
 8001f4c:	8812      	ldrh	r2, [r2, #0]
 8001f4e:	60da      	str	r2, [r3, #12]
 8001f50:	e06c      	b.n	800202c <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8001f52:	2317      	movs	r3, #23
 8001f54:	18fb      	adds	r3, r7, r3
 8001f56:	2201      	movs	r2, #1
 8001f58:	701a      	strb	r2, [r3, #0]
 8001f5a:	e067      	b.n	800202c <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8001f5c:	231f      	movs	r3, #31
 8001f5e:	18fb      	adds	r3, r7, r3
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d01b      	beq.n	8001f9e <UART_SetConfig+0x23e>
 8001f66:	dc02      	bgt.n	8001f6e <UART_SetConfig+0x20e>
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <UART_SetConfig+0x218>
 8001f6c:	e049      	b.n	8002002 <UART_SetConfig+0x2a2>
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d024      	beq.n	8001fbc <UART_SetConfig+0x25c>
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d035      	beq.n	8001fe2 <UART_SetConfig+0x282>
 8001f76:	e044      	b.n	8002002 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f78:	f7ff fd30 	bl	80019dc <HAL_RCC_GetPCLK1Freq>
 8001f7c:	0003      	movs	r3, r0
 8001f7e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	085a      	lsrs	r2, r3, #1
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	18d2      	adds	r2, r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	0019      	movs	r1, r3
 8001f90:	0010      	movs	r0, r2
 8001f92:	f7fe f8b9 	bl	8000108 <__udivsi3>
 8001f96:	0003      	movs	r3, r0
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	61bb      	str	r3, [r7, #24]
        break;
 8001f9c:	e036      	b.n	800200c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	085b      	lsrs	r3, r3, #1
 8001fa4:	4a30      	ldr	r2, [pc, #192]	; (8002068 <UART_SetConfig+0x308>)
 8001fa6:	189a      	adds	r2, r3, r2
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	0019      	movs	r1, r3
 8001fae:	0010      	movs	r0, r2
 8001fb0:	f7fe f8aa 	bl	8000108 <__udivsi3>
 8001fb4:	0003      	movs	r3, r0
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	61bb      	str	r3, [r7, #24]
        break;
 8001fba:	e027      	b.n	800200c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001fbc:	f7ff fca0 	bl	8001900 <HAL_RCC_GetSysClockFreq>
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	085a      	lsrs	r2, r3, #1
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	18d2      	adds	r2, r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	0010      	movs	r0, r2
 8001fd6:	f7fe f897 	bl	8000108 <__udivsi3>
 8001fda:	0003      	movs	r3, r0
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	61bb      	str	r3, [r7, #24]
        break;
 8001fe0:	e014      	b.n	800200c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	085b      	lsrs	r3, r3, #1
 8001fe8:	2280      	movs	r2, #128	; 0x80
 8001fea:	0212      	lsls	r2, r2, #8
 8001fec:	189a      	adds	r2, r3, r2
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	0019      	movs	r1, r3
 8001ff4:	0010      	movs	r0, r2
 8001ff6:	f7fe f887 	bl	8000108 <__udivsi3>
 8001ffa:	0003      	movs	r3, r0
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	61bb      	str	r3, [r7, #24]
        break;
 8002000:	e004      	b.n	800200c <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8002002:	2317      	movs	r3, #23
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	2201      	movs	r2, #1
 8002008:	701a      	strb	r2, [r3, #0]
        break;
 800200a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	2b0f      	cmp	r3, #15
 8002010:	d908      	bls.n	8002024 <UART_SetConfig+0x2c4>
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	4a13      	ldr	r2, [pc, #76]	; (8002064 <UART_SetConfig+0x304>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d804      	bhi.n	8002024 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	e003      	b.n	800202c <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8002024:	2317      	movs	r3, #23
 8002026:	18fb      	adds	r3, r7, r3
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002038:	2317      	movs	r3, #23
 800203a:	18fb      	adds	r3, r7, r3
 800203c:	781b      	ldrb	r3, [r3, #0]
}
 800203e:	0018      	movs	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	b008      	add	sp, #32
 8002044:	bd80      	pop	{r7, pc}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	ffff69f3 	.word	0xffff69f3
 800204c:	ffffcfff 	.word	0xffffcfff
 8002050:	fffff4ff 	.word	0xfffff4ff
 8002054:	40013800 	.word	0x40013800
 8002058:	40021000 	.word	0x40021000
 800205c:	40004400 	.word	0x40004400
 8002060:	00f42400 	.word	0x00f42400
 8002064:	0000ffff 	.word	0x0000ffff
 8002068:	007a1200 	.word	0x007a1200

0800206c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	2201      	movs	r2, #1
 800207a:	4013      	ands	r3, r2
 800207c:	d00b      	beq.n	8002096 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	4a4a      	ldr	r2, [pc, #296]	; (80021b0 <UART_AdvFeatureConfig+0x144>)
 8002086:	4013      	ands	r3, r2
 8002088:	0019      	movs	r1, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	2202      	movs	r2, #2
 800209c:	4013      	ands	r3, r2
 800209e:	d00b      	beq.n	80020b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4a43      	ldr	r2, [pc, #268]	; (80021b4 <UART_AdvFeatureConfig+0x148>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	0019      	movs	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	2204      	movs	r2, #4
 80020be:	4013      	ands	r3, r2
 80020c0:	d00b      	beq.n	80020da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	4a3b      	ldr	r2, [pc, #236]	; (80021b8 <UART_AdvFeatureConfig+0x14c>)
 80020ca:	4013      	ands	r3, r2
 80020cc:	0019      	movs	r1, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	2208      	movs	r2, #8
 80020e0:	4013      	ands	r3, r2
 80020e2:	d00b      	beq.n	80020fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	4a34      	ldr	r2, [pc, #208]	; (80021bc <UART_AdvFeatureConfig+0x150>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	0019      	movs	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	2210      	movs	r2, #16
 8002102:	4013      	ands	r3, r2
 8002104:	d00b      	beq.n	800211e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	4a2c      	ldr	r2, [pc, #176]	; (80021c0 <UART_AdvFeatureConfig+0x154>)
 800210e:	4013      	ands	r3, r2
 8002110:	0019      	movs	r1, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	2220      	movs	r2, #32
 8002124:	4013      	ands	r3, r2
 8002126:	d00b      	beq.n	8002140 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	4a25      	ldr	r2, [pc, #148]	; (80021c4 <UART_AdvFeatureConfig+0x158>)
 8002130:	4013      	ands	r3, r2
 8002132:	0019      	movs	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	2240      	movs	r2, #64	; 0x40
 8002146:	4013      	ands	r3, r2
 8002148:	d01d      	beq.n	8002186 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4a1d      	ldr	r2, [pc, #116]	; (80021c8 <UART_AdvFeatureConfig+0x15c>)
 8002152:	4013      	ands	r3, r2
 8002154:	0019      	movs	r1, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	035b      	lsls	r3, r3, #13
 800216a:	429a      	cmp	r2, r3
 800216c:	d10b      	bne.n	8002186 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4a15      	ldr	r2, [pc, #84]	; (80021cc <UART_AdvFeatureConfig+0x160>)
 8002176:	4013      	ands	r3, r2
 8002178:	0019      	movs	r1, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	2280      	movs	r2, #128	; 0x80
 800218c:	4013      	ands	r3, r2
 800218e:	d00b      	beq.n	80021a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	4a0e      	ldr	r2, [pc, #56]	; (80021d0 <UART_AdvFeatureConfig+0x164>)
 8002198:	4013      	ands	r3, r2
 800219a:	0019      	movs	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	605a      	str	r2, [r3, #4]
  }
}
 80021a8:	46c0      	nop			; (mov r8, r8)
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b002      	add	sp, #8
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	fffdffff 	.word	0xfffdffff
 80021b4:	fffeffff 	.word	0xfffeffff
 80021b8:	fffbffff 	.word	0xfffbffff
 80021bc:	ffff7fff 	.word	0xffff7fff
 80021c0:	ffffefff 	.word	0xffffefff
 80021c4:	ffffdfff 	.word	0xffffdfff
 80021c8:	ffefffff 	.word	0xffefffff
 80021cc:	ff9fffff 	.word	0xff9fffff
 80021d0:	fff7ffff 	.word	0xfff7ffff

080021d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af02      	add	r7, sp, #8
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80021e2:	f7fe fb95 	bl	8000910 <HAL_GetTick>
 80021e6:	0003      	movs	r3, r0
 80021e8:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2208      	movs	r2, #8
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d10d      	bne.n	8002214 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	0399      	lsls	r1, r3, #14
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	4b16      	ldr	r3, [pc, #88]	; (800225c <UART_CheckIdleState+0x88>)
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	0013      	movs	r3, r2
 8002206:	2200      	movs	r2, #0
 8002208:	f000 f82a 	bl	8002260 <UART_WaitOnFlagUntilTimeout>
 800220c:	1e03      	subs	r3, r0, #0
 800220e:	d001      	beq.n	8002214 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e01f      	b.n	8002254 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2204      	movs	r2, #4
 800221c:	4013      	ands	r3, r2
 800221e:	2b04      	cmp	r3, #4
 8002220:	d10d      	bne.n	800223e <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	03d9      	lsls	r1, r3, #15
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	4b0c      	ldr	r3, [pc, #48]	; (800225c <UART_CheckIdleState+0x88>)
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	0013      	movs	r3, r2
 8002230:	2200      	movs	r2, #0
 8002232:	f000 f815 	bl	8002260 <UART_WaitOnFlagUntilTimeout>
 8002236:	1e03      	subs	r3, r0, #0
 8002238:	d001      	beq.n	800223e <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e00a      	b.n	8002254 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2220      	movs	r2, #32
 8002242:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2220      	movs	r2, #32
 8002248:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2270      	movs	r2, #112	; 0x70
 800224e:	2100      	movs	r1, #0
 8002250:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	0018      	movs	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	b004      	add	sp, #16
 800225a:	bd80      	pop	{r7, pc}
 800225c:	01ffffff 	.word	0x01ffffff

08002260 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	1dfb      	adds	r3, r7, #7
 800226e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002270:	e05d      	b.n	800232e <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	3301      	adds	r3, #1
 8002276:	d05a      	beq.n	800232e <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002278:	f7fe fb4a 	bl	8000910 <HAL_GetTick>
 800227c:	0002      	movs	r2, r0
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	429a      	cmp	r2, r3
 8002286:	d302      	bcc.n	800228e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d11b      	bne.n	80022c6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	492f      	ldr	r1, [pc, #188]	; (8002358 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800229a:	400a      	ands	r2, r1
 800229c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2101      	movs	r1, #1
 80022aa:	438a      	bics	r2, r1
 80022ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2220      	movs	r2, #32
 80022b2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2220      	movs	r2, #32
 80022b8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2270      	movs	r2, #112	; 0x70
 80022be:	2100      	movs	r1, #0
 80022c0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e043      	b.n	800234e <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2204      	movs	r2, #4
 80022ce:	4013      	ands	r3, r2
 80022d0:	d02d      	beq.n	800232e <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	69da      	ldr	r2, [r3, #28]
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	401a      	ands	r2, r3
 80022de:	2380      	movs	r3, #128	; 0x80
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d123      	bne.n	800232e <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2280      	movs	r2, #128	; 0x80
 80022ec:	0112      	lsls	r2, r2, #4
 80022ee:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4917      	ldr	r1, [pc, #92]	; (8002358 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80022fc:	400a      	ands	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2101      	movs	r1, #1
 800230c:	438a      	bics	r2, r1
 800230e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2220      	movs	r2, #32
 8002314:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2220      	movs	r2, #32
 800231a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2220      	movs	r2, #32
 8002320:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2270      	movs	r2, #112	; 0x70
 8002326:	2100      	movs	r1, #0
 8002328:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e00f      	b.n	800234e <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	4013      	ands	r3, r2
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	425a      	negs	r2, r3
 800233e:	4153      	adcs	r3, r2
 8002340:	b2db      	uxtb	r3, r3
 8002342:	001a      	movs	r2, r3
 8002344:	1dfb      	adds	r3, r7, #7
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d092      	beq.n	8002272 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	0018      	movs	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	b004      	add	sp, #16
 8002354:	bd80      	pop	{r7, pc}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	fffffe5f 	.word	0xfffffe5f

0800235c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	21c0      	movs	r1, #192	; 0xc0
 8002370:	438a      	bics	r2, r1
 8002372:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2220      	movs	r2, #32
 8002378:	675a      	str	r2, [r3, #116]	; 0x74
}
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	46bd      	mov	sp, r7
 800237e:	b002      	add	sp, #8
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	490a      	ldr	r1, [pc, #40]	; (80023c0 <UART_EndRxTransfer+0x3c>)
 8002398:	400a      	ands	r2, r1
 800239a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2101      	movs	r1, #1
 80023a8:	438a      	bics	r2, r1
 80023aa:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2220      	movs	r2, #32
 80023b0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	661a      	str	r2, [r3, #96]	; 0x60
}
 80023b8:	46c0      	nop			; (mov r8, r8)
 80023ba:	46bd      	mov	sp, r7
 80023bc:	b002      	add	sp, #8
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	fffffedf 	.word	0xfffffedf

080023c4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2b20      	cmp	r3, #32
 80023d8:	d01e      	beq.n	8002418 <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	225a      	movs	r2, #90	; 0x5a
 80023de:	2100      	movs	r1, #0
 80023e0:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	490e      	ldr	r1, [pc, #56]	; (8002428 <UART_DMAReceiveCplt+0x64>)
 80023ee:	400a      	ands	r2, r1
 80023f0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2101      	movs	r1, #1
 80023fe:	438a      	bics	r2, r1
 8002400:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2140      	movs	r1, #64	; 0x40
 800240e:	438a      	bics	r2, r1
 8002410:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2220      	movs	r2, #32
 8002416:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	0018      	movs	r0, r3
 800241c:	f7ff fc88 	bl	8001d30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002420:	46c0      	nop			; (mov r8, r8)
 8002422:	46bd      	mov	sp, r7
 8002424:	b004      	add	sp, #16
 8002426:	bd80      	pop	{r7, pc}
 8002428:	fffffeff 	.word	0xfffffeff

0800242c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	0018      	movs	r0, r3
 800243e:	f7ff fc7f 	bl	8001d40 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	46bd      	mov	sp, r7
 8002446:	b004      	add	sp, #16
 8002448:	bd80      	pop	{r7, pc}

0800244a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b086      	sub	sp, #24
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002462:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2280      	movs	r2, #128	; 0x80
 800246c:	4013      	ands	r3, r2
 800246e:	2b80      	cmp	r3, #128	; 0x80
 8002470:	d10a      	bne.n	8002488 <UART_DMAError+0x3e>
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	2b21      	cmp	r3, #33	; 0x21
 8002476:	d107      	bne.n	8002488 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2252      	movs	r2, #82	; 0x52
 800247c:	2100      	movs	r1, #0
 800247e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	0018      	movs	r0, r3
 8002484:	f7ff ff6a 	bl	800235c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2240      	movs	r2, #64	; 0x40
 8002490:	4013      	ands	r3, r2
 8002492:	2b40      	cmp	r3, #64	; 0x40
 8002494:	d10a      	bne.n	80024ac <UART_DMAError+0x62>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2b22      	cmp	r3, #34	; 0x22
 800249a:	d107      	bne.n	80024ac <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	225a      	movs	r2, #90	; 0x5a
 80024a0:	2100      	movs	r1, #0
 80024a2:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	0018      	movs	r0, r3
 80024a8:	f7ff ff6c 	bl	8002384 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024b0:	2210      	movs	r2, #16
 80024b2:	431a      	orrs	r2, r3
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	0018      	movs	r0, r3
 80024bc:	f7ff fc48 	bl	8001d50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80024c0:	46c0      	nop			; (mov r8, r8)
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b006      	add	sp, #24
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <__errno>:
 80024c8:	4b01      	ldr	r3, [pc, #4]	; (80024d0 <__errno+0x8>)
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	4770      	bx	lr
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	2000000c 	.word	0x2000000c

080024d4 <__libc_init_array>:
 80024d4:	b570      	push	{r4, r5, r6, lr}
 80024d6:	2600      	movs	r6, #0
 80024d8:	4d0c      	ldr	r5, [pc, #48]	; (800250c <__libc_init_array+0x38>)
 80024da:	4c0d      	ldr	r4, [pc, #52]	; (8002510 <__libc_init_array+0x3c>)
 80024dc:	1b64      	subs	r4, r4, r5
 80024de:	10a4      	asrs	r4, r4, #2
 80024e0:	42a6      	cmp	r6, r4
 80024e2:	d109      	bne.n	80024f8 <__libc_init_array+0x24>
 80024e4:	2600      	movs	r6, #0
 80024e6:	f000 ff39 	bl	800335c <_init>
 80024ea:	4d0a      	ldr	r5, [pc, #40]	; (8002514 <__libc_init_array+0x40>)
 80024ec:	4c0a      	ldr	r4, [pc, #40]	; (8002518 <__libc_init_array+0x44>)
 80024ee:	1b64      	subs	r4, r4, r5
 80024f0:	10a4      	asrs	r4, r4, #2
 80024f2:	42a6      	cmp	r6, r4
 80024f4:	d105      	bne.n	8002502 <__libc_init_array+0x2e>
 80024f6:	bd70      	pop	{r4, r5, r6, pc}
 80024f8:	00b3      	lsls	r3, r6, #2
 80024fa:	58eb      	ldr	r3, [r5, r3]
 80024fc:	4798      	blx	r3
 80024fe:	3601      	adds	r6, #1
 8002500:	e7ee      	b.n	80024e0 <__libc_init_array+0xc>
 8002502:	00b3      	lsls	r3, r6, #2
 8002504:	58eb      	ldr	r3, [r5, r3]
 8002506:	4798      	blx	r3
 8002508:	3601      	adds	r6, #1
 800250a:	e7f2      	b.n	80024f2 <__libc_init_array+0x1e>
 800250c:	08003458 	.word	0x08003458
 8002510:	08003458 	.word	0x08003458
 8002514:	08003458 	.word	0x08003458
 8002518:	0800345c 	.word	0x0800345c

0800251c <memset>:
 800251c:	0003      	movs	r3, r0
 800251e:	1812      	adds	r2, r2, r0
 8002520:	4293      	cmp	r3, r2
 8002522:	d100      	bne.n	8002526 <memset+0xa>
 8002524:	4770      	bx	lr
 8002526:	7019      	strb	r1, [r3, #0]
 8002528:	3301      	adds	r3, #1
 800252a:	e7f9      	b.n	8002520 <memset+0x4>

0800252c <iprintf>:
 800252c:	b40f      	push	{r0, r1, r2, r3}
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <iprintf+0x30>)
 8002530:	b513      	push	{r0, r1, r4, lr}
 8002532:	681c      	ldr	r4, [r3, #0]
 8002534:	2c00      	cmp	r4, #0
 8002536:	d005      	beq.n	8002544 <iprintf+0x18>
 8002538:	69a3      	ldr	r3, [r4, #24]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d102      	bne.n	8002544 <iprintf+0x18>
 800253e:	0020      	movs	r0, r4
 8002540:	f000 f850 	bl	80025e4 <__sinit>
 8002544:	ab05      	add	r3, sp, #20
 8002546:	9a04      	ldr	r2, [sp, #16]
 8002548:	68a1      	ldr	r1, [r4, #8]
 800254a:	0020      	movs	r0, r4
 800254c:	9301      	str	r3, [sp, #4]
 800254e:	f000 f963 	bl	8002818 <_vfiprintf_r>
 8002552:	bc16      	pop	{r1, r2, r4}
 8002554:	bc08      	pop	{r3}
 8002556:	b004      	add	sp, #16
 8002558:	4718      	bx	r3
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	2000000c 	.word	0x2000000c

08002560 <std>:
 8002560:	2300      	movs	r3, #0
 8002562:	b510      	push	{r4, lr}
 8002564:	0004      	movs	r4, r0
 8002566:	6003      	str	r3, [r0, #0]
 8002568:	6043      	str	r3, [r0, #4]
 800256a:	6083      	str	r3, [r0, #8]
 800256c:	8181      	strh	r1, [r0, #12]
 800256e:	6643      	str	r3, [r0, #100]	; 0x64
 8002570:	81c2      	strh	r2, [r0, #14]
 8002572:	6103      	str	r3, [r0, #16]
 8002574:	6143      	str	r3, [r0, #20]
 8002576:	6183      	str	r3, [r0, #24]
 8002578:	0019      	movs	r1, r3
 800257a:	2208      	movs	r2, #8
 800257c:	305c      	adds	r0, #92	; 0x5c
 800257e:	f7ff ffcd 	bl	800251c <memset>
 8002582:	4b05      	ldr	r3, [pc, #20]	; (8002598 <std+0x38>)
 8002584:	6224      	str	r4, [r4, #32]
 8002586:	6263      	str	r3, [r4, #36]	; 0x24
 8002588:	4b04      	ldr	r3, [pc, #16]	; (800259c <std+0x3c>)
 800258a:	62a3      	str	r3, [r4, #40]	; 0x28
 800258c:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <std+0x40>)
 800258e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002590:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <std+0x44>)
 8002592:	6323      	str	r3, [r4, #48]	; 0x30
 8002594:	bd10      	pop	{r4, pc}
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	08002d55 	.word	0x08002d55
 800259c:	08002d7d 	.word	0x08002d7d
 80025a0:	08002db5 	.word	0x08002db5
 80025a4:	08002de1 	.word	0x08002de1

080025a8 <_cleanup_r>:
 80025a8:	b510      	push	{r4, lr}
 80025aa:	4902      	ldr	r1, [pc, #8]	; (80025b4 <_cleanup_r+0xc>)
 80025ac:	f000 f88c 	bl	80026c8 <_fwalk_reent>
 80025b0:	bd10      	pop	{r4, pc}
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	080030e5 	.word	0x080030e5

080025b8 <__sfmoreglue>:
 80025b8:	b570      	push	{r4, r5, r6, lr}
 80025ba:	2568      	movs	r5, #104	; 0x68
 80025bc:	1e4a      	subs	r2, r1, #1
 80025be:	4355      	muls	r5, r2
 80025c0:	000e      	movs	r6, r1
 80025c2:	0029      	movs	r1, r5
 80025c4:	3174      	adds	r1, #116	; 0x74
 80025c6:	f000 f8a1 	bl	800270c <_malloc_r>
 80025ca:	1e04      	subs	r4, r0, #0
 80025cc:	d008      	beq.n	80025e0 <__sfmoreglue+0x28>
 80025ce:	2100      	movs	r1, #0
 80025d0:	002a      	movs	r2, r5
 80025d2:	6001      	str	r1, [r0, #0]
 80025d4:	6046      	str	r6, [r0, #4]
 80025d6:	300c      	adds	r0, #12
 80025d8:	60a0      	str	r0, [r4, #8]
 80025da:	3268      	adds	r2, #104	; 0x68
 80025dc:	f7ff ff9e 	bl	800251c <memset>
 80025e0:	0020      	movs	r0, r4
 80025e2:	bd70      	pop	{r4, r5, r6, pc}

080025e4 <__sinit>:
 80025e4:	6983      	ldr	r3, [r0, #24]
 80025e6:	b513      	push	{r0, r1, r4, lr}
 80025e8:	0004      	movs	r4, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d128      	bne.n	8002640 <__sinit+0x5c>
 80025ee:	6483      	str	r3, [r0, #72]	; 0x48
 80025f0:	64c3      	str	r3, [r0, #76]	; 0x4c
 80025f2:	6503      	str	r3, [r0, #80]	; 0x50
 80025f4:	4b13      	ldr	r3, [pc, #76]	; (8002644 <__sinit+0x60>)
 80025f6:	4a14      	ldr	r2, [pc, #80]	; (8002648 <__sinit+0x64>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6282      	str	r2, [r0, #40]	; 0x28
 80025fc:	9301      	str	r3, [sp, #4]
 80025fe:	4298      	cmp	r0, r3
 8002600:	d101      	bne.n	8002606 <__sinit+0x22>
 8002602:	2301      	movs	r3, #1
 8002604:	6183      	str	r3, [r0, #24]
 8002606:	0020      	movs	r0, r4
 8002608:	f000 f820 	bl	800264c <__sfp>
 800260c:	6060      	str	r0, [r4, #4]
 800260e:	0020      	movs	r0, r4
 8002610:	f000 f81c 	bl	800264c <__sfp>
 8002614:	60a0      	str	r0, [r4, #8]
 8002616:	0020      	movs	r0, r4
 8002618:	f000 f818 	bl	800264c <__sfp>
 800261c:	2200      	movs	r2, #0
 800261e:	60e0      	str	r0, [r4, #12]
 8002620:	2104      	movs	r1, #4
 8002622:	6860      	ldr	r0, [r4, #4]
 8002624:	f7ff ff9c 	bl	8002560 <std>
 8002628:	2201      	movs	r2, #1
 800262a:	2109      	movs	r1, #9
 800262c:	68a0      	ldr	r0, [r4, #8]
 800262e:	f7ff ff97 	bl	8002560 <std>
 8002632:	2202      	movs	r2, #2
 8002634:	2112      	movs	r1, #18
 8002636:	68e0      	ldr	r0, [r4, #12]
 8002638:	f7ff ff92 	bl	8002560 <std>
 800263c:	2301      	movs	r3, #1
 800263e:	61a3      	str	r3, [r4, #24]
 8002640:	bd13      	pop	{r0, r1, r4, pc}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	080033c0 	.word	0x080033c0
 8002648:	080025a9 	.word	0x080025a9

0800264c <__sfp>:
 800264c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800264e:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <__sfp+0x74>)
 8002650:	0007      	movs	r7, r0
 8002652:	681e      	ldr	r6, [r3, #0]
 8002654:	69b3      	ldr	r3, [r6, #24]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d102      	bne.n	8002660 <__sfp+0x14>
 800265a:	0030      	movs	r0, r6
 800265c:	f7ff ffc2 	bl	80025e4 <__sinit>
 8002660:	3648      	adds	r6, #72	; 0x48
 8002662:	68b4      	ldr	r4, [r6, #8]
 8002664:	6873      	ldr	r3, [r6, #4]
 8002666:	3b01      	subs	r3, #1
 8002668:	d504      	bpl.n	8002674 <__sfp+0x28>
 800266a:	6833      	ldr	r3, [r6, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d007      	beq.n	8002680 <__sfp+0x34>
 8002670:	6836      	ldr	r6, [r6, #0]
 8002672:	e7f6      	b.n	8002662 <__sfp+0x16>
 8002674:	220c      	movs	r2, #12
 8002676:	5ea5      	ldrsh	r5, [r4, r2]
 8002678:	2d00      	cmp	r5, #0
 800267a:	d00d      	beq.n	8002698 <__sfp+0x4c>
 800267c:	3468      	adds	r4, #104	; 0x68
 800267e:	e7f2      	b.n	8002666 <__sfp+0x1a>
 8002680:	2104      	movs	r1, #4
 8002682:	0038      	movs	r0, r7
 8002684:	f7ff ff98 	bl	80025b8 <__sfmoreglue>
 8002688:	6030      	str	r0, [r6, #0]
 800268a:	2800      	cmp	r0, #0
 800268c:	d1f0      	bne.n	8002670 <__sfp+0x24>
 800268e:	230c      	movs	r3, #12
 8002690:	0004      	movs	r4, r0
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	0020      	movs	r0, r4
 8002696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002698:	0020      	movs	r0, r4
 800269a:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <__sfp+0x78>)
 800269c:	6665      	str	r5, [r4, #100]	; 0x64
 800269e:	6025      	str	r5, [r4, #0]
 80026a0:	6065      	str	r5, [r4, #4]
 80026a2:	60a5      	str	r5, [r4, #8]
 80026a4:	60e3      	str	r3, [r4, #12]
 80026a6:	6125      	str	r5, [r4, #16]
 80026a8:	6165      	str	r5, [r4, #20]
 80026aa:	61a5      	str	r5, [r4, #24]
 80026ac:	2208      	movs	r2, #8
 80026ae:	0029      	movs	r1, r5
 80026b0:	305c      	adds	r0, #92	; 0x5c
 80026b2:	f7ff ff33 	bl	800251c <memset>
 80026b6:	6365      	str	r5, [r4, #52]	; 0x34
 80026b8:	63a5      	str	r5, [r4, #56]	; 0x38
 80026ba:	64a5      	str	r5, [r4, #72]	; 0x48
 80026bc:	64e5      	str	r5, [r4, #76]	; 0x4c
 80026be:	e7e9      	b.n	8002694 <__sfp+0x48>
 80026c0:	080033c0 	.word	0x080033c0
 80026c4:	ffff0001 	.word	0xffff0001

080026c8 <_fwalk_reent>:
 80026c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80026ca:	0004      	movs	r4, r0
 80026cc:	0007      	movs	r7, r0
 80026ce:	2600      	movs	r6, #0
 80026d0:	9101      	str	r1, [sp, #4]
 80026d2:	3448      	adds	r4, #72	; 0x48
 80026d4:	2c00      	cmp	r4, #0
 80026d6:	d101      	bne.n	80026dc <_fwalk_reent+0x14>
 80026d8:	0030      	movs	r0, r6
 80026da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80026dc:	6863      	ldr	r3, [r4, #4]
 80026de:	68a5      	ldr	r5, [r4, #8]
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	9b00      	ldr	r3, [sp, #0]
 80026e4:	3b01      	subs	r3, #1
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	d501      	bpl.n	80026ee <_fwalk_reent+0x26>
 80026ea:	6824      	ldr	r4, [r4, #0]
 80026ec:	e7f2      	b.n	80026d4 <_fwalk_reent+0xc>
 80026ee:	89ab      	ldrh	r3, [r5, #12]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d908      	bls.n	8002706 <_fwalk_reent+0x3e>
 80026f4:	220e      	movs	r2, #14
 80026f6:	5eab      	ldrsh	r3, [r5, r2]
 80026f8:	3301      	adds	r3, #1
 80026fa:	d004      	beq.n	8002706 <_fwalk_reent+0x3e>
 80026fc:	0029      	movs	r1, r5
 80026fe:	0038      	movs	r0, r7
 8002700:	9b01      	ldr	r3, [sp, #4]
 8002702:	4798      	blx	r3
 8002704:	4306      	orrs	r6, r0
 8002706:	3568      	adds	r5, #104	; 0x68
 8002708:	e7eb      	b.n	80026e2 <_fwalk_reent+0x1a>
	...

0800270c <_malloc_r>:
 800270c:	2303      	movs	r3, #3
 800270e:	b570      	push	{r4, r5, r6, lr}
 8002710:	1ccd      	adds	r5, r1, #3
 8002712:	439d      	bics	r5, r3
 8002714:	3508      	adds	r5, #8
 8002716:	0006      	movs	r6, r0
 8002718:	2d0c      	cmp	r5, #12
 800271a:	d21e      	bcs.n	800275a <_malloc_r+0x4e>
 800271c:	250c      	movs	r5, #12
 800271e:	42a9      	cmp	r1, r5
 8002720:	d81d      	bhi.n	800275e <_malloc_r+0x52>
 8002722:	0030      	movs	r0, r6
 8002724:	f000 fd95 	bl	8003252 <__malloc_lock>
 8002728:	4a25      	ldr	r2, [pc, #148]	; (80027c0 <_malloc_r+0xb4>)
 800272a:	6814      	ldr	r4, [r2, #0]
 800272c:	0021      	movs	r1, r4
 800272e:	2900      	cmp	r1, #0
 8002730:	d119      	bne.n	8002766 <_malloc_r+0x5a>
 8002732:	4c24      	ldr	r4, [pc, #144]	; (80027c4 <_malloc_r+0xb8>)
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d103      	bne.n	8002742 <_malloc_r+0x36>
 800273a:	0030      	movs	r0, r6
 800273c:	f000 faf8 	bl	8002d30 <_sbrk_r>
 8002740:	6020      	str	r0, [r4, #0]
 8002742:	0029      	movs	r1, r5
 8002744:	0030      	movs	r0, r6
 8002746:	f000 faf3 	bl	8002d30 <_sbrk_r>
 800274a:	1c43      	adds	r3, r0, #1
 800274c:	d12b      	bne.n	80027a6 <_malloc_r+0x9a>
 800274e:	230c      	movs	r3, #12
 8002750:	0030      	movs	r0, r6
 8002752:	6033      	str	r3, [r6, #0]
 8002754:	f000 fd7e 	bl	8003254 <__malloc_unlock>
 8002758:	e003      	b.n	8002762 <_malloc_r+0x56>
 800275a:	2d00      	cmp	r5, #0
 800275c:	dadf      	bge.n	800271e <_malloc_r+0x12>
 800275e:	230c      	movs	r3, #12
 8002760:	6033      	str	r3, [r6, #0]
 8002762:	2000      	movs	r0, #0
 8002764:	bd70      	pop	{r4, r5, r6, pc}
 8002766:	680b      	ldr	r3, [r1, #0]
 8002768:	1b5b      	subs	r3, r3, r5
 800276a:	d419      	bmi.n	80027a0 <_malloc_r+0x94>
 800276c:	2b0b      	cmp	r3, #11
 800276e:	d903      	bls.n	8002778 <_malloc_r+0x6c>
 8002770:	600b      	str	r3, [r1, #0]
 8002772:	18cc      	adds	r4, r1, r3
 8002774:	6025      	str	r5, [r4, #0]
 8002776:	e003      	b.n	8002780 <_malloc_r+0x74>
 8002778:	684b      	ldr	r3, [r1, #4]
 800277a:	428c      	cmp	r4, r1
 800277c:	d10d      	bne.n	800279a <_malloc_r+0x8e>
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	0030      	movs	r0, r6
 8002782:	f000 fd67 	bl	8003254 <__malloc_unlock>
 8002786:	0020      	movs	r0, r4
 8002788:	2207      	movs	r2, #7
 800278a:	300b      	adds	r0, #11
 800278c:	1d23      	adds	r3, r4, #4
 800278e:	4390      	bics	r0, r2
 8002790:	1ac3      	subs	r3, r0, r3
 8002792:	d0e7      	beq.n	8002764 <_malloc_r+0x58>
 8002794:	425a      	negs	r2, r3
 8002796:	50e2      	str	r2, [r4, r3]
 8002798:	e7e4      	b.n	8002764 <_malloc_r+0x58>
 800279a:	6063      	str	r3, [r4, #4]
 800279c:	000c      	movs	r4, r1
 800279e:	e7ef      	b.n	8002780 <_malloc_r+0x74>
 80027a0:	000c      	movs	r4, r1
 80027a2:	6849      	ldr	r1, [r1, #4]
 80027a4:	e7c3      	b.n	800272e <_malloc_r+0x22>
 80027a6:	2303      	movs	r3, #3
 80027a8:	1cc4      	adds	r4, r0, #3
 80027aa:	439c      	bics	r4, r3
 80027ac:	42a0      	cmp	r0, r4
 80027ae:	d0e1      	beq.n	8002774 <_malloc_r+0x68>
 80027b0:	1a21      	subs	r1, r4, r0
 80027b2:	0030      	movs	r0, r6
 80027b4:	f000 fabc 	bl	8002d30 <_sbrk_r>
 80027b8:	1c43      	adds	r3, r0, #1
 80027ba:	d1db      	bne.n	8002774 <_malloc_r+0x68>
 80027bc:	e7c7      	b.n	800274e <_malloc_r+0x42>
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	20000114 	.word	0x20000114
 80027c4:	20000118 	.word	0x20000118

080027c8 <__sfputc_r>:
 80027c8:	6893      	ldr	r3, [r2, #8]
 80027ca:	b510      	push	{r4, lr}
 80027cc:	3b01      	subs	r3, #1
 80027ce:	6093      	str	r3, [r2, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	da04      	bge.n	80027de <__sfputc_r+0x16>
 80027d4:	6994      	ldr	r4, [r2, #24]
 80027d6:	42a3      	cmp	r3, r4
 80027d8:	db07      	blt.n	80027ea <__sfputc_r+0x22>
 80027da:	290a      	cmp	r1, #10
 80027dc:	d005      	beq.n	80027ea <__sfputc_r+0x22>
 80027de:	6813      	ldr	r3, [r2, #0]
 80027e0:	1c58      	adds	r0, r3, #1
 80027e2:	6010      	str	r0, [r2, #0]
 80027e4:	7019      	strb	r1, [r3, #0]
 80027e6:	0008      	movs	r0, r1
 80027e8:	bd10      	pop	{r4, pc}
 80027ea:	f000 faff 	bl	8002dec <__swbuf_r>
 80027ee:	0001      	movs	r1, r0
 80027f0:	e7f9      	b.n	80027e6 <__sfputc_r+0x1e>

080027f2 <__sfputs_r>:
 80027f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f4:	0006      	movs	r6, r0
 80027f6:	000f      	movs	r7, r1
 80027f8:	0014      	movs	r4, r2
 80027fa:	18d5      	adds	r5, r2, r3
 80027fc:	42ac      	cmp	r4, r5
 80027fe:	d101      	bne.n	8002804 <__sfputs_r+0x12>
 8002800:	2000      	movs	r0, #0
 8002802:	e007      	b.n	8002814 <__sfputs_r+0x22>
 8002804:	7821      	ldrb	r1, [r4, #0]
 8002806:	003a      	movs	r2, r7
 8002808:	0030      	movs	r0, r6
 800280a:	f7ff ffdd 	bl	80027c8 <__sfputc_r>
 800280e:	3401      	adds	r4, #1
 8002810:	1c43      	adds	r3, r0, #1
 8002812:	d1f3      	bne.n	80027fc <__sfputs_r+0xa>
 8002814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002818 <_vfiprintf_r>:
 8002818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800281a:	b0a1      	sub	sp, #132	; 0x84
 800281c:	9003      	str	r0, [sp, #12]
 800281e:	000f      	movs	r7, r1
 8002820:	0016      	movs	r6, r2
 8002822:	001d      	movs	r5, r3
 8002824:	2800      	cmp	r0, #0
 8002826:	d005      	beq.n	8002834 <_vfiprintf_r+0x1c>
 8002828:	6983      	ldr	r3, [r0, #24]
 800282a:	9305      	str	r3, [sp, #20]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <_vfiprintf_r+0x1c>
 8002830:	f7ff fed8 	bl	80025e4 <__sinit>
 8002834:	4b7b      	ldr	r3, [pc, #492]	; (8002a24 <_vfiprintf_r+0x20c>)
 8002836:	429f      	cmp	r7, r3
 8002838:	d15c      	bne.n	80028f4 <_vfiprintf_r+0xdc>
 800283a:	9b03      	ldr	r3, [sp, #12]
 800283c:	685f      	ldr	r7, [r3, #4]
 800283e:	89bb      	ldrh	r3, [r7, #12]
 8002840:	071b      	lsls	r3, r3, #28
 8002842:	d563      	bpl.n	800290c <_vfiprintf_r+0xf4>
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d060      	beq.n	800290c <_vfiprintf_r+0xf4>
 800284a:	2300      	movs	r3, #0
 800284c:	ac08      	add	r4, sp, #32
 800284e:	6163      	str	r3, [r4, #20]
 8002850:	3320      	adds	r3, #32
 8002852:	7663      	strb	r3, [r4, #25]
 8002854:	3310      	adds	r3, #16
 8002856:	76a3      	strb	r3, [r4, #26]
 8002858:	9507      	str	r5, [sp, #28]
 800285a:	0035      	movs	r5, r6
 800285c:	782b      	ldrb	r3, [r5, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <_vfiprintf_r+0x4e>
 8002862:	2b25      	cmp	r3, #37	; 0x25
 8002864:	d15c      	bne.n	8002920 <_vfiprintf_r+0x108>
 8002866:	1bab      	subs	r3, r5, r6
 8002868:	9305      	str	r3, [sp, #20]
 800286a:	d00c      	beq.n	8002886 <_vfiprintf_r+0x6e>
 800286c:	0032      	movs	r2, r6
 800286e:	0039      	movs	r1, r7
 8002870:	9803      	ldr	r0, [sp, #12]
 8002872:	f7ff ffbe 	bl	80027f2 <__sfputs_r>
 8002876:	1c43      	adds	r3, r0, #1
 8002878:	d100      	bne.n	800287c <_vfiprintf_r+0x64>
 800287a:	e0c4      	b.n	8002a06 <_vfiprintf_r+0x1ee>
 800287c:	6962      	ldr	r2, [r4, #20]
 800287e:	9b05      	ldr	r3, [sp, #20]
 8002880:	4694      	mov	ip, r2
 8002882:	4463      	add	r3, ip
 8002884:	6163      	str	r3, [r4, #20]
 8002886:	782b      	ldrb	r3, [r5, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d100      	bne.n	800288e <_vfiprintf_r+0x76>
 800288c:	e0bb      	b.n	8002a06 <_vfiprintf_r+0x1ee>
 800288e:	2201      	movs	r2, #1
 8002890:	2300      	movs	r3, #0
 8002892:	4252      	negs	r2, r2
 8002894:	6062      	str	r2, [r4, #4]
 8002896:	a904      	add	r1, sp, #16
 8002898:	3254      	adds	r2, #84	; 0x54
 800289a:	1852      	adds	r2, r2, r1
 800289c:	1c6e      	adds	r6, r5, #1
 800289e:	6023      	str	r3, [r4, #0]
 80028a0:	60e3      	str	r3, [r4, #12]
 80028a2:	60a3      	str	r3, [r4, #8]
 80028a4:	7013      	strb	r3, [r2, #0]
 80028a6:	65a3      	str	r3, [r4, #88]	; 0x58
 80028a8:	7831      	ldrb	r1, [r6, #0]
 80028aa:	2205      	movs	r2, #5
 80028ac:	485e      	ldr	r0, [pc, #376]	; (8002a28 <_vfiprintf_r+0x210>)
 80028ae:	f000 fcc5 	bl	800323c <memchr>
 80028b2:	1c75      	adds	r5, r6, #1
 80028b4:	2800      	cmp	r0, #0
 80028b6:	d135      	bne.n	8002924 <_vfiprintf_r+0x10c>
 80028b8:	6822      	ldr	r2, [r4, #0]
 80028ba:	06d3      	lsls	r3, r2, #27
 80028bc:	d504      	bpl.n	80028c8 <_vfiprintf_r+0xb0>
 80028be:	2353      	movs	r3, #83	; 0x53
 80028c0:	a904      	add	r1, sp, #16
 80028c2:	185b      	adds	r3, r3, r1
 80028c4:	2120      	movs	r1, #32
 80028c6:	7019      	strb	r1, [r3, #0]
 80028c8:	0713      	lsls	r3, r2, #28
 80028ca:	d504      	bpl.n	80028d6 <_vfiprintf_r+0xbe>
 80028cc:	2353      	movs	r3, #83	; 0x53
 80028ce:	a904      	add	r1, sp, #16
 80028d0:	185b      	adds	r3, r3, r1
 80028d2:	212b      	movs	r1, #43	; 0x2b
 80028d4:	7019      	strb	r1, [r3, #0]
 80028d6:	7833      	ldrb	r3, [r6, #0]
 80028d8:	2b2a      	cmp	r3, #42	; 0x2a
 80028da:	d02c      	beq.n	8002936 <_vfiprintf_r+0x11e>
 80028dc:	0035      	movs	r5, r6
 80028de:	2100      	movs	r1, #0
 80028e0:	200a      	movs	r0, #10
 80028e2:	68e3      	ldr	r3, [r4, #12]
 80028e4:	782a      	ldrb	r2, [r5, #0]
 80028e6:	1c6e      	adds	r6, r5, #1
 80028e8:	3a30      	subs	r2, #48	; 0x30
 80028ea:	2a09      	cmp	r2, #9
 80028ec:	d964      	bls.n	80029b8 <_vfiprintf_r+0x1a0>
 80028ee:	2900      	cmp	r1, #0
 80028f0:	d02e      	beq.n	8002950 <_vfiprintf_r+0x138>
 80028f2:	e026      	b.n	8002942 <_vfiprintf_r+0x12a>
 80028f4:	4b4d      	ldr	r3, [pc, #308]	; (8002a2c <_vfiprintf_r+0x214>)
 80028f6:	429f      	cmp	r7, r3
 80028f8:	d102      	bne.n	8002900 <_vfiprintf_r+0xe8>
 80028fa:	9b03      	ldr	r3, [sp, #12]
 80028fc:	689f      	ldr	r7, [r3, #8]
 80028fe:	e79e      	b.n	800283e <_vfiprintf_r+0x26>
 8002900:	4b4b      	ldr	r3, [pc, #300]	; (8002a30 <_vfiprintf_r+0x218>)
 8002902:	429f      	cmp	r7, r3
 8002904:	d19b      	bne.n	800283e <_vfiprintf_r+0x26>
 8002906:	9b03      	ldr	r3, [sp, #12]
 8002908:	68df      	ldr	r7, [r3, #12]
 800290a:	e798      	b.n	800283e <_vfiprintf_r+0x26>
 800290c:	0039      	movs	r1, r7
 800290e:	9803      	ldr	r0, [sp, #12]
 8002910:	f000 fad6 	bl	8002ec0 <__swsetup_r>
 8002914:	2800      	cmp	r0, #0
 8002916:	d098      	beq.n	800284a <_vfiprintf_r+0x32>
 8002918:	2001      	movs	r0, #1
 800291a:	4240      	negs	r0, r0
 800291c:	b021      	add	sp, #132	; 0x84
 800291e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002920:	3501      	adds	r5, #1
 8002922:	e79b      	b.n	800285c <_vfiprintf_r+0x44>
 8002924:	4b40      	ldr	r3, [pc, #256]	; (8002a28 <_vfiprintf_r+0x210>)
 8002926:	6822      	ldr	r2, [r4, #0]
 8002928:	1ac0      	subs	r0, r0, r3
 800292a:	2301      	movs	r3, #1
 800292c:	4083      	lsls	r3, r0
 800292e:	4313      	orrs	r3, r2
 8002930:	6023      	str	r3, [r4, #0]
 8002932:	002e      	movs	r6, r5
 8002934:	e7b8      	b.n	80028a8 <_vfiprintf_r+0x90>
 8002936:	9b07      	ldr	r3, [sp, #28]
 8002938:	1d19      	adds	r1, r3, #4
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	9107      	str	r1, [sp, #28]
 800293e:	2b00      	cmp	r3, #0
 8002940:	db01      	blt.n	8002946 <_vfiprintf_r+0x12e>
 8002942:	930b      	str	r3, [sp, #44]	; 0x2c
 8002944:	e004      	b.n	8002950 <_vfiprintf_r+0x138>
 8002946:	425b      	negs	r3, r3
 8002948:	60e3      	str	r3, [r4, #12]
 800294a:	2302      	movs	r3, #2
 800294c:	4313      	orrs	r3, r2
 800294e:	6023      	str	r3, [r4, #0]
 8002950:	782b      	ldrb	r3, [r5, #0]
 8002952:	2b2e      	cmp	r3, #46	; 0x2e
 8002954:	d10a      	bne.n	800296c <_vfiprintf_r+0x154>
 8002956:	786b      	ldrb	r3, [r5, #1]
 8002958:	2b2a      	cmp	r3, #42	; 0x2a
 800295a:	d135      	bne.n	80029c8 <_vfiprintf_r+0x1b0>
 800295c:	9b07      	ldr	r3, [sp, #28]
 800295e:	3502      	adds	r5, #2
 8002960:	1d1a      	adds	r2, r3, #4
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	9207      	str	r2, [sp, #28]
 8002966:	2b00      	cmp	r3, #0
 8002968:	db2b      	blt.n	80029c2 <_vfiprintf_r+0x1aa>
 800296a:	9309      	str	r3, [sp, #36]	; 0x24
 800296c:	4e31      	ldr	r6, [pc, #196]	; (8002a34 <_vfiprintf_r+0x21c>)
 800296e:	7829      	ldrb	r1, [r5, #0]
 8002970:	2203      	movs	r2, #3
 8002972:	0030      	movs	r0, r6
 8002974:	f000 fc62 	bl	800323c <memchr>
 8002978:	2800      	cmp	r0, #0
 800297a:	d006      	beq.n	800298a <_vfiprintf_r+0x172>
 800297c:	2340      	movs	r3, #64	; 0x40
 800297e:	1b80      	subs	r0, r0, r6
 8002980:	4083      	lsls	r3, r0
 8002982:	6822      	ldr	r2, [r4, #0]
 8002984:	3501      	adds	r5, #1
 8002986:	4313      	orrs	r3, r2
 8002988:	6023      	str	r3, [r4, #0]
 800298a:	7829      	ldrb	r1, [r5, #0]
 800298c:	2206      	movs	r2, #6
 800298e:	482a      	ldr	r0, [pc, #168]	; (8002a38 <_vfiprintf_r+0x220>)
 8002990:	1c6e      	adds	r6, r5, #1
 8002992:	7621      	strb	r1, [r4, #24]
 8002994:	f000 fc52 	bl	800323c <memchr>
 8002998:	2800      	cmp	r0, #0
 800299a:	d03a      	beq.n	8002a12 <_vfiprintf_r+0x1fa>
 800299c:	4b27      	ldr	r3, [pc, #156]	; (8002a3c <_vfiprintf_r+0x224>)
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d125      	bne.n	80029ee <_vfiprintf_r+0x1d6>
 80029a2:	2207      	movs	r2, #7
 80029a4:	9b07      	ldr	r3, [sp, #28]
 80029a6:	3307      	adds	r3, #7
 80029a8:	4393      	bics	r3, r2
 80029aa:	3308      	adds	r3, #8
 80029ac:	9307      	str	r3, [sp, #28]
 80029ae:	6963      	ldr	r3, [r4, #20]
 80029b0:	9a04      	ldr	r2, [sp, #16]
 80029b2:	189b      	adds	r3, r3, r2
 80029b4:	6163      	str	r3, [r4, #20]
 80029b6:	e750      	b.n	800285a <_vfiprintf_r+0x42>
 80029b8:	4343      	muls	r3, r0
 80029ba:	2101      	movs	r1, #1
 80029bc:	189b      	adds	r3, r3, r2
 80029be:	0035      	movs	r5, r6
 80029c0:	e790      	b.n	80028e4 <_vfiprintf_r+0xcc>
 80029c2:	2301      	movs	r3, #1
 80029c4:	425b      	negs	r3, r3
 80029c6:	e7d0      	b.n	800296a <_vfiprintf_r+0x152>
 80029c8:	2300      	movs	r3, #0
 80029ca:	200a      	movs	r0, #10
 80029cc:	001a      	movs	r2, r3
 80029ce:	3501      	adds	r5, #1
 80029d0:	6063      	str	r3, [r4, #4]
 80029d2:	7829      	ldrb	r1, [r5, #0]
 80029d4:	1c6e      	adds	r6, r5, #1
 80029d6:	3930      	subs	r1, #48	; 0x30
 80029d8:	2909      	cmp	r1, #9
 80029da:	d903      	bls.n	80029e4 <_vfiprintf_r+0x1cc>
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0c5      	beq.n	800296c <_vfiprintf_r+0x154>
 80029e0:	9209      	str	r2, [sp, #36]	; 0x24
 80029e2:	e7c3      	b.n	800296c <_vfiprintf_r+0x154>
 80029e4:	4342      	muls	r2, r0
 80029e6:	2301      	movs	r3, #1
 80029e8:	1852      	adds	r2, r2, r1
 80029ea:	0035      	movs	r5, r6
 80029ec:	e7f1      	b.n	80029d2 <_vfiprintf_r+0x1ba>
 80029ee:	ab07      	add	r3, sp, #28
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	003a      	movs	r2, r7
 80029f4:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <_vfiprintf_r+0x228>)
 80029f6:	0021      	movs	r1, r4
 80029f8:	9803      	ldr	r0, [sp, #12]
 80029fa:	e000      	b.n	80029fe <_vfiprintf_r+0x1e6>
 80029fc:	bf00      	nop
 80029fe:	9004      	str	r0, [sp, #16]
 8002a00:	9b04      	ldr	r3, [sp, #16]
 8002a02:	3301      	adds	r3, #1
 8002a04:	d1d3      	bne.n	80029ae <_vfiprintf_r+0x196>
 8002a06:	89bb      	ldrh	r3, [r7, #12]
 8002a08:	065b      	lsls	r3, r3, #25
 8002a0a:	d500      	bpl.n	8002a0e <_vfiprintf_r+0x1f6>
 8002a0c:	e784      	b.n	8002918 <_vfiprintf_r+0x100>
 8002a0e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002a10:	e784      	b.n	800291c <_vfiprintf_r+0x104>
 8002a12:	ab07      	add	r3, sp, #28
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	003a      	movs	r2, r7
 8002a18:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <_vfiprintf_r+0x228>)
 8002a1a:	0021      	movs	r1, r4
 8002a1c:	9803      	ldr	r0, [sp, #12]
 8002a1e:	f000 f87f 	bl	8002b20 <_printf_i>
 8002a22:	e7ec      	b.n	80029fe <_vfiprintf_r+0x1e6>
 8002a24:	080033e4 	.word	0x080033e4
 8002a28:	08003424 	.word	0x08003424
 8002a2c:	08003404 	.word	0x08003404
 8002a30:	080033c4 	.word	0x080033c4
 8002a34:	0800342a 	.word	0x0800342a
 8002a38:	0800342e 	.word	0x0800342e
 8002a3c:	00000000 	.word	0x00000000
 8002a40:	080027f3 	.word	0x080027f3

08002a44 <_printf_common>:
 8002a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a46:	0015      	movs	r5, r2
 8002a48:	9301      	str	r3, [sp, #4]
 8002a4a:	688a      	ldr	r2, [r1, #8]
 8002a4c:	690b      	ldr	r3, [r1, #16]
 8002a4e:	9000      	str	r0, [sp, #0]
 8002a50:	000c      	movs	r4, r1
 8002a52:	4293      	cmp	r3, r2
 8002a54:	da00      	bge.n	8002a58 <_printf_common+0x14>
 8002a56:	0013      	movs	r3, r2
 8002a58:	0022      	movs	r2, r4
 8002a5a:	602b      	str	r3, [r5, #0]
 8002a5c:	3243      	adds	r2, #67	; 0x43
 8002a5e:	7812      	ldrb	r2, [r2, #0]
 8002a60:	2a00      	cmp	r2, #0
 8002a62:	d001      	beq.n	8002a68 <_printf_common+0x24>
 8002a64:	3301      	adds	r3, #1
 8002a66:	602b      	str	r3, [r5, #0]
 8002a68:	6823      	ldr	r3, [r4, #0]
 8002a6a:	069b      	lsls	r3, r3, #26
 8002a6c:	d502      	bpl.n	8002a74 <_printf_common+0x30>
 8002a6e:	682b      	ldr	r3, [r5, #0]
 8002a70:	3302      	adds	r3, #2
 8002a72:	602b      	str	r3, [r5, #0]
 8002a74:	2706      	movs	r7, #6
 8002a76:	6823      	ldr	r3, [r4, #0]
 8002a78:	401f      	ands	r7, r3
 8002a7a:	d027      	beq.n	8002acc <_printf_common+0x88>
 8002a7c:	0023      	movs	r3, r4
 8002a7e:	3343      	adds	r3, #67	; 0x43
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	1e5a      	subs	r2, r3, #1
 8002a84:	4193      	sbcs	r3, r2
 8002a86:	6822      	ldr	r2, [r4, #0]
 8002a88:	0692      	lsls	r2, r2, #26
 8002a8a:	d430      	bmi.n	8002aee <_printf_common+0xaa>
 8002a8c:	0022      	movs	r2, r4
 8002a8e:	9901      	ldr	r1, [sp, #4]
 8002a90:	3243      	adds	r2, #67	; 0x43
 8002a92:	9800      	ldr	r0, [sp, #0]
 8002a94:	9e08      	ldr	r6, [sp, #32]
 8002a96:	47b0      	blx	r6
 8002a98:	1c43      	adds	r3, r0, #1
 8002a9a:	d025      	beq.n	8002ae8 <_printf_common+0xa4>
 8002a9c:	2306      	movs	r3, #6
 8002a9e:	6820      	ldr	r0, [r4, #0]
 8002aa0:	682a      	ldr	r2, [r5, #0]
 8002aa2:	68e1      	ldr	r1, [r4, #12]
 8002aa4:	4003      	ands	r3, r0
 8002aa6:	2500      	movs	r5, #0
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d103      	bne.n	8002ab4 <_printf_common+0x70>
 8002aac:	1a8d      	subs	r5, r1, r2
 8002aae:	43eb      	mvns	r3, r5
 8002ab0:	17db      	asrs	r3, r3, #31
 8002ab2:	401d      	ands	r5, r3
 8002ab4:	68a3      	ldr	r3, [r4, #8]
 8002ab6:	6922      	ldr	r2, [r4, #16]
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	dd01      	ble.n	8002ac0 <_printf_common+0x7c>
 8002abc:	1a9b      	subs	r3, r3, r2
 8002abe:	18ed      	adds	r5, r5, r3
 8002ac0:	2700      	movs	r7, #0
 8002ac2:	42bd      	cmp	r5, r7
 8002ac4:	d120      	bne.n	8002b08 <_printf_common+0xc4>
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	e010      	b.n	8002aec <_printf_common+0xa8>
 8002aca:	3701      	adds	r7, #1
 8002acc:	68e3      	ldr	r3, [r4, #12]
 8002ace:	682a      	ldr	r2, [r5, #0]
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	42bb      	cmp	r3, r7
 8002ad4:	ddd2      	ble.n	8002a7c <_printf_common+0x38>
 8002ad6:	0022      	movs	r2, r4
 8002ad8:	2301      	movs	r3, #1
 8002ada:	3219      	adds	r2, #25
 8002adc:	9901      	ldr	r1, [sp, #4]
 8002ade:	9800      	ldr	r0, [sp, #0]
 8002ae0:	9e08      	ldr	r6, [sp, #32]
 8002ae2:	47b0      	blx	r6
 8002ae4:	1c43      	adds	r3, r0, #1
 8002ae6:	d1f0      	bne.n	8002aca <_printf_common+0x86>
 8002ae8:	2001      	movs	r0, #1
 8002aea:	4240      	negs	r0, r0
 8002aec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002aee:	2030      	movs	r0, #48	; 0x30
 8002af0:	18e1      	adds	r1, r4, r3
 8002af2:	3143      	adds	r1, #67	; 0x43
 8002af4:	7008      	strb	r0, [r1, #0]
 8002af6:	0021      	movs	r1, r4
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	3145      	adds	r1, #69	; 0x45
 8002afc:	7809      	ldrb	r1, [r1, #0]
 8002afe:	18a2      	adds	r2, r4, r2
 8002b00:	3243      	adds	r2, #67	; 0x43
 8002b02:	3302      	adds	r3, #2
 8002b04:	7011      	strb	r1, [r2, #0]
 8002b06:	e7c1      	b.n	8002a8c <_printf_common+0x48>
 8002b08:	0022      	movs	r2, r4
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	321a      	adds	r2, #26
 8002b0e:	9901      	ldr	r1, [sp, #4]
 8002b10:	9800      	ldr	r0, [sp, #0]
 8002b12:	9e08      	ldr	r6, [sp, #32]
 8002b14:	47b0      	blx	r6
 8002b16:	1c43      	adds	r3, r0, #1
 8002b18:	d0e6      	beq.n	8002ae8 <_printf_common+0xa4>
 8002b1a:	3701      	adds	r7, #1
 8002b1c:	e7d1      	b.n	8002ac2 <_printf_common+0x7e>
	...

08002b20 <_printf_i>:
 8002b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b22:	b089      	sub	sp, #36	; 0x24
 8002b24:	9204      	str	r2, [sp, #16]
 8002b26:	000a      	movs	r2, r1
 8002b28:	3243      	adds	r2, #67	; 0x43
 8002b2a:	9305      	str	r3, [sp, #20]
 8002b2c:	9003      	str	r0, [sp, #12]
 8002b2e:	9202      	str	r2, [sp, #8]
 8002b30:	7e0a      	ldrb	r2, [r1, #24]
 8002b32:	000c      	movs	r4, r1
 8002b34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b36:	2a6e      	cmp	r2, #110	; 0x6e
 8002b38:	d100      	bne.n	8002b3c <_printf_i+0x1c>
 8002b3a:	e086      	b.n	8002c4a <_printf_i+0x12a>
 8002b3c:	d81f      	bhi.n	8002b7e <_printf_i+0x5e>
 8002b3e:	2a63      	cmp	r2, #99	; 0x63
 8002b40:	d033      	beq.n	8002baa <_printf_i+0x8a>
 8002b42:	d808      	bhi.n	8002b56 <_printf_i+0x36>
 8002b44:	2a00      	cmp	r2, #0
 8002b46:	d100      	bne.n	8002b4a <_printf_i+0x2a>
 8002b48:	e08c      	b.n	8002c64 <_printf_i+0x144>
 8002b4a:	2a58      	cmp	r2, #88	; 0x58
 8002b4c:	d04d      	beq.n	8002bea <_printf_i+0xca>
 8002b4e:	0025      	movs	r5, r4
 8002b50:	3542      	adds	r5, #66	; 0x42
 8002b52:	702a      	strb	r2, [r5, #0]
 8002b54:	e030      	b.n	8002bb8 <_printf_i+0x98>
 8002b56:	2a64      	cmp	r2, #100	; 0x64
 8002b58:	d001      	beq.n	8002b5e <_printf_i+0x3e>
 8002b5a:	2a69      	cmp	r2, #105	; 0x69
 8002b5c:	d1f7      	bne.n	8002b4e <_printf_i+0x2e>
 8002b5e:	6819      	ldr	r1, [r3, #0]
 8002b60:	6825      	ldr	r5, [r4, #0]
 8002b62:	1d0a      	adds	r2, r1, #4
 8002b64:	0628      	lsls	r0, r5, #24
 8002b66:	d529      	bpl.n	8002bbc <_printf_i+0x9c>
 8002b68:	6808      	ldr	r0, [r1, #0]
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	2800      	cmp	r0, #0
 8002b6e:	da03      	bge.n	8002b78 <_printf_i+0x58>
 8002b70:	232d      	movs	r3, #45	; 0x2d
 8002b72:	9a02      	ldr	r2, [sp, #8]
 8002b74:	4240      	negs	r0, r0
 8002b76:	7013      	strb	r3, [r2, #0]
 8002b78:	4e6b      	ldr	r6, [pc, #428]	; (8002d28 <_printf_i+0x208>)
 8002b7a:	270a      	movs	r7, #10
 8002b7c:	e04f      	b.n	8002c1e <_printf_i+0xfe>
 8002b7e:	2a73      	cmp	r2, #115	; 0x73
 8002b80:	d074      	beq.n	8002c6c <_printf_i+0x14c>
 8002b82:	d808      	bhi.n	8002b96 <_printf_i+0x76>
 8002b84:	2a6f      	cmp	r2, #111	; 0x6f
 8002b86:	d01f      	beq.n	8002bc8 <_printf_i+0xa8>
 8002b88:	2a70      	cmp	r2, #112	; 0x70
 8002b8a:	d1e0      	bne.n	8002b4e <_printf_i+0x2e>
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	6809      	ldr	r1, [r1, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	6022      	str	r2, [r4, #0]
 8002b94:	e003      	b.n	8002b9e <_printf_i+0x7e>
 8002b96:	2a75      	cmp	r2, #117	; 0x75
 8002b98:	d016      	beq.n	8002bc8 <_printf_i+0xa8>
 8002b9a:	2a78      	cmp	r2, #120	; 0x78
 8002b9c:	d1d7      	bne.n	8002b4e <_printf_i+0x2e>
 8002b9e:	0022      	movs	r2, r4
 8002ba0:	2178      	movs	r1, #120	; 0x78
 8002ba2:	3245      	adds	r2, #69	; 0x45
 8002ba4:	7011      	strb	r1, [r2, #0]
 8002ba6:	4e61      	ldr	r6, [pc, #388]	; (8002d2c <_printf_i+0x20c>)
 8002ba8:	e022      	b.n	8002bf0 <_printf_i+0xd0>
 8002baa:	0025      	movs	r5, r4
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	3542      	adds	r5, #66	; 0x42
 8002bb0:	1d11      	adds	r1, r2, #4
 8002bb2:	6019      	str	r1, [r3, #0]
 8002bb4:	6813      	ldr	r3, [r2, #0]
 8002bb6:	702b      	strb	r3, [r5, #0]
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e065      	b.n	8002c88 <_printf_i+0x168>
 8002bbc:	6808      	ldr	r0, [r1, #0]
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	0669      	lsls	r1, r5, #25
 8002bc2:	d5d3      	bpl.n	8002b6c <_printf_i+0x4c>
 8002bc4:	b200      	sxth	r0, r0
 8002bc6:	e7d1      	b.n	8002b6c <_printf_i+0x4c>
 8002bc8:	6819      	ldr	r1, [r3, #0]
 8002bca:	6825      	ldr	r5, [r4, #0]
 8002bcc:	1d08      	adds	r0, r1, #4
 8002bce:	6018      	str	r0, [r3, #0]
 8002bd0:	6808      	ldr	r0, [r1, #0]
 8002bd2:	062e      	lsls	r6, r5, #24
 8002bd4:	d505      	bpl.n	8002be2 <_printf_i+0xc2>
 8002bd6:	4e54      	ldr	r6, [pc, #336]	; (8002d28 <_printf_i+0x208>)
 8002bd8:	2708      	movs	r7, #8
 8002bda:	2a6f      	cmp	r2, #111	; 0x6f
 8002bdc:	d01b      	beq.n	8002c16 <_printf_i+0xf6>
 8002bde:	270a      	movs	r7, #10
 8002be0:	e019      	b.n	8002c16 <_printf_i+0xf6>
 8002be2:	066d      	lsls	r5, r5, #25
 8002be4:	d5f7      	bpl.n	8002bd6 <_printf_i+0xb6>
 8002be6:	b280      	uxth	r0, r0
 8002be8:	e7f5      	b.n	8002bd6 <_printf_i+0xb6>
 8002bea:	3145      	adds	r1, #69	; 0x45
 8002bec:	4e4e      	ldr	r6, [pc, #312]	; (8002d28 <_printf_i+0x208>)
 8002bee:	700a      	strb	r2, [r1, #0]
 8002bf0:	6818      	ldr	r0, [r3, #0]
 8002bf2:	6822      	ldr	r2, [r4, #0]
 8002bf4:	1d01      	adds	r1, r0, #4
 8002bf6:	6800      	ldr	r0, [r0, #0]
 8002bf8:	6019      	str	r1, [r3, #0]
 8002bfa:	0615      	lsls	r5, r2, #24
 8002bfc:	d521      	bpl.n	8002c42 <_printf_i+0x122>
 8002bfe:	07d3      	lsls	r3, r2, #31
 8002c00:	d502      	bpl.n	8002c08 <_printf_i+0xe8>
 8002c02:	2320      	movs	r3, #32
 8002c04:	431a      	orrs	r2, r3
 8002c06:	6022      	str	r2, [r4, #0]
 8002c08:	2710      	movs	r7, #16
 8002c0a:	2800      	cmp	r0, #0
 8002c0c:	d103      	bne.n	8002c16 <_printf_i+0xf6>
 8002c0e:	2320      	movs	r3, #32
 8002c10:	6822      	ldr	r2, [r4, #0]
 8002c12:	439a      	bics	r2, r3
 8002c14:	6022      	str	r2, [r4, #0]
 8002c16:	0023      	movs	r3, r4
 8002c18:	2200      	movs	r2, #0
 8002c1a:	3343      	adds	r3, #67	; 0x43
 8002c1c:	701a      	strb	r2, [r3, #0]
 8002c1e:	6863      	ldr	r3, [r4, #4]
 8002c20:	60a3      	str	r3, [r4, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	db58      	blt.n	8002cd8 <_printf_i+0x1b8>
 8002c26:	2204      	movs	r2, #4
 8002c28:	6821      	ldr	r1, [r4, #0]
 8002c2a:	4391      	bics	r1, r2
 8002c2c:	6021      	str	r1, [r4, #0]
 8002c2e:	2800      	cmp	r0, #0
 8002c30:	d154      	bne.n	8002cdc <_printf_i+0x1bc>
 8002c32:	9d02      	ldr	r5, [sp, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d05a      	beq.n	8002cee <_printf_i+0x1ce>
 8002c38:	0025      	movs	r5, r4
 8002c3a:	7833      	ldrb	r3, [r6, #0]
 8002c3c:	3542      	adds	r5, #66	; 0x42
 8002c3e:	702b      	strb	r3, [r5, #0]
 8002c40:	e055      	b.n	8002cee <_printf_i+0x1ce>
 8002c42:	0655      	lsls	r5, r2, #25
 8002c44:	d5db      	bpl.n	8002bfe <_printf_i+0xde>
 8002c46:	b280      	uxth	r0, r0
 8002c48:	e7d9      	b.n	8002bfe <_printf_i+0xde>
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	680d      	ldr	r5, [r1, #0]
 8002c4e:	1d10      	adds	r0, r2, #4
 8002c50:	6949      	ldr	r1, [r1, #20]
 8002c52:	6018      	str	r0, [r3, #0]
 8002c54:	6813      	ldr	r3, [r2, #0]
 8002c56:	062e      	lsls	r6, r5, #24
 8002c58:	d501      	bpl.n	8002c5e <_printf_i+0x13e>
 8002c5a:	6019      	str	r1, [r3, #0]
 8002c5c:	e002      	b.n	8002c64 <_printf_i+0x144>
 8002c5e:	066d      	lsls	r5, r5, #25
 8002c60:	d5fb      	bpl.n	8002c5a <_printf_i+0x13a>
 8002c62:	8019      	strh	r1, [r3, #0]
 8002c64:	2300      	movs	r3, #0
 8002c66:	9d02      	ldr	r5, [sp, #8]
 8002c68:	6123      	str	r3, [r4, #16]
 8002c6a:	e04f      	b.n	8002d0c <_printf_i+0x1ec>
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	1d11      	adds	r1, r2, #4
 8002c70:	6019      	str	r1, [r3, #0]
 8002c72:	6815      	ldr	r5, [r2, #0]
 8002c74:	2100      	movs	r1, #0
 8002c76:	6862      	ldr	r2, [r4, #4]
 8002c78:	0028      	movs	r0, r5
 8002c7a:	f000 fadf 	bl	800323c <memchr>
 8002c7e:	2800      	cmp	r0, #0
 8002c80:	d001      	beq.n	8002c86 <_printf_i+0x166>
 8002c82:	1b40      	subs	r0, r0, r5
 8002c84:	6060      	str	r0, [r4, #4]
 8002c86:	6863      	ldr	r3, [r4, #4]
 8002c88:	6123      	str	r3, [r4, #16]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	9a02      	ldr	r2, [sp, #8]
 8002c8e:	7013      	strb	r3, [r2, #0]
 8002c90:	e03c      	b.n	8002d0c <_printf_i+0x1ec>
 8002c92:	6923      	ldr	r3, [r4, #16]
 8002c94:	002a      	movs	r2, r5
 8002c96:	9904      	ldr	r1, [sp, #16]
 8002c98:	9803      	ldr	r0, [sp, #12]
 8002c9a:	9d05      	ldr	r5, [sp, #20]
 8002c9c:	47a8      	blx	r5
 8002c9e:	1c43      	adds	r3, r0, #1
 8002ca0:	d03e      	beq.n	8002d20 <_printf_i+0x200>
 8002ca2:	6823      	ldr	r3, [r4, #0]
 8002ca4:	079b      	lsls	r3, r3, #30
 8002ca6:	d415      	bmi.n	8002cd4 <_printf_i+0x1b4>
 8002ca8:	9b07      	ldr	r3, [sp, #28]
 8002caa:	68e0      	ldr	r0, [r4, #12]
 8002cac:	4298      	cmp	r0, r3
 8002cae:	da39      	bge.n	8002d24 <_printf_i+0x204>
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	e037      	b.n	8002d24 <_printf_i+0x204>
 8002cb4:	0022      	movs	r2, r4
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	3219      	adds	r2, #25
 8002cba:	9904      	ldr	r1, [sp, #16]
 8002cbc:	9803      	ldr	r0, [sp, #12]
 8002cbe:	9e05      	ldr	r6, [sp, #20]
 8002cc0:	47b0      	blx	r6
 8002cc2:	1c43      	adds	r3, r0, #1
 8002cc4:	d02c      	beq.n	8002d20 <_printf_i+0x200>
 8002cc6:	3501      	adds	r5, #1
 8002cc8:	68e3      	ldr	r3, [r4, #12]
 8002cca:	9a07      	ldr	r2, [sp, #28]
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	42ab      	cmp	r3, r5
 8002cd0:	dcf0      	bgt.n	8002cb4 <_printf_i+0x194>
 8002cd2:	e7e9      	b.n	8002ca8 <_printf_i+0x188>
 8002cd4:	2500      	movs	r5, #0
 8002cd6:	e7f7      	b.n	8002cc8 <_printf_i+0x1a8>
 8002cd8:	2800      	cmp	r0, #0
 8002cda:	d0ad      	beq.n	8002c38 <_printf_i+0x118>
 8002cdc:	9d02      	ldr	r5, [sp, #8]
 8002cde:	0039      	movs	r1, r7
 8002ce0:	f7fd fa98 	bl	8000214 <__aeabi_uidivmod>
 8002ce4:	5c73      	ldrb	r3, [r6, r1]
 8002ce6:	3d01      	subs	r5, #1
 8002ce8:	702b      	strb	r3, [r5, #0]
 8002cea:	2800      	cmp	r0, #0
 8002cec:	d1f7      	bne.n	8002cde <_printf_i+0x1be>
 8002cee:	2f08      	cmp	r7, #8
 8002cf0:	d109      	bne.n	8002d06 <_printf_i+0x1e6>
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	07db      	lsls	r3, r3, #31
 8002cf6:	d506      	bpl.n	8002d06 <_printf_i+0x1e6>
 8002cf8:	6863      	ldr	r3, [r4, #4]
 8002cfa:	6922      	ldr	r2, [r4, #16]
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	dc02      	bgt.n	8002d06 <_printf_i+0x1e6>
 8002d00:	2330      	movs	r3, #48	; 0x30
 8002d02:	3d01      	subs	r5, #1
 8002d04:	702b      	strb	r3, [r5, #0]
 8002d06:	9b02      	ldr	r3, [sp, #8]
 8002d08:	1b5b      	subs	r3, r3, r5
 8002d0a:	6123      	str	r3, [r4, #16]
 8002d0c:	9b05      	ldr	r3, [sp, #20]
 8002d0e:	aa07      	add	r2, sp, #28
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	0021      	movs	r1, r4
 8002d14:	9b04      	ldr	r3, [sp, #16]
 8002d16:	9803      	ldr	r0, [sp, #12]
 8002d18:	f7ff fe94 	bl	8002a44 <_printf_common>
 8002d1c:	1c43      	adds	r3, r0, #1
 8002d1e:	d1b8      	bne.n	8002c92 <_printf_i+0x172>
 8002d20:	2001      	movs	r0, #1
 8002d22:	4240      	negs	r0, r0
 8002d24:	b009      	add	sp, #36	; 0x24
 8002d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d28:	08003435 	.word	0x08003435
 8002d2c:	08003446 	.word	0x08003446

08002d30 <_sbrk_r>:
 8002d30:	2300      	movs	r3, #0
 8002d32:	b570      	push	{r4, r5, r6, lr}
 8002d34:	4c06      	ldr	r4, [pc, #24]	; (8002d50 <_sbrk_r+0x20>)
 8002d36:	0005      	movs	r5, r0
 8002d38:	0008      	movs	r0, r1
 8002d3a:	6023      	str	r3, [r4, #0]
 8002d3c:	f7fd fd28 	bl	8000790 <_sbrk>
 8002d40:	1c43      	adds	r3, r0, #1
 8002d42:	d103      	bne.n	8002d4c <_sbrk_r+0x1c>
 8002d44:	6823      	ldr	r3, [r4, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d000      	beq.n	8002d4c <_sbrk_r+0x1c>
 8002d4a:	602b      	str	r3, [r5, #0]
 8002d4c:	bd70      	pop	{r4, r5, r6, pc}
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	200001e4 	.word	0x200001e4

08002d54 <__sread>:
 8002d54:	b570      	push	{r4, r5, r6, lr}
 8002d56:	000c      	movs	r4, r1
 8002d58:	250e      	movs	r5, #14
 8002d5a:	5f49      	ldrsh	r1, [r1, r5]
 8002d5c:	f000 fac6 	bl	80032ec <_read_r>
 8002d60:	2800      	cmp	r0, #0
 8002d62:	db03      	blt.n	8002d6c <__sread+0x18>
 8002d64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d66:	181b      	adds	r3, r3, r0
 8002d68:	6563      	str	r3, [r4, #84]	; 0x54
 8002d6a:	bd70      	pop	{r4, r5, r6, pc}
 8002d6c:	89a3      	ldrh	r3, [r4, #12]
 8002d6e:	4a02      	ldr	r2, [pc, #8]	; (8002d78 <__sread+0x24>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	81a3      	strh	r3, [r4, #12]
 8002d74:	e7f9      	b.n	8002d6a <__sread+0x16>
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	ffffefff 	.word	0xffffefff

08002d7c <__swrite>:
 8002d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7e:	001f      	movs	r7, r3
 8002d80:	898b      	ldrh	r3, [r1, #12]
 8002d82:	0005      	movs	r5, r0
 8002d84:	000c      	movs	r4, r1
 8002d86:	0016      	movs	r6, r2
 8002d88:	05db      	lsls	r3, r3, #23
 8002d8a:	d505      	bpl.n	8002d98 <__swrite+0x1c>
 8002d8c:	230e      	movs	r3, #14
 8002d8e:	5ec9      	ldrsh	r1, [r1, r3]
 8002d90:	2200      	movs	r2, #0
 8002d92:	2302      	movs	r3, #2
 8002d94:	f000 f9d2 	bl	800313c <_lseek_r>
 8002d98:	89a3      	ldrh	r3, [r4, #12]
 8002d9a:	4a05      	ldr	r2, [pc, #20]	; (8002db0 <__swrite+0x34>)
 8002d9c:	0028      	movs	r0, r5
 8002d9e:	4013      	ands	r3, r2
 8002da0:	81a3      	strh	r3, [r4, #12]
 8002da2:	0032      	movs	r2, r6
 8002da4:	230e      	movs	r3, #14
 8002da6:	5ee1      	ldrsh	r1, [r4, r3]
 8002da8:	003b      	movs	r3, r7
 8002daa:	f000 f875 	bl	8002e98 <_write_r>
 8002dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002db0:	ffffefff 	.word	0xffffefff

08002db4 <__sseek>:
 8002db4:	b570      	push	{r4, r5, r6, lr}
 8002db6:	000c      	movs	r4, r1
 8002db8:	250e      	movs	r5, #14
 8002dba:	5f49      	ldrsh	r1, [r1, r5]
 8002dbc:	f000 f9be 	bl	800313c <_lseek_r>
 8002dc0:	89a3      	ldrh	r3, [r4, #12]
 8002dc2:	1c42      	adds	r2, r0, #1
 8002dc4:	d103      	bne.n	8002dce <__sseek+0x1a>
 8002dc6:	4a05      	ldr	r2, [pc, #20]	; (8002ddc <__sseek+0x28>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	81a3      	strh	r3, [r4, #12]
 8002dcc:	bd70      	pop	{r4, r5, r6, pc}
 8002dce:	2280      	movs	r2, #128	; 0x80
 8002dd0:	0152      	lsls	r2, r2, #5
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	81a3      	strh	r3, [r4, #12]
 8002dd6:	6560      	str	r0, [r4, #84]	; 0x54
 8002dd8:	e7f8      	b.n	8002dcc <__sseek+0x18>
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	ffffefff 	.word	0xffffefff

08002de0 <__sclose>:
 8002de0:	b510      	push	{r4, lr}
 8002de2:	230e      	movs	r3, #14
 8002de4:	5ec9      	ldrsh	r1, [r1, r3]
 8002de6:	f000 f8e1 	bl	8002fac <_close_r>
 8002dea:	bd10      	pop	{r4, pc}

08002dec <__swbuf_r>:
 8002dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dee:	0005      	movs	r5, r0
 8002df0:	000e      	movs	r6, r1
 8002df2:	0014      	movs	r4, r2
 8002df4:	2800      	cmp	r0, #0
 8002df6:	d004      	beq.n	8002e02 <__swbuf_r+0x16>
 8002df8:	6983      	ldr	r3, [r0, #24]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <__swbuf_r+0x16>
 8002dfe:	f7ff fbf1 	bl	80025e4 <__sinit>
 8002e02:	4b22      	ldr	r3, [pc, #136]	; (8002e8c <__swbuf_r+0xa0>)
 8002e04:	429c      	cmp	r4, r3
 8002e06:	d12d      	bne.n	8002e64 <__swbuf_r+0x78>
 8002e08:	686c      	ldr	r4, [r5, #4]
 8002e0a:	69a3      	ldr	r3, [r4, #24]
 8002e0c:	60a3      	str	r3, [r4, #8]
 8002e0e:	89a3      	ldrh	r3, [r4, #12]
 8002e10:	071b      	lsls	r3, r3, #28
 8002e12:	d531      	bpl.n	8002e78 <__swbuf_r+0x8c>
 8002e14:	6923      	ldr	r3, [r4, #16]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d02e      	beq.n	8002e78 <__swbuf_r+0x8c>
 8002e1a:	6823      	ldr	r3, [r4, #0]
 8002e1c:	6922      	ldr	r2, [r4, #16]
 8002e1e:	b2f7      	uxtb	r7, r6
 8002e20:	1a98      	subs	r0, r3, r2
 8002e22:	6963      	ldr	r3, [r4, #20]
 8002e24:	b2f6      	uxtb	r6, r6
 8002e26:	4283      	cmp	r3, r0
 8002e28:	dc05      	bgt.n	8002e36 <__swbuf_r+0x4a>
 8002e2a:	0021      	movs	r1, r4
 8002e2c:	0028      	movs	r0, r5
 8002e2e:	f000 f959 	bl	80030e4 <_fflush_r>
 8002e32:	2800      	cmp	r0, #0
 8002e34:	d126      	bne.n	8002e84 <__swbuf_r+0x98>
 8002e36:	68a3      	ldr	r3, [r4, #8]
 8002e38:	3001      	adds	r0, #1
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	60a3      	str	r3, [r4, #8]
 8002e3e:	6823      	ldr	r3, [r4, #0]
 8002e40:	1c5a      	adds	r2, r3, #1
 8002e42:	6022      	str	r2, [r4, #0]
 8002e44:	701f      	strb	r7, [r3, #0]
 8002e46:	6963      	ldr	r3, [r4, #20]
 8002e48:	4283      	cmp	r3, r0
 8002e4a:	d004      	beq.n	8002e56 <__swbuf_r+0x6a>
 8002e4c:	89a3      	ldrh	r3, [r4, #12]
 8002e4e:	07db      	lsls	r3, r3, #31
 8002e50:	d51a      	bpl.n	8002e88 <__swbuf_r+0x9c>
 8002e52:	2e0a      	cmp	r6, #10
 8002e54:	d118      	bne.n	8002e88 <__swbuf_r+0x9c>
 8002e56:	0021      	movs	r1, r4
 8002e58:	0028      	movs	r0, r5
 8002e5a:	f000 f943 	bl	80030e4 <_fflush_r>
 8002e5e:	2800      	cmp	r0, #0
 8002e60:	d012      	beq.n	8002e88 <__swbuf_r+0x9c>
 8002e62:	e00f      	b.n	8002e84 <__swbuf_r+0x98>
 8002e64:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <__swbuf_r+0xa4>)
 8002e66:	429c      	cmp	r4, r3
 8002e68:	d101      	bne.n	8002e6e <__swbuf_r+0x82>
 8002e6a:	68ac      	ldr	r4, [r5, #8]
 8002e6c:	e7cd      	b.n	8002e0a <__swbuf_r+0x1e>
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <__swbuf_r+0xa8>)
 8002e70:	429c      	cmp	r4, r3
 8002e72:	d1ca      	bne.n	8002e0a <__swbuf_r+0x1e>
 8002e74:	68ec      	ldr	r4, [r5, #12]
 8002e76:	e7c8      	b.n	8002e0a <__swbuf_r+0x1e>
 8002e78:	0021      	movs	r1, r4
 8002e7a:	0028      	movs	r0, r5
 8002e7c:	f000 f820 	bl	8002ec0 <__swsetup_r>
 8002e80:	2800      	cmp	r0, #0
 8002e82:	d0ca      	beq.n	8002e1a <__swbuf_r+0x2e>
 8002e84:	2601      	movs	r6, #1
 8002e86:	4276      	negs	r6, r6
 8002e88:	0030      	movs	r0, r6
 8002e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e8c:	080033e4 	.word	0x080033e4
 8002e90:	08003404 	.word	0x08003404
 8002e94:	080033c4 	.word	0x080033c4

08002e98 <_write_r>:
 8002e98:	b570      	push	{r4, r5, r6, lr}
 8002e9a:	0005      	movs	r5, r0
 8002e9c:	0008      	movs	r0, r1
 8002e9e:	0011      	movs	r1, r2
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	4c06      	ldr	r4, [pc, #24]	; (8002ebc <_write_r+0x24>)
 8002ea4:	6022      	str	r2, [r4, #0]
 8002ea6:	001a      	movs	r2, r3
 8002ea8:	f7fd f9ca 	bl	8000240 <_write>
 8002eac:	1c43      	adds	r3, r0, #1
 8002eae:	d103      	bne.n	8002eb8 <_write_r+0x20>
 8002eb0:	6823      	ldr	r3, [r4, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d000      	beq.n	8002eb8 <_write_r+0x20>
 8002eb6:	602b      	str	r3, [r5, #0]
 8002eb8:	bd70      	pop	{r4, r5, r6, pc}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	200001e4 	.word	0x200001e4

08002ec0 <__swsetup_r>:
 8002ec0:	4b36      	ldr	r3, [pc, #216]	; (8002f9c <__swsetup_r+0xdc>)
 8002ec2:	b570      	push	{r4, r5, r6, lr}
 8002ec4:	681d      	ldr	r5, [r3, #0]
 8002ec6:	0006      	movs	r6, r0
 8002ec8:	000c      	movs	r4, r1
 8002eca:	2d00      	cmp	r5, #0
 8002ecc:	d005      	beq.n	8002eda <__swsetup_r+0x1a>
 8002ece:	69ab      	ldr	r3, [r5, #24]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d102      	bne.n	8002eda <__swsetup_r+0x1a>
 8002ed4:	0028      	movs	r0, r5
 8002ed6:	f7ff fb85 	bl	80025e4 <__sinit>
 8002eda:	4b31      	ldr	r3, [pc, #196]	; (8002fa0 <__swsetup_r+0xe0>)
 8002edc:	429c      	cmp	r4, r3
 8002ede:	d10f      	bne.n	8002f00 <__swsetup_r+0x40>
 8002ee0:	686c      	ldr	r4, [r5, #4]
 8002ee2:	230c      	movs	r3, #12
 8002ee4:	5ee2      	ldrsh	r2, [r4, r3]
 8002ee6:	b293      	uxth	r3, r2
 8002ee8:	0719      	lsls	r1, r3, #28
 8002eea:	d42d      	bmi.n	8002f48 <__swsetup_r+0x88>
 8002eec:	06d9      	lsls	r1, r3, #27
 8002eee:	d411      	bmi.n	8002f14 <__swsetup_r+0x54>
 8002ef0:	2309      	movs	r3, #9
 8002ef2:	2001      	movs	r0, #1
 8002ef4:	6033      	str	r3, [r6, #0]
 8002ef6:	3337      	adds	r3, #55	; 0x37
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	81a3      	strh	r3, [r4, #12]
 8002efc:	4240      	negs	r0, r0
 8002efe:	bd70      	pop	{r4, r5, r6, pc}
 8002f00:	4b28      	ldr	r3, [pc, #160]	; (8002fa4 <__swsetup_r+0xe4>)
 8002f02:	429c      	cmp	r4, r3
 8002f04:	d101      	bne.n	8002f0a <__swsetup_r+0x4a>
 8002f06:	68ac      	ldr	r4, [r5, #8]
 8002f08:	e7eb      	b.n	8002ee2 <__swsetup_r+0x22>
 8002f0a:	4b27      	ldr	r3, [pc, #156]	; (8002fa8 <__swsetup_r+0xe8>)
 8002f0c:	429c      	cmp	r4, r3
 8002f0e:	d1e8      	bne.n	8002ee2 <__swsetup_r+0x22>
 8002f10:	68ec      	ldr	r4, [r5, #12]
 8002f12:	e7e6      	b.n	8002ee2 <__swsetup_r+0x22>
 8002f14:	075b      	lsls	r3, r3, #29
 8002f16:	d513      	bpl.n	8002f40 <__swsetup_r+0x80>
 8002f18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f1a:	2900      	cmp	r1, #0
 8002f1c:	d008      	beq.n	8002f30 <__swsetup_r+0x70>
 8002f1e:	0023      	movs	r3, r4
 8002f20:	3344      	adds	r3, #68	; 0x44
 8002f22:	4299      	cmp	r1, r3
 8002f24:	d002      	beq.n	8002f2c <__swsetup_r+0x6c>
 8002f26:	0030      	movs	r0, r6
 8002f28:	f000 f996 	bl	8003258 <_free_r>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	6363      	str	r3, [r4, #52]	; 0x34
 8002f30:	2224      	movs	r2, #36	; 0x24
 8002f32:	89a3      	ldrh	r3, [r4, #12]
 8002f34:	4393      	bics	r3, r2
 8002f36:	81a3      	strh	r3, [r4, #12]
 8002f38:	2300      	movs	r3, #0
 8002f3a:	6063      	str	r3, [r4, #4]
 8002f3c:	6923      	ldr	r3, [r4, #16]
 8002f3e:	6023      	str	r3, [r4, #0]
 8002f40:	2308      	movs	r3, #8
 8002f42:	89a2      	ldrh	r2, [r4, #12]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	81a3      	strh	r3, [r4, #12]
 8002f48:	6923      	ldr	r3, [r4, #16]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10b      	bne.n	8002f66 <__swsetup_r+0xa6>
 8002f4e:	21a0      	movs	r1, #160	; 0xa0
 8002f50:	2280      	movs	r2, #128	; 0x80
 8002f52:	89a3      	ldrh	r3, [r4, #12]
 8002f54:	0089      	lsls	r1, r1, #2
 8002f56:	0092      	lsls	r2, r2, #2
 8002f58:	400b      	ands	r3, r1
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d003      	beq.n	8002f66 <__swsetup_r+0xa6>
 8002f5e:	0021      	movs	r1, r4
 8002f60:	0030      	movs	r0, r6
 8002f62:	f000 f927 	bl	80031b4 <__smakebuf_r>
 8002f66:	2301      	movs	r3, #1
 8002f68:	89a2      	ldrh	r2, [r4, #12]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d011      	beq.n	8002f92 <__swsetup_r+0xd2>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60a3      	str	r3, [r4, #8]
 8002f72:	6963      	ldr	r3, [r4, #20]
 8002f74:	425b      	negs	r3, r3
 8002f76:	61a3      	str	r3, [r4, #24]
 8002f78:	2000      	movs	r0, #0
 8002f7a:	6923      	ldr	r3, [r4, #16]
 8002f7c:	4283      	cmp	r3, r0
 8002f7e:	d1be      	bne.n	8002efe <__swsetup_r+0x3e>
 8002f80:	230c      	movs	r3, #12
 8002f82:	5ee2      	ldrsh	r2, [r4, r3]
 8002f84:	0613      	lsls	r3, r2, #24
 8002f86:	d5ba      	bpl.n	8002efe <__swsetup_r+0x3e>
 8002f88:	2340      	movs	r3, #64	; 0x40
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	81a3      	strh	r3, [r4, #12]
 8002f8e:	3801      	subs	r0, #1
 8002f90:	e7b5      	b.n	8002efe <__swsetup_r+0x3e>
 8002f92:	0792      	lsls	r2, r2, #30
 8002f94:	d400      	bmi.n	8002f98 <__swsetup_r+0xd8>
 8002f96:	6963      	ldr	r3, [r4, #20]
 8002f98:	60a3      	str	r3, [r4, #8]
 8002f9a:	e7ed      	b.n	8002f78 <__swsetup_r+0xb8>
 8002f9c:	2000000c 	.word	0x2000000c
 8002fa0:	080033e4 	.word	0x080033e4
 8002fa4:	08003404 	.word	0x08003404
 8002fa8:	080033c4 	.word	0x080033c4

08002fac <_close_r>:
 8002fac:	2300      	movs	r3, #0
 8002fae:	b570      	push	{r4, r5, r6, lr}
 8002fb0:	4c06      	ldr	r4, [pc, #24]	; (8002fcc <_close_r+0x20>)
 8002fb2:	0005      	movs	r5, r0
 8002fb4:	0008      	movs	r0, r1
 8002fb6:	6023      	str	r3, [r4, #0]
 8002fb8:	f7fd fbbd 	bl	8000736 <_close>
 8002fbc:	1c43      	adds	r3, r0, #1
 8002fbe:	d103      	bne.n	8002fc8 <_close_r+0x1c>
 8002fc0:	6823      	ldr	r3, [r4, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d000      	beq.n	8002fc8 <_close_r+0x1c>
 8002fc6:	602b      	str	r3, [r5, #0]
 8002fc8:	bd70      	pop	{r4, r5, r6, pc}
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	200001e4 	.word	0x200001e4

08002fd0 <__sflush_r>:
 8002fd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fd2:	898a      	ldrh	r2, [r1, #12]
 8002fd4:	0005      	movs	r5, r0
 8002fd6:	000c      	movs	r4, r1
 8002fd8:	0713      	lsls	r3, r2, #28
 8002fda:	d460      	bmi.n	800309e <__sflush_r+0xce>
 8002fdc:	684b      	ldr	r3, [r1, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	dc04      	bgt.n	8002fec <__sflush_r+0x1c>
 8002fe2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	dc01      	bgt.n	8002fec <__sflush_r+0x1c>
 8002fe8:	2000      	movs	r0, #0
 8002fea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002fec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002fee:	2f00      	cmp	r7, #0
 8002ff0:	d0fa      	beq.n	8002fe8 <__sflush_r+0x18>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	682e      	ldr	r6, [r5, #0]
 8002ff6:	602b      	str	r3, [r5, #0]
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	015b      	lsls	r3, r3, #5
 8002ffc:	6a21      	ldr	r1, [r4, #32]
 8002ffe:	401a      	ands	r2, r3
 8003000:	d034      	beq.n	800306c <__sflush_r+0x9c>
 8003002:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003004:	89a3      	ldrh	r3, [r4, #12]
 8003006:	075b      	lsls	r3, r3, #29
 8003008:	d506      	bpl.n	8003018 <__sflush_r+0x48>
 800300a:	6863      	ldr	r3, [r4, #4]
 800300c:	1ac0      	subs	r0, r0, r3
 800300e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <__sflush_r+0x48>
 8003014:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003016:	1ac0      	subs	r0, r0, r3
 8003018:	0002      	movs	r2, r0
 800301a:	6a21      	ldr	r1, [r4, #32]
 800301c:	2300      	movs	r3, #0
 800301e:	0028      	movs	r0, r5
 8003020:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003022:	47b8      	blx	r7
 8003024:	89a1      	ldrh	r1, [r4, #12]
 8003026:	1c43      	adds	r3, r0, #1
 8003028:	d106      	bne.n	8003038 <__sflush_r+0x68>
 800302a:	682b      	ldr	r3, [r5, #0]
 800302c:	2b1d      	cmp	r3, #29
 800302e:	d830      	bhi.n	8003092 <__sflush_r+0xc2>
 8003030:	4a2b      	ldr	r2, [pc, #172]	; (80030e0 <__sflush_r+0x110>)
 8003032:	40da      	lsrs	r2, r3
 8003034:	07d3      	lsls	r3, r2, #31
 8003036:	d52c      	bpl.n	8003092 <__sflush_r+0xc2>
 8003038:	2300      	movs	r3, #0
 800303a:	6063      	str	r3, [r4, #4]
 800303c:	6923      	ldr	r3, [r4, #16]
 800303e:	6023      	str	r3, [r4, #0]
 8003040:	04cb      	lsls	r3, r1, #19
 8003042:	d505      	bpl.n	8003050 <__sflush_r+0x80>
 8003044:	1c43      	adds	r3, r0, #1
 8003046:	d102      	bne.n	800304e <__sflush_r+0x7e>
 8003048:	682b      	ldr	r3, [r5, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d100      	bne.n	8003050 <__sflush_r+0x80>
 800304e:	6560      	str	r0, [r4, #84]	; 0x54
 8003050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003052:	602e      	str	r6, [r5, #0]
 8003054:	2900      	cmp	r1, #0
 8003056:	d0c7      	beq.n	8002fe8 <__sflush_r+0x18>
 8003058:	0023      	movs	r3, r4
 800305a:	3344      	adds	r3, #68	; 0x44
 800305c:	4299      	cmp	r1, r3
 800305e:	d002      	beq.n	8003066 <__sflush_r+0x96>
 8003060:	0028      	movs	r0, r5
 8003062:	f000 f8f9 	bl	8003258 <_free_r>
 8003066:	2000      	movs	r0, #0
 8003068:	6360      	str	r0, [r4, #52]	; 0x34
 800306a:	e7be      	b.n	8002fea <__sflush_r+0x1a>
 800306c:	2301      	movs	r3, #1
 800306e:	0028      	movs	r0, r5
 8003070:	47b8      	blx	r7
 8003072:	1c43      	adds	r3, r0, #1
 8003074:	d1c6      	bne.n	8003004 <__sflush_r+0x34>
 8003076:	682b      	ldr	r3, [r5, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0c3      	beq.n	8003004 <__sflush_r+0x34>
 800307c:	2b1d      	cmp	r3, #29
 800307e:	d001      	beq.n	8003084 <__sflush_r+0xb4>
 8003080:	2b16      	cmp	r3, #22
 8003082:	d101      	bne.n	8003088 <__sflush_r+0xb8>
 8003084:	602e      	str	r6, [r5, #0]
 8003086:	e7af      	b.n	8002fe8 <__sflush_r+0x18>
 8003088:	2340      	movs	r3, #64	; 0x40
 800308a:	89a2      	ldrh	r2, [r4, #12]
 800308c:	4313      	orrs	r3, r2
 800308e:	81a3      	strh	r3, [r4, #12]
 8003090:	e7ab      	b.n	8002fea <__sflush_r+0x1a>
 8003092:	2340      	movs	r3, #64	; 0x40
 8003094:	430b      	orrs	r3, r1
 8003096:	2001      	movs	r0, #1
 8003098:	81a3      	strh	r3, [r4, #12]
 800309a:	4240      	negs	r0, r0
 800309c:	e7a5      	b.n	8002fea <__sflush_r+0x1a>
 800309e:	690f      	ldr	r7, [r1, #16]
 80030a0:	2f00      	cmp	r7, #0
 80030a2:	d0a1      	beq.n	8002fe8 <__sflush_r+0x18>
 80030a4:	680b      	ldr	r3, [r1, #0]
 80030a6:	600f      	str	r7, [r1, #0]
 80030a8:	1bdb      	subs	r3, r3, r7
 80030aa:	9301      	str	r3, [sp, #4]
 80030ac:	2300      	movs	r3, #0
 80030ae:	0792      	lsls	r2, r2, #30
 80030b0:	d100      	bne.n	80030b4 <__sflush_r+0xe4>
 80030b2:	694b      	ldr	r3, [r1, #20]
 80030b4:	60a3      	str	r3, [r4, #8]
 80030b6:	9b01      	ldr	r3, [sp, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	dc00      	bgt.n	80030be <__sflush_r+0xee>
 80030bc:	e794      	b.n	8002fe8 <__sflush_r+0x18>
 80030be:	9b01      	ldr	r3, [sp, #4]
 80030c0:	003a      	movs	r2, r7
 80030c2:	6a21      	ldr	r1, [r4, #32]
 80030c4:	0028      	movs	r0, r5
 80030c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80030c8:	47b0      	blx	r6
 80030ca:	2800      	cmp	r0, #0
 80030cc:	dc03      	bgt.n	80030d6 <__sflush_r+0x106>
 80030ce:	2340      	movs	r3, #64	; 0x40
 80030d0:	89a2      	ldrh	r2, [r4, #12]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	e7df      	b.n	8003096 <__sflush_r+0xc6>
 80030d6:	9b01      	ldr	r3, [sp, #4]
 80030d8:	183f      	adds	r7, r7, r0
 80030da:	1a1b      	subs	r3, r3, r0
 80030dc:	9301      	str	r3, [sp, #4]
 80030de:	e7ea      	b.n	80030b6 <__sflush_r+0xe6>
 80030e0:	20400001 	.word	0x20400001

080030e4 <_fflush_r>:
 80030e4:	690b      	ldr	r3, [r1, #16]
 80030e6:	b570      	push	{r4, r5, r6, lr}
 80030e8:	0005      	movs	r5, r0
 80030ea:	000c      	movs	r4, r1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <_fflush_r+0x10>
 80030f0:	2000      	movs	r0, #0
 80030f2:	bd70      	pop	{r4, r5, r6, pc}
 80030f4:	2800      	cmp	r0, #0
 80030f6:	d004      	beq.n	8003102 <_fflush_r+0x1e>
 80030f8:	6983      	ldr	r3, [r0, #24]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <_fflush_r+0x1e>
 80030fe:	f7ff fa71 	bl	80025e4 <__sinit>
 8003102:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <_fflush_r+0x4c>)
 8003104:	429c      	cmp	r4, r3
 8003106:	d109      	bne.n	800311c <_fflush_r+0x38>
 8003108:	686c      	ldr	r4, [r5, #4]
 800310a:	220c      	movs	r2, #12
 800310c:	5ea3      	ldrsh	r3, [r4, r2]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0ee      	beq.n	80030f0 <_fflush_r+0xc>
 8003112:	0021      	movs	r1, r4
 8003114:	0028      	movs	r0, r5
 8003116:	f7ff ff5b 	bl	8002fd0 <__sflush_r>
 800311a:	e7ea      	b.n	80030f2 <_fflush_r+0xe>
 800311c:	4b05      	ldr	r3, [pc, #20]	; (8003134 <_fflush_r+0x50>)
 800311e:	429c      	cmp	r4, r3
 8003120:	d101      	bne.n	8003126 <_fflush_r+0x42>
 8003122:	68ac      	ldr	r4, [r5, #8]
 8003124:	e7f1      	b.n	800310a <_fflush_r+0x26>
 8003126:	4b04      	ldr	r3, [pc, #16]	; (8003138 <_fflush_r+0x54>)
 8003128:	429c      	cmp	r4, r3
 800312a:	d1ee      	bne.n	800310a <_fflush_r+0x26>
 800312c:	68ec      	ldr	r4, [r5, #12]
 800312e:	e7ec      	b.n	800310a <_fflush_r+0x26>
 8003130:	080033e4 	.word	0x080033e4
 8003134:	08003404 	.word	0x08003404
 8003138:	080033c4 	.word	0x080033c4

0800313c <_lseek_r>:
 800313c:	b570      	push	{r4, r5, r6, lr}
 800313e:	0005      	movs	r5, r0
 8003140:	0008      	movs	r0, r1
 8003142:	0011      	movs	r1, r2
 8003144:	2200      	movs	r2, #0
 8003146:	4c06      	ldr	r4, [pc, #24]	; (8003160 <_lseek_r+0x24>)
 8003148:	6022      	str	r2, [r4, #0]
 800314a:	001a      	movs	r2, r3
 800314c:	f7fd fb14 	bl	8000778 <_lseek>
 8003150:	1c43      	adds	r3, r0, #1
 8003152:	d103      	bne.n	800315c <_lseek_r+0x20>
 8003154:	6823      	ldr	r3, [r4, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d000      	beq.n	800315c <_lseek_r+0x20>
 800315a:	602b      	str	r3, [r5, #0]
 800315c:	bd70      	pop	{r4, r5, r6, pc}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	200001e4 	.word	0x200001e4

08003164 <__swhatbuf_r>:
 8003164:	b570      	push	{r4, r5, r6, lr}
 8003166:	000e      	movs	r6, r1
 8003168:	001d      	movs	r5, r3
 800316a:	230e      	movs	r3, #14
 800316c:	5ec9      	ldrsh	r1, [r1, r3]
 800316e:	b096      	sub	sp, #88	; 0x58
 8003170:	0014      	movs	r4, r2
 8003172:	2900      	cmp	r1, #0
 8003174:	da07      	bge.n	8003186 <__swhatbuf_r+0x22>
 8003176:	2300      	movs	r3, #0
 8003178:	602b      	str	r3, [r5, #0]
 800317a:	89b3      	ldrh	r3, [r6, #12]
 800317c:	061b      	lsls	r3, r3, #24
 800317e:	d411      	bmi.n	80031a4 <__swhatbuf_r+0x40>
 8003180:	2380      	movs	r3, #128	; 0x80
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	e00f      	b.n	80031a6 <__swhatbuf_r+0x42>
 8003186:	466a      	mov	r2, sp
 8003188:	f000 f8c4 	bl	8003314 <_fstat_r>
 800318c:	2800      	cmp	r0, #0
 800318e:	dbf2      	blt.n	8003176 <__swhatbuf_r+0x12>
 8003190:	22f0      	movs	r2, #240	; 0xf0
 8003192:	9b01      	ldr	r3, [sp, #4]
 8003194:	0212      	lsls	r2, r2, #8
 8003196:	4013      	ands	r3, r2
 8003198:	4a05      	ldr	r2, [pc, #20]	; (80031b0 <__swhatbuf_r+0x4c>)
 800319a:	189b      	adds	r3, r3, r2
 800319c:	425a      	negs	r2, r3
 800319e:	4153      	adcs	r3, r2
 80031a0:	602b      	str	r3, [r5, #0]
 80031a2:	e7ed      	b.n	8003180 <__swhatbuf_r+0x1c>
 80031a4:	2340      	movs	r3, #64	; 0x40
 80031a6:	2000      	movs	r0, #0
 80031a8:	6023      	str	r3, [r4, #0]
 80031aa:	b016      	add	sp, #88	; 0x58
 80031ac:	bd70      	pop	{r4, r5, r6, pc}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	ffffe000 	.word	0xffffe000

080031b4 <__smakebuf_r>:
 80031b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031b6:	2602      	movs	r6, #2
 80031b8:	898b      	ldrh	r3, [r1, #12]
 80031ba:	0005      	movs	r5, r0
 80031bc:	000c      	movs	r4, r1
 80031be:	4233      	tst	r3, r6
 80031c0:	d006      	beq.n	80031d0 <__smakebuf_r+0x1c>
 80031c2:	0023      	movs	r3, r4
 80031c4:	3347      	adds	r3, #71	; 0x47
 80031c6:	6023      	str	r3, [r4, #0]
 80031c8:	6123      	str	r3, [r4, #16]
 80031ca:	2301      	movs	r3, #1
 80031cc:	6163      	str	r3, [r4, #20]
 80031ce:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80031d0:	ab01      	add	r3, sp, #4
 80031d2:	466a      	mov	r2, sp
 80031d4:	f7ff ffc6 	bl	8003164 <__swhatbuf_r>
 80031d8:	9900      	ldr	r1, [sp, #0]
 80031da:	0007      	movs	r7, r0
 80031dc:	0028      	movs	r0, r5
 80031de:	f7ff fa95 	bl	800270c <_malloc_r>
 80031e2:	2800      	cmp	r0, #0
 80031e4:	d108      	bne.n	80031f8 <__smakebuf_r+0x44>
 80031e6:	220c      	movs	r2, #12
 80031e8:	5ea3      	ldrsh	r3, [r4, r2]
 80031ea:	059a      	lsls	r2, r3, #22
 80031ec:	d4ef      	bmi.n	80031ce <__smakebuf_r+0x1a>
 80031ee:	2203      	movs	r2, #3
 80031f0:	4393      	bics	r3, r2
 80031f2:	431e      	orrs	r6, r3
 80031f4:	81a6      	strh	r6, [r4, #12]
 80031f6:	e7e4      	b.n	80031c2 <__smakebuf_r+0xe>
 80031f8:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <__smakebuf_r+0x84>)
 80031fa:	62ab      	str	r3, [r5, #40]	; 0x28
 80031fc:	2380      	movs	r3, #128	; 0x80
 80031fe:	89a2      	ldrh	r2, [r4, #12]
 8003200:	6020      	str	r0, [r4, #0]
 8003202:	4313      	orrs	r3, r2
 8003204:	81a3      	strh	r3, [r4, #12]
 8003206:	9b00      	ldr	r3, [sp, #0]
 8003208:	6120      	str	r0, [r4, #16]
 800320a:	6163      	str	r3, [r4, #20]
 800320c:	9b01      	ldr	r3, [sp, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00d      	beq.n	800322e <__smakebuf_r+0x7a>
 8003212:	230e      	movs	r3, #14
 8003214:	5ee1      	ldrsh	r1, [r4, r3]
 8003216:	0028      	movs	r0, r5
 8003218:	f000 f88e 	bl	8003338 <_isatty_r>
 800321c:	2800      	cmp	r0, #0
 800321e:	d006      	beq.n	800322e <__smakebuf_r+0x7a>
 8003220:	2203      	movs	r2, #3
 8003222:	89a3      	ldrh	r3, [r4, #12]
 8003224:	4393      	bics	r3, r2
 8003226:	001a      	movs	r2, r3
 8003228:	2301      	movs	r3, #1
 800322a:	4313      	orrs	r3, r2
 800322c:	81a3      	strh	r3, [r4, #12]
 800322e:	89a0      	ldrh	r0, [r4, #12]
 8003230:	4338      	orrs	r0, r7
 8003232:	81a0      	strh	r0, [r4, #12]
 8003234:	e7cb      	b.n	80031ce <__smakebuf_r+0x1a>
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	080025a9 	.word	0x080025a9

0800323c <memchr>:
 800323c:	b2c9      	uxtb	r1, r1
 800323e:	1882      	adds	r2, r0, r2
 8003240:	4290      	cmp	r0, r2
 8003242:	d101      	bne.n	8003248 <memchr+0xc>
 8003244:	2000      	movs	r0, #0
 8003246:	4770      	bx	lr
 8003248:	7803      	ldrb	r3, [r0, #0]
 800324a:	428b      	cmp	r3, r1
 800324c:	d0fb      	beq.n	8003246 <memchr+0xa>
 800324e:	3001      	adds	r0, #1
 8003250:	e7f6      	b.n	8003240 <memchr+0x4>

08003252 <__malloc_lock>:
 8003252:	4770      	bx	lr

08003254 <__malloc_unlock>:
 8003254:	4770      	bx	lr
	...

08003258 <_free_r>:
 8003258:	b570      	push	{r4, r5, r6, lr}
 800325a:	0005      	movs	r5, r0
 800325c:	2900      	cmp	r1, #0
 800325e:	d010      	beq.n	8003282 <_free_r+0x2a>
 8003260:	1f0c      	subs	r4, r1, #4
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	da00      	bge.n	800326a <_free_r+0x12>
 8003268:	18e4      	adds	r4, r4, r3
 800326a:	0028      	movs	r0, r5
 800326c:	f7ff fff1 	bl	8003252 <__malloc_lock>
 8003270:	4a1d      	ldr	r2, [pc, #116]	; (80032e8 <_free_r+0x90>)
 8003272:	6813      	ldr	r3, [r2, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d105      	bne.n	8003284 <_free_r+0x2c>
 8003278:	6063      	str	r3, [r4, #4]
 800327a:	6014      	str	r4, [r2, #0]
 800327c:	0028      	movs	r0, r5
 800327e:	f7ff ffe9 	bl	8003254 <__malloc_unlock>
 8003282:	bd70      	pop	{r4, r5, r6, pc}
 8003284:	42a3      	cmp	r3, r4
 8003286:	d909      	bls.n	800329c <_free_r+0x44>
 8003288:	6821      	ldr	r1, [r4, #0]
 800328a:	1860      	adds	r0, r4, r1
 800328c:	4283      	cmp	r3, r0
 800328e:	d1f3      	bne.n	8003278 <_free_r+0x20>
 8003290:	6818      	ldr	r0, [r3, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	1841      	adds	r1, r0, r1
 8003296:	6021      	str	r1, [r4, #0]
 8003298:	e7ee      	b.n	8003278 <_free_r+0x20>
 800329a:	0013      	movs	r3, r2
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	2a00      	cmp	r2, #0
 80032a0:	d001      	beq.n	80032a6 <_free_r+0x4e>
 80032a2:	42a2      	cmp	r2, r4
 80032a4:	d9f9      	bls.n	800329a <_free_r+0x42>
 80032a6:	6819      	ldr	r1, [r3, #0]
 80032a8:	1858      	adds	r0, r3, r1
 80032aa:	42a0      	cmp	r0, r4
 80032ac:	d10b      	bne.n	80032c6 <_free_r+0x6e>
 80032ae:	6820      	ldr	r0, [r4, #0]
 80032b0:	1809      	adds	r1, r1, r0
 80032b2:	1858      	adds	r0, r3, r1
 80032b4:	6019      	str	r1, [r3, #0]
 80032b6:	4282      	cmp	r2, r0
 80032b8:	d1e0      	bne.n	800327c <_free_r+0x24>
 80032ba:	6810      	ldr	r0, [r2, #0]
 80032bc:	6852      	ldr	r2, [r2, #4]
 80032be:	1841      	adds	r1, r0, r1
 80032c0:	6019      	str	r1, [r3, #0]
 80032c2:	605a      	str	r2, [r3, #4]
 80032c4:	e7da      	b.n	800327c <_free_r+0x24>
 80032c6:	42a0      	cmp	r0, r4
 80032c8:	d902      	bls.n	80032d0 <_free_r+0x78>
 80032ca:	230c      	movs	r3, #12
 80032cc:	602b      	str	r3, [r5, #0]
 80032ce:	e7d5      	b.n	800327c <_free_r+0x24>
 80032d0:	6821      	ldr	r1, [r4, #0]
 80032d2:	1860      	adds	r0, r4, r1
 80032d4:	4282      	cmp	r2, r0
 80032d6:	d103      	bne.n	80032e0 <_free_r+0x88>
 80032d8:	6810      	ldr	r0, [r2, #0]
 80032da:	6852      	ldr	r2, [r2, #4]
 80032dc:	1841      	adds	r1, r0, r1
 80032de:	6021      	str	r1, [r4, #0]
 80032e0:	6062      	str	r2, [r4, #4]
 80032e2:	605c      	str	r4, [r3, #4]
 80032e4:	e7ca      	b.n	800327c <_free_r+0x24>
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	20000114 	.word	0x20000114

080032ec <_read_r>:
 80032ec:	b570      	push	{r4, r5, r6, lr}
 80032ee:	0005      	movs	r5, r0
 80032f0:	0008      	movs	r0, r1
 80032f2:	0011      	movs	r1, r2
 80032f4:	2200      	movs	r2, #0
 80032f6:	4c06      	ldr	r4, [pc, #24]	; (8003310 <_read_r+0x24>)
 80032f8:	6022      	str	r2, [r4, #0]
 80032fa:	001a      	movs	r2, r3
 80032fc:	f7fd f9fe 	bl	80006fc <_read>
 8003300:	1c43      	adds	r3, r0, #1
 8003302:	d103      	bne.n	800330c <_read_r+0x20>
 8003304:	6823      	ldr	r3, [r4, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d000      	beq.n	800330c <_read_r+0x20>
 800330a:	602b      	str	r3, [r5, #0]
 800330c:	bd70      	pop	{r4, r5, r6, pc}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	200001e4 	.word	0x200001e4

08003314 <_fstat_r>:
 8003314:	2300      	movs	r3, #0
 8003316:	b570      	push	{r4, r5, r6, lr}
 8003318:	4c06      	ldr	r4, [pc, #24]	; (8003334 <_fstat_r+0x20>)
 800331a:	0005      	movs	r5, r0
 800331c:	0008      	movs	r0, r1
 800331e:	0011      	movs	r1, r2
 8003320:	6023      	str	r3, [r4, #0]
 8003322:	f7fd fa12 	bl	800074a <_fstat>
 8003326:	1c43      	adds	r3, r0, #1
 8003328:	d103      	bne.n	8003332 <_fstat_r+0x1e>
 800332a:	6823      	ldr	r3, [r4, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d000      	beq.n	8003332 <_fstat_r+0x1e>
 8003330:	602b      	str	r3, [r5, #0]
 8003332:	bd70      	pop	{r4, r5, r6, pc}
 8003334:	200001e4 	.word	0x200001e4

08003338 <_isatty_r>:
 8003338:	2300      	movs	r3, #0
 800333a:	b570      	push	{r4, r5, r6, lr}
 800333c:	4c06      	ldr	r4, [pc, #24]	; (8003358 <_isatty_r+0x20>)
 800333e:	0005      	movs	r5, r0
 8003340:	0008      	movs	r0, r1
 8003342:	6023      	str	r3, [r4, #0]
 8003344:	f7fd fa0f 	bl	8000766 <_isatty>
 8003348:	1c43      	adds	r3, r0, #1
 800334a:	d103      	bne.n	8003354 <_isatty_r+0x1c>
 800334c:	6823      	ldr	r3, [r4, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d000      	beq.n	8003354 <_isatty_r+0x1c>
 8003352:	602b      	str	r3, [r5, #0]
 8003354:	bd70      	pop	{r4, r5, r6, pc}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	200001e4 	.word	0x200001e4

0800335c <_init>:
 800335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003362:	bc08      	pop	{r3}
 8003364:	469e      	mov	lr, r3
 8003366:	4770      	bx	lr

08003368 <_fini>:
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336e:	bc08      	pop	{r3}
 8003370:	469e      	mov	lr, r3
 8003372:	4770      	bx	lr
