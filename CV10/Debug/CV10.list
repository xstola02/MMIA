
CV10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018f6c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e03c  0801911c  0801911c  0002911c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027158  08027158  000401f0  2**0
                  CONTENTS
  4 .ARM          00000008  08027158  08027158  00037158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027160  08027160  000401f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08027160  08027160  00037160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08027164  08027164  00037164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08027168  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f370  200001f0  08027358  000401f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000f560  08027358  0004f560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045aec  00000000  00000000  00040220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007f92  00000000  00000000  00085d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022f0  00000000  00000000  0008dca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002140  00000000  00000000  0008ff90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036255  00000000  00000000  000920d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003662e  00000000  00000000  000c8325  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ffcfc  00000000  00000000  000fe953  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001fe64f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000097f0  00000000  00000000  001fe6cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08019104 	.word	0x08019104

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	08019104 	.word	0x08019104

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4a07      	ldr	r2, [pc, #28]	; (80005ec <vApplicationGetIdleTaskMemory+0x2c>)
 80005d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <vApplicationGetIdleTaskMemory+0x30>)
 80005d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	2000020c 	.word	0x2000020c
 80005f0:	20000260 	.word	0x20000260

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b5b0      	push	{r4, r5, r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fdcb 	bl	8001194 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f81d 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f8af 	bl	8000764 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000606:	f000 f883 	bl	8000710 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <main+0x40>)
 800060c:	1d3c      	adds	r4, r7, #4
 800060e:	461d      	mov	r5, r3
 8000610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000614:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000618:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f004 f9f4 	bl	8004a0e <osThreadCreate>
 8000626:	4602      	mov	r2, r0
 8000628:	4b03      	ldr	r3, [pc, #12]	; (8000638 <main+0x44>)
 800062a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800062c:	f004 f9d8 	bl	80049e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	e7fe      	b.n	8000630 <main+0x3c>
 8000632:	bf00      	nop
 8000634:	08019128 	.word	0x08019128
 8000638:	20008be0 	.word	0x20008be0

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	; 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f017 fbb5 	bl	8017dba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b28      	ldr	r3, [pc, #160]	; (8000708 <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a27      	ldr	r2, [pc, #156]	; (8000708 <SystemClock_Config+0xcc>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b25      	ldr	r3, [pc, #148]	; (8000708 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b22      	ldr	r3, [pc, #136]	; (800070c <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a21      	ldr	r2, [pc, #132]	; (800070c <SystemClock_Config+0xd0>)
 8000686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000698:	2301      	movs	r3, #1
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800069c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b0:	23a8      	movs	r3, #168	; 0xa8
 80006b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b8:	2307      	movs	r3, #7
 80006ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 fa2f 	bl	8002b24 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006cc:	f000 f93a 	bl	8000944 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d4:	2302      	movs	r3, #2
 80006d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2105      	movs	r1, #5
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 fc88 	bl	8003004 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fa:	f000 f923 	bl	8000944 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	; 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_USART3_UART_Init+0x4c>)
 8000716:	4a12      	ldr	r2, [pc, #72]	; (8000760 <MX_USART3_UART_Init+0x50>)
 8000718:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_USART3_UART_Init+0x4c>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_USART3_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_USART3_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_USART3_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_USART3_UART_Init+0x4c>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_USART3_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_USART3_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_USART3_UART_Init+0x4c>)
 8000748:	f003 f8be 	bl	80038c8 <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000752:	f000 f8f7 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20008be4 	.word	0x20008be4
 8000760:	40004800 	.word	0x40004800

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08c      	sub	sp, #48	; 0x30
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]
 800077e:	4b5a      	ldr	r3, [pc, #360]	; (80008e8 <MX_GPIO_Init+0x184>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a59      	ldr	r2, [pc, #356]	; (80008e8 <MX_GPIO_Init+0x184>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b57      	ldr	r3, [pc, #348]	; (80008e8 <MX_GPIO_Init+0x184>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	61bb      	str	r3, [r7, #24]
 8000794:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	4b53      	ldr	r3, [pc, #332]	; (80008e8 <MX_GPIO_Init+0x184>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a52      	ldr	r2, [pc, #328]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b50      	ldr	r3, [pc, #320]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	4b4c      	ldr	r3, [pc, #304]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a4b      	ldr	r2, [pc, #300]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b49      	ldr	r3, [pc, #292]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	4b45      	ldr	r3, [pc, #276]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a44      	ldr	r2, [pc, #272]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b42      	ldr	r3, [pc, #264]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	4b3e      	ldr	r3, [pc, #248]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a3d      	ldr	r2, [pc, #244]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b3b      	ldr	r3, [pc, #236]	; (80008e8 <MX_GPIO_Init+0x184>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0308 	and.w	r3, r3, #8
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b37      	ldr	r3, [pc, #220]	; (80008e8 <MX_GPIO_Init+0x184>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a36      	ldr	r2, [pc, #216]	; (80008e8 <MX_GPIO_Init+0x184>)
 8000810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b34      	ldr	r3, [pc, #208]	; (80008e8 <MX_GPIO_Init+0x184>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f244 0181 	movw	r1, #16513	; 0x4081
 8000828:	4830      	ldr	r0, [pc, #192]	; (80008ec <MX_GPIO_Init+0x188>)
 800082a:	f002 f961 	bl	8002af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2140      	movs	r1, #64	; 0x40
 8000832:	482f      	ldr	r0, [pc, #188]	; (80008f0 <MX_GPIO_Init+0x18c>)
 8000834:	f002 f95c 	bl	8002af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800083e:	4b2d      	ldr	r3, [pc, #180]	; (80008f4 <MX_GPIO_Init+0x190>)
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	482a      	ldr	r0, [pc, #168]	; (80008f8 <MX_GPIO_Init+0x194>)
 800084e:	f001 ff8d 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000852:	f244 0381 	movw	r3, #16513	; 0x4081
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	4820      	ldr	r0, [pc, #128]	; (80008ec <MX_GPIO_Init+0x188>)
 800086c:	f001 ff7e 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000870:	2340      	movs	r3, #64	; 0x40
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	481a      	ldr	r0, [pc, #104]	; (80008f0 <MX_GPIO_Init+0x18c>)
 8000888:	f001 ff70 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	4814      	ldr	r0, [pc, #80]	; (80008f0 <MX_GPIO_Init+0x18c>)
 80008a0:	f001 ff64 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008a4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008b6:	230a      	movs	r3, #10
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	480e      	ldr	r0, [pc, #56]	; (80008fc <MX_GPIO_Init+0x198>)
 80008c2:	f001 ff53 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	4808      	ldr	r0, [pc, #32]	; (80008fc <MX_GPIO_Init+0x198>)
 80008dc:	f001 ff46 	bl	800276c <HAL_GPIO_Init>

}
 80008e0:	bf00      	nop
 80008e2:	3730      	adds	r7, #48	; 0x30
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020400 	.word	0x40020400
 80008f0:	40021800 	.word	0x40021800
 80008f4:	10110000 	.word	0x10110000
 80008f8:	40020800 	.word	0x40020800
 80008fc:	40020000 	.word	0x40020000

08000900 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000908:	f003 fba8 	bl	800405c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

  	  /* Initialize tcp echo server */
  	  tcpecho_init();
 800090c:	f000 fa36 	bl	8000d7c <tcpecho_init>
  	  /* Initialize telnet echo server */
  	  telnet_init();
 8000910:	f000 fc02 	bl	8001118 <telnet_init>
  	  /* Initialize HTTP server */
  	  httpd_init();
 8000914:	f00a f8d2 	bl	800aabc <httpd_init>


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000918:	2001      	movs	r0, #1
 800091a:	f004 f8c4 	bl	8004aa6 <osDelay>
 800091e:	e7fb      	b.n	8000918 <StartDefaultTask+0x18>

08000920 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d101      	bne.n	8000936 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000932:	f000 fc51 	bl	80011d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40002000 	.word	0x40002000

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
	...

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	4a0f      	ldr	r2, [pc, #60]	; (80009a0 <HAL_MspInit+0x4c>)
 8000964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000968:	6453      	str	r3, [r2, #68]	; 0x44
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <HAL_MspInit+0x4c>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <HAL_MspInit+0x4c>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_MspInit+0x4c>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800

080009a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a19      	ldr	r2, [pc, #100]	; (8000a28 <HAL_UART_MspInit+0x84>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d12c      	bne.n	8000a20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009d4:	6413      	str	r3, [r2, #64]	; 0x40
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a10      	ldr	r2, [pc, #64]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009ec:	f043 0308 	orr.w	r3, r3, #8
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0308 	and.w	r3, r3, #8
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a10:	2307      	movs	r3, #7
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <HAL_UART_MspInit+0x8c>)
 8000a1c:	f001 fea6 	bl	800276c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a20:	bf00      	nop
 8000a22:	3728      	adds	r7, #40	; 0x28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40004800 	.word	0x40004800
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020c00 	.word	0x40020c00

08000a34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	; 0x30
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	202d      	movs	r0, #45	; 0x2d
 8000a4a:	f000 fcbf 	bl	80013cc <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000a4e:	202d      	movs	r0, #45	; 0x2d
 8000a50:	f000 fcd8 	bl	8001404 <HAL_NVIC_EnableIRQ>
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <HAL_InitTick+0xa4>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	4a1e      	ldr	r2, [pc, #120]	; (8000ad8 <HAL_InitTick+0xa4>)
 8000a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a62:	6413      	str	r3, [r2, #64]	; 0x40
 8000a64:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <HAL_InitTick+0xa4>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a70:	f107 0210 	add.w	r2, r7, #16
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 fcb4 	bl	80033e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a80:	f002 fc8a 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 8000a84:	4603      	mov	r3, r0
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a8c:	4a13      	ldr	r2, [pc, #76]	; (8000adc <HAL_InitTick+0xa8>)
 8000a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a92:	0c9b      	lsrs	r3, r3, #18
 8000a94:	3b01      	subs	r3, #1
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_InitTick+0xac>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <HAL_InitTick+0xb0>)
 8000a9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <HAL_InitTick+0xac>)
 8000aa0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aa4:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000aa6:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <HAL_InitTick+0xac>)
 8000aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aaa:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <HAL_InitTick+0xac>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <HAL_InitTick+0xac>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000ab8:	4809      	ldr	r0, [pc, #36]	; (8000ae0 <HAL_InitTick+0xac>)
 8000aba:	f002 fcc7 	bl	800344c <HAL_TIM_Base_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d104      	bne.n	8000ace <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000ac4:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <HAL_InitTick+0xac>)
 8000ac6:	f002 fcf6 	bl	80034b6 <HAL_TIM_Base_Start_IT>
 8000aca:	4603      	mov	r3, r0
 8000acc:	e000      	b.n	8000ad0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3730      	adds	r7, #48	; 0x30
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	431bde83 	.word	0x431bde83
 8000ae0:	20008c24 	.word	0x20008c24
 8000ae4:	40002000 	.word	0x40002000

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <HardFault_Handler+0x4>

08000afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <MemManage_Handler+0x4>

08000b02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b20:	4802      	ldr	r0, [pc, #8]	; (8000b2c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000b22:	f002 fcec 	bl	80034fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20008c24 	.word	0x20008c24

08000b30 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b34:	4802      	ldr	r0, [pc, #8]	; (8000b40 <ETH_IRQHandler+0x10>)
 8000b36:	f001 f859 	bl	8001bec <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	2000a584 	.word	0x2000a584

08000b44 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	e00a      	b.n	8000b6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b56:	f3af 8000 	nop.w
 8000b5a:	4601      	mov	r1, r0
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	60ba      	str	r2, [r7, #8]
 8000b62:	b2ca      	uxtb	r2, r1
 8000b64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	697a      	ldr	r2, [r7, #20]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	dbf0      	blt.n	8000b56 <_read+0x12>
	}

return len;
 8000b74:	687b      	ldr	r3, [r7, #4]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	60f8      	str	r0, [r7, #12]
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	e009      	b.n	8000ba4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	60ba      	str	r2, [r7, #8]
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	dbf1      	blt.n	8000b90 <_write+0x12>
	}
	return len;
 8000bac:	687b      	ldr	r3, [r7, #4]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <_close>:

int _close(int file)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
	return -1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bde:	605a      	str	r2, [r3, #4]
	return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <_isatty>:

int _isatty(int file)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
	return 1;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
	return 0;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b087      	sub	sp, #28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c28:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <_sbrk+0x5c>)
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <_sbrk+0x60>)
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d102      	bne.n	8000c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <_sbrk+0x64>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <_sbrk+0x68>)
 8000c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d205      	bcs.n	8000c5c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <_sbrk+0x6c>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5a:	e009      	b.n	8000c70 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <_sbrk+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <_sbrk+0x64>)
 8000c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	371c      	adds	r7, #28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	20030000 	.word	0x20030000
 8000c80:	00000400 	.word	0x00000400
 8000c84:	20000460 	.word	0x20000460
 8000c88:	2000f560 	.word	0x2000f560
 8000c8c:	2000f558 	.word	0x2000f558

08000c90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <SystemInit+0x28>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9a:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <SystemInit+0x28>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <SystemInit+0x28>)
 8000ca6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000caa:	609a      	str	r2, [r3, #8]
#endif
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af02      	add	r7, sp, #8
 8000cc2:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2010      	movs	r0, #16
 8000cca:	f006 fe15 	bl	80078f8 <netconn_new_with_proto_and_callback>
 8000cce:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d04e      	beq.n	8000d74 <tcpecho_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000cd6:	2207      	movs	r2, #7
 8000cd8:	2100      	movs	r1, #0
 8000cda:	69f8      	ldr	r0, [r7, #28]
 8000cdc:	f006 fec6 	bl	8007a6c <netconn_bind>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000ce4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d13f      	bne.n	8000d6c <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000cec:	21ff      	movs	r1, #255	; 0xff
 8000cee:	69f8      	ldr	r0, [r7, #28]
 8000cf0:	f006 fef4 	bl	8007adc <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	69f8      	ldr	r0, [r7, #28]
 8000cfc:	f006 ff1a 	bl	8007b34 <netconn_accept>
 8000d00:	4603      	mov	r3, r0
 8000d02:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000d04:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1f3      	bne.n	8000cf4 <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000d0c:	e01b      	b.n	8000d46 <tcpecho_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	f107 020a 	add.w	r2, r7, #10
 8000d14:	f107 010c 	add.w	r1, r7, #12
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f008 fea7 	bl	8009a6c <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000d1e:	6978      	ldr	r0, [r7, #20]
 8000d20:	68f9      	ldr	r1, [r7, #12]
 8000d22:	897b      	ldrh	r3, [r7, #10]
 8000d24:	461a      	mov	r2, r3
 8000d26:	2300      	movs	r3, #0
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	f007 f984 	bl	8008038 <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f008 fee4 	bl	8009b00 <netbuf_next>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	dae7      	bge.n	8000d0e <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f008 fe73 	bl	8009a2c <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	f107 0210 	add.w	r2, r7, #16
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f007 f8f8 	bl	8007f44 <netconn_recv>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d0d9      	beq.n	8000d0e <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f007 fa6d 	bl	800823c <netconn_close>
          netconn_delete(newconn);
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f006 fe65 	bl	8007a34 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000d6a:	e7c3      	b.n	8000cf4 <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f006 fe60 	bl	8007a34 <netconn_delete>
    }
  }
}
 8000d74:	bf00      	nop
 8000d76:	3720      	adds	r7, #32
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000d82:	2304      	movs	r3, #4
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	4903      	ldr	r1, [pc, #12]	; (8000d9c <tcpecho_init+0x20>)
 8000d8e:	4804      	ldr	r0, [pc, #16]	; (8000da0 <tcpecho_init+0x24>)
 8000d90:	f016 ff58 	bl	8017c44 <sys_thread_new>
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	08000cbd 	.word	0x08000cbd
 8000da0:	08019144 	.word	0x08019144

08000da4 <telnet_process_command>:
#define TELNET_THREAD_PRIO  ( tskIDLE_PRIORITY + 4 )
#define CMD_BUFFER_LEN 64


static void telnet_process_command(char *cmd, struct netconn *conn)
	{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b09a      	sub	sp, #104	; 0x68
 8000da8:	af02      	add	r7, sp, #8
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
	char s[64];
	char *token;
	char *saveptr1;
		token = strtok_r(cmd, " ", &saveptr1);
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	461a      	mov	r2, r3
 8000db4:	4977      	ldr	r1, [pc, #476]	; (8000f94 <telnet_process_command+0x1f0>)
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f017 f93f 	bl	801803a <strtok_r>
 8000dbc:	65f8      	str	r0, [r7, #92]	; 0x5c

	sprintf(s,"Prijato: %s\n", cmd);
 8000dbe:	f107 0310 	add.w	r3, r7, #16
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	4974      	ldr	r1, [pc, #464]	; (8000f98 <telnet_process_command+0x1f4>)
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f017 f8b0 	bl	8017f2c <siprintf>

	netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fa17 	bl	8000204 <strlen>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	f107 0110 	add.w	r1, r7, #16
 8000ddc:	2300      	movs	r3, #0
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2301      	movs	r3, #1
 8000de2:	6838      	ldr	r0, [r7, #0]
 8000de4:	f007 f928 	bl	8008038 <netconn_write_partly>


	if (strcasecmp(token, "HELLO") == 0)		//pokud napiseme "HELLO"
 8000de8:	496c      	ldr	r1, [pc, #432]	; (8000f9c <telnet_process_command+0x1f8>)
 8000dea:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000dec:	f017 f8be 	bl	8017f6c <strcasecmp>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d103      	bne.n	8000dfe <telnet_process_command+0x5a>
		{
			printf("Komunikace OK\n");
 8000df6:	486a      	ldr	r0, [pc, #424]	; (8000fa0 <telnet_process_command+0x1fc>)
 8000df8:	f017 f85c 	bl	8017eb4 <puts>





	}
 8000dfc:	e0c6      	b.n	8000f8c <telnet_process_command+0x1e8>
		else if (strcasecmp(token, "LD1") == 0)		//pokud napiseme "LD1"
 8000dfe:	4969      	ldr	r1, [pc, #420]	; (8000fa4 <telnet_process_command+0x200>)
 8000e00:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000e02:	f017 f8b3 	bl	8017f6c <strcasecmp>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d124      	bne.n	8000e56 <telnet_process_command+0xb2>
			token = strtok_r(NULL, " ", &saveptr1);
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	461a      	mov	r2, r3
 8000e12:	4960      	ldr	r1, [pc, #384]	; (8000f94 <telnet_process_command+0x1f0>)
 8000e14:	2000      	movs	r0, #0
 8000e16:	f017 f910 	bl	801803a <strtok_r>
 8000e1a:	65f8      	str	r0, [r7, #92]	; 0x5c
			if (strcasecmp(token, "ON") == 0)  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000e1c:	4962      	ldr	r1, [pc, #392]	; (8000fa8 <telnet_process_command+0x204>)
 8000e1e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000e20:	f017 f8a4 	bl	8017f6c <strcasecmp>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d105      	bne.n	8000e36 <telnet_process_command+0x92>
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	485f      	ldr	r0, [pc, #380]	; (8000fac <telnet_process_command+0x208>)
 8000e30:	f001 fe5e 	bl	8002af0 <HAL_GPIO_WritePin>
 8000e34:	e00b      	b.n	8000e4e <telnet_process_command+0xaa>
			else if (strcasecmp(token, "OFF") ==0)  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000e36:	495e      	ldr	r1, [pc, #376]	; (8000fb0 <telnet_process_command+0x20c>)
 8000e38:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000e3a:	f017 f897 	bl	8017f6c <strcasecmp>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d104      	bne.n	8000e4e <telnet_process_command+0xaa>
 8000e44:	2200      	movs	r2, #0
 8000e46:	2101      	movs	r1, #1
 8000e48:	4858      	ldr	r0, [pc, #352]	; (8000fac <telnet_process_command+0x208>)
 8000e4a:	f001 fe51 	bl	8002af0 <HAL_GPIO_WritePin>
			printf("OK\n");
 8000e4e:	4859      	ldr	r0, [pc, #356]	; (8000fb4 <telnet_process_command+0x210>)
 8000e50:	f017 f830 	bl	8017eb4 <puts>
	}
 8000e54:	e09a      	b.n	8000f8c <telnet_process_command+0x1e8>
		else if (strcasecmp(token, "LD2") == 0) 			//pokud napiseme "LD2"
 8000e56:	4958      	ldr	r1, [pc, #352]	; (8000fb8 <telnet_process_command+0x214>)
 8000e58:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000e5a:	f017 f887 	bl	8017f6c <strcasecmp>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d124      	bne.n	8000eae <telnet_process_command+0x10a>
				token = strtok_r(NULL, " ", &saveptr1);
 8000e64:	f107 030c 	add.w	r3, r7, #12
 8000e68:	461a      	mov	r2, r3
 8000e6a:	494a      	ldr	r1, [pc, #296]	; (8000f94 <telnet_process_command+0x1f0>)
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f017 f8e4 	bl	801803a <strtok_r>
 8000e72:	65f8      	str	r0, [r7, #92]	; 0x5c
				if (strcasecmp(token, "ON") == 0)  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000e74:	494c      	ldr	r1, [pc, #304]	; (8000fa8 <telnet_process_command+0x204>)
 8000e76:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000e78:	f017 f878 	bl	8017f6c <strcasecmp>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d105      	bne.n	8000e8e <telnet_process_command+0xea>
 8000e82:	2201      	movs	r2, #1
 8000e84:	2180      	movs	r1, #128	; 0x80
 8000e86:	4849      	ldr	r0, [pc, #292]	; (8000fac <telnet_process_command+0x208>)
 8000e88:	f001 fe32 	bl	8002af0 <HAL_GPIO_WritePin>
 8000e8c:	e00b      	b.n	8000ea6 <telnet_process_command+0x102>
				else if (strcasecmp(token, "OFF") == 0)  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e8e:	4948      	ldr	r1, [pc, #288]	; (8000fb0 <telnet_process_command+0x20c>)
 8000e90:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000e92:	f017 f86b 	bl	8017f6c <strcasecmp>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d104      	bne.n	8000ea6 <telnet_process_command+0x102>
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2180      	movs	r1, #128	; 0x80
 8000ea0:	4842      	ldr	r0, [pc, #264]	; (8000fac <telnet_process_command+0x208>)
 8000ea2:	f001 fe25 	bl	8002af0 <HAL_GPIO_WritePin>
				printf("OK\n");
 8000ea6:	4843      	ldr	r0, [pc, #268]	; (8000fb4 <telnet_process_command+0x210>)
 8000ea8:	f017 f804 	bl	8017eb4 <puts>
	}
 8000eac:	e06e      	b.n	8000f8c <telnet_process_command+0x1e8>
		else if (strcasecmp(token, "LD3") == 0) 			//pokud napiseme "LD3"
 8000eae:	4943      	ldr	r1, [pc, #268]	; (8000fbc <telnet_process_command+0x218>)
 8000eb0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000eb2:	f017 f85b 	bl	8017f6c <strcasecmp>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d126      	bne.n	8000f0a <telnet_process_command+0x166>
				token = strtok_r(NULL, " ", &saveptr1);
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4934      	ldr	r1, [pc, #208]	; (8000f94 <telnet_process_command+0x1f0>)
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f017 f8b8 	bl	801803a <strtok_r>
 8000eca:	65f8      	str	r0, [r7, #92]	; 0x5c
				if (strcasecmp(token, "ON") == 0)  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000ecc:	4936      	ldr	r1, [pc, #216]	; (8000fa8 <telnet_process_command+0x204>)
 8000ece:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000ed0:	f017 f84c 	bl	8017f6c <strcasecmp>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d106      	bne.n	8000ee8 <telnet_process_command+0x144>
 8000eda:	2201      	movs	r2, #1
 8000edc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ee0:	4832      	ldr	r0, [pc, #200]	; (8000fac <telnet_process_command+0x208>)
 8000ee2:	f001 fe05 	bl	8002af0 <HAL_GPIO_WritePin>
 8000ee6:	e00c      	b.n	8000f02 <telnet_process_command+0x15e>
				else if (strcasecmp(token, "OFF") == 0)  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000ee8:	4931      	ldr	r1, [pc, #196]	; (8000fb0 <telnet_process_command+0x20c>)
 8000eea:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000eec:	f017 f83e 	bl	8017f6c <strcasecmp>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d105      	bne.n	8000f02 <telnet_process_command+0x15e>
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000efc:	482b      	ldr	r0, [pc, #172]	; (8000fac <telnet_process_command+0x208>)
 8000efe:	f001 fdf7 	bl	8002af0 <HAL_GPIO_WritePin>
				printf("OK\n");
 8000f02:	482c      	ldr	r0, [pc, #176]	; (8000fb4 <telnet_process_command+0x210>)
 8000f04:	f016 ffd6 	bl	8017eb4 <puts>
	}
 8000f08:	e040      	b.n	8000f8c <telnet_process_command+0x1e8>
		else if (strcasecmp(token, "STATUS") == 0) 			//pokud napiseme "STATUS"
 8000f0a:	492d      	ldr	r1, [pc, #180]	; (8000fc0 <telnet_process_command+0x21c>)
 8000f0c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000f0e:	f017 f82d 	bl	8017f6c <strcasecmp>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d139      	bne.n	8000f8c <telnet_process_command+0x1e8>
			int state_led1 = HAL_GPIO_ReadPin(LD1_GPIO_Port, LD1_Pin); 		//nacti set/reset hodnotu pinu
 8000f18:	2101      	movs	r1, #1
 8000f1a:	4824      	ldr	r0, [pc, #144]	; (8000fac <telnet_process_command+0x208>)
 8000f1c:	f001 fdd0 	bl	8002ac0 <HAL_GPIO_ReadPin>
 8000f20:	4603      	mov	r3, r0
 8000f22:	65bb      	str	r3, [r7, #88]	; 0x58
			if (state_led1 == 0)
 8000f24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d103      	bne.n	8000f32 <telnet_process_command+0x18e>
				printf("LED1 OFF\n");
 8000f2a:	4826      	ldr	r0, [pc, #152]	; (8000fc4 <telnet_process_command+0x220>)
 8000f2c:	f016 ffc2 	bl	8017eb4 <puts>
 8000f30:	e005      	b.n	8000f3e <telnet_process_command+0x19a>
			else if (state_led1 == 1)
 8000f32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d102      	bne.n	8000f3e <telnet_process_command+0x19a>
				printf("LED1 ON\n");
 8000f38:	4823      	ldr	r0, [pc, #140]	; (8000fc8 <telnet_process_command+0x224>)
 8000f3a:	f016 ffbb 	bl	8017eb4 <puts>
			int state_led2 = HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin);
 8000f3e:	2180      	movs	r1, #128	; 0x80
 8000f40:	481a      	ldr	r0, [pc, #104]	; (8000fac <telnet_process_command+0x208>)
 8000f42:	f001 fdbd 	bl	8002ac0 <HAL_GPIO_ReadPin>
 8000f46:	4603      	mov	r3, r0
 8000f48:	657b      	str	r3, [r7, #84]	; 0x54
			if (state_led2 == 0)
 8000f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d103      	bne.n	8000f58 <telnet_process_command+0x1b4>
				printf("LED2 OFF\n");
 8000f50:	481e      	ldr	r0, [pc, #120]	; (8000fcc <telnet_process_command+0x228>)
 8000f52:	f016 ffaf 	bl	8017eb4 <puts>
 8000f56:	e005      	b.n	8000f64 <telnet_process_command+0x1c0>
			else if (state_led2 == 1)
 8000f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d102      	bne.n	8000f64 <telnet_process_command+0x1c0>
				printf("LED2 ON\n");
 8000f5e:	481c      	ldr	r0, [pc, #112]	; (8000fd0 <telnet_process_command+0x22c>)
 8000f60:	f016 ffa8 	bl	8017eb4 <puts>
			int state_led3 = HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin);
 8000f64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f68:	4810      	ldr	r0, [pc, #64]	; (8000fac <telnet_process_command+0x208>)
 8000f6a:	f001 fda9 	bl	8002ac0 <HAL_GPIO_ReadPin>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	653b      	str	r3, [r7, #80]	; 0x50
						if (state_led3 == 0)
 8000f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d103      	bne.n	8000f80 <telnet_process_command+0x1dc>
							printf("LED3 OFF\n");
 8000f78:	4816      	ldr	r0, [pc, #88]	; (8000fd4 <telnet_process_command+0x230>)
 8000f7a:	f016 ff9b 	bl	8017eb4 <puts>
	}
 8000f7e:	e005      	b.n	8000f8c <telnet_process_command+0x1e8>
						else if (state_led3 == 1)
 8000f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d102      	bne.n	8000f8c <telnet_process_command+0x1e8>
							printf("LED3 ON\n");
 8000f86:	4814      	ldr	r0, [pc, #80]	; (8000fd8 <telnet_process_command+0x234>)
 8000f88:	f016 ff94 	bl	8017eb4 <puts>
	}
 8000f8c:	bf00      	nop
 8000f8e:	3760      	adds	r7, #96	; 0x60
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	08019154 	.word	0x08019154
 8000f98:	08019158 	.word	0x08019158
 8000f9c:	08019168 	.word	0x08019168
 8000fa0:	08019170 	.word	0x08019170
 8000fa4:	08019180 	.word	0x08019180
 8000fa8:	08019184 	.word	0x08019184
 8000fac:	40020400 	.word	0x40020400
 8000fb0:	08019188 	.word	0x08019188
 8000fb4:	0801918c 	.word	0x0801918c
 8000fb8:	08019190 	.word	0x08019190
 8000fbc:	08019194 	.word	0x08019194
 8000fc0:	08019198 	.word	0x08019198
 8000fc4:	080191a0 	.word	0x080191a0
 8000fc8:	080191ac 	.word	0x080191ac
 8000fcc:	080191b4 	.word	0x080191b4
 8000fd0:	080191c0 	.word	0x080191c0
 8000fd4:	080191c8 	.word	0x080191c8
 8000fd8:	080191d4 	.word	0x080191d4

08000fdc <telnet_byte_available>:

static void telnet_byte_available(uint8_t c, struct netconn *conn)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];
	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 127)
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <telnet_byte_available+0x64>)
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	2b3f      	cmp	r3, #63	; 0x3f
 8000fee:	d810      	bhi.n	8001012 <telnet_byte_available+0x36>
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	2b1f      	cmp	r3, #31
 8000ff4:	d90d      	bls.n	8001012 <telnet_byte_available+0x36>
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	db09      	blt.n	8001012 <telnet_byte_available+0x36>
		data[cnt++] = c;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <telnet_byte_available+0x64>)
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	1c5a      	adds	r2, r3, #1
 8001004:	b291      	uxth	r1, r2
 8001006:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <telnet_byte_available+0x64>)
 8001008:	8011      	strh	r1, [r2, #0]
 800100a:	4619      	mov	r1, r3
 800100c:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <telnet_byte_available+0x68>)
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	5453      	strb	r3, [r2, r1]
	if (c == '\n' || c == '\r') {
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2b0a      	cmp	r3, #10
 8001016:	d002      	beq.n	800101e <telnet_byte_available+0x42>
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	2b0d      	cmp	r3, #13
 800101c:	d10c      	bne.n	8001038 <telnet_byte_available+0x5c>
		data[cnt] = '\0';
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <telnet_byte_available+0x64>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	4b07      	ldr	r3, [pc, #28]	; (8001044 <telnet_byte_available+0x68>)
 8001026:	2100      	movs	r1, #0
 8001028:	5499      	strb	r1, [r3, r2]
		telnet_process_command(data, conn);
 800102a:	6839      	ldr	r1, [r7, #0]
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <telnet_byte_available+0x68>)
 800102e:	f7ff feb9 	bl	8000da4 <telnet_process_command>
		cnt = 0;
 8001032:	4b03      	ldr	r3, [pc, #12]	; (8001040 <telnet_byte_available+0x64>)
 8001034:	2200      	movs	r2, #0
 8001036:	801a      	strh	r2, [r3, #0]
	}
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000464 	.word	0x20000464
 8001044:	20000468 	.word	0x20000468

08001048 <telnet_thread>:


/*-----------------------------------------------------------------------------------*/
static void telnet_thread(void *arg)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8001050:	2200      	movs	r2, #0
 8001052:	2100      	movs	r1, #0
 8001054:	2010      	movs	r0, #16
 8001056:	f006 fc4f 	bl	80078f8 <netconn_new_with_proto_and_callback>
 800105a:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d055      	beq.n	800110e <telnet_thread+0xc6>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 23);
 8001062:	2217      	movs	r2, #23
 8001064:	2100      	movs	r1, #0
 8001066:	69f8      	ldr	r0, [r7, #28]
 8001068:	f006 fd00 	bl	8007a6c <netconn_bind>
 800106c:	4603      	mov	r3, r0
 800106e:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8001070:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d146      	bne.n	8001106 <telnet_thread+0xbe>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8001078:	21ff      	movs	r1, #255	; 0xff
 800107a:	69f8      	ldr	r0, [r7, #28]
 800107c:	f006 fd2e 	bl	8007adc <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	69f8      	ldr	r0, [r7, #28]
 8001088:	f006 fd54 	bl	8007b34 <netconn_accept>
 800108c:	4603      	mov	r3, r0
 800108e:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8001090:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1f3      	bne.n	8001080 <telnet_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8001098:	e022      	b.n	80010e0 <telnet_thread+0x98>
          {
            do 
            {
              netbuf_data(buf, (void**)&data, &len);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	f107 020a 	add.w	r2, r7, #10
 80010a0:	f107 010c 	add.w	r1, r7, #12
 80010a4:	4618      	mov	r0, r3
 80010a6:	f008 fce1 	bl	8009a6c <netbuf_data>
              while (len--) telnet_byte_available(*data++, newconn);
 80010aa:	e008      	b.n	80010be <telnet_thread+0x76>
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	60fa      	str	r2, [r7, #12]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	4611      	mov	r1, r2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff8f 	bl	8000fdc <telnet_byte_available>
 80010be:	897b      	ldrh	r3, [r7, #10]
 80010c0:	1e5a      	subs	r2, r3, #1
 80010c2:	b292      	uxth	r2, r2
 80010c4:	817a      	strh	r2, [r7, #10]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f0      	bne.n	80010ac <telnet_thread+0x64>

            } 
            while (netbuf_next(buf) >= 0);
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f008 fd17 	bl	8009b00 <netbuf_next>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	dae0      	bge.n	800109a <telnet_thread+0x52>
          
            netbuf_delete(buf);
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4618      	mov	r0, r3
 80010dc:	f008 fca6 	bl	8009a2c <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	f107 0210 	add.w	r2, r7, #16
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f006 ff2b 	bl	8007f44 <netconn_recv>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0d2      	beq.n	800109a <telnet_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f007 f8a0 	bl	800823c <netconn_close>
          netconn_delete(newconn);
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	4618      	mov	r0, r3
 8001100:	f006 fc98 	bl	8007a34 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8001104:	e7bc      	b.n	8001080 <telnet_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	4618      	mov	r0, r3
 800110a:	f006 fc93 	bl	8007a34 <netconn_delete>
    }
  }
}
 800110e:	bf00      	nop
 8001110:	3720      	adds	r7, #32
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <telnet_init>:
/*-----------------------------------------------------------------------------------*/

void telnet_init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af02      	add	r7, sp, #8
  sys_thread_new("telnet_thread", telnet_thread, NULL, DEFAULT_THREAD_STACKSIZE, TELNET_THREAD_PRIO);
 800111e:	2304      	movs	r3, #4
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001126:	2200      	movs	r2, #0
 8001128:	4903      	ldr	r1, [pc, #12]	; (8001138 <telnet_init+0x20>)
 800112a:	4804      	ldr	r0, [pc, #16]	; (800113c <telnet_init+0x24>)
 800112c:	f016 fd8a 	bl	8017c44 <sys_thread_new>
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	08001049 	.word	0x08001049
 800113c:	080191dc 	.word	0x080191dc

08001140 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001140:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001178 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001144:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001146:	e003      	b.n	8001150 <LoopCopyDataInit>

08001148 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800114a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800114c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800114e:	3104      	adds	r1, #4

08001150 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001150:	480b      	ldr	r0, [pc, #44]	; (8001180 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001154:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001156:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001158:	d3f6      	bcc.n	8001148 <CopyDataInit>
  ldr  r2, =_sbss
 800115a:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800115c:	e002      	b.n	8001164 <LoopFillZerobss>

0800115e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800115e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001160:	f842 3b04 	str.w	r3, [r2], #4

08001164 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001166:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001168:	d3f9      	bcc.n	800115e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800116a:	f7ff fd91 	bl	8000c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800116e:	f016 fdad 	bl	8017ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001172:	f7ff fa3f 	bl	80005f4 <main>
  bx  lr    
 8001176:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001178:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800117c:	08027168 	.word	0x08027168
  ldr  r0, =_sdata
 8001180:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001184:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8001188:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 800118c:	2000f560 	.word	0x2000f560

08001190 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001190:	e7fe      	b.n	8001190 <ADC_IRQHandler>
	...

08001194 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001198:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a0d      	ldr	r2, [pc, #52]	; (80011d4 <HAL_Init+0x40>)
 800119e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <HAL_Init+0x40>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <HAL_Init+0x40>)
 80011aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_Init+0x40>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <HAL_Init+0x40>)
 80011b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011bc:	2003      	movs	r0, #3
 80011be:	f000 f8fa 	bl	80013b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c2:	2000      	movs	r0, #0
 80011c4:	f7ff fc36 	bl	8000a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c8:	f7ff fbc4 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023c00 	.word	0x40023c00

080011d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_IncTick+0x20>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_IncTick+0x24>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	4a04      	ldr	r2, [pc, #16]	; (80011fc <HAL_IncTick+0x24>)
 80011ea:	6013      	str	r3, [r2, #0]
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000008 	.word	0x20000008
 80011fc:	20008c64 	.word	0x20008c64

08001200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return uwTick;
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <HAL_GetTick+0x14>)
 8001206:	681b      	ldr	r3, [r3, #0]
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20008c64 	.word	0x20008c64

08001218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001220:	f7ff ffee 	bl	8001200 <HAL_GetTick>
 8001224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001230:	d005      	beq.n	800123e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_Delay+0x40>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4413      	add	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800123e:	bf00      	nop
 8001240:	f7ff ffde 	bl	8001200 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	429a      	cmp	r2, r3
 800124e:	d8f7      	bhi.n	8001240 <HAL_Delay+0x28>
  {
  }
}
 8001250:	bf00      	nop
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000008 	.word	0x20000008

0800125c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001278:	4013      	ands	r3, r2
 800127a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800128c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128e:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	60d3      	str	r3, [r2, #12]
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <__NVIC_GetPriorityGrouping+0x18>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	f003 0307 	and.w	r3, r3, #7
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	db0b      	blt.n	80012ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	f003 021f 	and.w	r2, r3, #31
 80012d8:	4907      	ldr	r1, [pc, #28]	; (80012f8 <__NVIC_EnableIRQ+0x38>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	095b      	lsrs	r3, r3, #5
 80012e0:	2001      	movs	r0, #1
 80012e2:	fa00 f202 	lsl.w	r2, r0, r2
 80012e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000e100 	.word	0xe000e100

080012fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	2b00      	cmp	r3, #0
 800130e:	db0a      	blt.n	8001326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	490c      	ldr	r1, [pc, #48]	; (8001348 <__NVIC_SetPriority+0x4c>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	0112      	lsls	r2, r2, #4
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	440b      	add	r3, r1
 8001320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001324:	e00a      	b.n	800133c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4908      	ldr	r1, [pc, #32]	; (800134c <__NVIC_SetPriority+0x50>)
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	3b04      	subs	r3, #4
 8001334:	0112      	lsls	r2, r2, #4
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	440b      	add	r3, r1
 800133a:	761a      	strb	r2, [r3, #24]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000e100 	.word	0xe000e100
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	; 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f1c3 0307 	rsb	r3, r3, #7
 800136a:	2b04      	cmp	r3, #4
 800136c:	bf28      	it	cs
 800136e:	2304      	movcs	r3, #4
 8001370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3304      	adds	r3, #4
 8001376:	2b06      	cmp	r3, #6
 8001378:	d902      	bls.n	8001380 <NVIC_EncodePriority+0x30>
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3b03      	subs	r3, #3
 800137e:	e000      	b.n	8001382 <NVIC_EncodePriority+0x32>
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	f04f 32ff 	mov.w	r2, #4294967295
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	401a      	ands	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001398:	f04f 31ff 	mov.w	r1, #4294967295
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	43d9      	mvns	r1, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	4313      	orrs	r3, r2
         );
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3724      	adds	r7, #36	; 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ff4c 	bl	800125c <__NVIC_SetPriorityGrouping>
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
 80013d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013de:	f7ff ff61 	bl	80012a4 <__NVIC_GetPriorityGrouping>
 80013e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	68b9      	ldr	r1, [r7, #8]
 80013e8:	6978      	ldr	r0, [r7, #20]
 80013ea:	f7ff ffb1 	bl	8001350 <NVIC_EncodePriority>
 80013ee:	4602      	mov	r2, r0
 80013f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f4:	4611      	mov	r1, r2
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ff80 	bl	80012fc <__NVIC_SetPriority>
}
 80013fc:	bf00      	nop
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ff54 	bl	80012c0 <__NVIC_EnableIRQ>
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001430:	4baa      	ldr	r3, [pc, #680]	; (80016dc <HAL_ETH_Init+0x2bc>)
 8001432:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001438:	2300      	movs	r3, #0
 800143a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e185      	b.n	8001752 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d106      	bne.n	8001460 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f002 fe6e 	bl	800413c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001460:	2300      	movs	r3, #0
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	4b9e      	ldr	r3, [pc, #632]	; (80016e0 <HAL_ETH_Init+0x2c0>)
 8001466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001468:	4a9d      	ldr	r2, [pc, #628]	; (80016e0 <HAL_ETH_Init+0x2c0>)
 800146a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800146e:	6453      	str	r3, [r2, #68]	; 0x44
 8001470:	4b9b      	ldr	r3, [pc, #620]	; (80016e0 <HAL_ETH_Init+0x2c0>)
 8001472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800147c:	4b99      	ldr	r3, [pc, #612]	; (80016e4 <HAL_ETH_Init+0x2c4>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	4a98      	ldr	r2, [pc, #608]	; (80016e4 <HAL_ETH_Init+0x2c4>)
 8001482:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001486:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001488:	4b96      	ldr	r3, [pc, #600]	; (80016e4 <HAL_ETH_Init+0x2c4>)
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	4994      	ldr	r1, [pc, #592]	; (80016e4 <HAL_ETH_Init+0x2c4>)
 8001492:	4313      	orrs	r3, r2
 8001494:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f042 0201 	orr.w	r2, r2, #1
 80014a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ac:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80014ae:	f7ff fea7 	bl	8001200 <HAL_GetTick>
 80014b2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80014b4:	e011      	b.n	80014da <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80014b6:	f7ff fea3 	bl	8001200 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014c4:	d909      	bls.n	80014da <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2203      	movs	r2, #3
 80014ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e13b      	b.n	8001752 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1e4      	bne.n	80014b6 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f023 031c 	bic.w	r3, r3, #28
 80014fa:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80014fc:	f001 ff40 	bl	8003380 <HAL_RCC_GetHCLKFreq>
 8001500:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	4a78      	ldr	r2, [pc, #480]	; (80016e8 <HAL_ETH_Init+0x2c8>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d908      	bls.n	800151c <HAL_ETH_Init+0xfc>
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	4a77      	ldr	r2, [pc, #476]	; (80016ec <HAL_ETH_Init+0x2cc>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d804      	bhi.n	800151c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	f043 0308 	orr.w	r3, r3, #8
 8001518:	61fb      	str	r3, [r7, #28]
 800151a:	e027      	b.n	800156c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	4a73      	ldr	r2, [pc, #460]	; (80016ec <HAL_ETH_Init+0x2cc>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d908      	bls.n	8001536 <HAL_ETH_Init+0x116>
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	4a72      	ldr	r2, [pc, #456]	; (80016f0 <HAL_ETH_Init+0x2d0>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d804      	bhi.n	8001536 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f043 030c 	orr.w	r3, r3, #12
 8001532:	61fb      	str	r3, [r7, #28]
 8001534:	e01a      	b.n	800156c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	4a6d      	ldr	r2, [pc, #436]	; (80016f0 <HAL_ETH_Init+0x2d0>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d903      	bls.n	8001546 <HAL_ETH_Init+0x126>
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	4a6c      	ldr	r2, [pc, #432]	; (80016f4 <HAL_ETH_Init+0x2d4>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d911      	bls.n	800156a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	4a6a      	ldr	r2, [pc, #424]	; (80016f4 <HAL_ETH_Init+0x2d4>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d908      	bls.n	8001560 <HAL_ETH_Init+0x140>
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	4a69      	ldr	r2, [pc, #420]	; (80016f8 <HAL_ETH_Init+0x2d8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d804      	bhi.n	8001560 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	61fb      	str	r3, [r7, #28]
 800155e:	e005      	b.n	800156c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f043 0310 	orr.w	r3, r3, #16
 8001566:	61fb      	str	r3, [r7, #28]
 8001568:	e000      	b.n	800156c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800156a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	69fa      	ldr	r2, [r7, #28]
 8001572:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001574:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001578:	2100      	movs	r1, #0
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 fc19 	bl	8001db2 <HAL_ETH_WritePHYRegister>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00b      	beq.n	800159e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800158a:	6939      	ldr	r1, [r7, #16]
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 fdcf 	bl	8002130 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2201      	movs	r2, #1
 8001596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e0d9      	b.n	8001752 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800159e:	20ff      	movs	r0, #255	; 0xff
 80015a0:	f7ff fe3a 	bl	8001218 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f000 80a7 	beq.w	80016fc <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80015ae:	f7ff fe27 	bl	8001200 <HAL_GetTick>
 80015b2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80015b4:	f107 030c 	add.w	r3, r7, #12
 80015b8:	461a      	mov	r2, r3
 80015ba:	2101      	movs	r1, #1
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 fb90 	bl	8001ce2 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80015c2:	f7ff fe1d 	bl	8001200 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d90f      	bls.n	80015f4 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80015d8:	6939      	ldr	r1, [r7, #16]
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 fda8 	bl	8002130 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e0ae      	b.n	8001752 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 0304 	and.w	r3, r3, #4
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0da      	beq.n	80015b4 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80015fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001602:	2100      	movs	r1, #0
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 fbd4 	bl	8001db2 <HAL_ETH_WritePHYRegister>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00b      	beq.n	8001628 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001614:	6939      	ldr	r1, [r7, #16]
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 fd8a 	bl	8002130 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001624:	2301      	movs	r3, #1
 8001626:	e094      	b.n	8001752 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001628:	f7ff fdea 	bl	8001200 <HAL_GetTick>
 800162c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800162e:	f107 030c 	add.w	r3, r7, #12
 8001632:	461a      	mov	r2, r3
 8001634:	2101      	movs	r1, #1
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 fb53 	bl	8001ce2 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800163c:	f7ff fde0 	bl	8001200 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	f241 3288 	movw	r2, #5000	; 0x1388
 800164a:	4293      	cmp	r3, r2
 800164c:	d90f      	bls.n	800166e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001652:	6939      	ldr	r1, [r7, #16]
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 fd6b 	bl	8002130 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e071      	b.n	8001752 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f003 0320 	and.w	r3, r3, #32
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0da      	beq.n	800162e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	461a      	mov	r2, r3
 800167e:	211f      	movs	r1, #31
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 fb2e 	bl	8001ce2 <HAL_ETH_ReadPHYRegister>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00b      	beq.n	80016a4 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001690:	6939      	ldr	r1, [r7, #16]
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 fd4c 	bl	8002130 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80016a0:	2301      	movs	r3, #1
 80016a2:	e056      	b.n	8001752 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 0310 	and.w	r3, r3, #16
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d004      	beq.n	80016b8 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	e002      	b.n	80016be <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	e037      	b.n	8001740 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	e032      	b.n	8001740 <HAL_ETH_Init+0x320>
 80016da:	bf00      	nop
 80016dc:	03938700 	.word	0x03938700
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40013800 	.word	0x40013800
 80016e8:	01312cff 	.word	0x01312cff
 80016ec:	02160ebf 	.word	0x02160ebf
 80016f0:	039386ff 	.word	0x039386ff
 80016f4:	05f5e0ff 	.word	0x05f5e0ff
 80016f8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	08db      	lsrs	r3, r3, #3
 8001702:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	085b      	lsrs	r3, r3, #1
 800170a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800170c:	4313      	orrs	r3, r2
 800170e:	b29b      	uxth	r3, r3
 8001710:	461a      	mov	r2, r3
 8001712:	2100      	movs	r1, #0
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 fb4c 	bl	8001db2 <HAL_ETH_WritePHYRegister>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00b      	beq.n	8001738 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001724:	6939      	ldr	r1, [r7, #16]
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 fd02 	bl	8002130 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e00c      	b.n	8001752 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001738:	f640 70ff 	movw	r0, #4095	; 0xfff
 800173c:	f7ff fd6c 	bl	8001218 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001740:	6939      	ldr	r1, [r7, #16]
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 fcf4 	bl	8002130 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3720      	adds	r7, #32
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop

0800175c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800175c:	b480      	push	{r7}
 800175e:	b087      	sub	sp, #28
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
 8001768:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001774:	2b01      	cmp	r3, #1
 8001776:	d101      	bne.n	800177c <HAL_ETH_DMATxDescListInit+0x20>
 8001778:	2302      	movs	r3, #2
 800177a:	e052      	b.n	8001822 <HAL_ETH_DMATxDescListInit+0xc6>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2202      	movs	r2, #2
 8001788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	e030      	b.n	80017fa <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	015b      	lsls	r3, r3, #5
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	4413      	add	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80017a8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80017b0:	fb02 f303 	mul.w	r3, r2, r3
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	4413      	add	r3, r2
 80017b8:	461a      	mov	r2, r3
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d105      	bne.n	80017d2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	3b01      	subs	r3, #1
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d208      	bcs.n	80017ee <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	3301      	adds	r3, #1
 80017e0:	015b      	lsls	r3, r3, #5
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	4413      	add	r3, r2
 80017e6:	461a      	mov	r2, r3
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	e002      	b.n	80017f4 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	3301      	adds	r3, #1
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d3ca      	bcc.n	8001798 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800180c:	3310      	adds	r3, #16
 800180e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	371c      	adds	r7, #28
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800182e:	b480      	push	{r7}
 8001830:	b087      	sub	sp, #28
 8001832:	af00      	add	r7, sp, #0
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001846:	2b01      	cmp	r3, #1
 8001848:	d101      	bne.n	800184e <HAL_ETH_DMARxDescListInit+0x20>
 800184a:	2302      	movs	r3, #2
 800184c:	e056      	b.n	80018fc <HAL_ETH_DMARxDescListInit+0xce>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2202      	movs	r2, #2
 800185a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	e034      	b.n	80018d4 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	015b      	lsls	r3, r3, #5
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	4413      	add	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800187a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001882:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800188a:	fb02 f303 	mul.w	r3, r2, r3
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	461a      	mov	r2, r3
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d105      	bne.n	80018ac <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d208      	bcs.n	80018c8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	3301      	adds	r3, #1
 80018ba:	015b      	lsls	r3, r3, #5
 80018bc:	68ba      	ldr	r2, [r7, #8]
 80018be:	4413      	add	r3, r2
 80018c0:	461a      	mov	r2, r3
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	e002      	b.n	80018ce <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3301      	adds	r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d3c6      	bcc.n	800186a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68ba      	ldr	r2, [r7, #8]
 80018e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e6:	330c      	adds	r3, #12
 80018e8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	371c      	adds	r7, #28
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001908:	b480      	push	{r7}
 800190a:	b087      	sub	sp, #28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <HAL_ETH_TransmitFrame+0x24>
 8001928:	2302      	movs	r3, #2
 800192a:	e0cd      	b.n	8001ac8 <HAL_ETH_TransmitFrame+0x1c0>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2202      	movs	r2, #2
 8001938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d109      	bne.n	8001956 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001952:	2301      	movs	r3, #1
 8001954:	e0b8      	b.n	8001ac8 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	da09      	bge.n	8001974 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2212      	movs	r2, #18
 8001964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e0a9      	b.n	8001ac8 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800197a:	4293      	cmp	r3, r2
 800197c:	d915      	bls.n	80019aa <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	4a54      	ldr	r2, [pc, #336]	; (8001ad4 <HAL_ETH_TransmitFrame+0x1cc>)
 8001982:	fba2 2303 	umull	r2, r3, r2, r3
 8001986:	0a9b      	lsrs	r3, r3, #10
 8001988:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	4b51      	ldr	r3, [pc, #324]	; (8001ad4 <HAL_ETH_TransmitFrame+0x1cc>)
 800198e:	fba3 1302 	umull	r1, r3, r3, r2
 8001992:	0a9b      	lsrs	r3, r3, #10
 8001994:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001998:	fb01 f303 	mul.w	r3, r1, r3
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d005      	beq.n	80019ae <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	3301      	adds	r3, #1
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	e001      	b.n	80019ae <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80019aa:	2301      	movs	r3, #1
 80019ac:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d11c      	bne.n	80019ee <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019be:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80019c2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80019ce:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019da:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019de:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	461a      	mov	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80019ec:	e04b      	b.n	8001a86 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	e044      	b.n	8001a7e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fe:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a02:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d107      	bne.n	8001a1a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a18:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a22:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d116      	bne.n	8001a5c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a38:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001a3c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	4a25      	ldr	r2, [pc, #148]	; (8001ad8 <HAL_ETH_TransmitFrame+0x1d0>)
 8001a42:	fb02 f203 	mul.w	r2, r2, r3
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	4413      	add	r3, r2
 8001a4a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001a4e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001a5a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a66:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a6a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	461a      	mov	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d3b6      	bcc.n	80019f4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a8e:	3314      	adds	r3, #20
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00d      	beq.n	8001ab6 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa2:	3314      	adds	r3, #20
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	371c      	adds	r7, #28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	ac02b00b 	.word	0xac02b00b
 8001ad8:	fffffa0c 	.word	0xfffffa0c

08001adc <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d101      	bne.n	8001af6 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e074      	b.n	8001be0 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2202      	movs	r2, #2
 8001b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001b06:	e05a      	b.n	8001bbe <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b1c:	d10d      	bne.n	8001b3a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	461a      	mov	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	629a      	str	r2, [r3, #40]	; 0x28
 8001b38:	e041      	b.n	8001bbe <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10b      	bne.n	8001b60 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	629a      	str	r2, [r3, #40]	; 0x28
 8001b5e:	e02e      	b.n	8001bbe <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d103      	bne.n	8001b82 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	0c1b      	lsrs	r3, r3, #16
 8001b8a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b8e:	1f1a      	subs	r2, r3, #4
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e010      	b.n	8001be0 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	db02      	blt.n	8001bce <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	d99c      	bls.n	8001b08 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bfc:	3314      	adds	r3, #20
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c04:	2b40      	cmp	r3, #64	; 0x40
 8001c06:	d112      	bne.n	8001c2e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f002 fb65 	bl	80042d8 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c16:	3314      	adds	r3, #20
 8001c18:	2240      	movs	r2, #64	; 0x40
 8001c1a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c2c:	e01b      	b.n	8001c66 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c36:	3314      	adds	r3, #20
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d111      	bne.n	8001c66 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f839 	bl	8001cba <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c50:	3314      	adds	r3, #20
 8001c52:	2201      	movs	r2, #1
 8001c54:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c6e:	3314      	adds	r3, #20
 8001c70:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c74:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c7e:	3314      	adds	r3, #20
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c8a:	d112      	bne.n	8001cb2 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f81e 	bl	8001cce <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c9a:	3314      	adds	r3, #20
 8001c9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ca0:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	460b      	mov	r3, r1
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b82      	cmp	r3, #130	; 0x82
 8001d02:	d101      	bne.n	8001d08 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d04:	2302      	movs	r3, #2
 8001d06:	e050      	b.n	8001daa <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2282      	movs	r2, #130	; 0x82
 8001d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f003 031c 	and.w	r3, r3, #28
 8001d1e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8a1b      	ldrh	r3, [r3, #16]
 8001d24:	02db      	lsls	r3, r3, #11
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001d2e:	897b      	ldrh	r3, [r7, #10]
 8001d30:	019b      	lsls	r3, r3, #6
 8001d32:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f023 0302 	bic.w	r3, r3, #2
 8001d42:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d54:	f7ff fa54 	bl	8001200 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d5a:	e015      	b.n	8001d88 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001d5c:	f7ff fa50 	bl	8001200 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6a:	d309      	bcc.n	8001d80 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e014      	b.n	8001daa <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1e4      	bne.n	8001d5c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b086      	sub	sp, #24
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	60f8      	str	r0, [r7, #12]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	607a      	str	r2, [r7, #4]
 8001dbe:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b42      	cmp	r3, #66	; 0x42
 8001dd2:	d101      	bne.n	8001dd8 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e04e      	b.n	8001e76 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2242      	movs	r2, #66	; 0x42
 8001ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f003 031c 	and.w	r3, r3, #28
 8001dee:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8a1b      	ldrh	r3, [r3, #16]
 8001df4:	02db      	lsls	r3, r3, #11
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001dfe:	897b      	ldrh	r3, [r7, #10]
 8001e00:	019b      	lsls	r3, r3, #6
 8001e02:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f043 0302 	orr.w	r3, r3, #2
 8001e12:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e2e:	f7ff f9e7 	bl	8001200 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e34:	e015      	b.n	8001e62 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001e36:	f7ff f9e3 	bl	8001200 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e44:	d309      	bcc.n	8001e5a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e00d      	b.n	8001e76 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1e4      	bne.n	8001e36 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_ETH_Start+0x16>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e01f      	b.n	8001ed4 <HAL_ETH_Start+0x56>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 fb45 	bl	8002534 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 fb7c 	bl	80025a8 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 fc13 	bl	80026dc <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 fbb0 	bl	800261c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 fbdd 	bl	800267c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d101      	bne.n	8001ef2 <HAL_ETH_Stop+0x16>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e01f      	b.n	8001f32 <HAL_ETH_Stop+0x56>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2202      	movs	r2, #2
 8001efe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 fba2 	bl	800264c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 fbcf 	bl	80026ac <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 fb67 	bl	80025e2 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 fbe1 	bl	80026dc <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 fb27 	bl	800256e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d101      	bne.n	8001f58 <HAL_ETH_ConfigMAC+0x1c>
 8001f54:	2302      	movs	r3, #2
 8001f56:	e0e4      	b.n	8002122 <HAL_ETH_ConfigMAC+0x1e6>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2202      	movs	r2, #2
 8001f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 80b1 	beq.w	80020d2 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	4b6c      	ldr	r3, [pc, #432]	; (800212c <HAL_ETH_ConfigMAC+0x1f0>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001f88:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001f8e:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001f94:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001f9a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001fa0:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001fa6:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001fac:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001fb2:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001fb8:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001fbe:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001fc4:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001fca:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fe2:	2001      	movs	r0, #1
 8001fe4:	f7ff f918 	bl	8001218 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ff8:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001ffe:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002004:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800200a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002010:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002016:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002022:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002024:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800202e:	2001      	movs	r0, #1
 8002030:	f7ff f8f2 	bl	8001218 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002044:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800204e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800205e:	4013      	ands	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002066:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800206c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002072:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002078:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800207e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002084:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	4313      	orrs	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800209c:	2001      	movs	r0, #1
 800209e:	f7ff f8bb 	bl	8001218 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80020c2:	2001      	movs	r0, #1
 80020c4:	f7ff f8a8 	bl	8001218 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	61da      	str	r2, [r3, #28]
 80020d0:	e01e      	b.n	8002110 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80020e0:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002102:	2001      	movs	r0, #1
 8002104:	f7ff f888 	bl	8001218 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	ff20810f 	.word	0xff20810f

08002130 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b0b0      	sub	sp, #192	; 0xc0
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d007      	beq.n	8002156 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800214c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002154:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002156:	2300      	movs	r3, #0
 8002158:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800215e:	2300      	movs	r3, #0
 8002160:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002162:	2300      	movs	r3, #0
 8002164:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002166:	2300      	movs	r3, #0
 8002168:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800216a:	2300      	movs	r3, #0
 800216c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d103      	bne.n	800217e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800217a:	663b      	str	r3, [r7, #96]	; 0x60
 800217c:	e001      	b.n	8002182 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800217e:	2300      	movs	r3, #0
 8002180:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002182:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002186:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800218c:	2300      	movs	r3, #0
 800218e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002190:	2300      	movs	r3, #0
 8002192:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002194:	2300      	movs	r3, #0
 8002196:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002198:	2300      	movs	r3, #0
 800219a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800219c:	2340      	movs	r3, #64	; 0x40
 800219e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80021b2:	2300      	movs	r3, #0
 80021b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80021b8:	2300      	movs	r3, #0
 80021ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80021dc:	2300      	movs	r3, #0
 80021de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80021e2:	2300      	movs	r3, #0
 80021e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80021ee:	2300      	movs	r3, #0
 80021f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002204:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002208:	4bac      	ldr	r3, [pc, #688]	; (80024bc <ETH_MACDMAConfig+0x38c>)
 800220a:	4013      	ands	r3, r2
 800220c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002210:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002214:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002218:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800221a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800221c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002222:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002224:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002226:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800222a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002230:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002234:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002236:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002238:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800223a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800223c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800223e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002240:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002242:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002244:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002246:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800224a:	4313      	orrs	r3, r2
 800224c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002258:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002264:	2001      	movs	r0, #1
 8002266:	f7fe ffd7 	bl	8001218 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002272:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002274:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002276:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002278:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800227a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800227c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800227e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002282:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002284:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002288:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800228a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800228e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002290:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002294:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002298:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80022a0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80022a2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80022ae:	2001      	movs	r0, #1
 80022b0:	f7fe ffb2 	bl	8001218 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022bc:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022c6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80022d0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80022dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022e0:	f64f 7341 	movw	r3, #65345	; 0xff41
 80022e4:	4013      	ands	r3, r2
 80022e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80022ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022ee:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80022f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80022f4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80022f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80022fa:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80022fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002300:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002302:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002306:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002308:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800230c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800230e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002320:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800232c:	2001      	movs	r0, #1
 800232e:	f7fe ff73 	bl	8001218 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800233a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800233c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002340:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002356:	2001      	movs	r0, #1
 8002358:	f7fe ff5e 	bl	8001218 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002364:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002366:	2300      	movs	r3, #0
 8002368:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800236a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800236e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002370:	2300      	movs	r3, #0
 8002372:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002374:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002378:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800237a:	2300      	movs	r3, #0
 800237c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002386:	2300      	movs	r3, #0
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800238a:	2304      	movs	r3, #4
 800238c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800238e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002394:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002398:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800239a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800239e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80023a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023a4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80023ae:	2300      	movs	r3, #0
 80023b0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ba:	3318      	adds	r3, #24
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80023c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023c6:	4b3e      	ldr	r3, [pc, #248]	; (80024c0 <ETH_MACDMAConfig+0x390>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023ce:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80023d0:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023d2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80023d4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80023d6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80023d8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80023da:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80023dc:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80023de:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80023e0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80023e2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80023e4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80023e6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80023ea:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80023ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80023ee:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002402:	3318      	adds	r3, #24
 8002404:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002408:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002412:	3318      	adds	r3, #24
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800241a:	2001      	movs	r0, #1
 800241c:	f7fe fefc 	bl	8001218 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002428:	3318      	adds	r3, #24
 800242a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800242e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002434:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002438:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800243a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800243c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800243e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002440:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002444:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002446:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800244a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002458:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002468:	2001      	movs	r0, #1
 800246a:	f7fe fed5 	bl	8001218 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002476:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800247a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d10f      	bne.n	80024a4 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800248c:	331c      	adds	r3, #28
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002498:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800249c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a0:	331c      	adds	r3, #28
 80024a2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	461a      	mov	r2, r3
 80024aa:	2100      	movs	r1, #0
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f809 	bl	80024c4 <ETH_MACAddressConfig>
}
 80024b2:	bf00      	nop
 80024b4:	37c0      	adds	r7, #192	; 0xc0
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	ff20810f 	.word	0xff20810f
 80024c0:	f8de3f23 	.word	0xf8de3f23

080024c4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3305      	adds	r3, #5
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	021b      	lsls	r3, r3, #8
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	3204      	adds	r2, #4
 80024dc:	7812      	ldrb	r2, [r2, #0]
 80024de:	4313      	orrs	r3, r2
 80024e0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <ETH_MACAddressConfig+0x68>)
 80024e6:	4413      	add	r3, r2
 80024e8:	461a      	mov	r2, r3
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3303      	adds	r3, #3
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	061a      	lsls	r2, r3, #24
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3302      	adds	r3, #2
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	041b      	lsls	r3, r3, #16
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3301      	adds	r3, #1
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	021b      	lsls	r3, r3, #8
 8002508:	4313      	orrs	r3, r2
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	7812      	ldrb	r2, [r2, #0]
 800250e:	4313      	orrs	r3, r2
 8002510:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	4b06      	ldr	r3, [pc, #24]	; (8002530 <ETH_MACAddressConfig+0x6c>)
 8002516:	4413      	add	r3, r2
 8002518:	461a      	mov	r2, r3
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	6013      	str	r3, [r2, #0]
}
 800251e:	bf00      	nop
 8002520:	371c      	adds	r7, #28
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40028040 	.word	0x40028040
 8002530:	40028044 	.word	0x40028044

08002534 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0208 	orr.w	r2, r2, #8
 800254e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002558:	2001      	movs	r0, #1
 800255a:	f000 f8e9 	bl	8002730 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	601a      	str	r2, [r3, #0]
}
 8002566:	bf00      	nop
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800256e:	b580      	push	{r7, lr}
 8002570:	b084      	sub	sp, #16
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0208 	bic.w	r2, r2, #8
 8002588:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002592:	2001      	movs	r0, #1
 8002594:	f000 f8cc 	bl	8002730 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	601a      	str	r2, [r3, #0]
}
 80025a0:	bf00      	nop
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0204 	orr.w	r2, r2, #4
 80025c2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80025cc:	2001      	movs	r0, #1
 80025ce:	f000 f8af 	bl	8002730 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	601a      	str	r2, [r3, #0]
}
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b084      	sub	sp, #16
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0204 	bic.w	r2, r2, #4
 80025fc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002606:	2001      	movs	r0, #1
 8002608:	f000 f892 	bl	8002730 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	601a      	str	r2, [r3, #0]
}
 8002614:	bf00      	nop
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800262c:	3318      	adds	r3, #24
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800263c:	3318      	adds	r3, #24
 800263e:	601a      	str	r2, [r3, #0]
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800265c:	3318      	adds	r3, #24
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800266c:	3318      	adds	r3, #24
 800266e:	601a      	str	r2, [r3, #0]
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800268c:	3318      	adds	r3, #24
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f042 0202 	orr.w	r2, r2, #2
 8002698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800269c:	3318      	adds	r3, #24
 800269e:	601a      	str	r2, [r3, #0]
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026bc:	3318      	adds	r3, #24
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0202 	bic.w	r2, r2, #2
 80026c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026cc:	3318      	adds	r3, #24
 80026ce:	601a      	str	r2, [r3, #0]
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026f0:	3318      	adds	r3, #24
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80026fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002700:	3318      	adds	r3, #24
 8002702:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800270c:	3318      	adds	r3, #24
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002712:	2001      	movs	r0, #1
 8002714:	f000 f80c 	bl	8002730 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002722:	3318      	adds	r3, #24
 8002724:	601a      	str	r2, [r3, #0]
}
 8002726:	bf00      	nop
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002738:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <ETH_Delay+0x34>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <ETH_Delay+0x38>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	0a5b      	lsrs	r3, r3, #9
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	fb02 f303 	mul.w	r3, r2, r3
 800274a:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 800274c:	bf00      	nop
  } 
  while (Delay --);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1e5a      	subs	r2, r3, #1
 8002752:	60fa      	str	r2, [r7, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1f9      	bne.n	800274c <ETH_Delay+0x1c>
}
 8002758:	bf00      	nop
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	20000000 	.word	0x20000000
 8002768:	10624dd3 	.word	0x10624dd3

0800276c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800276c:	b480      	push	{r7}
 800276e:	b089      	sub	sp, #36	; 0x24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800277e:	2300      	movs	r3, #0
 8002780:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]
 8002786:	e177      	b.n	8002a78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002788:	2201      	movs	r2, #1
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4013      	ands	r3, r2
 800279a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	f040 8166 	bne.w	8002a72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d00b      	beq.n	80027c6 <HAL_GPIO_Init+0x5a>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d007      	beq.n	80027c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027ba:	2b11      	cmp	r3, #17
 80027bc:	d003      	beq.n	80027c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b12      	cmp	r3, #18
 80027c4:	d130      	bne.n	8002828 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	2203      	movs	r2, #3
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027fc:	2201      	movs	r2, #1
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	f003 0201 	and.w	r2, r3, #1
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	2203      	movs	r2, #3
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d003      	beq.n	8002868 <HAL_GPIO_Init+0xfc>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b12      	cmp	r3, #18
 8002866:	d123      	bne.n	80028b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	08da      	lsrs	r2, r3, #3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3208      	adds	r2, #8
 8002870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002874:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	220f      	movs	r2, #15
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	08da      	lsrs	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3208      	adds	r2, #8
 80028aa:	69b9      	ldr	r1, [r7, #24]
 80028ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	2203      	movs	r2, #3
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 0203 	and.w	r2, r3, #3
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80c0 	beq.w	8002a72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	4b65      	ldr	r3, [pc, #404]	; (8002a8c <HAL_GPIO_Init+0x320>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	4a64      	ldr	r2, [pc, #400]	; (8002a8c <HAL_GPIO_Init+0x320>)
 80028fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002900:	6453      	str	r3, [r2, #68]	; 0x44
 8002902:	4b62      	ldr	r3, [pc, #392]	; (8002a8c <HAL_GPIO_Init+0x320>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800290e:	4a60      	ldr	r2, [pc, #384]	; (8002a90 <HAL_GPIO_Init+0x324>)
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	089b      	lsrs	r3, r3, #2
 8002914:	3302      	adds	r3, #2
 8002916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800291a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	220f      	movs	r2, #15
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4013      	ands	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a57      	ldr	r2, [pc, #348]	; (8002a94 <HAL_GPIO_Init+0x328>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d037      	beq.n	80029aa <HAL_GPIO_Init+0x23e>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a56      	ldr	r2, [pc, #344]	; (8002a98 <HAL_GPIO_Init+0x32c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d031      	beq.n	80029a6 <HAL_GPIO_Init+0x23a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a55      	ldr	r2, [pc, #340]	; (8002a9c <HAL_GPIO_Init+0x330>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d02b      	beq.n	80029a2 <HAL_GPIO_Init+0x236>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a54      	ldr	r2, [pc, #336]	; (8002aa0 <HAL_GPIO_Init+0x334>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d025      	beq.n	800299e <HAL_GPIO_Init+0x232>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a53      	ldr	r2, [pc, #332]	; (8002aa4 <HAL_GPIO_Init+0x338>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d01f      	beq.n	800299a <HAL_GPIO_Init+0x22e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a52      	ldr	r2, [pc, #328]	; (8002aa8 <HAL_GPIO_Init+0x33c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d019      	beq.n	8002996 <HAL_GPIO_Init+0x22a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a51      	ldr	r2, [pc, #324]	; (8002aac <HAL_GPIO_Init+0x340>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d013      	beq.n	8002992 <HAL_GPIO_Init+0x226>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a50      	ldr	r2, [pc, #320]	; (8002ab0 <HAL_GPIO_Init+0x344>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d00d      	beq.n	800298e <HAL_GPIO_Init+0x222>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a4f      	ldr	r2, [pc, #316]	; (8002ab4 <HAL_GPIO_Init+0x348>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d007      	beq.n	800298a <HAL_GPIO_Init+0x21e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a4e      	ldr	r2, [pc, #312]	; (8002ab8 <HAL_GPIO_Init+0x34c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d101      	bne.n	8002986 <HAL_GPIO_Init+0x21a>
 8002982:	2309      	movs	r3, #9
 8002984:	e012      	b.n	80029ac <HAL_GPIO_Init+0x240>
 8002986:	230a      	movs	r3, #10
 8002988:	e010      	b.n	80029ac <HAL_GPIO_Init+0x240>
 800298a:	2308      	movs	r3, #8
 800298c:	e00e      	b.n	80029ac <HAL_GPIO_Init+0x240>
 800298e:	2307      	movs	r3, #7
 8002990:	e00c      	b.n	80029ac <HAL_GPIO_Init+0x240>
 8002992:	2306      	movs	r3, #6
 8002994:	e00a      	b.n	80029ac <HAL_GPIO_Init+0x240>
 8002996:	2305      	movs	r3, #5
 8002998:	e008      	b.n	80029ac <HAL_GPIO_Init+0x240>
 800299a:	2304      	movs	r3, #4
 800299c:	e006      	b.n	80029ac <HAL_GPIO_Init+0x240>
 800299e:	2303      	movs	r3, #3
 80029a0:	e004      	b.n	80029ac <HAL_GPIO_Init+0x240>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e002      	b.n	80029ac <HAL_GPIO_Init+0x240>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <HAL_GPIO_Init+0x240>
 80029aa:	2300      	movs	r3, #0
 80029ac:	69fa      	ldr	r2, [r7, #28]
 80029ae:	f002 0203 	and.w	r2, r2, #3
 80029b2:	0092      	lsls	r2, r2, #2
 80029b4:	4093      	lsls	r3, r2
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029bc:	4934      	ldr	r1, [pc, #208]	; (8002a90 <HAL_GPIO_Init+0x324>)
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	089b      	lsrs	r3, r3, #2
 80029c2:	3302      	adds	r3, #2
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029ca:	4b3c      	ldr	r3, [pc, #240]	; (8002abc <HAL_GPIO_Init+0x350>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029ee:	4a33      	ldr	r2, [pc, #204]	; (8002abc <HAL_GPIO_Init+0x350>)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029f4:	4b31      	ldr	r3, [pc, #196]	; (8002abc <HAL_GPIO_Init+0x350>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a18:	4a28      	ldr	r2, [pc, #160]	; (8002abc <HAL_GPIO_Init+0x350>)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a1e:	4b27      	ldr	r3, [pc, #156]	; (8002abc <HAL_GPIO_Init+0x350>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a42:	4a1e      	ldr	r2, [pc, #120]	; (8002abc <HAL_GPIO_Init+0x350>)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a48:	4b1c      	ldr	r3, [pc, #112]	; (8002abc <HAL_GPIO_Init+0x350>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a6c:	4a13      	ldr	r2, [pc, #76]	; (8002abc <HAL_GPIO_Init+0x350>)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3301      	adds	r3, #1
 8002a76:	61fb      	str	r3, [r7, #28]
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	2b0f      	cmp	r3, #15
 8002a7c:	f67f ae84 	bls.w	8002788 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a80:	bf00      	nop
 8002a82:	3724      	adds	r7, #36	; 0x24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40013800 	.word	0x40013800
 8002a94:	40020000 	.word	0x40020000
 8002a98:	40020400 	.word	0x40020400
 8002a9c:	40020800 	.word	0x40020800
 8002aa0:	40020c00 	.word	0x40020c00
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40021400 	.word	0x40021400
 8002aac:	40021800 	.word	0x40021800
 8002ab0:	40021c00 	.word	0x40021c00
 8002ab4:	40022000 	.word	0x40022000
 8002ab8:	40022400 	.word	0x40022400
 8002abc:	40013c00 	.word	0x40013c00

08002ac0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	887b      	ldrh	r3, [r7, #2]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	73fb      	strb	r3, [r7, #15]
 8002adc:	e001      	b.n	8002ae2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	807b      	strh	r3, [r7, #2]
 8002afc:	4613      	mov	r3, r2
 8002afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b00:	787b      	ldrb	r3, [r7, #1]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b06:	887a      	ldrh	r2, [r7, #2]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b0c:	e003      	b.n	8002b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b0e:	887b      	ldrh	r3, [r7, #2]
 8002b10:	041a      	lsls	r2, r3, #16
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	619a      	str	r2, [r3, #24]
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e25b      	b.n	8002fee <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d075      	beq.n	8002c2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b42:	4ba3      	ldr	r3, [pc, #652]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d00c      	beq.n	8002b68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b4e:	4ba0      	ldr	r3, [pc, #640]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d112      	bne.n	8002b80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b5a:	4b9d      	ldr	r3, [pc, #628]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b66:	d10b      	bne.n	8002b80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b68:	4b99      	ldr	r3, [pc, #612]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d05b      	beq.n	8002c2c <HAL_RCC_OscConfig+0x108>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d157      	bne.n	8002c2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e236      	b.n	8002fee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b88:	d106      	bne.n	8002b98 <HAL_RCC_OscConfig+0x74>
 8002b8a:	4b91      	ldr	r3, [pc, #580]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a90      	ldr	r2, [pc, #576]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	e01d      	b.n	8002bd4 <HAL_RCC_OscConfig+0xb0>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ba0:	d10c      	bne.n	8002bbc <HAL_RCC_OscConfig+0x98>
 8002ba2:	4b8b      	ldr	r3, [pc, #556]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a8a      	ldr	r2, [pc, #552]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	4b88      	ldr	r3, [pc, #544]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a87      	ldr	r2, [pc, #540]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	e00b      	b.n	8002bd4 <HAL_RCC_OscConfig+0xb0>
 8002bbc:	4b84      	ldr	r3, [pc, #528]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a83      	ldr	r2, [pc, #524]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	4b81      	ldr	r3, [pc, #516]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a80      	ldr	r2, [pc, #512]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d013      	beq.n	8002c04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bdc:	f7fe fb10 	bl	8001200 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002be4:	f7fe fb0c 	bl	8001200 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b64      	cmp	r3, #100	; 0x64
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e1fb      	b.n	8002fee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf6:	4b76      	ldr	r3, [pc, #472]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCC_OscConfig+0xc0>
 8002c02:	e014      	b.n	8002c2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c04:	f7fe fafc 	bl	8001200 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c0c:	f7fe faf8 	bl	8001200 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b64      	cmp	r3, #100	; 0x64
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e1e7      	b.n	8002fee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1e:	4b6c      	ldr	r3, [pc, #432]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f0      	bne.n	8002c0c <HAL_RCC_OscConfig+0xe8>
 8002c2a:	e000      	b.n	8002c2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d063      	beq.n	8002d02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c3a:	4b65      	ldr	r3, [pc, #404]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 030c 	and.w	r3, r3, #12
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00b      	beq.n	8002c5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c46:	4b62      	ldr	r3, [pc, #392]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d11c      	bne.n	8002c8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c52:	4b5f      	ldr	r3, [pc, #380]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d116      	bne.n	8002c8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c5e:	4b5c      	ldr	r3, [pc, #368]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d005      	beq.n	8002c76 <HAL_RCC_OscConfig+0x152>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d001      	beq.n	8002c76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e1bb      	b.n	8002fee <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c76:	4b56      	ldr	r3, [pc, #344]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	4952      	ldr	r1, [pc, #328]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8a:	e03a      	b.n	8002d02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d020      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c94:	4b4f      	ldr	r3, [pc, #316]	; (8002dd4 <HAL_RCC_OscConfig+0x2b0>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9a:	f7fe fab1 	bl	8001200 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ca2:	f7fe faad 	bl	8001200 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e19c      	b.n	8002fee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb4:	4b46      	ldr	r3, [pc, #280]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0f0      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc0:	4b43      	ldr	r3, [pc, #268]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	4940      	ldr	r1, [pc, #256]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	600b      	str	r3, [r1, #0]
 8002cd4:	e015      	b.n	8002d02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cd6:	4b3f      	ldr	r3, [pc, #252]	; (8002dd4 <HAL_RCC_OscConfig+0x2b0>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cdc:	f7fe fa90 	bl	8001200 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce4:	f7fe fa8c 	bl	8001200 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e17b      	b.n	8002fee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf6:	4b36      	ldr	r3, [pc, #216]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f0      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d030      	beq.n	8002d70 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d016      	beq.n	8002d44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d16:	4b30      	ldr	r3, [pc, #192]	; (8002dd8 <HAL_RCC_OscConfig+0x2b4>)
 8002d18:	2201      	movs	r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1c:	f7fe fa70 	bl	8001200 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d24:	f7fe fa6c 	bl	8001200 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e15b      	b.n	8002fee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d36:	4b26      	ldr	r3, [pc, #152]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x200>
 8002d42:	e015      	b.n	8002d70 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d44:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <HAL_RCC_OscConfig+0x2b4>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4a:	f7fe fa59 	bl	8001200 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d52:	f7fe fa55 	bl	8001200 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e144      	b.n	8002fee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d64:	4b1a      	ldr	r3, [pc, #104]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1f0      	bne.n	8002d52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 80a0 	beq.w	8002ebe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d82:	4b13      	ldr	r3, [pc, #76]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10f      	bne.n	8002dae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	4a0e      	ldr	r2, [pc, #56]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d9e:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <HAL_RCC_OscConfig+0x2ac>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002daa:	2301      	movs	r3, #1
 8002dac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dae:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <HAL_RCC_OscConfig+0x2b8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d121      	bne.n	8002dfe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dba:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <HAL_RCC_OscConfig+0x2b8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a07      	ldr	r2, [pc, #28]	; (8002ddc <HAL_RCC_OscConfig+0x2b8>)
 8002dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dc6:	f7fe fa1b 	bl	8001200 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dcc:	e011      	b.n	8002df2 <HAL_RCC_OscConfig+0x2ce>
 8002dce:	bf00      	nop
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	42470000 	.word	0x42470000
 8002dd8:	42470e80 	.word	0x42470e80
 8002ddc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de0:	f7fe fa0e 	bl	8001200 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e0fd      	b.n	8002fee <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df2:	4b81      	ldr	r3, [pc, #516]	; (8002ff8 <HAL_RCC_OscConfig+0x4d4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d106      	bne.n	8002e14 <HAL_RCC_OscConfig+0x2f0>
 8002e06:	4b7d      	ldr	r3, [pc, #500]	; (8002ffc <HAL_RCC_OscConfig+0x4d8>)
 8002e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0a:	4a7c      	ldr	r2, [pc, #496]	; (8002ffc <HAL_RCC_OscConfig+0x4d8>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	6713      	str	r3, [r2, #112]	; 0x70
 8002e12:	e01c      	b.n	8002e4e <HAL_RCC_OscConfig+0x32a>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b05      	cmp	r3, #5
 8002e1a:	d10c      	bne.n	8002e36 <HAL_RCC_OscConfig+0x312>
 8002e1c:	4b77      	ldr	r3, [pc, #476]	; (8002ffc <HAL_RCC_OscConfig+0x4d8>)
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e20:	4a76      	ldr	r2, [pc, #472]	; (8002ffc <HAL_RCC_OscConfig+0x4d8>)
 8002e22:	f043 0304 	orr.w	r3, r3, #4
 8002e26:	6713      	str	r3, [r2, #112]	; 0x70
 8002e28:	4b74      	ldr	r3, [pc, #464]	; (8002ffc <HAL_RCC_OscConfig+0x4d8>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2c:	4a73      	ldr	r2, [pc, #460]	; (8002ffc <HAL_RCC_OscConfig+0x4d8>)
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	6713      	str	r3, [r2, #112]	; 0x70
 8002e34:	e00b      	b.n	8002e4e <HAL_RCC_OscConfig+0x32a>
 8002e36:	4b71      	ldr	r3, [pc, #452]	; (8002ffc <HAL_RCC_OscConfig+0x4d8>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3a:	4a70      	ldr	r2, [pc, #448]	; (8002ffc <HAL_RCC_OscConfig+0x4d8>)
 8002e3c:	f023 0301 	bic.w	r3, r3, #1
 8002e40:	6713      	str	r3, [r2, #112]	; 0x70
 8002e42:	4b6e      	ldr	r3, [pc, #440]	; (8002ffc <HAL_RCC_OscConfig+0x4d8>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e46:	4a6d      	ldr	r2, [pc, #436]	; (8002ffc <HAL_RCC_OscConfig+0x4d8>)
 8002e48:	f023 0304 	bic.w	r3, r3, #4
 8002e4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d015      	beq.n	8002e82 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e56:	f7fe f9d3 	bl	8001200 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5c:	e00a      	b.n	8002e74 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e5e:	f7fe f9cf 	bl	8001200 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e0bc      	b.n	8002fee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e74:	4b61      	ldr	r3, [pc, #388]	; (8002ffc <HAL_RCC_OscConfig+0x4d8>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0ee      	beq.n	8002e5e <HAL_RCC_OscConfig+0x33a>
 8002e80:	e014      	b.n	8002eac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e82:	f7fe f9bd 	bl	8001200 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e88:	e00a      	b.n	8002ea0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e8a:	f7fe f9b9 	bl	8001200 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e0a6      	b.n	8002fee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea0:	4b56      	ldr	r3, [pc, #344]	; (8002ffc <HAL_RCC_OscConfig+0x4d8>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1ee      	bne.n	8002e8a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eac:	7dfb      	ldrb	r3, [r7, #23]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d105      	bne.n	8002ebe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb2:	4b52      	ldr	r3, [pc, #328]	; (8002ffc <HAL_RCC_OscConfig+0x4d8>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	4a51      	ldr	r2, [pc, #324]	; (8002ffc <HAL_RCC_OscConfig+0x4d8>)
 8002eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ebc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 8092 	beq.w	8002fec <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ec8:	4b4c      	ldr	r3, [pc, #304]	; (8002ffc <HAL_RCC_OscConfig+0x4d8>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 030c 	and.w	r3, r3, #12
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d05c      	beq.n	8002f8e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d141      	bne.n	8002f60 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002edc:	4b48      	ldr	r3, [pc, #288]	; (8003000 <HAL_RCC_OscConfig+0x4dc>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee2:	f7fe f98d 	bl	8001200 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eea:	f7fe f989 	bl	8001200 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e078      	b.n	8002fee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efc:	4b3f      	ldr	r3, [pc, #252]	; (8002ffc <HAL_RCC_OscConfig+0x4d8>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1f0      	bne.n	8002eea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	69da      	ldr	r2, [r3, #28]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	431a      	orrs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	019b      	lsls	r3, r3, #6
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	085b      	lsrs	r3, r3, #1
 8002f20:	3b01      	subs	r3, #1
 8002f22:	041b      	lsls	r3, r3, #16
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2a:	061b      	lsls	r3, r3, #24
 8002f2c:	4933      	ldr	r1, [pc, #204]	; (8002ffc <HAL_RCC_OscConfig+0x4d8>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f32:	4b33      	ldr	r3, [pc, #204]	; (8003000 <HAL_RCC_OscConfig+0x4dc>)
 8002f34:	2201      	movs	r2, #1
 8002f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f38:	f7fe f962 	bl	8001200 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f40:	f7fe f95e 	bl	8001200 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e04d      	b.n	8002fee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f52:	4b2a      	ldr	r3, [pc, #168]	; (8002ffc <HAL_RCC_OscConfig+0x4d8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0x41c>
 8002f5e:	e045      	b.n	8002fec <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f60:	4b27      	ldr	r3, [pc, #156]	; (8003000 <HAL_RCC_OscConfig+0x4dc>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f66:	f7fe f94b 	bl	8001200 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f6e:	f7fe f947 	bl	8001200 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e036      	b.n	8002fee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f80:	4b1e      	ldr	r3, [pc, #120]	; (8002ffc <HAL_RCC_OscConfig+0x4d8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1f0      	bne.n	8002f6e <HAL_RCC_OscConfig+0x44a>
 8002f8c:	e02e      	b.n	8002fec <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e029      	b.n	8002fee <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f9a:	4b18      	ldr	r3, [pc, #96]	; (8002ffc <HAL_RCC_OscConfig+0x4d8>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d11c      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d115      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d10d      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d106      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d001      	beq.n	8002fec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e000      	b.n	8002fee <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40007000 	.word	0x40007000
 8002ffc:	40023800 	.word	0x40023800
 8003000:	42470060 	.word	0x42470060

08003004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e0cc      	b.n	80031b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003018:	4b68      	ldr	r3, [pc, #416]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d90c      	bls.n	8003040 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003026:	4b65      	ldr	r3, [pc, #404]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800302e:	4b63      	ldr	r3, [pc, #396]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	429a      	cmp	r2, r3
 800303a:	d001      	beq.n	8003040 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e0b8      	b.n	80031b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d020      	beq.n	800308e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003058:	4b59      	ldr	r3, [pc, #356]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	4a58      	ldr	r2, [pc, #352]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003062:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003070:	4b53      	ldr	r3, [pc, #332]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	4a52      	ldr	r2, [pc, #328]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800307a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800307c:	4b50      	ldr	r3, [pc, #320]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	494d      	ldr	r1, [pc, #308]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	4313      	orrs	r3, r2
 800308c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d044      	beq.n	8003124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d107      	bne.n	80030b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a2:	4b47      	ldr	r3, [pc, #284]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d119      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e07f      	b.n	80031b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d003      	beq.n	80030c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d107      	bne.n	80030d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c2:	4b3f      	ldr	r3, [pc, #252]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d109      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e06f      	b.n	80031b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d2:	4b3b      	ldr	r3, [pc, #236]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e067      	b.n	80031b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030e2:	4b37      	ldr	r3, [pc, #220]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f023 0203 	bic.w	r2, r3, #3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	4934      	ldr	r1, [pc, #208]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030f4:	f7fe f884 	bl	8001200 <HAL_GetTick>
 80030f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fa:	e00a      	b.n	8003112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030fc:	f7fe f880 	bl	8001200 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	f241 3288 	movw	r2, #5000	; 0x1388
 800310a:	4293      	cmp	r3, r2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e04f      	b.n	80031b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003112:	4b2b      	ldr	r3, [pc, #172]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 020c 	and.w	r2, r3, #12
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	429a      	cmp	r2, r3
 8003122:	d1eb      	bne.n	80030fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003124:	4b25      	ldr	r3, [pc, #148]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 030f 	and.w	r3, r3, #15
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d20c      	bcs.n	800314c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003132:	4b22      	ldr	r3, [pc, #136]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313a:	4b20      	ldr	r3, [pc, #128]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d001      	beq.n	800314c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e032      	b.n	80031b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d008      	beq.n	800316a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003158:	4b19      	ldr	r3, [pc, #100]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	4916      	ldr	r1, [pc, #88]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	4313      	orrs	r3, r2
 8003168:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d009      	beq.n	800318a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003176:	4b12      	ldr	r3, [pc, #72]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	490e      	ldr	r1, [pc, #56]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	4313      	orrs	r3, r2
 8003188:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800318a:	f000 f821 	bl	80031d0 <HAL_RCC_GetSysClockFreq>
 800318e:	4601      	mov	r1, r0
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	091b      	lsrs	r3, r3, #4
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	4a0a      	ldr	r2, [pc, #40]	; (80031c4 <HAL_RCC_ClockConfig+0x1c0>)
 800319c:	5cd3      	ldrb	r3, [r2, r3]
 800319e:	fa21 f303 	lsr.w	r3, r1, r3
 80031a2:	4a09      	ldr	r2, [pc, #36]	; (80031c8 <HAL_RCC_ClockConfig+0x1c4>)
 80031a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031a6:	4b09      	ldr	r3, [pc, #36]	; (80031cc <HAL_RCC_ClockConfig+0x1c8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fd fc42 	bl	8000a34 <HAL_InitTick>

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40023c00 	.word	0x40023c00
 80031c0:	40023800 	.word	0x40023800
 80031c4:	0801cd20 	.word	0x0801cd20
 80031c8:	20000000 	.word	0x20000000
 80031cc:	20000004 	.word	0x20000004

080031d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	607b      	str	r3, [r7, #4]
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	2300      	movs	r3, #0
 80031e0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031e6:	4b63      	ldr	r3, [pc, #396]	; (8003374 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d007      	beq.n	8003202 <HAL_RCC_GetSysClockFreq+0x32>
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d008      	beq.n	8003208 <HAL_RCC_GetSysClockFreq+0x38>
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f040 80b4 	bne.w	8003364 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031fc:	4b5e      	ldr	r3, [pc, #376]	; (8003378 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80031fe:	60bb      	str	r3, [r7, #8]
       break;
 8003200:	e0b3      	b.n	800336a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003202:	4b5e      	ldr	r3, [pc, #376]	; (800337c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003204:	60bb      	str	r3, [r7, #8]
      break;
 8003206:	e0b0      	b.n	800336a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003208:	4b5a      	ldr	r3, [pc, #360]	; (8003374 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003210:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003212:	4b58      	ldr	r3, [pc, #352]	; (8003374 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d04a      	beq.n	80032b4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800321e:	4b55      	ldr	r3, [pc, #340]	; (8003374 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	099b      	lsrs	r3, r3, #6
 8003224:	f04f 0400 	mov.w	r4, #0
 8003228:	f240 11ff 	movw	r1, #511	; 0x1ff
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	ea03 0501 	and.w	r5, r3, r1
 8003234:	ea04 0602 	and.w	r6, r4, r2
 8003238:	4629      	mov	r1, r5
 800323a:	4632      	mov	r2, r6
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	f04f 0400 	mov.w	r4, #0
 8003244:	0154      	lsls	r4, r2, #5
 8003246:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800324a:	014b      	lsls	r3, r1, #5
 800324c:	4619      	mov	r1, r3
 800324e:	4622      	mov	r2, r4
 8003250:	1b49      	subs	r1, r1, r5
 8003252:	eb62 0206 	sbc.w	r2, r2, r6
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	f04f 0400 	mov.w	r4, #0
 800325e:	0194      	lsls	r4, r2, #6
 8003260:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003264:	018b      	lsls	r3, r1, #6
 8003266:	1a5b      	subs	r3, r3, r1
 8003268:	eb64 0402 	sbc.w	r4, r4, r2
 800326c:	f04f 0100 	mov.w	r1, #0
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	00e2      	lsls	r2, r4, #3
 8003276:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800327a:	00d9      	lsls	r1, r3, #3
 800327c:	460b      	mov	r3, r1
 800327e:	4614      	mov	r4, r2
 8003280:	195b      	adds	r3, r3, r5
 8003282:	eb44 0406 	adc.w	r4, r4, r6
 8003286:	f04f 0100 	mov.w	r1, #0
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	0262      	lsls	r2, r4, #9
 8003290:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003294:	0259      	lsls	r1, r3, #9
 8003296:	460b      	mov	r3, r1
 8003298:	4614      	mov	r4, r2
 800329a:	4618      	mov	r0, r3
 800329c:	4621      	mov	r1, r4
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f04f 0400 	mov.w	r4, #0
 80032a4:	461a      	mov	r2, r3
 80032a6:	4623      	mov	r3, r4
 80032a8:	f7fd f80a 	bl	80002c0 <__aeabi_uldivmod>
 80032ac:	4603      	mov	r3, r0
 80032ae:	460c      	mov	r4, r1
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	e049      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b4:	4b2f      	ldr	r3, [pc, #188]	; (8003374 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	099b      	lsrs	r3, r3, #6
 80032ba:	f04f 0400 	mov.w	r4, #0
 80032be:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	ea03 0501 	and.w	r5, r3, r1
 80032ca:	ea04 0602 	and.w	r6, r4, r2
 80032ce:	4629      	mov	r1, r5
 80032d0:	4632      	mov	r2, r6
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	f04f 0400 	mov.w	r4, #0
 80032da:	0154      	lsls	r4, r2, #5
 80032dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032e0:	014b      	lsls	r3, r1, #5
 80032e2:	4619      	mov	r1, r3
 80032e4:	4622      	mov	r2, r4
 80032e6:	1b49      	subs	r1, r1, r5
 80032e8:	eb62 0206 	sbc.w	r2, r2, r6
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	f04f 0400 	mov.w	r4, #0
 80032f4:	0194      	lsls	r4, r2, #6
 80032f6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032fa:	018b      	lsls	r3, r1, #6
 80032fc:	1a5b      	subs	r3, r3, r1
 80032fe:	eb64 0402 	sbc.w	r4, r4, r2
 8003302:	f04f 0100 	mov.w	r1, #0
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	00e2      	lsls	r2, r4, #3
 800330c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003310:	00d9      	lsls	r1, r3, #3
 8003312:	460b      	mov	r3, r1
 8003314:	4614      	mov	r4, r2
 8003316:	195b      	adds	r3, r3, r5
 8003318:	eb44 0406 	adc.w	r4, r4, r6
 800331c:	f04f 0100 	mov.w	r1, #0
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	02a2      	lsls	r2, r4, #10
 8003326:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800332a:	0299      	lsls	r1, r3, #10
 800332c:	460b      	mov	r3, r1
 800332e:	4614      	mov	r4, r2
 8003330:	4618      	mov	r0, r3
 8003332:	4621      	mov	r1, r4
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f04f 0400 	mov.w	r4, #0
 800333a:	461a      	mov	r2, r3
 800333c:	4623      	mov	r3, r4
 800333e:	f7fc ffbf 	bl	80002c0 <__aeabi_uldivmod>
 8003342:	4603      	mov	r3, r0
 8003344:	460c      	mov	r4, r1
 8003346:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003348:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	0c1b      	lsrs	r3, r3, #16
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	3301      	adds	r3, #1
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003360:	60bb      	str	r3, [r7, #8]
      break;
 8003362:	e002      	b.n	800336a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003364:	4b04      	ldr	r3, [pc, #16]	; (8003378 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003366:	60bb      	str	r3, [r7, #8]
      break;
 8003368:	bf00      	nop
    }
  }
  return sysclockfreq;
 800336a:	68bb      	ldr	r3, [r7, #8]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003374:	40023800 	.word	0x40023800
 8003378:	00f42400 	.word	0x00f42400
 800337c:	007a1200 	.word	0x007a1200

08003380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003384:	4b03      	ldr	r3, [pc, #12]	; (8003394 <HAL_RCC_GetHCLKFreq+0x14>)
 8003386:	681b      	ldr	r3, [r3, #0]
}
 8003388:	4618      	mov	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20000000 	.word	0x20000000

08003398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800339c:	f7ff fff0 	bl	8003380 <HAL_RCC_GetHCLKFreq>
 80033a0:	4601      	mov	r1, r0
 80033a2:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	0a9b      	lsrs	r3, r3, #10
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	4a03      	ldr	r2, [pc, #12]	; (80033bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ae:	5cd3      	ldrb	r3, [r2, r3]
 80033b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40023800 	.word	0x40023800
 80033bc:	0801cd30 	.word	0x0801cd30

080033c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033c4:	f7ff ffdc 	bl	8003380 <HAL_RCC_GetHCLKFreq>
 80033c8:	4601      	mov	r1, r0
 80033ca:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	0b5b      	lsrs	r3, r3, #13
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	4a03      	ldr	r2, [pc, #12]	; (80033e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033d6:	5cd3      	ldrb	r3, [r2, r3]
 80033d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40023800 	.word	0x40023800
 80033e4:	0801cd30 	.word	0x0801cd30

080033e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	220f      	movs	r2, #15
 80033f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033f8:	4b12      	ldr	r3, [pc, #72]	; (8003444 <HAL_RCC_GetClockConfig+0x5c>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 0203 	and.w	r2, r3, #3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003404:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <HAL_RCC_GetClockConfig+0x5c>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003410:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <HAL_RCC_GetClockConfig+0x5c>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800341c:	4b09      	ldr	r3, [pc, #36]	; (8003444 <HAL_RCC_GetClockConfig+0x5c>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	08db      	lsrs	r3, r3, #3
 8003422:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800342a:	4b07      	ldr	r3, [pc, #28]	; (8003448 <HAL_RCC_GetClockConfig+0x60>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 020f 	and.w	r2, r3, #15
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	601a      	str	r2, [r3, #0]
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	40023800 	.word	0x40023800
 8003448:	40023c00 	.word	0x40023c00

0800344c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e01d      	b.n	800349a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d106      	bne.n	8003478 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f815 	bl	80034a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3304      	adds	r3, #4
 8003488:	4619      	mov	r1, r3
 800348a:	4610      	mov	r0, r2
 800348c:	f000 f968 	bl	8003760 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b085      	sub	sp, #20
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 0201 	orr.w	r2, r2, #1
 80034cc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b06      	cmp	r3, #6
 80034de:	d007      	beq.n	80034f0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b02      	cmp	r3, #2
 8003512:	d122      	bne.n	800355a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b02      	cmp	r3, #2
 8003520:	d11b      	bne.n	800355a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f06f 0202 	mvn.w	r2, #2
 800352a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f8ee 	bl	8003722 <HAL_TIM_IC_CaptureCallback>
 8003546:	e005      	b.n	8003554 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f8e0 	bl	800370e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f8f1 	bl	8003736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b04      	cmp	r3, #4
 8003566:	d122      	bne.n	80035ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f003 0304 	and.w	r3, r3, #4
 8003572:	2b04      	cmp	r3, #4
 8003574:	d11b      	bne.n	80035ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f06f 0204 	mvn.w	r2, #4
 800357e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f8c4 	bl	8003722 <HAL_TIM_IC_CaptureCallback>
 800359a:	e005      	b.n	80035a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f8b6 	bl	800370e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f8c7 	bl	8003736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d122      	bne.n	8003602 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d11b      	bne.n	8003602 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f06f 0208 	mvn.w	r2, #8
 80035d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2204      	movs	r2, #4
 80035d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	f003 0303 	and.w	r3, r3, #3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f89a 	bl	8003722 <HAL_TIM_IC_CaptureCallback>
 80035ee:	e005      	b.n	80035fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f88c 	bl	800370e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f89d 	bl	8003736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	f003 0310 	and.w	r3, r3, #16
 800360c:	2b10      	cmp	r3, #16
 800360e:	d122      	bne.n	8003656 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f003 0310 	and.w	r3, r3, #16
 800361a:	2b10      	cmp	r3, #16
 800361c:	d11b      	bne.n	8003656 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f06f 0210 	mvn.w	r2, #16
 8003626:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2208      	movs	r2, #8
 800362c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f870 	bl	8003722 <HAL_TIM_IC_CaptureCallback>
 8003642:	e005      	b.n	8003650 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f862 	bl	800370e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f873 	bl	8003736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b01      	cmp	r3, #1
 8003662:	d10e      	bne.n	8003682 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b01      	cmp	r3, #1
 8003670:	d107      	bne.n	8003682 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f06f 0201 	mvn.w	r2, #1
 800367a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7fd f94f 	bl	8000920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368c:	2b80      	cmp	r3, #128	; 0x80
 800368e:	d10e      	bne.n	80036ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369a:	2b80      	cmp	r3, #128	; 0x80
 800369c:	d107      	bne.n	80036ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f903 	bl	80038b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b8:	2b40      	cmp	r3, #64	; 0x40
 80036ba:	d10e      	bne.n	80036da <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c6:	2b40      	cmp	r3, #64	; 0x40
 80036c8:	d107      	bne.n	80036da <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f838 	bl	800374a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	f003 0320 	and.w	r3, r3, #32
 80036e4:	2b20      	cmp	r3, #32
 80036e6:	d10e      	bne.n	8003706 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b20      	cmp	r3, #32
 80036f4:	d107      	bne.n	8003706 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f06f 0220 	mvn.w	r2, #32
 80036fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f8cd 	bl	80038a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
	...

08003760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a40      	ldr	r2, [pc, #256]	; (8003874 <TIM_Base_SetConfig+0x114>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d013      	beq.n	80037a0 <TIM_Base_SetConfig+0x40>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800377e:	d00f      	beq.n	80037a0 <TIM_Base_SetConfig+0x40>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a3d      	ldr	r2, [pc, #244]	; (8003878 <TIM_Base_SetConfig+0x118>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d00b      	beq.n	80037a0 <TIM_Base_SetConfig+0x40>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a3c      	ldr	r2, [pc, #240]	; (800387c <TIM_Base_SetConfig+0x11c>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d007      	beq.n	80037a0 <TIM_Base_SetConfig+0x40>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a3b      	ldr	r2, [pc, #236]	; (8003880 <TIM_Base_SetConfig+0x120>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d003      	beq.n	80037a0 <TIM_Base_SetConfig+0x40>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a3a      	ldr	r2, [pc, #232]	; (8003884 <TIM_Base_SetConfig+0x124>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d108      	bne.n	80037b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a2f      	ldr	r2, [pc, #188]	; (8003874 <TIM_Base_SetConfig+0x114>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d02b      	beq.n	8003812 <TIM_Base_SetConfig+0xb2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c0:	d027      	beq.n	8003812 <TIM_Base_SetConfig+0xb2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a2c      	ldr	r2, [pc, #176]	; (8003878 <TIM_Base_SetConfig+0x118>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d023      	beq.n	8003812 <TIM_Base_SetConfig+0xb2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a2b      	ldr	r2, [pc, #172]	; (800387c <TIM_Base_SetConfig+0x11c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d01f      	beq.n	8003812 <TIM_Base_SetConfig+0xb2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a2a      	ldr	r2, [pc, #168]	; (8003880 <TIM_Base_SetConfig+0x120>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d01b      	beq.n	8003812 <TIM_Base_SetConfig+0xb2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a29      	ldr	r2, [pc, #164]	; (8003884 <TIM_Base_SetConfig+0x124>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d017      	beq.n	8003812 <TIM_Base_SetConfig+0xb2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a28      	ldr	r2, [pc, #160]	; (8003888 <TIM_Base_SetConfig+0x128>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d013      	beq.n	8003812 <TIM_Base_SetConfig+0xb2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a27      	ldr	r2, [pc, #156]	; (800388c <TIM_Base_SetConfig+0x12c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d00f      	beq.n	8003812 <TIM_Base_SetConfig+0xb2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a26      	ldr	r2, [pc, #152]	; (8003890 <TIM_Base_SetConfig+0x130>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d00b      	beq.n	8003812 <TIM_Base_SetConfig+0xb2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a25      	ldr	r2, [pc, #148]	; (8003894 <TIM_Base_SetConfig+0x134>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d007      	beq.n	8003812 <TIM_Base_SetConfig+0xb2>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a24      	ldr	r2, [pc, #144]	; (8003898 <TIM_Base_SetConfig+0x138>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d003      	beq.n	8003812 <TIM_Base_SetConfig+0xb2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a23      	ldr	r2, [pc, #140]	; (800389c <TIM_Base_SetConfig+0x13c>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d108      	bne.n	8003824 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	4313      	orrs	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	4313      	orrs	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a0a      	ldr	r2, [pc, #40]	; (8003874 <TIM_Base_SetConfig+0x114>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d003      	beq.n	8003858 <TIM_Base_SetConfig+0xf8>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a0c      	ldr	r2, [pc, #48]	; (8003884 <TIM_Base_SetConfig+0x124>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d103      	bne.n	8003860 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	615a      	str	r2, [r3, #20]
}
 8003866:	bf00      	nop
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40010000 	.word	0x40010000
 8003878:	40000400 	.word	0x40000400
 800387c:	40000800 	.word	0x40000800
 8003880:	40000c00 	.word	0x40000c00
 8003884:	40010400 	.word	0x40010400
 8003888:	40014000 	.word	0x40014000
 800388c:	40014400 	.word	0x40014400
 8003890:	40014800 	.word	0x40014800
 8003894:	40001800 	.word	0x40001800
 8003898:	40001c00 	.word	0x40001c00
 800389c:	40002000 	.word	0x40002000

080038a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e03f      	b.n	800395a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fd f858 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2224      	movs	r2, #36	; 0x24
 80038f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800390a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f829 	bl	8003964 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003920:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695a      	ldr	r2, [r3, #20]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003930:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003940:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003968:	b085      	sub	sp, #20
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	431a      	orrs	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	4313      	orrs	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80039a6:	f023 030c 	bic.w	r3, r3, #12
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6812      	ldr	r2, [r2, #0]
 80039ae:	68f9      	ldr	r1, [r7, #12]
 80039b0:	430b      	orrs	r3, r1
 80039b2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699a      	ldr	r2, [r3, #24]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d2:	f040 818b 	bne.w	8003cec <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4ac1      	ldr	r2, [pc, #772]	; (8003ce0 <UART_SetConfig+0x37c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d005      	beq.n	80039ec <UART_SetConfig+0x88>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4abf      	ldr	r2, [pc, #764]	; (8003ce4 <UART_SetConfig+0x380>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	f040 80bd 	bne.w	8003b66 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039ec:	f7ff fce8 	bl	80033c0 <HAL_RCC_GetPCLK2Freq>
 80039f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	461d      	mov	r5, r3
 80039f6:	f04f 0600 	mov.w	r6, #0
 80039fa:	46a8      	mov	r8, r5
 80039fc:	46b1      	mov	r9, r6
 80039fe:	eb18 0308 	adds.w	r3, r8, r8
 8003a02:	eb49 0409 	adc.w	r4, r9, r9
 8003a06:	4698      	mov	r8, r3
 8003a08:	46a1      	mov	r9, r4
 8003a0a:	eb18 0805 	adds.w	r8, r8, r5
 8003a0e:	eb49 0906 	adc.w	r9, r9, r6
 8003a12:	f04f 0100 	mov.w	r1, #0
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a1e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a22:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a26:	4688      	mov	r8, r1
 8003a28:	4691      	mov	r9, r2
 8003a2a:	eb18 0005 	adds.w	r0, r8, r5
 8003a2e:	eb49 0106 	adc.w	r1, r9, r6
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	461d      	mov	r5, r3
 8003a38:	f04f 0600 	mov.w	r6, #0
 8003a3c:	196b      	adds	r3, r5, r5
 8003a3e:	eb46 0406 	adc.w	r4, r6, r6
 8003a42:	461a      	mov	r2, r3
 8003a44:	4623      	mov	r3, r4
 8003a46:	f7fc fc3b 	bl	80002c0 <__aeabi_uldivmod>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	460c      	mov	r4, r1
 8003a4e:	461a      	mov	r2, r3
 8003a50:	4ba5      	ldr	r3, [pc, #660]	; (8003ce8 <UART_SetConfig+0x384>)
 8003a52:	fba3 2302 	umull	r2, r3, r3, r2
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	461d      	mov	r5, r3
 8003a60:	f04f 0600 	mov.w	r6, #0
 8003a64:	46a9      	mov	r9, r5
 8003a66:	46b2      	mov	sl, r6
 8003a68:	eb19 0309 	adds.w	r3, r9, r9
 8003a6c:	eb4a 040a 	adc.w	r4, sl, sl
 8003a70:	4699      	mov	r9, r3
 8003a72:	46a2      	mov	sl, r4
 8003a74:	eb19 0905 	adds.w	r9, r9, r5
 8003a78:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a7c:	f04f 0100 	mov.w	r1, #0
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a90:	4689      	mov	r9, r1
 8003a92:	4692      	mov	sl, r2
 8003a94:	eb19 0005 	adds.w	r0, r9, r5
 8003a98:	eb4a 0106 	adc.w	r1, sl, r6
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	461d      	mov	r5, r3
 8003aa2:	f04f 0600 	mov.w	r6, #0
 8003aa6:	196b      	adds	r3, r5, r5
 8003aa8:	eb46 0406 	adc.w	r4, r6, r6
 8003aac:	461a      	mov	r2, r3
 8003aae:	4623      	mov	r3, r4
 8003ab0:	f7fc fc06 	bl	80002c0 <__aeabi_uldivmod>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	460c      	mov	r4, r1
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4b8b      	ldr	r3, [pc, #556]	; (8003ce8 <UART_SetConfig+0x384>)
 8003abc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ac0:	095b      	lsrs	r3, r3, #5
 8003ac2:	2164      	movs	r1, #100	; 0x64
 8003ac4:	fb01 f303 	mul.w	r3, r1, r3
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	3332      	adds	r3, #50	; 0x32
 8003ace:	4a86      	ldr	r2, [pc, #536]	; (8003ce8 <UART_SetConfig+0x384>)
 8003ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad4:	095b      	lsrs	r3, r3, #5
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003adc:	4498      	add	r8, r3
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	461d      	mov	r5, r3
 8003ae2:	f04f 0600 	mov.w	r6, #0
 8003ae6:	46a9      	mov	r9, r5
 8003ae8:	46b2      	mov	sl, r6
 8003aea:	eb19 0309 	adds.w	r3, r9, r9
 8003aee:	eb4a 040a 	adc.w	r4, sl, sl
 8003af2:	4699      	mov	r9, r3
 8003af4:	46a2      	mov	sl, r4
 8003af6:	eb19 0905 	adds.w	r9, r9, r5
 8003afa:	eb4a 0a06 	adc.w	sl, sl, r6
 8003afe:	f04f 0100 	mov.w	r1, #0
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b12:	4689      	mov	r9, r1
 8003b14:	4692      	mov	sl, r2
 8003b16:	eb19 0005 	adds.w	r0, r9, r5
 8003b1a:	eb4a 0106 	adc.w	r1, sl, r6
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	461d      	mov	r5, r3
 8003b24:	f04f 0600 	mov.w	r6, #0
 8003b28:	196b      	adds	r3, r5, r5
 8003b2a:	eb46 0406 	adc.w	r4, r6, r6
 8003b2e:	461a      	mov	r2, r3
 8003b30:	4623      	mov	r3, r4
 8003b32:	f7fc fbc5 	bl	80002c0 <__aeabi_uldivmod>
 8003b36:	4603      	mov	r3, r0
 8003b38:	460c      	mov	r4, r1
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	4b6a      	ldr	r3, [pc, #424]	; (8003ce8 <UART_SetConfig+0x384>)
 8003b3e:	fba3 1302 	umull	r1, r3, r3, r2
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	2164      	movs	r1, #100	; 0x64
 8003b46:	fb01 f303 	mul.w	r3, r1, r3
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	3332      	adds	r3, #50	; 0x32
 8003b50:	4a65      	ldr	r2, [pc, #404]	; (8003ce8 <UART_SetConfig+0x384>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	f003 0207 	and.w	r2, r3, #7
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4442      	add	r2, r8
 8003b62:	609a      	str	r2, [r3, #8]
 8003b64:	e26f      	b.n	8004046 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b66:	f7ff fc17 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 8003b6a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	461d      	mov	r5, r3
 8003b70:	f04f 0600 	mov.w	r6, #0
 8003b74:	46a8      	mov	r8, r5
 8003b76:	46b1      	mov	r9, r6
 8003b78:	eb18 0308 	adds.w	r3, r8, r8
 8003b7c:	eb49 0409 	adc.w	r4, r9, r9
 8003b80:	4698      	mov	r8, r3
 8003b82:	46a1      	mov	r9, r4
 8003b84:	eb18 0805 	adds.w	r8, r8, r5
 8003b88:	eb49 0906 	adc.w	r9, r9, r6
 8003b8c:	f04f 0100 	mov.w	r1, #0
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b98:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b9c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ba0:	4688      	mov	r8, r1
 8003ba2:	4691      	mov	r9, r2
 8003ba4:	eb18 0005 	adds.w	r0, r8, r5
 8003ba8:	eb49 0106 	adc.w	r1, r9, r6
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	461d      	mov	r5, r3
 8003bb2:	f04f 0600 	mov.w	r6, #0
 8003bb6:	196b      	adds	r3, r5, r5
 8003bb8:	eb46 0406 	adc.w	r4, r6, r6
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4623      	mov	r3, r4
 8003bc0:	f7fc fb7e 	bl	80002c0 <__aeabi_uldivmod>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	460c      	mov	r4, r1
 8003bc8:	461a      	mov	r2, r3
 8003bca:	4b47      	ldr	r3, [pc, #284]	; (8003ce8 <UART_SetConfig+0x384>)
 8003bcc:	fba3 2302 	umull	r2, r3, r3, r2
 8003bd0:	095b      	lsrs	r3, r3, #5
 8003bd2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	461d      	mov	r5, r3
 8003bda:	f04f 0600 	mov.w	r6, #0
 8003bde:	46a9      	mov	r9, r5
 8003be0:	46b2      	mov	sl, r6
 8003be2:	eb19 0309 	adds.w	r3, r9, r9
 8003be6:	eb4a 040a 	adc.w	r4, sl, sl
 8003bea:	4699      	mov	r9, r3
 8003bec:	46a2      	mov	sl, r4
 8003bee:	eb19 0905 	adds.w	r9, r9, r5
 8003bf2:	eb4a 0a06 	adc.w	sl, sl, r6
 8003bf6:	f04f 0100 	mov.w	r1, #0
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c0a:	4689      	mov	r9, r1
 8003c0c:	4692      	mov	sl, r2
 8003c0e:	eb19 0005 	adds.w	r0, r9, r5
 8003c12:	eb4a 0106 	adc.w	r1, sl, r6
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	461d      	mov	r5, r3
 8003c1c:	f04f 0600 	mov.w	r6, #0
 8003c20:	196b      	adds	r3, r5, r5
 8003c22:	eb46 0406 	adc.w	r4, r6, r6
 8003c26:	461a      	mov	r2, r3
 8003c28:	4623      	mov	r3, r4
 8003c2a:	f7fc fb49 	bl	80002c0 <__aeabi_uldivmod>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	460c      	mov	r4, r1
 8003c32:	461a      	mov	r2, r3
 8003c34:	4b2c      	ldr	r3, [pc, #176]	; (8003ce8 <UART_SetConfig+0x384>)
 8003c36:	fba3 1302 	umull	r1, r3, r3, r2
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	2164      	movs	r1, #100	; 0x64
 8003c3e:	fb01 f303 	mul.w	r3, r1, r3
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	3332      	adds	r3, #50	; 0x32
 8003c48:	4a27      	ldr	r2, [pc, #156]	; (8003ce8 <UART_SetConfig+0x384>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c56:	4498      	add	r8, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	461d      	mov	r5, r3
 8003c5c:	f04f 0600 	mov.w	r6, #0
 8003c60:	46a9      	mov	r9, r5
 8003c62:	46b2      	mov	sl, r6
 8003c64:	eb19 0309 	adds.w	r3, r9, r9
 8003c68:	eb4a 040a 	adc.w	r4, sl, sl
 8003c6c:	4699      	mov	r9, r3
 8003c6e:	46a2      	mov	sl, r4
 8003c70:	eb19 0905 	adds.w	r9, r9, r5
 8003c74:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c78:	f04f 0100 	mov.w	r1, #0
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c8c:	4689      	mov	r9, r1
 8003c8e:	4692      	mov	sl, r2
 8003c90:	eb19 0005 	adds.w	r0, r9, r5
 8003c94:	eb4a 0106 	adc.w	r1, sl, r6
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	461d      	mov	r5, r3
 8003c9e:	f04f 0600 	mov.w	r6, #0
 8003ca2:	196b      	adds	r3, r5, r5
 8003ca4:	eb46 0406 	adc.w	r4, r6, r6
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4623      	mov	r3, r4
 8003cac:	f7fc fb08 	bl	80002c0 <__aeabi_uldivmod>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <UART_SetConfig+0x384>)
 8003cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cbc:	095b      	lsrs	r3, r3, #5
 8003cbe:	2164      	movs	r1, #100	; 0x64
 8003cc0:	fb01 f303 	mul.w	r3, r1, r3
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	3332      	adds	r3, #50	; 0x32
 8003cca:	4a07      	ldr	r2, [pc, #28]	; (8003ce8 <UART_SetConfig+0x384>)
 8003ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd0:	095b      	lsrs	r3, r3, #5
 8003cd2:	f003 0207 	and.w	r2, r3, #7
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4442      	add	r2, r8
 8003cdc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003cde:	e1b2      	b.n	8004046 <UART_SetConfig+0x6e2>
 8003ce0:	40011000 	.word	0x40011000
 8003ce4:	40011400 	.word	0x40011400
 8003ce8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4ad7      	ldr	r2, [pc, #860]	; (8004050 <UART_SetConfig+0x6ec>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d005      	beq.n	8003d02 <UART_SetConfig+0x39e>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4ad6      	ldr	r2, [pc, #856]	; (8004054 <UART_SetConfig+0x6f0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	f040 80d1 	bne.w	8003ea4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d02:	f7ff fb5d 	bl	80033c0 <HAL_RCC_GetPCLK2Freq>
 8003d06:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	469a      	mov	sl, r3
 8003d0c:	f04f 0b00 	mov.w	fp, #0
 8003d10:	46d0      	mov	r8, sl
 8003d12:	46d9      	mov	r9, fp
 8003d14:	eb18 0308 	adds.w	r3, r8, r8
 8003d18:	eb49 0409 	adc.w	r4, r9, r9
 8003d1c:	4698      	mov	r8, r3
 8003d1e:	46a1      	mov	r9, r4
 8003d20:	eb18 080a 	adds.w	r8, r8, sl
 8003d24:	eb49 090b 	adc.w	r9, r9, fp
 8003d28:	f04f 0100 	mov.w	r1, #0
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d34:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d38:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d3c:	4688      	mov	r8, r1
 8003d3e:	4691      	mov	r9, r2
 8003d40:	eb1a 0508 	adds.w	r5, sl, r8
 8003d44:	eb4b 0609 	adc.w	r6, fp, r9
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f04f 0200 	mov.w	r2, #0
 8003d52:	f04f 0300 	mov.w	r3, #0
 8003d56:	f04f 0400 	mov.w	r4, #0
 8003d5a:	0094      	lsls	r4, r2, #2
 8003d5c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d60:	008b      	lsls	r3, r1, #2
 8003d62:	461a      	mov	r2, r3
 8003d64:	4623      	mov	r3, r4
 8003d66:	4628      	mov	r0, r5
 8003d68:	4631      	mov	r1, r6
 8003d6a:	f7fc faa9 	bl	80002c0 <__aeabi_uldivmod>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	460c      	mov	r4, r1
 8003d72:	461a      	mov	r2, r3
 8003d74:	4bb8      	ldr	r3, [pc, #736]	; (8004058 <UART_SetConfig+0x6f4>)
 8003d76:	fba3 2302 	umull	r2, r3, r3, r2
 8003d7a:	095b      	lsrs	r3, r3, #5
 8003d7c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	469b      	mov	fp, r3
 8003d84:	f04f 0c00 	mov.w	ip, #0
 8003d88:	46d9      	mov	r9, fp
 8003d8a:	46e2      	mov	sl, ip
 8003d8c:	eb19 0309 	adds.w	r3, r9, r9
 8003d90:	eb4a 040a 	adc.w	r4, sl, sl
 8003d94:	4699      	mov	r9, r3
 8003d96:	46a2      	mov	sl, r4
 8003d98:	eb19 090b 	adds.w	r9, r9, fp
 8003d9c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003da0:	f04f 0100 	mov.w	r1, #0
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003db0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003db4:	4689      	mov	r9, r1
 8003db6:	4692      	mov	sl, r2
 8003db8:	eb1b 0509 	adds.w	r5, fp, r9
 8003dbc:	eb4c 060a 	adc.w	r6, ip, sl
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	f04f 0300 	mov.w	r3, #0
 8003dce:	f04f 0400 	mov.w	r4, #0
 8003dd2:	0094      	lsls	r4, r2, #2
 8003dd4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003dd8:	008b      	lsls	r3, r1, #2
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4623      	mov	r3, r4
 8003dde:	4628      	mov	r0, r5
 8003de0:	4631      	mov	r1, r6
 8003de2:	f7fc fa6d 	bl	80002c0 <__aeabi_uldivmod>
 8003de6:	4603      	mov	r3, r0
 8003de8:	460c      	mov	r4, r1
 8003dea:	461a      	mov	r2, r3
 8003dec:	4b9a      	ldr	r3, [pc, #616]	; (8004058 <UART_SetConfig+0x6f4>)
 8003dee:	fba3 1302 	umull	r1, r3, r3, r2
 8003df2:	095b      	lsrs	r3, r3, #5
 8003df4:	2164      	movs	r1, #100	; 0x64
 8003df6:	fb01 f303 	mul.w	r3, r1, r3
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	3332      	adds	r3, #50	; 0x32
 8003e00:	4a95      	ldr	r2, [pc, #596]	; (8004058 <UART_SetConfig+0x6f4>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e0c:	4498      	add	r8, r3
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	469b      	mov	fp, r3
 8003e12:	f04f 0c00 	mov.w	ip, #0
 8003e16:	46d9      	mov	r9, fp
 8003e18:	46e2      	mov	sl, ip
 8003e1a:	eb19 0309 	adds.w	r3, r9, r9
 8003e1e:	eb4a 040a 	adc.w	r4, sl, sl
 8003e22:	4699      	mov	r9, r3
 8003e24:	46a2      	mov	sl, r4
 8003e26:	eb19 090b 	adds.w	r9, r9, fp
 8003e2a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e2e:	f04f 0100 	mov.w	r1, #0
 8003e32:	f04f 0200 	mov.w	r2, #0
 8003e36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e42:	4689      	mov	r9, r1
 8003e44:	4692      	mov	sl, r2
 8003e46:	eb1b 0509 	adds.w	r5, fp, r9
 8003e4a:	eb4c 060a 	adc.w	r6, ip, sl
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	4619      	mov	r1, r3
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	f04f 0400 	mov.w	r4, #0
 8003e60:	0094      	lsls	r4, r2, #2
 8003e62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e66:	008b      	lsls	r3, r1, #2
 8003e68:	461a      	mov	r2, r3
 8003e6a:	4623      	mov	r3, r4
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	4631      	mov	r1, r6
 8003e70:	f7fc fa26 	bl	80002c0 <__aeabi_uldivmod>
 8003e74:	4603      	mov	r3, r0
 8003e76:	460c      	mov	r4, r1
 8003e78:	461a      	mov	r2, r3
 8003e7a:	4b77      	ldr	r3, [pc, #476]	; (8004058 <UART_SetConfig+0x6f4>)
 8003e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e80:	095b      	lsrs	r3, r3, #5
 8003e82:	2164      	movs	r1, #100	; 0x64
 8003e84:	fb01 f303 	mul.w	r3, r1, r3
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	3332      	adds	r3, #50	; 0x32
 8003e8e:	4a72      	ldr	r2, [pc, #456]	; (8004058 <UART_SetConfig+0x6f4>)
 8003e90:	fba2 2303 	umull	r2, r3, r2, r3
 8003e94:	095b      	lsrs	r3, r3, #5
 8003e96:	f003 020f 	and.w	r2, r3, #15
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4442      	add	r2, r8
 8003ea0:	609a      	str	r2, [r3, #8]
 8003ea2:	e0d0      	b.n	8004046 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ea4:	f7ff fa78 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 8003ea8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	469a      	mov	sl, r3
 8003eae:	f04f 0b00 	mov.w	fp, #0
 8003eb2:	46d0      	mov	r8, sl
 8003eb4:	46d9      	mov	r9, fp
 8003eb6:	eb18 0308 	adds.w	r3, r8, r8
 8003eba:	eb49 0409 	adc.w	r4, r9, r9
 8003ebe:	4698      	mov	r8, r3
 8003ec0:	46a1      	mov	r9, r4
 8003ec2:	eb18 080a 	adds.w	r8, r8, sl
 8003ec6:	eb49 090b 	adc.w	r9, r9, fp
 8003eca:	f04f 0100 	mov.w	r1, #0
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ed6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003eda:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ede:	4688      	mov	r8, r1
 8003ee0:	4691      	mov	r9, r2
 8003ee2:	eb1a 0508 	adds.w	r5, sl, r8
 8003ee6:	eb4b 0609 	adc.w	r6, fp, r9
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	4619      	mov	r1, r3
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	f04f 0400 	mov.w	r4, #0
 8003efc:	0094      	lsls	r4, r2, #2
 8003efe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f02:	008b      	lsls	r3, r1, #2
 8003f04:	461a      	mov	r2, r3
 8003f06:	4623      	mov	r3, r4
 8003f08:	4628      	mov	r0, r5
 8003f0a:	4631      	mov	r1, r6
 8003f0c:	f7fc f9d8 	bl	80002c0 <__aeabi_uldivmod>
 8003f10:	4603      	mov	r3, r0
 8003f12:	460c      	mov	r4, r1
 8003f14:	461a      	mov	r2, r3
 8003f16:	4b50      	ldr	r3, [pc, #320]	; (8004058 <UART_SetConfig+0x6f4>)
 8003f18:	fba3 2302 	umull	r2, r3, r3, r2
 8003f1c:	095b      	lsrs	r3, r3, #5
 8003f1e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	469b      	mov	fp, r3
 8003f26:	f04f 0c00 	mov.w	ip, #0
 8003f2a:	46d9      	mov	r9, fp
 8003f2c:	46e2      	mov	sl, ip
 8003f2e:	eb19 0309 	adds.w	r3, r9, r9
 8003f32:	eb4a 040a 	adc.w	r4, sl, sl
 8003f36:	4699      	mov	r9, r3
 8003f38:	46a2      	mov	sl, r4
 8003f3a:	eb19 090b 	adds.w	r9, r9, fp
 8003f3e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f42:	f04f 0100 	mov.w	r1, #0
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f4e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f52:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f56:	4689      	mov	r9, r1
 8003f58:	4692      	mov	sl, r2
 8003f5a:	eb1b 0509 	adds.w	r5, fp, r9
 8003f5e:	eb4c 060a 	adc.w	r6, ip, sl
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	4619      	mov	r1, r3
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	f04f 0400 	mov.w	r4, #0
 8003f74:	0094      	lsls	r4, r2, #2
 8003f76:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f7a:	008b      	lsls	r3, r1, #2
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4623      	mov	r3, r4
 8003f80:	4628      	mov	r0, r5
 8003f82:	4631      	mov	r1, r6
 8003f84:	f7fc f99c 	bl	80002c0 <__aeabi_uldivmod>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	460c      	mov	r4, r1
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	4b32      	ldr	r3, [pc, #200]	; (8004058 <UART_SetConfig+0x6f4>)
 8003f90:	fba3 1302 	umull	r1, r3, r3, r2
 8003f94:	095b      	lsrs	r3, r3, #5
 8003f96:	2164      	movs	r1, #100	; 0x64
 8003f98:	fb01 f303 	mul.w	r3, r1, r3
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	3332      	adds	r3, #50	; 0x32
 8003fa2:	4a2d      	ldr	r2, [pc, #180]	; (8004058 <UART_SetConfig+0x6f4>)
 8003fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa8:	095b      	lsrs	r3, r3, #5
 8003faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fae:	4498      	add	r8, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	469b      	mov	fp, r3
 8003fb4:	f04f 0c00 	mov.w	ip, #0
 8003fb8:	46d9      	mov	r9, fp
 8003fba:	46e2      	mov	sl, ip
 8003fbc:	eb19 0309 	adds.w	r3, r9, r9
 8003fc0:	eb4a 040a 	adc.w	r4, sl, sl
 8003fc4:	4699      	mov	r9, r3
 8003fc6:	46a2      	mov	sl, r4
 8003fc8:	eb19 090b 	adds.w	r9, r9, fp
 8003fcc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fd0:	f04f 0100 	mov.w	r1, #0
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fdc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fe0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fe4:	4689      	mov	r9, r1
 8003fe6:	4692      	mov	sl, r2
 8003fe8:	eb1b 0509 	adds.w	r5, fp, r9
 8003fec:	eb4c 060a 	adc.w	r6, ip, sl
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	f04f 0400 	mov.w	r4, #0
 8004002:	0094      	lsls	r4, r2, #2
 8004004:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004008:	008b      	lsls	r3, r1, #2
 800400a:	461a      	mov	r2, r3
 800400c:	4623      	mov	r3, r4
 800400e:	4628      	mov	r0, r5
 8004010:	4631      	mov	r1, r6
 8004012:	f7fc f955 	bl	80002c0 <__aeabi_uldivmod>
 8004016:	4603      	mov	r3, r0
 8004018:	460c      	mov	r4, r1
 800401a:	461a      	mov	r2, r3
 800401c:	4b0e      	ldr	r3, [pc, #56]	; (8004058 <UART_SetConfig+0x6f4>)
 800401e:	fba3 1302 	umull	r1, r3, r3, r2
 8004022:	095b      	lsrs	r3, r3, #5
 8004024:	2164      	movs	r1, #100	; 0x64
 8004026:	fb01 f303 	mul.w	r3, r1, r3
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	3332      	adds	r3, #50	; 0x32
 8004030:	4a09      	ldr	r2, [pc, #36]	; (8004058 <UART_SetConfig+0x6f4>)
 8004032:	fba2 2303 	umull	r2, r3, r2, r3
 8004036:	095b      	lsrs	r3, r3, #5
 8004038:	f003 020f 	and.w	r2, r3, #15
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4442      	add	r2, r8
 8004042:	609a      	str	r2, [r3, #8]
}
 8004044:	e7ff      	b.n	8004046 <UART_SetConfig+0x6e2>
 8004046:	bf00      	nop
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004050:	40011000 	.word	0x40011000
 8004054:	40011400 	.word	0x40011400
 8004058:	51eb851f 	.word	0x51eb851f

0800405c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800405c:	b5b0      	push	{r4, r5, r7, lr}
 800405e:	b08e      	sub	sp, #56	; 0x38
 8004060:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004062:	2100      	movs	r1, #0
 8004064:	2000      	movs	r0, #0
 8004066:	f005 fee5 	bl	8009e34 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800406a:	4b2a      	ldr	r3, [pc, #168]	; (8004114 <MX_LWIP_Init+0xb8>)
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004070:	4b29      	ldr	r3, [pc, #164]	; (8004118 <MX_LWIP_Init+0xbc>)
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8004076:	4b29      	ldr	r3, [pc, #164]	; (800411c <MX_LWIP_Init+0xc0>)
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800407c:	4b28      	ldr	r3, [pc, #160]	; (8004120 <MX_LWIP_Init+0xc4>)
 800407e:	9302      	str	r3, [sp, #8]
 8004080:	4b28      	ldr	r3, [pc, #160]	; (8004124 <MX_LWIP_Init+0xc8>)
 8004082:	9301      	str	r3, [sp, #4]
 8004084:	2300      	movs	r3, #0
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	4b24      	ldr	r3, [pc, #144]	; (800411c <MX_LWIP_Init+0xc0>)
 800408a:	4a23      	ldr	r2, [pc, #140]	; (8004118 <MX_LWIP_Init+0xbc>)
 800408c:	4921      	ldr	r1, [pc, #132]	; (8004114 <MX_LWIP_Init+0xb8>)
 800408e:	4826      	ldr	r0, [pc, #152]	; (8004128 <MX_LWIP_Init+0xcc>)
 8004090:	f007 faa4 	bl	800b5dc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004094:	4824      	ldr	r0, [pc, #144]	; (8004128 <MX_LWIP_Init+0xcc>)
 8004096:	f007 fc5b 	bl	800b950 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800409a:	4b23      	ldr	r3, [pc, #140]	; (8004128 <MX_LWIP_Init+0xcc>)
 800409c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80040a0:	089b      	lsrs	r3, r3, #2
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80040ac:	481e      	ldr	r0, [pc, #120]	; (8004128 <MX_LWIP_Init+0xcc>)
 80040ae:	f007 fc5f 	bl	800b970 <netif_set_up>
 80040b2:	e002      	b.n	80040ba <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80040b4:	481c      	ldr	r0, [pc, #112]	; (8004128 <MX_LWIP_Init+0xcc>)
 80040b6:	f007 fcc7 	bl	800ba48 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80040ba:	491c      	ldr	r1, [pc, #112]	; (800412c <MX_LWIP_Init+0xd0>)
 80040bc:	481a      	ldr	r0, [pc, #104]	; (8004128 <MX_LWIP_Init+0xcc>)
 80040be:	f007 fd5d 	bl	800bb7c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 80040c2:	2300      	movs	r3, #0
 80040c4:	623b      	str	r3, [r7, #32]
 80040c6:	2300      	movs	r3, #0
 80040c8:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80040ca:	f107 0320 	add.w	r3, r7, #32
 80040ce:	2101      	movs	r1, #1
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 fd99 	bl	8004c08 <osSemaphoreCreate>
 80040d6:	4602      	mov	r2, r0
 80040d8:	4b15      	ldr	r3, [pc, #84]	; (8004130 <MX_LWIP_Init+0xd4>)
 80040da:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 80040dc:	4b15      	ldr	r3, [pc, #84]	; (8004134 <MX_LWIP_Init+0xd8>)
 80040de:	4a12      	ldr	r2, [pc, #72]	; (8004128 <MX_LWIP_Init+0xcc>)
 80040e0:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80040e2:	4b13      	ldr	r3, [pc, #76]	; (8004130 <MX_LWIP_Init+0xd4>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a13      	ldr	r2, [pc, #76]	; (8004134 <MX_LWIP_Init+0xd8>)
 80040e8:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80040ea:	4b13      	ldr	r3, [pc, #76]	; (8004138 <MX_LWIP_Init+0xdc>)
 80040ec:	1d3c      	adds	r4, r7, #4
 80040ee:	461d      	mov	r5, r3
 80040f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80040f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 80040fc:	1d3b      	adds	r3, r7, #4
 80040fe:	490d      	ldr	r1, [pc, #52]	; (8004134 <MX_LWIP_Init+0xd8>)
 8004100:	4618      	mov	r0, r3
 8004102:	f000 fc84 	bl	8004a0e <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8004106:	4808      	ldr	r0, [pc, #32]	; (8004128 <MX_LWIP_Init+0xcc>)
 8004108:	f00f fdfc 	bl	8013d04 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800410c:	bf00      	nop
 800410e:	3728      	adds	r7, #40	; 0x28
 8004110:	46bd      	mov	sp, r7
 8004112:	bdb0      	pop	{r4, r5, r7, pc}
 8004114:	20008ca8 	.word	0x20008ca8
 8004118:	20008cac 	.word	0x20008cac
 800411c:	20008cb0 	.word	0x20008cb0
 8004120:	08009d45 	.word	0x08009d45
 8004124:	0800479d 	.word	0x0800479d
 8004128:	20008c70 	.word	0x20008c70
 800412c:	08004881 	.word	0x08004881
 8004130:	200004a8 	.word	0x200004a8
 8004134:	20008c68 	.word	0x20008c68
 8004138:	080191f4 	.word	0x080191f4

0800413c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08e      	sub	sp, #56	; 0x38
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	605a      	str	r2, [r3, #4]
 800414e:	609a      	str	r2, [r3, #8]
 8004150:	60da      	str	r2, [r3, #12]
 8004152:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a59      	ldr	r2, [pc, #356]	; (80042c0 <HAL_ETH_MspInit+0x184>)
 800415a:	4293      	cmp	r3, r2
 800415c:	f040 80ac 	bne.w	80042b8 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004160:	2300      	movs	r3, #0
 8004162:	623b      	str	r3, [r7, #32]
 8004164:	4b57      	ldr	r3, [pc, #348]	; (80042c4 <HAL_ETH_MspInit+0x188>)
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	4a56      	ldr	r2, [pc, #344]	; (80042c4 <HAL_ETH_MspInit+0x188>)
 800416a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800416e:	6313      	str	r3, [r2, #48]	; 0x30
 8004170:	4b54      	ldr	r3, [pc, #336]	; (80042c4 <HAL_ETH_MspInit+0x188>)
 8004172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004178:	623b      	str	r3, [r7, #32]
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	2300      	movs	r3, #0
 800417e:	61fb      	str	r3, [r7, #28]
 8004180:	4b50      	ldr	r3, [pc, #320]	; (80042c4 <HAL_ETH_MspInit+0x188>)
 8004182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004184:	4a4f      	ldr	r2, [pc, #316]	; (80042c4 <HAL_ETH_MspInit+0x188>)
 8004186:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800418a:	6313      	str	r3, [r2, #48]	; 0x30
 800418c:	4b4d      	ldr	r3, [pc, #308]	; (80042c4 <HAL_ETH_MspInit+0x188>)
 800418e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004190:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004194:	61fb      	str	r3, [r7, #28]
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	2300      	movs	r3, #0
 800419a:	61bb      	str	r3, [r7, #24]
 800419c:	4b49      	ldr	r3, [pc, #292]	; (80042c4 <HAL_ETH_MspInit+0x188>)
 800419e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a0:	4a48      	ldr	r2, [pc, #288]	; (80042c4 <HAL_ETH_MspInit+0x188>)
 80041a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041a6:	6313      	str	r3, [r2, #48]	; 0x30
 80041a8:	4b46      	ldr	r3, [pc, #280]	; (80042c4 <HAL_ETH_MspInit+0x188>)
 80041aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041b0:	61bb      	str	r3, [r7, #24]
 80041b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	4b42      	ldr	r3, [pc, #264]	; (80042c4 <HAL_ETH_MspInit+0x188>)
 80041ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041bc:	4a41      	ldr	r2, [pc, #260]	; (80042c4 <HAL_ETH_MspInit+0x188>)
 80041be:	f043 0304 	orr.w	r3, r3, #4
 80041c2:	6313      	str	r3, [r2, #48]	; 0x30
 80041c4:	4b3f      	ldr	r3, [pc, #252]	; (80042c4 <HAL_ETH_MspInit+0x188>)
 80041c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	617b      	str	r3, [r7, #20]
 80041ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041d0:	2300      	movs	r3, #0
 80041d2:	613b      	str	r3, [r7, #16]
 80041d4:	4b3b      	ldr	r3, [pc, #236]	; (80042c4 <HAL_ETH_MspInit+0x188>)
 80041d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d8:	4a3a      	ldr	r2, [pc, #232]	; (80042c4 <HAL_ETH_MspInit+0x188>)
 80041da:	f043 0301 	orr.w	r3, r3, #1
 80041de:	6313      	str	r3, [r2, #48]	; 0x30
 80041e0:	4b38      	ldr	r3, [pc, #224]	; (80042c4 <HAL_ETH_MspInit+0x188>)
 80041e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ec:	2300      	movs	r3, #0
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	4b34      	ldr	r3, [pc, #208]	; (80042c4 <HAL_ETH_MspInit+0x188>)
 80041f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f4:	4a33      	ldr	r2, [pc, #204]	; (80042c4 <HAL_ETH_MspInit+0x188>)
 80041f6:	f043 0302 	orr.w	r3, r3, #2
 80041fa:	6313      	str	r3, [r2, #48]	; 0x30
 80041fc:	4b31      	ldr	r3, [pc, #196]	; (80042c4 <HAL_ETH_MspInit+0x188>)
 80041fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004208:	2300      	movs	r3, #0
 800420a:	60bb      	str	r3, [r7, #8]
 800420c:	4b2d      	ldr	r3, [pc, #180]	; (80042c4 <HAL_ETH_MspInit+0x188>)
 800420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004210:	4a2c      	ldr	r2, [pc, #176]	; (80042c4 <HAL_ETH_MspInit+0x188>)
 8004212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004216:	6313      	str	r3, [r2, #48]	; 0x30
 8004218:	4b2a      	ldr	r3, [pc, #168]	; (80042c4 <HAL_ETH_MspInit+0x188>)
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004224:	2332      	movs	r3, #50	; 0x32
 8004226:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004228:	2302      	movs	r3, #2
 800422a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422c:	2300      	movs	r3, #0
 800422e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004230:	2303      	movs	r3, #3
 8004232:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004234:	230b      	movs	r3, #11
 8004236:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800423c:	4619      	mov	r1, r3
 800423e:	4822      	ldr	r0, [pc, #136]	; (80042c8 <HAL_ETH_MspInit+0x18c>)
 8004240:	f7fe fa94 	bl	800276c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004244:	2386      	movs	r3, #134	; 0x86
 8004246:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004248:	2302      	movs	r3, #2
 800424a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800424c:	2300      	movs	r3, #0
 800424e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004250:	2303      	movs	r3, #3
 8004252:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004254:	230b      	movs	r3, #11
 8004256:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800425c:	4619      	mov	r1, r3
 800425e:	481b      	ldr	r0, [pc, #108]	; (80042cc <HAL_ETH_MspInit+0x190>)
 8004260:	f7fe fa84 	bl	800276c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004264:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004268:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800426a:	2302      	movs	r3, #2
 800426c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426e:	2300      	movs	r3, #0
 8004270:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004272:	2303      	movs	r3, #3
 8004274:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004276:	230b      	movs	r3, #11
 8004278:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800427a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800427e:	4619      	mov	r1, r3
 8004280:	4813      	ldr	r0, [pc, #76]	; (80042d0 <HAL_ETH_MspInit+0x194>)
 8004282:	f7fe fa73 	bl	800276c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004286:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800428a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800428c:	2302      	movs	r3, #2
 800428e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004290:	2300      	movs	r3, #0
 8004292:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004294:	2303      	movs	r3, #3
 8004296:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004298:	230b      	movs	r3, #11
 800429a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800429c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042a0:	4619      	mov	r1, r3
 80042a2:	480c      	ldr	r0, [pc, #48]	; (80042d4 <HAL_ETH_MspInit+0x198>)
 80042a4:	f7fe fa62 	bl	800276c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80042a8:	2200      	movs	r2, #0
 80042aa:	2100      	movs	r1, #0
 80042ac:	203d      	movs	r0, #61	; 0x3d
 80042ae:	f7fd f88d 	bl	80013cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80042b2:	203d      	movs	r0, #61	; 0x3d
 80042b4:	f7fd f8a6 	bl	8001404 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80042b8:	bf00      	nop
 80042ba:	3738      	adds	r7, #56	; 0x38
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40028000 	.word	0x40028000
 80042c4:	40023800 	.word	0x40023800
 80042c8:	40020800 	.word	0x40020800
 80042cc:	40020000 	.word	0x40020000
 80042d0:	40020400 	.word	0x40020400
 80042d4:	40021800 	.word	0x40021800

080042d8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80042e0:	4b04      	ldr	r3, [pc, #16]	; (80042f4 <HAL_ETH_RxCpltCallback+0x1c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 fd11 	bl	8004d0c <osSemaphoreRelease>
}
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	200004ac 	.word	0x200004ac

080042f8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80042f8:	b5b0      	push	{r4, r5, r7, lr}
 80042fa:	b090      	sub	sp, #64	; 0x40
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004300:	2300      	movs	r3, #0
 8004302:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004304:	4b5c      	ldr	r3, [pc, #368]	; (8004478 <low_level_init+0x180>)
 8004306:	4a5d      	ldr	r2, [pc, #372]	; (800447c <low_level_init+0x184>)
 8004308:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800430a:	4b5b      	ldr	r3, [pc, #364]	; (8004478 <low_level_init+0x180>)
 800430c:	2201      	movs	r2, #1
 800430e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004310:	4b59      	ldr	r3, [pc, #356]	; (8004478 <low_level_init+0x180>)
 8004312:	2200      	movs	r2, #0
 8004314:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004316:	2300      	movs	r3, #0
 8004318:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800431c:	2380      	movs	r3, #128	; 0x80
 800431e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8004322:	23e1      	movs	r3, #225	; 0xe1
 8004324:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0xFE;
 8004328:	23fe      	movs	r3, #254	; 0xfe
 800432a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0xEC;
 800432e:	23ec      	movs	r3, #236	; 0xec
 8004330:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x71;
 8004334:	2371      	movs	r3, #113	; 0x71
 8004336:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800433a:	4a4f      	ldr	r2, [pc, #316]	; (8004478 <low_level_init+0x180>)
 800433c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004340:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8004342:	4b4d      	ldr	r3, [pc, #308]	; (8004478 <low_level_init+0x180>)
 8004344:	2201      	movs	r2, #1
 8004346:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004348:	4b4b      	ldr	r3, [pc, #300]	; (8004478 <low_level_init+0x180>)
 800434a:	2200      	movs	r2, #0
 800434c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800434e:	4b4a      	ldr	r3, [pc, #296]	; (8004478 <low_level_init+0x180>)
 8004350:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004354:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004356:	4848      	ldr	r0, [pc, #288]	; (8004478 <low_level_init+0x180>)
 8004358:	f7fd f862 	bl	8001420 <HAL_ETH_Init>
 800435c:	4603      	mov	r3, r0
 800435e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8004362:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004366:	2b00      	cmp	r3, #0
 8004368:	d108      	bne.n	800437c <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004370:	f043 0304 	orr.w	r3, r3, #4
 8004374:	b2da      	uxtb	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800437c:	2304      	movs	r3, #4
 800437e:	4a40      	ldr	r2, [pc, #256]	; (8004480 <low_level_init+0x188>)
 8004380:	4940      	ldr	r1, [pc, #256]	; (8004484 <low_level_init+0x18c>)
 8004382:	483d      	ldr	r0, [pc, #244]	; (8004478 <low_level_init+0x180>)
 8004384:	f7fd f9ea 	bl	800175c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004388:	2304      	movs	r3, #4
 800438a:	4a3f      	ldr	r2, [pc, #252]	; (8004488 <low_level_init+0x190>)
 800438c:	493f      	ldr	r1, [pc, #252]	; (800448c <low_level_init+0x194>)
 800438e:	483a      	ldr	r0, [pc, #232]	; (8004478 <low_level_init+0x180>)
 8004390:	f7fd fa4d 	bl	800182e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2206      	movs	r2, #6
 8004398:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800439c:	4b36      	ldr	r3, [pc, #216]	; (8004478 <low_level_init+0x180>)
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	781a      	ldrb	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80043a8:	4b33      	ldr	r3, [pc, #204]	; (8004478 <low_level_init+0x180>)
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	785a      	ldrb	r2, [r3, #1]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80043b4:	4b30      	ldr	r3, [pc, #192]	; (8004478 <low_level_init+0x180>)
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	789a      	ldrb	r2, [r3, #2]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80043c0:	4b2d      	ldr	r3, [pc, #180]	; (8004478 <low_level_init+0x180>)
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	78da      	ldrb	r2, [r3, #3]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80043cc:	4b2a      	ldr	r3, [pc, #168]	; (8004478 <low_level_init+0x180>)
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	791a      	ldrb	r2, [r3, #4]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80043d8:	4b27      	ldr	r3, [pc, #156]	; (8004478 <low_level_init+0x180>)
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	795a      	ldrb	r2, [r3, #5]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80043ea:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80043f2:	f043 030a 	orr.w	r3, r3, #10
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80043fe:	2300      	movs	r3, #0
 8004400:	62bb      	str	r3, [r7, #40]	; 0x28
 8004402:	2300      	movs	r3, #0
 8004404:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8004406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800440a:	2101      	movs	r1, #1
 800440c:	4618      	mov	r0, r3
 800440e:	f000 fbfb 	bl	8004c08 <osSemaphoreCreate>
 8004412:	4602      	mov	r2, r0
 8004414:	4b1e      	ldr	r3, [pc, #120]	; (8004490 <low_level_init+0x198>)
 8004416:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004418:	4b1e      	ldr	r3, [pc, #120]	; (8004494 <low_level_init+0x19c>)
 800441a:	f107 040c 	add.w	r4, r7, #12
 800441e:	461d      	mov	r5, r3
 8004420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004424:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004428:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800442c:	f107 030c 	add.w	r3, r7, #12
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	4618      	mov	r0, r3
 8004434:	f000 faeb 	bl	8004a0e <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004438:	480f      	ldr	r0, [pc, #60]	; (8004478 <low_level_init+0x180>)
 800443a:	f7fd fd20 	bl	8001e7e <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800443e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004442:	461a      	mov	r2, r3
 8004444:	211d      	movs	r1, #29
 8004446:	480c      	ldr	r0, [pc, #48]	; (8004478 <low_level_init+0x180>)
 8004448:	f7fd fc4b 	bl	8001ce2 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800444c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444e:	f043 030b 	orr.w	r3, r3, #11
 8004452:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004456:	461a      	mov	r2, r3
 8004458:	211d      	movs	r1, #29
 800445a:	4807      	ldr	r0, [pc, #28]	; (8004478 <low_level_init+0x180>)
 800445c:	f7fd fca9 	bl	8001db2 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004460:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004464:	461a      	mov	r2, r3
 8004466:	211d      	movs	r1, #29
 8004468:	4803      	ldr	r0, [pc, #12]	; (8004478 <low_level_init+0x180>)
 800446a:	f7fd fc3a 	bl	8001ce2 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800446e:	bf00      	nop
 8004470:	3740      	adds	r7, #64	; 0x40
 8004472:	46bd      	mov	sp, r7
 8004474:	bdb0      	pop	{r4, r5, r7, pc}
 8004476:	bf00      	nop
 8004478:	2000a584 	.word	0x2000a584
 800447c:	40028000 	.word	0x40028000
 8004480:	2000a5cc 	.word	0x2000a5cc
 8004484:	20008cb4 	.word	0x20008cb4
 8004488:	20008d34 	.word	0x20008d34
 800448c:	2000a504 	.word	0x2000a504
 8004490:	200004ac 	.word	0x200004ac
 8004494:	08019218 	.word	0x08019218

08004498 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08a      	sub	sp, #40	; 0x28
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80044a2:	4b4b      	ldr	r3, [pc, #300]	; (80045d0 <low_level_output+0x138>)
 80044a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80044ae:	2300      	movs	r3, #0
 80044b0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80044b2:	2300      	movs	r3, #0
 80044b4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80044b6:	2300      	movs	r3, #0
 80044b8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80044ba:	4b45      	ldr	r3, [pc, #276]	; (80045d0 <low_level_output+0x138>)
 80044bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044be:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80044c0:	2300      	movs	r3, #0
 80044c2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	623b      	str	r3, [r7, #32]
 80044c8:	e05a      	b.n	8004580 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	da03      	bge.n	80044da <low_level_output+0x42>
      {
        errval = ERR_USE;
 80044d2:	23f8      	movs	r3, #248	; 0xf8
 80044d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80044d8:	e05c      	b.n	8004594 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	895b      	ldrh	r3, [r3, #10]
 80044de:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80044e0:	2300      	movs	r3, #0
 80044e2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80044e4:	e02f      	b.n	8004546 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80044e6:	69fa      	ldr	r2, [r7, #28]
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	18d0      	adds	r0, r2, r3
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	18d1      	adds	r1, r2, r3
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80044fa:	3304      	adds	r3, #4
 80044fc:	461a      	mov	r2, r3
 80044fe:	f013 fc38 	bl	8017d72 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	da03      	bge.n	8004518 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004510:	23f8      	movs	r3, #248	; 0xf8
 8004512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004516:	e03d      	b.n	8004594 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4413      	add	r3, r2
 8004524:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004528:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004534:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004540:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004542:	2300      	movs	r3, #0
 8004544:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	4413      	add	r3, r2
 800454c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004550:	4293      	cmp	r3, r2
 8004552:	d8c8      	bhi.n	80044e6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004554:	69fa      	ldr	r2, [r7, #28]
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	18d0      	adds	r0, r2, r3
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	4413      	add	r3, r2
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4619      	mov	r1, r3
 8004566:	f013 fc04 	bl	8017d72 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4413      	add	r3, r2
 8004578:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	623b      	str	r3, [r7, #32]
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1a1      	bne.n	80044ca <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004586:	6979      	ldr	r1, [r7, #20]
 8004588:	4811      	ldr	r0, [pc, #68]	; (80045d0 <low_level_output+0x138>)
 800458a:	f7fd f9bd 	bl	8001908 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004594:	4b0e      	ldr	r3, [pc, #56]	; (80045d0 <low_level_output+0x138>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800459c:	3314      	adds	r3, #20
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0320 	and.w	r3, r3, #32
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00d      	beq.n	80045c4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80045a8:	4b09      	ldr	r3, [pc, #36]	; (80045d0 <low_level_output+0x138>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045b0:	3314      	adds	r3, #20
 80045b2:	2220      	movs	r2, #32
 80045b4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80045b6:	4b06      	ldr	r3, [pc, #24]	; (80045d0 <low_level_output+0x138>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045be:	3304      	adds	r3, #4
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80045c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3728      	adds	r7, #40	; 0x28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	2000a584 	.word	0x2000a584

080045d4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08c      	sub	sp, #48	; 0x30
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80045dc:	2300      	movs	r3, #0
 80045de:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80045e0:	2300      	movs	r3, #0
 80045e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80045e4:	2300      	movs	r3, #0
 80045e6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80045e8:	2300      	movs	r3, #0
 80045ea:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80045ec:	2300      	movs	r3, #0
 80045ee:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80045f0:	2300      	movs	r3, #0
 80045f2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80045f8:	484f      	ldr	r0, [pc, #316]	; (8004738 <low_level_input+0x164>)
 80045fa:	f7fd fa6f 	bl	8001adc <HAL_ETH_GetReceivedFrame_IT>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <low_level_input+0x34>

    return NULL;
 8004604:	2300      	movs	r3, #0
 8004606:	e092      	b.n	800472e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004608:	4b4b      	ldr	r3, [pc, #300]	; (8004738 <low_level_input+0x164>)
 800460a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800460e:	4b4a      	ldr	r3, [pc, #296]	; (8004738 <low_level_input+0x164>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8004614:	89fb      	ldrh	r3, [r7, #14]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d007      	beq.n	800462a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800461a:	89fb      	ldrh	r3, [r7, #14]
 800461c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004620:	4619      	mov	r1, r3
 8004622:	2000      	movs	r0, #0
 8004624:	f007 fb74 	bl	800bd10 <pbuf_alloc>
 8004628:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800462a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d04b      	beq.n	80046c8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004630:	4b41      	ldr	r3, [pc, #260]	; (8004738 <low_level_input+0x164>)
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004636:	2300      	movs	r3, #0
 8004638:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800463a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463c:	62bb      	str	r3, [r7, #40]	; 0x28
 800463e:	e040      	b.n	80046c2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	895b      	ldrh	r3, [r3, #10]
 8004644:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004646:	2300      	movs	r3, #0
 8004648:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800464a:	e021      	b.n	8004690 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800464c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	18d0      	adds	r0, r2, r3
 8004654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	18d1      	adds	r1, r2, r3
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004660:	3304      	adds	r3, #4
 8004662:	461a      	mov	r2, r3
 8004664:	f013 fb85 	bl	8017d72 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004674:	69fa      	ldr	r2, [r7, #28]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	4413      	add	r3, r2
 800467a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800467e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800468a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800468c:	2300      	movs	r3, #0
 800468e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	4413      	add	r3, r2
 8004696:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800469a:	4293      	cmp	r3, r2
 800469c:	d8d6      	bhi.n	800464c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800469e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	18d0      	adds	r0, r2, r3
 80046a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	4413      	add	r3, r2
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	4619      	mov	r1, r3
 80046b0:	f013 fb5f 	bl	8017d72 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80046b4:	69fa      	ldr	r2, [r7, #28]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	4413      	add	r3, r2
 80046ba:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80046bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1bb      	bne.n	8004640 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80046c8:	4b1b      	ldr	r3, [pc, #108]	; (8004738 <low_level_input+0x164>)
 80046ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046cc:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80046ce:	2300      	movs	r3, #0
 80046d0:	613b      	str	r3, [r7, #16]
 80046d2:	e00b      	b.n	80046ec <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	3301      	adds	r3, #1
 80046ea:	613b      	str	r3, [r7, #16]
 80046ec:	4b12      	ldr	r3, [pc, #72]	; (8004738 <low_level_input+0x164>)
 80046ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d3ee      	bcc.n	80046d4 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80046f6:	4b10      	ldr	r3, [pc, #64]	; (8004738 <low_level_input+0x164>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80046fc:	4b0e      	ldr	r3, [pc, #56]	; (8004738 <low_level_input+0x164>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004704:	3314      	adds	r3, #20
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00d      	beq.n	800472c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004710:	4b09      	ldr	r3, [pc, #36]	; (8004738 <low_level_input+0x164>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004718:	3314      	adds	r3, #20
 800471a:	2280      	movs	r2, #128	; 0x80
 800471c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800471e:	4b06      	ldr	r3, [pc, #24]	; (8004738 <low_level_input+0x164>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004726:	3308      	adds	r3, #8
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]
  }
  return p;
 800472c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800472e:	4618      	mov	r0, r3
 8004730:	3730      	adds	r7, #48	; 0x30
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	2000a584 	.word	0x2000a584

0800473c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004748:	4b12      	ldr	r3, [pc, #72]	; (8004794 <ethernetif_input+0x58>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f04f 31ff 	mov.w	r1, #4294967295
 8004750:	4618      	mov	r0, r3
 8004752:	f000 fa8d 	bl	8004c70 <osSemaphoreWait>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1f5      	bne.n	8004748 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800475c:	480e      	ldr	r0, [pc, #56]	; (8004798 <ethernetif_input+0x5c>)
 800475e:	f013 fa55 	bl	8017c0c <sys_mutex_lock>
        p = low_level_input( netif );
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f7ff ff36 	bl	80045d4 <low_level_input>
 8004768:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00a      	beq.n	8004786 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	68f9      	ldr	r1, [r7, #12]
 8004776:	68b8      	ldr	r0, [r7, #8]
 8004778:	4798      	blx	r3
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8004780:	68b8      	ldr	r0, [r7, #8]
 8004782:	f007 fda5 	bl	800c2d0 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8004786:	4804      	ldr	r0, [pc, #16]	; (8004798 <ethernetif_input+0x5c>)
 8004788:	f013 fa4f 	bl	8017c2a <sys_mutex_unlock>
      } while(p!=NULL);
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1e4      	bne.n	800475c <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004792:	e7d9      	b.n	8004748 <ethernetif_input+0xc>
 8004794:	200004ac 	.word	0x200004ac
 8004798:	2000bddc 	.word	0x2000bddc

0800479c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d106      	bne.n	80047b8 <ethernetif_init+0x1c>
 80047aa:	4b0e      	ldr	r3, [pc, #56]	; (80047e4 <ethernetif_init+0x48>)
 80047ac:	f240 2233 	movw	r2, #563	; 0x233
 80047b0:	490d      	ldr	r1, [pc, #52]	; (80047e8 <ethernetif_init+0x4c>)
 80047b2:	480e      	ldr	r0, [pc, #56]	; (80047ec <ethernetif_init+0x50>)
 80047b4:	f013 fb0a 	bl	8017dcc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2273      	movs	r2, #115	; 0x73
 80047bc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2274      	movs	r2, #116	; 0x74
 80047c4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a09      	ldr	r2, [pc, #36]	; (80047f0 <ethernetif_init+0x54>)
 80047cc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a08      	ldr	r2, [pc, #32]	; (80047f4 <ethernetif_init+0x58>)
 80047d2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f7ff fd8f 	bl	80042f8 <low_level_init>

  return ERR_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	08019234 	.word	0x08019234
 80047e8:	08019250 	.word	0x08019250
 80047ec:	08019260 	.word	0x08019260
 80047f0:	08015bf1 	.word	0x08015bf1
 80047f4:	08004499 	.word	0x08004499

080047f8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80047fc:	f7fc fd00 	bl	8001200 <HAL_GetTick>
 8004800:	4603      	mov	r3, r0
}
 8004802:	4618      	mov	r0, r3
 8004804:	bd80      	pop	{r7, pc}
	...

08004808 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004810:	2300      	movs	r3, #0
 8004812:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004818:	f107 0308 	add.w	r3, r7, #8
 800481c:	461a      	mov	r2, r3
 800481e:	2101      	movs	r1, #1
 8004820:	4816      	ldr	r0, [pc, #88]	; (800487c <ethernetif_set_link+0x74>)
 8004822:	f7fd fa5e 	bl	8001ce2 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	f003 0304 	and.w	r3, r3, #4
 800482c:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004836:	f003 0304 	and.w	r3, r3, #4
 800483a:	2b00      	cmp	r3, #0
 800483c:	d108      	bne.n	8004850 <ethernetif_set_link+0x48>
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4618      	mov	r0, r3
 800484a:	f007 f92f 	bl	800baac <netif_set_link_up>
 800484e:	e011      	b.n	8004874 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004858:	089b      	lsrs	r3, r3, #2
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d007      	beq.n	8004874 <ethernetif_set_link+0x6c>
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d104      	bne.n	8004874 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f007 f954 	bl	800bb1c <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8004874:	20c8      	movs	r0, #200	; 0xc8
 8004876:	f000 f916 	bl	8004aa6 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800487a:	e7cd      	b.n	8004818 <ethernetif_set_link+0x10>
 800487c:	2000a584 	.word	0x2000a584

08004880 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8004888:	2300      	movs	r3, #0
 800488a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800488c:	2300      	movs	r3, #0
 800488e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004896:	089b      	lsrs	r3, r3, #2
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d05d      	beq.n	800495e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80048a2:	4b34      	ldr	r3, [pc, #208]	; (8004974 <ethernetif_update_config+0xf4>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d03f      	beq.n	800492a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80048aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80048ae:	2100      	movs	r1, #0
 80048b0:	4830      	ldr	r0, [pc, #192]	; (8004974 <ethernetif_update_config+0xf4>)
 80048b2:	f7fd fa7e 	bl	8001db2 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80048b6:	f7fc fca3 	bl	8001200 <HAL_GetTick>
 80048ba:	4603      	mov	r3, r0
 80048bc:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80048be:	f107 0308 	add.w	r3, r7, #8
 80048c2:	461a      	mov	r2, r3
 80048c4:	2101      	movs	r1, #1
 80048c6:	482b      	ldr	r0, [pc, #172]	; (8004974 <ethernetif_update_config+0xf4>)
 80048c8:	f7fd fa0b 	bl	8001ce2 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80048cc:	f7fc fc98 	bl	8001200 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048da:	d828      	bhi.n	800492e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f003 0320 	and.w	r3, r3, #32
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0eb      	beq.n	80048be <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80048e6:	f107 0308 	add.w	r3, r7, #8
 80048ea:	461a      	mov	r2, r3
 80048ec:	211f      	movs	r1, #31
 80048ee:	4821      	ldr	r0, [pc, #132]	; (8004974 <ethernetif_update_config+0xf4>)
 80048f0:	f7fd f9f7 	bl	8001ce2 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f003 0310 	and.w	r3, r3, #16
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d004      	beq.n	8004908 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80048fe:	4b1d      	ldr	r3, [pc, #116]	; (8004974 <ethernetif_update_config+0xf4>)
 8004900:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004904:	60da      	str	r2, [r3, #12]
 8004906:	e002      	b.n	800490e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004908:	4b1a      	ldr	r3, [pc, #104]	; (8004974 <ethernetif_update_config+0xf4>)
 800490a:	2200      	movs	r2, #0
 800490c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d003      	beq.n	8004920 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004918:	4b16      	ldr	r3, [pc, #88]	; (8004974 <ethernetif_update_config+0xf4>)
 800491a:	2200      	movs	r2, #0
 800491c:	609a      	str	r2, [r3, #8]
 800491e:	e016      	b.n	800494e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8004920:	4b14      	ldr	r3, [pc, #80]	; (8004974 <ethernetif_update_config+0xf4>)
 8004922:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004926:	609a      	str	r2, [r3, #8]
 8004928:	e011      	b.n	800494e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800492a:	bf00      	nop
 800492c:	e000      	b.n	8004930 <ethernetif_update_config+0xb0>
          goto error;
 800492e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004930:	4b10      	ldr	r3, [pc, #64]	; (8004974 <ethernetif_update_config+0xf4>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	08db      	lsrs	r3, r3, #3
 8004936:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004938:	4b0e      	ldr	r3, [pc, #56]	; (8004974 <ethernetif_update_config+0xf4>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	085b      	lsrs	r3, r3, #1
 800493e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004940:	4313      	orrs	r3, r2
 8004942:	b29b      	uxth	r3, r3
 8004944:	461a      	mov	r2, r3
 8004946:	2100      	movs	r1, #0
 8004948:	480a      	ldr	r0, [pc, #40]	; (8004974 <ethernetif_update_config+0xf4>)
 800494a:	f7fd fa32 	bl	8001db2 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800494e:	2100      	movs	r1, #0
 8004950:	4808      	ldr	r0, [pc, #32]	; (8004974 <ethernetif_update_config+0xf4>)
 8004952:	f7fd faf3 	bl	8001f3c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8004956:	4807      	ldr	r0, [pc, #28]	; (8004974 <ethernetif_update_config+0xf4>)
 8004958:	f7fd fa91 	bl	8001e7e <HAL_ETH_Start>
 800495c:	e002      	b.n	8004964 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800495e:	4805      	ldr	r0, [pc, #20]	; (8004974 <ethernetif_update_config+0xf4>)
 8004960:	f7fd fabc 	bl	8001edc <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f807 	bl	8004978 <ethernetif_notify_conn_changed>
}
 800496a:	bf00      	nop
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	2000a584 	.word	0x2000a584

08004978 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	4603      	mov	r3, r0
 8004994:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800499a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800499e:	2b84      	cmp	r3, #132	; 0x84
 80049a0:	d005      	beq.n	80049ae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80049a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4413      	add	r3, r2
 80049aa:	3303      	adds	r3, #3
 80049ac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80049ae:	68fb      	ldr	r3, [r7, #12]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049c2:	f3ef 8305 	mrs	r3, IPSR
 80049c6:	607b      	str	r3, [r7, #4]
  return(result);
 80049c8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	bf14      	ite	ne
 80049ce:	2301      	movne	r3, #1
 80049d0:	2300      	moveq	r3, #0
 80049d2:	b2db      	uxtb	r3, r3
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80049e4:	f001 fd08 	bl	80063f8 <vTaskStartScheduler>
  
  return osOK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	bd80      	pop	{r7, pc}

080049ee <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80049f2:	f7ff ffe3 	bl	80049bc <inHandlerMode>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80049fc:	f001 fe14 	bl	8006628 <xTaskGetTickCountFromISR>
 8004a00:	4603      	mov	r3, r0
 8004a02:	e002      	b.n	8004a0a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004a04:	f001 fe00 	bl	8006608 <xTaskGetTickCount>
 8004a08:	4603      	mov	r3, r0
  }
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004a0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a10:	b089      	sub	sp, #36	; 0x24
 8004a12:	af04      	add	r7, sp, #16
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d020      	beq.n	8004a62 <osThreadCreate+0x54>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d01c      	beq.n	8004a62 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685c      	ldr	r4, [r3, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681d      	ldr	r5, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691e      	ldr	r6, [r3, #16]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7ff ffa6 	bl	800498c <makeFreeRtosPriority>
 8004a40:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a4a:	9202      	str	r2, [sp, #8]
 8004a4c:	9301      	str	r3, [sp, #4]
 8004a4e:	9100      	str	r1, [sp, #0]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	4632      	mov	r2, r6
 8004a54:	4629      	mov	r1, r5
 8004a56:	4620      	mov	r0, r4
 8004a58:	f001 fb0a 	bl	8006070 <xTaskCreateStatic>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	e01c      	b.n	8004a9c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685c      	ldr	r4, [r3, #4]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a6e:	b29e      	uxth	r6, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7ff ff88 	bl	800498c <makeFreeRtosPriority>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	f107 030c 	add.w	r3, r7, #12
 8004a82:	9301      	str	r3, [sp, #4]
 8004a84:	9200      	str	r2, [sp, #0]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	4632      	mov	r2, r6
 8004a8a:	4629      	mov	r1, r5
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	f001 fb49 	bl	8006124 <xTaskCreate>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d001      	beq.n	8004a9c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	e000      	b.n	8004a9e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004aa6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b084      	sub	sp, #16
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <osDelay+0x16>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	e000      	b.n	8004abe <osDelay+0x18>
 8004abc:	2301      	movs	r3, #1
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f001 fc66 	bl	8006390 <vTaskDelay>
  
  return osOK;
 8004ac4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b082      	sub	sp, #8
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d007      	beq.n	8004aee <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	2001      	movs	r0, #1
 8004ae6:	f000 fc80 	bl	80053ea <xQueueCreateMutexStatic>
 8004aea:	4603      	mov	r3, r0
 8004aec:	e003      	b.n	8004af6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004aee:	2001      	movs	r0, #1
 8004af0:	f000 fc63 	bl	80053ba <xQueueCreateMutex>
 8004af4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <osMutexWait+0x18>
    return osErrorParameter;
 8004b14:	2380      	movs	r3, #128	; 0x80
 8004b16:	e03a      	b.n	8004b8e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b22:	d103      	bne.n	8004b2c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004b24:	f04f 33ff 	mov.w	r3, #4294967295
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	e009      	b.n	8004b40 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d006      	beq.n	8004b40 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <osMutexWait+0x40>
      ticks = 1;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004b40:	f7ff ff3c 	bl	80049bc <inHandlerMode>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d017      	beq.n	8004b7a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004b4a:	f107 0308 	add.w	r3, r7, #8
 8004b4e:	461a      	mov	r2, r3
 8004b50:	2100      	movs	r1, #0
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f001 f860 	bl	8005c18 <xQueueReceiveFromISR>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d001      	beq.n	8004b62 <osMutexWait+0x62>
      return osErrorOS;
 8004b5e:	23ff      	movs	r3, #255	; 0xff
 8004b60:	e015      	b.n	8004b8e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d011      	beq.n	8004b8c <osMutexWait+0x8c>
 8004b68:	4b0b      	ldr	r3, [pc, #44]	; (8004b98 <osMutexWait+0x98>)
 8004b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	e008      	b.n	8004b8c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004b7a:	68f9      	ldr	r1, [r7, #12]
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 ff43 	bl	8005a08 <xQueueSemaphoreTake>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d001      	beq.n	8004b8c <osMutexWait+0x8c>
    return osErrorOS;
 8004b88:	23ff      	movs	r3, #255	; 0xff
 8004b8a:	e000      	b.n	8004b8e <osMutexWait+0x8e>
  }
  
  return osOK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	e000ed04 	.word	0xe000ed04

08004b9c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004bac:	f7ff ff06 	bl	80049bc <inHandlerMode>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d016      	beq.n	8004be4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004bb6:	f107 0308 	add.w	r3, r7, #8
 8004bba:	4619      	mov	r1, r3
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 fdbd 	bl	800573c <xQueueGiveFromISR>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d001      	beq.n	8004bcc <osMutexRelease+0x30>
      return osErrorOS;
 8004bc8:	23ff      	movs	r3, #255	; 0xff
 8004bca:	e017      	b.n	8004bfc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d013      	beq.n	8004bfa <osMutexRelease+0x5e>
 8004bd2:	4b0c      	ldr	r3, [pc, #48]	; (8004c04 <osMutexRelease+0x68>)
 8004bd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	e00a      	b.n	8004bfa <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004be4:	2300      	movs	r3, #0
 8004be6:	2200      	movs	r2, #0
 8004be8:	2100      	movs	r1, #0
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fc18 	bl	8005420 <xQueueGenericSend>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d001      	beq.n	8004bfa <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004bf6:	23ff      	movs	r3, #255	; 0xff
 8004bf8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	e000ed04 	.word	0xe000ed04

08004c08 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d010      	beq.n	8004c3c <osSemaphoreCreate+0x34>
    if (count == 1) {
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d10b      	bne.n	8004c38 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	2303      	movs	r3, #3
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	2001      	movs	r0, #1
 8004c30:	f000 fad8 	bl	80051e4 <xQueueGenericCreateStatic>
 8004c34:	4603      	mov	r3, r0
 8004c36:	e016      	b.n	8004c66 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	e014      	b.n	8004c66 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d110      	bne.n	8004c64 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8004c42:	2203      	movs	r2, #3
 8004c44:	2100      	movs	r1, #0
 8004c46:	2001      	movs	r0, #1
 8004c48:	f000 fb3f 	bl	80052ca <xQueueGenericCreate>
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d005      	beq.n	8004c60 <osSemaphoreCreate+0x58>
 8004c54:	2300      	movs	r3, #0
 8004c56:	2200      	movs	r2, #0
 8004c58:	2100      	movs	r1, #0
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 fbe0 	bl	8005420 <xQueueGenericSend>
      return sema;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	e000      	b.n	8004c66 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004c64:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
	...

08004c70 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004c84:	2380      	movs	r3, #128	; 0x80
 8004c86:	e03a      	b.n	8004cfe <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c92:	d103      	bne.n	8004c9c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004c94:	f04f 33ff 	mov.w	r3, #4294967295
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	e009      	b.n	8004cb0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d006      	beq.n	8004cb0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <osSemaphoreWait+0x40>
      ticks = 1;
 8004cac:	2301      	movs	r3, #1
 8004cae:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004cb0:	f7ff fe84 	bl	80049bc <inHandlerMode>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d017      	beq.n	8004cea <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004cba:	f107 0308 	add.w	r3, r7, #8
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 ffa8 	bl	8005c18 <xQueueReceiveFromISR>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d001      	beq.n	8004cd2 <osSemaphoreWait+0x62>
      return osErrorOS;
 8004cce:	23ff      	movs	r3, #255	; 0xff
 8004cd0:	e015      	b.n	8004cfe <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d011      	beq.n	8004cfc <osSemaphoreWait+0x8c>
 8004cd8:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <osSemaphoreWait+0x98>)
 8004cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	e008      	b.n	8004cfc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004cea:	68f9      	ldr	r1, [r7, #12]
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 fe8b 	bl	8005a08 <xQueueSemaphoreTake>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d001      	beq.n	8004cfc <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004cf8:	23ff      	movs	r3, #255	; 0xff
 8004cfa:	e000      	b.n	8004cfe <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	e000ed04 	.word	0xe000ed04

08004d0c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004d1c:	f7ff fe4e 	bl	80049bc <inHandlerMode>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d016      	beq.n	8004d54 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004d26:	f107 0308 	add.w	r3, r7, #8
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 fd05 	bl	800573c <xQueueGiveFromISR>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d001      	beq.n	8004d3c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004d38:	23ff      	movs	r3, #255	; 0xff
 8004d3a:	e017      	b.n	8004d6c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d013      	beq.n	8004d6a <osSemaphoreRelease+0x5e>
 8004d42:	4b0c      	ldr	r3, [pc, #48]	; (8004d74 <osSemaphoreRelease+0x68>)
 8004d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	e00a      	b.n	8004d6a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004d54:	2300      	movs	r3, #0
 8004d56:	2200      	movs	r2, #0
 8004d58:	2100      	movs	r1, #0
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fb60 	bl	8005420 <xQueueGenericSend>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d001      	beq.n	8004d6a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004d66:	23ff      	movs	r3, #255	; 0xff
 8004d68:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	e000ed04 	.word	0xe000ed04

08004d78 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004d80:	f7ff fe1c 	bl	80049bc <inHandlerMode>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <osSemaphoreDelete+0x16>
    return osErrorISR;
 8004d8a:	2382      	movs	r3, #130	; 0x82
 8004d8c:	e003      	b.n	8004d96 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fff9 	bl	8005d86 <vQueueDelete>

  return osOK; 
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004d9e:	b590      	push	{r4, r7, lr}
 8004da0:	b085      	sub	sp, #20
 8004da2:	af02      	add	r7, sp, #8
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d012      	beq.n	8004dd6 <osMessageCreate+0x38>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00e      	beq.n	8004dd6 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6818      	ldr	r0, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6859      	ldr	r1, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68dc      	ldr	r4, [r3, #12]
 8004dc8:	2300      	movs	r3, #0
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	4623      	mov	r3, r4
 8004dce:	f000 fa09 	bl	80051e4 <xQueueGenericCreateStatic>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	e008      	b.n	8004de8 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6818      	ldr	r0, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	4619      	mov	r1, r3
 8004de2:	f000 fa72 	bl	80052ca <xQueueGenericCreate>
 8004de6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd90      	pop	{r4, r7, pc}

08004df0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <osMessagePut+0x1e>
    ticks = 1;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004e0e:	f7ff fdd5 	bl	80049bc <inHandlerMode>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d018      	beq.n	8004e4a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004e18:	f107 0210 	add.w	r2, r7, #16
 8004e1c:	f107 0108 	add.w	r1, r7, #8
 8004e20:	2300      	movs	r3, #0
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 fbf6 	bl	8005614 <xQueueGenericSendFromISR>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d001      	beq.n	8004e32 <osMessagePut+0x42>
      return osErrorOS;
 8004e2e:	23ff      	movs	r3, #255	; 0xff
 8004e30:	e018      	b.n	8004e64 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d014      	beq.n	8004e62 <osMessagePut+0x72>
 8004e38:	4b0c      	ldr	r3, [pc, #48]	; (8004e6c <osMessagePut+0x7c>)
 8004e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	e00b      	b.n	8004e62 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004e4a:	f107 0108 	add.w	r1, r7, #8
 8004e4e:	2300      	movs	r3, #0
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 fae4 	bl	8005420 <xQueueGenericSend>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d001      	beq.n	8004e62 <osMessagePut+0x72>
      return osErrorOS;
 8004e5e:	23ff      	movs	r3, #255	; 0xff
 8004e60:	e000      	b.n	8004e64 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3718      	adds	r7, #24
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	e000ed04 	.word	0xe000ed04

08004e70 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004e70:	b590      	push	{r4, r7, lr}
 8004e72:	b08b      	sub	sp, #44	; 0x2c
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004e80:	2300      	movs	r3, #0
 8004e82:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10a      	bne.n	8004ea0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004e8a:	2380      	movs	r3, #128	; 0x80
 8004e8c:	617b      	str	r3, [r7, #20]
    return event;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	461c      	mov	r4, r3
 8004e92:	f107 0314 	add.w	r3, r7, #20
 8004e96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004e9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004e9e:	e054      	b.n	8004f4a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eae:	d103      	bne.n	8004eb8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb6:	e009      	b.n	8004ecc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d006      	beq.n	8004ecc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <osMessageGet+0x5c>
      ticks = 1;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004ecc:	f7ff fd76 	bl	80049bc <inHandlerMode>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d01c      	beq.n	8004f10 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004ed6:	f107 0220 	add.w	r2, r7, #32
 8004eda:	f107 0314 	add.w	r3, r7, #20
 8004ede:	3304      	adds	r3, #4
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	68b8      	ldr	r0, [r7, #8]
 8004ee4:	f000 fe98 	bl	8005c18 <xQueueReceiveFromISR>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d102      	bne.n	8004ef4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004eee:	2310      	movs	r3, #16
 8004ef0:	617b      	str	r3, [r7, #20]
 8004ef2:	e001      	b.n	8004ef8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d01d      	beq.n	8004f3a <osMessageGet+0xca>
 8004efe:	4b15      	ldr	r3, [pc, #84]	; (8004f54 <osMessageGet+0xe4>)
 8004f00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	e014      	b.n	8004f3a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004f10:	f107 0314 	add.w	r3, r7, #20
 8004f14:	3304      	adds	r3, #4
 8004f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f18:	4619      	mov	r1, r3
 8004f1a:	68b8      	ldr	r0, [r7, #8]
 8004f1c:	f000 fc98 	bl	8005850 <xQueueReceive>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d102      	bne.n	8004f2c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004f26:	2310      	movs	r3, #16
 8004f28:	617b      	str	r3, [r7, #20]
 8004f2a:	e006      	b.n	8004f3a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <osMessageGet+0xc6>
 8004f32:	2300      	movs	r3, #0
 8004f34:	e000      	b.n	8004f38 <osMessageGet+0xc8>
 8004f36:	2340      	movs	r3, #64	; 0x40
 8004f38:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	461c      	mov	r4, r3
 8004f3e:	f107 0314 	add.w	r3, r7, #20
 8004f42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004f46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	372c      	adds	r7, #44	; 0x2c
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd90      	pop	{r4, r7, pc}
 8004f52:	bf00      	nop
 8004f54:	e000ed04 	.word	0xe000ed04

08004f58 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004f60:	f7ff fd2c 	bl	80049bc <inHandlerMode>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d004      	beq.n	8004f74 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 feee 	bl	8005d4c <uxQueueMessagesWaitingFromISR>
 8004f70:	4603      	mov	r3, r0
 8004f72:	e003      	b.n	8004f7c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 fecc 	bl	8005d12 <uxQueueMessagesWaiting>
 8004f7a:	4603      	mov	r3, r0
  }
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004f8c:	f7ff fd16 	bl	80049bc <inHandlerMode>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <osMessageDelete+0x16>
    return osErrorISR;
 8004f96:	2382      	movs	r3, #130	; 0x82
 8004f98:	e003      	b.n	8004fa2 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 fef3 	bl	8005d86 <vQueueDelete>

  return osOK; 
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f103 0208 	add.w	r2, r3, #8
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8004fc2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f103 0208 	add.w	r2, r3, #8
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f103 0208 	add.w	r2, r3, #8
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	1c5a      	adds	r2, r3, #1
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	601a      	str	r2, [r3, #0]
}
 8005040:	bf00      	nop
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005062:	d103      	bne.n	800506c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	60fb      	str	r3, [r7, #12]
 800506a:	e00c      	b.n	8005086 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3308      	adds	r3, #8
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	e002      	b.n	800507a <vListInsert+0x2e>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	429a      	cmp	r2, r3
 8005084:	d2f6      	bcs.n	8005074 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	1c5a      	adds	r2, r3, #1
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	601a      	str	r2, [r3, #0]
}
 80050b2:	bf00      	nop
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050be:	b480      	push	{r7}
 80050c0:	b085      	sub	sp, #20
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6892      	ldr	r2, [r2, #8]
 80050d4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	6852      	ldr	r2, [r2, #4]
 80050de:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d103      	bne.n	80050f2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	1e5a      	subs	r2, r3, #1
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
	...

08005114 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d109      	bne.n	800513c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512c:	f383 8811 	msr	BASEPRI, r3
 8005130:	f3bf 8f6f 	isb	sy
 8005134:	f3bf 8f4f 	dsb	sy
 8005138:	60bb      	str	r3, [r7, #8]
 800513a:	e7fe      	b.n	800513a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800513c:	f002 f8ce 	bl	80072dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005148:	68f9      	ldr	r1, [r7, #12]
 800514a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800514c:	fb01 f303 	mul.w	r3, r1, r3
 8005150:	441a      	add	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516c:	3b01      	subs	r3, #1
 800516e:	68f9      	ldr	r1, [r7, #12]
 8005170:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005172:	fb01 f303 	mul.w	r3, r1, r3
 8005176:	441a      	add	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	22ff      	movs	r2, #255	; 0xff
 8005180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	22ff      	movs	r2, #255	; 0xff
 8005188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d114      	bne.n	80051bc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d01a      	beq.n	80051d0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	3310      	adds	r3, #16
 800519e:	4618      	mov	r0, r3
 80051a0:	f001 fb8a 	bl	80068b8 <xTaskRemoveFromEventList>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d012      	beq.n	80051d0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80051aa:	4b0d      	ldr	r3, [pc, #52]	; (80051e0 <xQueueGenericReset+0xcc>)
 80051ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	e009      	b.n	80051d0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	3310      	adds	r3, #16
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7ff fef2 	bl	8004faa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	3324      	adds	r3, #36	; 0x24
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7ff feed 	bl	8004faa <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051d0:	f002 f8b2 	bl	8007338 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051d4:	2301      	movs	r3, #1
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	e000ed04 	.word	0xe000ed04

080051e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b08e      	sub	sp, #56	; 0x38
 80051e8:	af02      	add	r7, sp, #8
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d109      	bne.n	800520c <xQueueGenericCreateStatic+0x28>
 80051f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	62bb      	str	r3, [r7, #40]	; 0x28
 800520a:	e7fe      	b.n	800520a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d109      	bne.n	8005226 <xQueueGenericCreateStatic+0x42>
 8005212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
 8005224:	e7fe      	b.n	8005224 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d002      	beq.n	8005232 <xQueueGenericCreateStatic+0x4e>
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <xQueueGenericCreateStatic+0x52>
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <xQueueGenericCreateStatic+0x54>
 8005236:	2300      	movs	r3, #0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d109      	bne.n	8005250 <xQueueGenericCreateStatic+0x6c>
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	623b      	str	r3, [r7, #32]
 800524e:	e7fe      	b.n	800524e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d102      	bne.n	800525c <xQueueGenericCreateStatic+0x78>
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <xQueueGenericCreateStatic+0x7c>
 800525c:	2301      	movs	r3, #1
 800525e:	e000      	b.n	8005262 <xQueueGenericCreateStatic+0x7e>
 8005260:	2300      	movs	r3, #0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d109      	bne.n	800527a <xQueueGenericCreateStatic+0x96>
 8005266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526a:	f383 8811 	msr	BASEPRI, r3
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	61fb      	str	r3, [r7, #28]
 8005278:	e7fe      	b.n	8005278 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800527a:	2348      	movs	r3, #72	; 0x48
 800527c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2b48      	cmp	r3, #72	; 0x48
 8005282:	d009      	beq.n	8005298 <xQueueGenericCreateStatic+0xb4>
 8005284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	61bb      	str	r3, [r7, #24]
 8005296:	e7fe      	b.n	8005296 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005298:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800529e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00d      	beq.n	80052c0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80052a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052ac:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80052b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	4613      	mov	r3, r2
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 f844 	bl	8005348 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3730      	adds	r7, #48	; 0x30
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b08a      	sub	sp, #40	; 0x28
 80052ce:	af02      	add	r7, sp, #8
 80052d0:	60f8      	str	r0, [r7, #12]
 80052d2:	60b9      	str	r1, [r7, #8]
 80052d4:	4613      	mov	r3, r2
 80052d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d109      	bne.n	80052f2 <xQueueGenericCreate+0x28>
 80052de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	613b      	str	r3, [r7, #16]
 80052f0:	e7fe      	b.n	80052f0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d102      	bne.n	80052fe <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80052f8:	2300      	movs	r3, #0
 80052fa:	61fb      	str	r3, [r7, #28]
 80052fc:	e004      	b.n	8005308 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	fb02 f303 	mul.w	r3, r2, r3
 8005306:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	3348      	adds	r3, #72	; 0x48
 800530c:	4618      	mov	r0, r3
 800530e:	f002 f8ff 	bl	8007510 <pvPortMalloc>
 8005312:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d011      	beq.n	800533e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	3348      	adds	r3, #72	; 0x48
 8005322:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800532c:	79fa      	ldrb	r2, [r7, #7]
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	4613      	mov	r3, r2
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	68b9      	ldr	r1, [r7, #8]
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 f805 	bl	8005348 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800533e:	69bb      	ldr	r3, [r7, #24]
	}
 8005340:	4618      	mov	r0, r3
 8005342:	3720      	adds	r7, #32
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
 8005354:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d103      	bne.n	8005364 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	e002      	b.n	800536a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005376:	2101      	movs	r1, #1
 8005378:	69b8      	ldr	r0, [r7, #24]
 800537a:	f7ff fecb 	bl	8005114 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800537e:	bf00      	nop
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005386:	b580      	push	{r7, lr}
 8005388:	b082      	sub	sp, #8
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00e      	beq.n	80053b2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80053a6:	2300      	movs	r3, #0
 80053a8:	2200      	movs	r2, #0
 80053aa:	2100      	movs	r1, #0
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f837 	bl	8005420 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80053b2:	bf00      	nop
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b086      	sub	sp, #24
 80053be:	af00      	add	r7, sp, #0
 80053c0:	4603      	mov	r3, r0
 80053c2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80053c4:	2301      	movs	r3, #1
 80053c6:	617b      	str	r3, [r7, #20]
 80053c8:	2300      	movs	r3, #0
 80053ca:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80053cc:	79fb      	ldrb	r3, [r7, #7]
 80053ce:	461a      	mov	r2, r3
 80053d0:	6939      	ldr	r1, [r7, #16]
 80053d2:	6978      	ldr	r0, [r7, #20]
 80053d4:	f7ff ff79 	bl	80052ca <xQueueGenericCreate>
 80053d8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f7ff ffd3 	bl	8005386 <prvInitialiseMutex>

		return xNewQueue;
 80053e0:	68fb      	ldr	r3, [r7, #12]
	}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b088      	sub	sp, #32
 80053ee:	af02      	add	r7, sp, #8
 80053f0:	4603      	mov	r3, r0
 80053f2:	6039      	str	r1, [r7, #0]
 80053f4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80053f6:	2301      	movs	r3, #1
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	2300      	movs	r3, #0
 80053fc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80053fe:	79fb      	ldrb	r3, [r7, #7]
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2200      	movs	r2, #0
 8005406:	6939      	ldr	r1, [r7, #16]
 8005408:	6978      	ldr	r0, [r7, #20]
 800540a:	f7ff feeb 	bl	80051e4 <xQueueGenericCreateStatic>
 800540e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f7ff ffb8 	bl	8005386 <prvInitialiseMutex>

		return xNewQueue;
 8005416:	68fb      	ldr	r3, [r7, #12]
	}
 8005418:	4618      	mov	r0, r3
 800541a:	3718      	adds	r7, #24
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08e      	sub	sp, #56	; 0x38
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
 800542c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800542e:	2300      	movs	r3, #0
 8005430:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005438:	2b00      	cmp	r3, #0
 800543a:	d109      	bne.n	8005450 <xQueueGenericSend+0x30>
 800543c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005440:	f383 8811 	msr	BASEPRI, r3
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	62bb      	str	r3, [r7, #40]	; 0x28
 800544e:	e7fe      	b.n	800544e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d103      	bne.n	800545e <xQueueGenericSend+0x3e>
 8005456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <xQueueGenericSend+0x42>
 800545e:	2301      	movs	r3, #1
 8005460:	e000      	b.n	8005464 <xQueueGenericSend+0x44>
 8005462:	2300      	movs	r3, #0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d109      	bne.n	800547c <xQueueGenericSend+0x5c>
 8005468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546c:	f383 8811 	msr	BASEPRI, r3
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
 800547a:	e7fe      	b.n	800547a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2b02      	cmp	r3, #2
 8005480:	d103      	bne.n	800548a <xQueueGenericSend+0x6a>
 8005482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005486:	2b01      	cmp	r3, #1
 8005488:	d101      	bne.n	800548e <xQueueGenericSend+0x6e>
 800548a:	2301      	movs	r3, #1
 800548c:	e000      	b.n	8005490 <xQueueGenericSend+0x70>
 800548e:	2300      	movs	r3, #0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d109      	bne.n	80054a8 <xQueueGenericSend+0x88>
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	623b      	str	r3, [r7, #32]
 80054a6:	e7fe      	b.n	80054a6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054a8:	f001 fbbc 	bl	8006c24 <xTaskGetSchedulerState>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d102      	bne.n	80054b8 <xQueueGenericSend+0x98>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <xQueueGenericSend+0x9c>
 80054b8:	2301      	movs	r3, #1
 80054ba:	e000      	b.n	80054be <xQueueGenericSend+0x9e>
 80054bc:	2300      	movs	r3, #0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d109      	bne.n	80054d6 <xQueueGenericSend+0xb6>
 80054c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	61fb      	str	r3, [r7, #28]
 80054d4:	e7fe      	b.n	80054d4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054d6:	f001 ff01 	bl	80072dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d302      	bcc.n	80054ec <xQueueGenericSend+0xcc>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d129      	bne.n	8005540 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	68b9      	ldr	r1, [r7, #8]
 80054f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054f2:	f000 fc82 	bl	8005dfa <prvCopyDataToQueue>
 80054f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d010      	beq.n	8005522 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005502:	3324      	adds	r3, #36	; 0x24
 8005504:	4618      	mov	r0, r3
 8005506:	f001 f9d7 	bl	80068b8 <xTaskRemoveFromEventList>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d013      	beq.n	8005538 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005510:	4b3f      	ldr	r3, [pc, #252]	; (8005610 <xQueueGenericSend+0x1f0>)
 8005512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	e00a      	b.n	8005538 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005524:	2b00      	cmp	r3, #0
 8005526:	d007      	beq.n	8005538 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005528:	4b39      	ldr	r3, [pc, #228]	; (8005610 <xQueueGenericSend+0x1f0>)
 800552a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005538:	f001 fefe 	bl	8007338 <vPortExitCritical>
				return pdPASS;
 800553c:	2301      	movs	r3, #1
 800553e:	e063      	b.n	8005608 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d103      	bne.n	800554e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005546:	f001 fef7 	bl	8007338 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800554a:	2300      	movs	r3, #0
 800554c:	e05c      	b.n	8005608 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800554e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005550:	2b00      	cmp	r3, #0
 8005552:	d106      	bne.n	8005562 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005554:	f107 0314 	add.w	r3, r7, #20
 8005558:	4618      	mov	r0, r3
 800555a:	f001 fa0f 	bl	800697c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800555e:	2301      	movs	r3, #1
 8005560:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005562:	f001 fee9 	bl	8007338 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005566:	f000 ffa5 	bl	80064b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800556a:	f001 feb7 	bl	80072dc <vPortEnterCritical>
 800556e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005570:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005574:	b25b      	sxtb	r3, r3
 8005576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557a:	d103      	bne.n	8005584 <xQueueGenericSend+0x164>
 800557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005586:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800558a:	b25b      	sxtb	r3, r3
 800558c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005590:	d103      	bne.n	800559a <xQueueGenericSend+0x17a>
 8005592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800559a:	f001 fecd 	bl	8007338 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800559e:	1d3a      	adds	r2, r7, #4
 80055a0:	f107 0314 	add.w	r3, r7, #20
 80055a4:	4611      	mov	r1, r2
 80055a6:	4618      	mov	r0, r3
 80055a8:	f001 f9fe 	bl	80069a8 <xTaskCheckForTimeOut>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d124      	bne.n	80055fc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80055b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055b4:	f000 fd19 	bl	8005fea <prvIsQueueFull>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d018      	beq.n	80055f0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80055be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c0:	3310      	adds	r3, #16
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	4611      	mov	r1, r2
 80055c6:	4618      	mov	r0, r3
 80055c8:	f001 f952 	bl	8006870 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80055cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055ce:	f000 fca4 	bl	8005f1a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80055d2:	f000 ff7d 	bl	80064d0 <xTaskResumeAll>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f47f af7c 	bne.w	80054d6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80055de:	4b0c      	ldr	r3, [pc, #48]	; (8005610 <xQueueGenericSend+0x1f0>)
 80055e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	e772      	b.n	80054d6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80055f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055f2:	f000 fc92 	bl	8005f1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055f6:	f000 ff6b 	bl	80064d0 <xTaskResumeAll>
 80055fa:	e76c      	b.n	80054d6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80055fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055fe:	f000 fc8c 	bl	8005f1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005602:	f000 ff65 	bl	80064d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005606:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005608:	4618      	mov	r0, r3
 800560a:	3738      	adds	r7, #56	; 0x38
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	e000ed04 	.word	0xe000ed04

08005614 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b08e      	sub	sp, #56	; 0x38
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005628:	2b00      	cmp	r3, #0
 800562a:	d109      	bne.n	8005640 <xQueueGenericSendFromISR+0x2c>
 800562c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005630:	f383 8811 	msr	BASEPRI, r3
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	627b      	str	r3, [r7, #36]	; 0x24
 800563e:	e7fe      	b.n	800563e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d103      	bne.n	800564e <xQueueGenericSendFromISR+0x3a>
 8005646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <xQueueGenericSendFromISR+0x3e>
 800564e:	2301      	movs	r3, #1
 8005650:	e000      	b.n	8005654 <xQueueGenericSendFromISR+0x40>
 8005652:	2300      	movs	r3, #0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d109      	bne.n	800566c <xQueueGenericSendFromISR+0x58>
 8005658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565c:	f383 8811 	msr	BASEPRI, r3
 8005660:	f3bf 8f6f 	isb	sy
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	623b      	str	r3, [r7, #32]
 800566a:	e7fe      	b.n	800566a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2b02      	cmp	r3, #2
 8005670:	d103      	bne.n	800567a <xQueueGenericSendFromISR+0x66>
 8005672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005676:	2b01      	cmp	r3, #1
 8005678:	d101      	bne.n	800567e <xQueueGenericSendFromISR+0x6a>
 800567a:	2301      	movs	r3, #1
 800567c:	e000      	b.n	8005680 <xQueueGenericSendFromISR+0x6c>
 800567e:	2300      	movs	r3, #0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d109      	bne.n	8005698 <xQueueGenericSendFromISR+0x84>
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	61fb      	str	r3, [r7, #28]
 8005696:	e7fe      	b.n	8005696 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005698:	f001 fefc 	bl	8007494 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800569c:	f3ef 8211 	mrs	r2, BASEPRI
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	61ba      	str	r2, [r7, #24]
 80056b2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80056b4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d302      	bcc.n	80056ca <xQueueGenericSendFromISR+0xb6>
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d12c      	bne.n	8005724 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80056ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	68b9      	ldr	r1, [r7, #8]
 80056d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056da:	f000 fb8e 	bl	8005dfa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80056de:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80056e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e6:	d112      	bne.n	800570e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d016      	beq.n	800571e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	3324      	adds	r3, #36	; 0x24
 80056f4:	4618      	mov	r0, r3
 80056f6:	f001 f8df 	bl	80068b8 <xTaskRemoveFromEventList>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00e      	beq.n	800571e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00b      	beq.n	800571e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	e007      	b.n	800571e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800570e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005712:	3301      	adds	r3, #1
 8005714:	b2db      	uxtb	r3, r3
 8005716:	b25a      	sxtb	r2, r3
 8005718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800571e:	2301      	movs	r3, #1
 8005720:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005722:	e001      	b.n	8005728 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005724:	2300      	movs	r3, #0
 8005726:	637b      	str	r3, [r7, #52]	; 0x34
 8005728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005734:	4618      	mov	r0, r3
 8005736:	3738      	adds	r7, #56	; 0x38
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b08e      	sub	sp, #56	; 0x38
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800574a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574c:	2b00      	cmp	r3, #0
 800574e:	d109      	bne.n	8005764 <xQueueGiveFromISR+0x28>
	__asm volatile
 8005750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	623b      	str	r3, [r7, #32]
 8005762:	e7fe      	b.n	8005762 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005768:	2b00      	cmp	r3, #0
 800576a:	d009      	beq.n	8005780 <xQueueGiveFromISR+0x44>
 800576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	61fb      	str	r3, [r7, #28]
 800577e:	e7fe      	b.n	800577e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d103      	bne.n	8005790 <xQueueGiveFromISR+0x54>
 8005788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <xQueueGiveFromISR+0x58>
 8005790:	2301      	movs	r3, #1
 8005792:	e000      	b.n	8005796 <xQueueGiveFromISR+0x5a>
 8005794:	2300      	movs	r3, #0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d109      	bne.n	80057ae <xQueueGiveFromISR+0x72>
 800579a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579e:	f383 8811 	msr	BASEPRI, r3
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	61bb      	str	r3, [r7, #24]
 80057ac:	e7fe      	b.n	80057ac <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057ae:	f001 fe71 	bl	8007494 <vPortValidateInterruptPriority>
	__asm volatile
 80057b2:	f3ef 8211 	mrs	r2, BASEPRI
 80057b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	617a      	str	r2, [r7, #20]
 80057c8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80057ca:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80057d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057da:	429a      	cmp	r2, r3
 80057dc:	d22b      	bcs.n	8005836 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80057de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80057e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80057f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80057f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f8:	d112      	bne.n	8005820 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d016      	beq.n	8005830 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005804:	3324      	adds	r3, #36	; 0x24
 8005806:	4618      	mov	r0, r3
 8005808:	f001 f856 	bl	80068b8 <xTaskRemoveFromEventList>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00e      	beq.n	8005830 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00b      	beq.n	8005830 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2201      	movs	r2, #1
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	e007      	b.n	8005830 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005824:	3301      	adds	r3, #1
 8005826:	b2db      	uxtb	r3, r3
 8005828:	b25a      	sxtb	r2, r3
 800582a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005830:	2301      	movs	r3, #1
 8005832:	637b      	str	r3, [r7, #52]	; 0x34
 8005834:	e001      	b.n	800583a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005836:	2300      	movs	r3, #0
 8005838:	637b      	str	r3, [r7, #52]	; 0x34
 800583a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005846:	4618      	mov	r0, r3
 8005848:	3738      	adds	r7, #56	; 0x38
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
	...

08005850 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b08c      	sub	sp, #48	; 0x30
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800585c:	2300      	movs	r3, #0
 800585e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005866:	2b00      	cmp	r3, #0
 8005868:	d109      	bne.n	800587e <xQueueReceive+0x2e>
	__asm volatile
 800586a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	623b      	str	r3, [r7, #32]
 800587c:	e7fe      	b.n	800587c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d103      	bne.n	800588c <xQueueReceive+0x3c>
 8005884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <xQueueReceive+0x40>
 800588c:	2301      	movs	r3, #1
 800588e:	e000      	b.n	8005892 <xQueueReceive+0x42>
 8005890:	2300      	movs	r3, #0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d109      	bne.n	80058aa <xQueueReceive+0x5a>
 8005896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	61fb      	str	r3, [r7, #28]
 80058a8:	e7fe      	b.n	80058a8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058aa:	f001 f9bb 	bl	8006c24 <xTaskGetSchedulerState>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d102      	bne.n	80058ba <xQueueReceive+0x6a>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <xQueueReceive+0x6e>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <xQueueReceive+0x70>
 80058be:	2300      	movs	r3, #0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d109      	bne.n	80058d8 <xQueueReceive+0x88>
 80058c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	61bb      	str	r3, [r7, #24]
 80058d6:	e7fe      	b.n	80058d6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058d8:	f001 fd00 	bl	80072dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d01f      	beq.n	8005928 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80058e8:	68b9      	ldr	r1, [r7, #8]
 80058ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058ec:	f000 faef 	bl	8005ece <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	1e5a      	subs	r2, r3, #1
 80058f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00f      	beq.n	8005920 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005902:	3310      	adds	r3, #16
 8005904:	4618      	mov	r0, r3
 8005906:	f000 ffd7 	bl	80068b8 <xTaskRemoveFromEventList>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d007      	beq.n	8005920 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005910:	4b3c      	ldr	r3, [pc, #240]	; (8005a04 <xQueueReceive+0x1b4>)
 8005912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005920:	f001 fd0a 	bl	8007338 <vPortExitCritical>
				return pdPASS;
 8005924:	2301      	movs	r3, #1
 8005926:	e069      	b.n	80059fc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d103      	bne.n	8005936 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800592e:	f001 fd03 	bl	8007338 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005932:	2300      	movs	r3, #0
 8005934:	e062      	b.n	80059fc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005938:	2b00      	cmp	r3, #0
 800593a:	d106      	bne.n	800594a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800593c:	f107 0310 	add.w	r3, r7, #16
 8005940:	4618      	mov	r0, r3
 8005942:	f001 f81b 	bl	800697c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005946:	2301      	movs	r3, #1
 8005948:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800594a:	f001 fcf5 	bl	8007338 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800594e:	f000 fdb1 	bl	80064b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005952:	f001 fcc3 	bl	80072dc <vPortEnterCritical>
 8005956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005958:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800595c:	b25b      	sxtb	r3, r3
 800595e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005962:	d103      	bne.n	800596c <xQueueReceive+0x11c>
 8005964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800596c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005972:	b25b      	sxtb	r3, r3
 8005974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005978:	d103      	bne.n	8005982 <xQueueReceive+0x132>
 800597a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005982:	f001 fcd9 	bl	8007338 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005986:	1d3a      	adds	r2, r7, #4
 8005988:	f107 0310 	add.w	r3, r7, #16
 800598c:	4611      	mov	r1, r2
 800598e:	4618      	mov	r0, r3
 8005990:	f001 f80a 	bl	80069a8 <xTaskCheckForTimeOut>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d123      	bne.n	80059e2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800599a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800599c:	f000 fb0f 	bl	8005fbe <prvIsQueueEmpty>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d017      	beq.n	80059d6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80059a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a8:	3324      	adds	r3, #36	; 0x24
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	4611      	mov	r1, r2
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 ff5e 	bl	8006870 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80059b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059b6:	f000 fab0 	bl	8005f1a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80059ba:	f000 fd89 	bl	80064d0 <xTaskResumeAll>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d189      	bne.n	80058d8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80059c4:	4b0f      	ldr	r3, [pc, #60]	; (8005a04 <xQueueReceive+0x1b4>)
 80059c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ca:	601a      	str	r2, [r3, #0]
 80059cc:	f3bf 8f4f 	dsb	sy
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	e780      	b.n	80058d8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80059d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059d8:	f000 fa9f 	bl	8005f1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059dc:	f000 fd78 	bl	80064d0 <xTaskResumeAll>
 80059e0:	e77a      	b.n	80058d8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80059e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059e4:	f000 fa99 	bl	8005f1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059e8:	f000 fd72 	bl	80064d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059ee:	f000 fae6 	bl	8005fbe <prvIsQueueEmpty>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f43f af6f 	beq.w	80058d8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80059fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3730      	adds	r7, #48	; 0x30
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	e000ed04 	.word	0xe000ed04

08005a08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b08e      	sub	sp, #56	; 0x38
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a12:	2300      	movs	r3, #0
 8005a14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d109      	bne.n	8005a38 <xQueueSemaphoreTake+0x30>
 8005a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	623b      	str	r3, [r7, #32]
 8005a36:	e7fe      	b.n	8005a36 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d009      	beq.n	8005a54 <xQueueSemaphoreTake+0x4c>
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	61fb      	str	r3, [r7, #28]
 8005a52:	e7fe      	b.n	8005a52 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a54:	f001 f8e6 	bl	8006c24 <xTaskGetSchedulerState>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d102      	bne.n	8005a64 <xQueueSemaphoreTake+0x5c>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <xQueueSemaphoreTake+0x60>
 8005a64:	2301      	movs	r3, #1
 8005a66:	e000      	b.n	8005a6a <xQueueSemaphoreTake+0x62>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d109      	bne.n	8005a82 <xQueueSemaphoreTake+0x7a>
 8005a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	61bb      	str	r3, [r7, #24]
 8005a80:	e7fe      	b.n	8005a80 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a82:	f001 fc2b 	bl	80072dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d024      	beq.n	8005adc <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a94:	1e5a      	subs	r2, r3, #1
 8005a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a98:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d104      	bne.n	8005aac <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005aa2:	f001 fa79 	bl	8006f98 <pvTaskIncrementMutexHeldCount>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aaa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00f      	beq.n	8005ad4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab6:	3310      	adds	r3, #16
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 fefd 	bl	80068b8 <xTaskRemoveFromEventList>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d007      	beq.n	8005ad4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ac4:	4b53      	ldr	r3, [pc, #332]	; (8005c14 <xQueueSemaphoreTake+0x20c>)
 8005ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ad4:	f001 fc30 	bl	8007338 <vPortExitCritical>
				return pdPASS;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e096      	b.n	8005c0a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d110      	bne.n	8005b04 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d009      	beq.n	8005afc <xQueueSemaphoreTake+0xf4>
 8005ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aec:	f383 8811 	msr	BASEPRI, r3
 8005af0:	f3bf 8f6f 	isb	sy
 8005af4:	f3bf 8f4f 	dsb	sy
 8005af8:	617b      	str	r3, [r7, #20]
 8005afa:	e7fe      	b.n	8005afa <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005afc:	f001 fc1c 	bl	8007338 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b00:	2300      	movs	r3, #0
 8005b02:	e082      	b.n	8005c0a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d106      	bne.n	8005b18 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b0a:	f107 030c 	add.w	r3, r7, #12
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 ff34 	bl	800697c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b14:	2301      	movs	r3, #1
 8005b16:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b18:	f001 fc0e 	bl	8007338 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b1c:	f000 fcca 	bl	80064b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b20:	f001 fbdc 	bl	80072dc <vPortEnterCritical>
 8005b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b2a:	b25b      	sxtb	r3, r3
 8005b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b30:	d103      	bne.n	8005b3a <xQueueSemaphoreTake+0x132>
 8005b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b40:	b25b      	sxtb	r3, r3
 8005b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b46:	d103      	bne.n	8005b50 <xQueueSemaphoreTake+0x148>
 8005b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b50:	f001 fbf2 	bl	8007338 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b54:	463a      	mov	r2, r7
 8005b56:	f107 030c 	add.w	r3, r7, #12
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f000 ff23 	bl	80069a8 <xTaskCheckForTimeOut>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d132      	bne.n	8005bce <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b6a:	f000 fa28 	bl	8005fbe <prvIsQueueEmpty>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d026      	beq.n	8005bc2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d109      	bne.n	8005b90 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8005b7c:	f001 fbae 	bl	80072dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f001 f86b 	bl	8006c60 <xTaskPriorityInherit>
 8005b8a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005b8c:	f001 fbd4 	bl	8007338 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b92:	3324      	adds	r3, #36	; 0x24
 8005b94:	683a      	ldr	r2, [r7, #0]
 8005b96:	4611      	mov	r1, r2
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 fe69 	bl	8006870 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ba0:	f000 f9bb 	bl	8005f1a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ba4:	f000 fc94 	bl	80064d0 <xTaskResumeAll>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f47f af69 	bne.w	8005a82 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005bb0:	4b18      	ldr	r3, [pc, #96]	; (8005c14 <xQueueSemaphoreTake+0x20c>)
 8005bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb6:	601a      	str	r2, [r3, #0]
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	e75f      	b.n	8005a82 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005bc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bc4:	f000 f9a9 	bl	8005f1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bc8:	f000 fc82 	bl	80064d0 <xTaskResumeAll>
 8005bcc:	e759      	b.n	8005a82 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005bce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bd0:	f000 f9a3 	bl	8005f1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bd4:	f000 fc7c 	bl	80064d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bda:	f000 f9f0 	bl	8005fbe <prvIsQueueEmpty>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f43f af4e 	beq.w	8005a82 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00d      	beq.n	8005c08 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8005bec:	f001 fb76 	bl	80072dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005bf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bf2:	f000 f8ea 	bl	8005dca <prvGetDisinheritPriorityAfterTimeout>
 8005bf6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f001 f932 	bl	8006e68 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005c04:	f001 fb98 	bl	8007338 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3738      	adds	r7, #56	; 0x38
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	e000ed04 	.word	0xe000ed04

08005c18 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08e      	sub	sp, #56	; 0x38
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d109      	bne.n	8005c42 <xQueueReceiveFromISR+0x2a>
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	623b      	str	r3, [r7, #32]
 8005c40:	e7fe      	b.n	8005c40 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d103      	bne.n	8005c50 <xQueueReceiveFromISR+0x38>
 8005c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <xQueueReceiveFromISR+0x3c>
 8005c50:	2301      	movs	r3, #1
 8005c52:	e000      	b.n	8005c56 <xQueueReceiveFromISR+0x3e>
 8005c54:	2300      	movs	r3, #0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d109      	bne.n	8005c6e <xQueueReceiveFromISR+0x56>
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	61fb      	str	r3, [r7, #28]
 8005c6c:	e7fe      	b.n	8005c6c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c6e:	f001 fc11 	bl	8007494 <vPortValidateInterruptPriority>
	__asm volatile
 8005c72:	f3ef 8211 	mrs	r2, BASEPRI
 8005c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7a:	f383 8811 	msr	BASEPRI, r3
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	61ba      	str	r2, [r7, #24]
 8005c88:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005c8a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c92:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d02f      	beq.n	8005cfa <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ca4:	68b9      	ldr	r1, [r7, #8]
 8005ca6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ca8:	f000 f911 	bl	8005ece <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cae:	1e5a      	subs	r2, r3, #1
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005cb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cbc:	d112      	bne.n	8005ce4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d016      	beq.n	8005cf4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc8:	3310      	adds	r3, #16
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 fdf4 	bl	80068b8 <xTaskRemoveFromEventList>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00e      	beq.n	8005cf4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00b      	beq.n	8005cf4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	e007      	b.n	8005cf4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ce8:	3301      	adds	r3, #1
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	b25a      	sxtb	r2, r3
 8005cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	637b      	str	r3, [r7, #52]	; 0x34
 8005cf8:	e001      	b.n	8005cfe <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8005cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d00:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3738      	adds	r7, #56	; 0x38
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b084      	sub	sp, #16
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d109      	bne.n	8005d34 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8005d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d24:	f383 8811 	msr	BASEPRI, r3
 8005d28:	f3bf 8f6f 	isb	sy
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	60bb      	str	r3, [r7, #8]
 8005d32:	e7fe      	b.n	8005d32 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8005d34:	f001 fad2 	bl	80072dc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005d3e:	f001 fafb 	bl	8007338 <vPortExitCritical>

	return uxReturn;
 8005d42:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005d44:	4618      	mov	r0, r3
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d109      	bne.n	8005d72 <uxQueueMessagesWaitingFromISR+0x26>
 8005d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	60fb      	str	r3, [r7, #12]
 8005d70:	e7fe      	b.n	8005d70 <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d76:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005d78:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	371c      	adds	r7, #28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b084      	sub	sp, #16
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d109      	bne.n	8005dac <vQueueDelete+0x26>
 8005d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	60bb      	str	r3, [r7, #8]
 8005daa:	e7fe      	b.n	8005daa <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 f935 	bl	800601c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d102      	bne.n	8005dc2 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f001 fc69 	bl	8007694 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005dc2:	bf00      	nop
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005dca:	b480      	push	{r7}
 8005dcc:	b085      	sub	sp, #20
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d006      	beq.n	8005de8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f1c3 0307 	rsb	r3, r3, #7
 8005de4:	60fb      	str	r3, [r7, #12]
 8005de6:	e001      	b.n	8005dec <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005de8:	2300      	movs	r3, #0
 8005dea:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005dec:	68fb      	ldr	r3, [r7, #12]
	}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b086      	sub	sp, #24
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	60f8      	str	r0, [r7, #12]
 8005e02:	60b9      	str	r1, [r7, #8]
 8005e04:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e06:	2300      	movs	r3, #0
 8005e08:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10d      	bne.n	8005e34 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d14d      	bne.n	8005ebc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f000 ff9b 	bl	8006d60 <xTaskPriorityDisinherit>
 8005e2a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	609a      	str	r2, [r3, #8]
 8005e32:	e043      	b.n	8005ebc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d119      	bne.n	8005e6e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6858      	ldr	r0, [r3, #4]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	461a      	mov	r2, r3
 8005e44:	68b9      	ldr	r1, [r7, #8]
 8005e46:	f011 ff94 	bl	8017d72 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e52:	441a      	add	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d32b      	bcc.n	8005ebc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	605a      	str	r2, [r3, #4]
 8005e6c:	e026      	b.n	8005ebc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	68d8      	ldr	r0, [r3, #12]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e76:	461a      	mov	r2, r3
 8005e78:	68b9      	ldr	r1, [r7, #8]
 8005e7a:	f011 ff7a 	bl	8017d72 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	68da      	ldr	r2, [r3, #12]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	425b      	negs	r3, r3
 8005e88:	441a      	add	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	68da      	ldr	r2, [r3, #12]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d207      	bcs.n	8005eaa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	689a      	ldr	r2, [r3, #8]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	425b      	negs	r3, r3
 8005ea4:	441a      	add	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d105      	bne.n	8005ebc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	1c5a      	adds	r2, r3, #1
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005ec4:	697b      	ldr	r3, [r7, #20]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b082      	sub	sp, #8
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
 8005ed6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d018      	beq.n	8005f12 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee8:	441a      	add	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68da      	ldr	r2, [r3, #12]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d303      	bcc.n	8005f02 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68d9      	ldr	r1, [r3, #12]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	6838      	ldr	r0, [r7, #0]
 8005f0e:	f011 ff30 	bl	8017d72 <memcpy>
	}
}
 8005f12:	bf00      	nop
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b084      	sub	sp, #16
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f22:	f001 f9db 	bl	80072dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f2c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f2e:	e011      	b.n	8005f54 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d012      	beq.n	8005f5e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	3324      	adds	r3, #36	; 0x24
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 fcbb 	bl	80068b8 <xTaskRemoveFromEventList>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d001      	beq.n	8005f4c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f48:	f000 fd8e 	bl	8006a68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	dce9      	bgt.n	8005f30 <prvUnlockQueue+0x16>
 8005f5c:	e000      	b.n	8005f60 <prvUnlockQueue+0x46>
					break;
 8005f5e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	22ff      	movs	r2, #255	; 0xff
 8005f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005f68:	f001 f9e6 	bl	8007338 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f6c:	f001 f9b6 	bl	80072dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f76:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f78:	e011      	b.n	8005f9e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d012      	beq.n	8005fa8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	3310      	adds	r3, #16
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 fc96 	bl	80068b8 <xTaskRemoveFromEventList>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f92:	f000 fd69 	bl	8006a68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f96:	7bbb      	ldrb	r3, [r7, #14]
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	dce9      	bgt.n	8005f7a <prvUnlockQueue+0x60>
 8005fa6:	e000      	b.n	8005faa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005fa8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	22ff      	movs	r2, #255	; 0xff
 8005fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005fb2:	f001 f9c1 	bl	8007338 <vPortExitCritical>
}
 8005fb6:	bf00      	nop
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b084      	sub	sp, #16
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fc6:	f001 f989 	bl	80072dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d102      	bne.n	8005fd8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	60fb      	str	r3, [r7, #12]
 8005fd6:	e001      	b.n	8005fdc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fdc:	f001 f9ac 	bl	8007338 <vPortExitCritical>

	return xReturn;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b084      	sub	sp, #16
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ff2:	f001 f973 	bl	80072dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d102      	bne.n	8006008 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006002:	2301      	movs	r3, #1
 8006004:	60fb      	str	r3, [r7, #12]
 8006006:	e001      	b.n	800600c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006008:	2300      	movs	r3, #0
 800600a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800600c:	f001 f994 	bl	8007338 <vPortExitCritical>

	return xReturn;
 8006010:	68fb      	ldr	r3, [r7, #12]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
	...

0800601c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006024:	2300      	movs	r3, #0
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	e016      	b.n	8006058 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800602a:	4a10      	ldr	r2, [pc, #64]	; (800606c <vQueueUnregisterQueue+0x50>)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	4413      	add	r3, r2
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	429a      	cmp	r2, r3
 8006038:	d10b      	bne.n	8006052 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800603a:	4a0c      	ldr	r2, [pc, #48]	; (800606c <vQueueUnregisterQueue+0x50>)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2100      	movs	r1, #0
 8006040:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006044:	4a09      	ldr	r2, [pc, #36]	; (800606c <vQueueUnregisterQueue+0x50>)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	4413      	add	r3, r2
 800604c:	2200      	movs	r2, #0
 800604e:	605a      	str	r2, [r3, #4]
				break;
 8006050:	e005      	b.n	800605e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	3301      	adds	r3, #1
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2b07      	cmp	r3, #7
 800605c:	d9e5      	bls.n	800602a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800605e:	bf00      	nop
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	2000bd9c 	.word	0x2000bd9c

08006070 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006070:	b580      	push	{r7, lr}
 8006072:	b08e      	sub	sp, #56	; 0x38
 8006074:	af04      	add	r7, sp, #16
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
 800607c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800607e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006080:	2b00      	cmp	r3, #0
 8006082:	d109      	bne.n	8006098 <xTaskCreateStatic+0x28>
 8006084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006088:	f383 8811 	msr	BASEPRI, r3
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	623b      	str	r3, [r7, #32]
 8006096:	e7fe      	b.n	8006096 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609a:	2b00      	cmp	r3, #0
 800609c:	d109      	bne.n	80060b2 <xTaskCreateStatic+0x42>
 800609e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	61fb      	str	r3, [r7, #28]
 80060b0:	e7fe      	b.n	80060b0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060b2:	2354      	movs	r3, #84	; 0x54
 80060b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	2b54      	cmp	r3, #84	; 0x54
 80060ba:	d009      	beq.n	80060d0 <xTaskCreateStatic+0x60>
 80060bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c0:	f383 8811 	msr	BASEPRI, r3
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	61bb      	str	r3, [r7, #24]
 80060ce:	e7fe      	b.n	80060ce <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d01e      	beq.n	8006116 <xTaskCreateStatic+0xa6>
 80060d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d01b      	beq.n	8006116 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060e6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060f0:	2300      	movs	r3, #0
 80060f2:	9303      	str	r3, [sp, #12]
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	9302      	str	r3, [sp, #8]
 80060f8:	f107 0314 	add.w	r3, r7, #20
 80060fc:	9301      	str	r3, [sp, #4]
 80060fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	68b9      	ldr	r1, [r7, #8]
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 f850 	bl	80061ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800610e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006110:	f000 f8d4 	bl	80062bc <prvAddNewTaskToReadyList>
 8006114:	e001      	b.n	800611a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8006116:	2300      	movs	r3, #0
 8006118:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800611a:	697b      	ldr	r3, [r7, #20]
	}
 800611c:	4618      	mov	r0, r3
 800611e:	3728      	adds	r7, #40	; 0x28
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006124:	b580      	push	{r7, lr}
 8006126:	b08c      	sub	sp, #48	; 0x30
 8006128:	af04      	add	r7, sp, #16
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	603b      	str	r3, [r7, #0]
 8006130:	4613      	mov	r3, r2
 8006132:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006134:	88fb      	ldrh	r3, [r7, #6]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4618      	mov	r0, r3
 800613a:	f001 f9e9 	bl	8007510 <pvPortMalloc>
 800613e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00e      	beq.n	8006164 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006146:	2054      	movs	r0, #84	; 0x54
 8006148:	f001 f9e2 	bl	8007510 <pvPortMalloc>
 800614c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	631a      	str	r2, [r3, #48]	; 0x30
 800615a:	e005      	b.n	8006168 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800615c:	6978      	ldr	r0, [r7, #20]
 800615e:	f001 fa99 	bl	8007694 <vPortFree>
 8006162:	e001      	b.n	8006168 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006164:	2300      	movs	r3, #0
 8006166:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d017      	beq.n	800619e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006176:	88fa      	ldrh	r2, [r7, #6]
 8006178:	2300      	movs	r3, #0
 800617a:	9303      	str	r3, [sp, #12]
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	9302      	str	r3, [sp, #8]
 8006180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006182:	9301      	str	r3, [sp, #4]
 8006184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	68b9      	ldr	r1, [r7, #8]
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 f80e 	bl	80061ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006192:	69f8      	ldr	r0, [r7, #28]
 8006194:	f000 f892 	bl	80062bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006198:	2301      	movs	r3, #1
 800619a:	61bb      	str	r3, [r7, #24]
 800619c:	e002      	b.n	80061a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800619e:	f04f 33ff 	mov.w	r3, #4294967295
 80061a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061a4:	69bb      	ldr	r3, [r7, #24]
	}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3720      	adds	r7, #32
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b088      	sub	sp, #32
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	607a      	str	r2, [r7, #4]
 80061ba:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80061c6:	3b01      	subs	r3, #1
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	f023 0307 	bic.w	r3, r3, #7
 80061d4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	f003 0307 	and.w	r3, r3, #7
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d009      	beq.n	80061f4 <prvInitialiseNewTask+0x46>
 80061e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	617b      	str	r3, [r7, #20]
 80061f2:	e7fe      	b.n	80061f2 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d01f      	beq.n	800623a <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061fa:	2300      	movs	r3, #0
 80061fc:	61fb      	str	r3, [r7, #28]
 80061fe:	e012      	b.n	8006226 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	4413      	add	r3, r2
 8006206:	7819      	ldrb	r1, [r3, #0]
 8006208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	4413      	add	r3, r2
 800620e:	3334      	adds	r3, #52	; 0x34
 8006210:	460a      	mov	r2, r1
 8006212:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	4413      	add	r3, r2
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d006      	beq.n	800622e <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	3301      	adds	r3, #1
 8006224:	61fb      	str	r3, [r7, #28]
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	2b0f      	cmp	r3, #15
 800622a:	d9e9      	bls.n	8006200 <prvInitialiseNewTask+0x52>
 800622c:	e000      	b.n	8006230 <prvInitialiseNewTask+0x82>
			{
				break;
 800622e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	2200      	movs	r2, #0
 8006234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006238:	e003      	b.n	8006242 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800623a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006244:	2b06      	cmp	r3, #6
 8006246:	d901      	bls.n	800624c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006248:	2306      	movs	r3, #6
 800624a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800624c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006250:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006256:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625a:	2200      	movs	r2, #0
 800625c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800625e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006260:	3304      	adds	r3, #4
 8006262:	4618      	mov	r0, r3
 8006264:	f7fe fec1 	bl	8004fea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626a:	3318      	adds	r3, #24
 800626c:	4618      	mov	r0, r3
 800626e:	f7fe febc 	bl	8004fea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006276:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627a:	f1c3 0207 	rsb	r2, r3, #7
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006286:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628a:	2200      	movs	r2, #0
 800628c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800628e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006296:	683a      	ldr	r2, [r7, #0]
 8006298:	68f9      	ldr	r1, [r7, #12]
 800629a:	69b8      	ldr	r0, [r7, #24]
 800629c:	f000 fef6 	bl	800708c <pxPortInitialiseStack>
 80062a0:	4602      	mov	r2, r0
 80062a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80062a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062b2:	bf00      	nop
 80062b4:	3720      	adds	r7, #32
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
	...

080062bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80062c4:	f001 f80a 	bl	80072dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80062c8:	4b2a      	ldr	r3, [pc, #168]	; (8006374 <prvAddNewTaskToReadyList+0xb8>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3301      	adds	r3, #1
 80062ce:	4a29      	ldr	r2, [pc, #164]	; (8006374 <prvAddNewTaskToReadyList+0xb8>)
 80062d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80062d2:	4b29      	ldr	r3, [pc, #164]	; (8006378 <prvAddNewTaskToReadyList+0xbc>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d109      	bne.n	80062ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80062da:	4a27      	ldr	r2, [pc, #156]	; (8006378 <prvAddNewTaskToReadyList+0xbc>)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062e0:	4b24      	ldr	r3, [pc, #144]	; (8006374 <prvAddNewTaskToReadyList+0xb8>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d110      	bne.n	800630a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80062e8:	f000 fbe2 	bl	8006ab0 <prvInitialiseTaskLists>
 80062ec:	e00d      	b.n	800630a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80062ee:	4b23      	ldr	r3, [pc, #140]	; (800637c <prvAddNewTaskToReadyList+0xc0>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d109      	bne.n	800630a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80062f6:	4b20      	ldr	r3, [pc, #128]	; (8006378 <prvAddNewTaskToReadyList+0xbc>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006300:	429a      	cmp	r2, r3
 8006302:	d802      	bhi.n	800630a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006304:	4a1c      	ldr	r2, [pc, #112]	; (8006378 <prvAddNewTaskToReadyList+0xbc>)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800630a:	4b1d      	ldr	r3, [pc, #116]	; (8006380 <prvAddNewTaskToReadyList+0xc4>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3301      	adds	r3, #1
 8006310:	4a1b      	ldr	r2, [pc, #108]	; (8006380 <prvAddNewTaskToReadyList+0xc4>)
 8006312:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006318:	2201      	movs	r2, #1
 800631a:	409a      	lsls	r2, r3
 800631c:	4b19      	ldr	r3, [pc, #100]	; (8006384 <prvAddNewTaskToReadyList+0xc8>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4313      	orrs	r3, r2
 8006322:	4a18      	ldr	r2, [pc, #96]	; (8006384 <prvAddNewTaskToReadyList+0xc8>)
 8006324:	6013      	str	r3, [r2, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632a:	4613      	mov	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4413      	add	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4a15      	ldr	r2, [pc, #84]	; (8006388 <prvAddNewTaskToReadyList+0xcc>)
 8006334:	441a      	add	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	3304      	adds	r3, #4
 800633a:	4619      	mov	r1, r3
 800633c:	4610      	mov	r0, r2
 800633e:	f7fe fe61 	bl	8005004 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006342:	f000 fff9 	bl	8007338 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006346:	4b0d      	ldr	r3, [pc, #52]	; (800637c <prvAddNewTaskToReadyList+0xc0>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00e      	beq.n	800636c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800634e:	4b0a      	ldr	r3, [pc, #40]	; (8006378 <prvAddNewTaskToReadyList+0xbc>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006358:	429a      	cmp	r2, r3
 800635a:	d207      	bcs.n	800636c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800635c:	4b0b      	ldr	r3, [pc, #44]	; (800638c <prvAddNewTaskToReadyList+0xd0>)
 800635e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800636c:	bf00      	nop
 800636e:	3708      	adds	r7, #8
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	200005b0 	.word	0x200005b0
 8006378:	200004b0 	.word	0x200004b0
 800637c:	200005bc 	.word	0x200005bc
 8006380:	200005cc 	.word	0x200005cc
 8006384:	200005b8 	.word	0x200005b8
 8006388:	200004b4 	.word	0x200004b4
 800638c:	e000ed04 	.word	0xe000ed04

08006390 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006398:	2300      	movs	r3, #0
 800639a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d016      	beq.n	80063d0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80063a2:	4b13      	ldr	r3, [pc, #76]	; (80063f0 <vTaskDelay+0x60>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d009      	beq.n	80063be <vTaskDelay+0x2e>
 80063aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	60bb      	str	r3, [r7, #8]
 80063bc:	e7fe      	b.n	80063bc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80063be:	f000 f879 	bl	80064b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063c2:	2100      	movs	r1, #0
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 fdfb 	bl	8006fc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80063ca:	f000 f881 	bl	80064d0 <xTaskResumeAll>
 80063ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d107      	bne.n	80063e6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80063d6:	4b07      	ldr	r3, [pc, #28]	; (80063f4 <vTaskDelay+0x64>)
 80063d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80063e6:	bf00      	nop
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	200005d8 	.word	0x200005d8
 80063f4:	e000ed04 	.word	0xe000ed04

080063f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08a      	sub	sp, #40	; 0x28
 80063fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80063fe:	2300      	movs	r3, #0
 8006400:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006402:	2300      	movs	r3, #0
 8006404:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006406:	463a      	mov	r2, r7
 8006408:	1d39      	adds	r1, r7, #4
 800640a:	f107 0308 	add.w	r3, r7, #8
 800640e:	4618      	mov	r0, r3
 8006410:	f7fa f8d6 	bl	80005c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006414:	6839      	ldr	r1, [r7, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	9202      	str	r2, [sp, #8]
 800641c:	9301      	str	r3, [sp, #4]
 800641e:	2300      	movs	r3, #0
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	2300      	movs	r3, #0
 8006424:	460a      	mov	r2, r1
 8006426:	491d      	ldr	r1, [pc, #116]	; (800649c <vTaskStartScheduler+0xa4>)
 8006428:	481d      	ldr	r0, [pc, #116]	; (80064a0 <vTaskStartScheduler+0xa8>)
 800642a:	f7ff fe21 	bl	8006070 <xTaskCreateStatic>
 800642e:	4602      	mov	r2, r0
 8006430:	4b1c      	ldr	r3, [pc, #112]	; (80064a4 <vTaskStartScheduler+0xac>)
 8006432:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006434:	4b1b      	ldr	r3, [pc, #108]	; (80064a4 <vTaskStartScheduler+0xac>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800643c:	2301      	movs	r3, #1
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	e001      	b.n	8006446 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006442:	2300      	movs	r3, #0
 8006444:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d115      	bne.n	8006478 <vTaskStartScheduler+0x80>
 800644c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006450:	f383 8811 	msr	BASEPRI, r3
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800645e:	4b12      	ldr	r3, [pc, #72]	; (80064a8 <vTaskStartScheduler+0xb0>)
 8006460:	f04f 32ff 	mov.w	r2, #4294967295
 8006464:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006466:	4b11      	ldr	r3, [pc, #68]	; (80064ac <vTaskStartScheduler+0xb4>)
 8006468:	2201      	movs	r2, #1
 800646a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800646c:	4b10      	ldr	r3, [pc, #64]	; (80064b0 <vTaskStartScheduler+0xb8>)
 800646e:	2200      	movs	r2, #0
 8006470:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006472:	f000 fe95 	bl	80071a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006476:	e00d      	b.n	8006494 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647e:	d109      	bne.n	8006494 <vTaskStartScheduler+0x9c>
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	60fb      	str	r3, [r7, #12]
 8006492:	e7fe      	b.n	8006492 <vTaskStartScheduler+0x9a>
}
 8006494:	bf00      	nop
 8006496:	3718      	adds	r7, #24
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	08019288 	.word	0x08019288
 80064a0:	08006a81 	.word	0x08006a81
 80064a4:	200005d4 	.word	0x200005d4
 80064a8:	200005d0 	.word	0x200005d0
 80064ac:	200005bc 	.word	0x200005bc
 80064b0:	200005b4 	.word	0x200005b4

080064b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80064b4:	b480      	push	{r7}
 80064b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80064b8:	4b04      	ldr	r3, [pc, #16]	; (80064cc <vTaskSuspendAll+0x18>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3301      	adds	r3, #1
 80064be:	4a03      	ldr	r2, [pc, #12]	; (80064cc <vTaskSuspendAll+0x18>)
 80064c0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80064c2:	bf00      	nop
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	200005d8 	.word	0x200005d8

080064d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80064d6:	2300      	movs	r3, #0
 80064d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80064da:	2300      	movs	r3, #0
 80064dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80064de:	4b41      	ldr	r3, [pc, #260]	; (80065e4 <xTaskResumeAll+0x114>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d109      	bne.n	80064fa <xTaskResumeAll+0x2a>
 80064e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ea:	f383 8811 	msr	BASEPRI, r3
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f3bf 8f4f 	dsb	sy
 80064f6:	603b      	str	r3, [r7, #0]
 80064f8:	e7fe      	b.n	80064f8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80064fa:	f000 feef 	bl	80072dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80064fe:	4b39      	ldr	r3, [pc, #228]	; (80065e4 <xTaskResumeAll+0x114>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3b01      	subs	r3, #1
 8006504:	4a37      	ldr	r2, [pc, #220]	; (80065e4 <xTaskResumeAll+0x114>)
 8006506:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006508:	4b36      	ldr	r3, [pc, #216]	; (80065e4 <xTaskResumeAll+0x114>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d161      	bne.n	80065d4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006510:	4b35      	ldr	r3, [pc, #212]	; (80065e8 <xTaskResumeAll+0x118>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d05d      	beq.n	80065d4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006518:	e02e      	b.n	8006578 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800651a:	4b34      	ldr	r3, [pc, #208]	; (80065ec <xTaskResumeAll+0x11c>)
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3318      	adds	r3, #24
 8006526:	4618      	mov	r0, r3
 8006528:	f7fe fdc9 	bl	80050be <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	3304      	adds	r3, #4
 8006530:	4618      	mov	r0, r3
 8006532:	f7fe fdc4 	bl	80050be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653a:	2201      	movs	r2, #1
 800653c:	409a      	lsls	r2, r3
 800653e:	4b2c      	ldr	r3, [pc, #176]	; (80065f0 <xTaskResumeAll+0x120>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4313      	orrs	r3, r2
 8006544:	4a2a      	ldr	r2, [pc, #168]	; (80065f0 <xTaskResumeAll+0x120>)
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800654c:	4613      	mov	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	4a27      	ldr	r2, [pc, #156]	; (80065f4 <xTaskResumeAll+0x124>)
 8006556:	441a      	add	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3304      	adds	r3, #4
 800655c:	4619      	mov	r1, r3
 800655e:	4610      	mov	r0, r2
 8006560:	f7fe fd50 	bl	8005004 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006568:	4b23      	ldr	r3, [pc, #140]	; (80065f8 <xTaskResumeAll+0x128>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656e:	429a      	cmp	r2, r3
 8006570:	d302      	bcc.n	8006578 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006572:	4b22      	ldr	r3, [pc, #136]	; (80065fc <xTaskResumeAll+0x12c>)
 8006574:	2201      	movs	r2, #1
 8006576:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006578:	4b1c      	ldr	r3, [pc, #112]	; (80065ec <xTaskResumeAll+0x11c>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1cc      	bne.n	800651a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d001      	beq.n	800658a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006586:	f000 fb2d 	bl	8006be4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800658a:	4b1d      	ldr	r3, [pc, #116]	; (8006600 <xTaskResumeAll+0x130>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d010      	beq.n	80065b8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006596:	f000 f859 	bl	800664c <xTaskIncrementTick>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80065a0:	4b16      	ldr	r3, [pc, #88]	; (80065fc <xTaskResumeAll+0x12c>)
 80065a2:	2201      	movs	r2, #1
 80065a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	3b01      	subs	r3, #1
 80065aa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1f1      	bne.n	8006596 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80065b2:	4b13      	ldr	r3, [pc, #76]	; (8006600 <xTaskResumeAll+0x130>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80065b8:	4b10      	ldr	r3, [pc, #64]	; (80065fc <xTaskResumeAll+0x12c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d009      	beq.n	80065d4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80065c0:	2301      	movs	r3, #1
 80065c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80065c4:	4b0f      	ldr	r3, [pc, #60]	; (8006604 <xTaskResumeAll+0x134>)
 80065c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065d4:	f000 feb0 	bl	8007338 <vPortExitCritical>

	return xAlreadyYielded;
 80065d8:	68bb      	ldr	r3, [r7, #8]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	200005d8 	.word	0x200005d8
 80065e8:	200005b0 	.word	0x200005b0
 80065ec:	20000570 	.word	0x20000570
 80065f0:	200005b8 	.word	0x200005b8
 80065f4:	200004b4 	.word	0x200004b4
 80065f8:	200004b0 	.word	0x200004b0
 80065fc:	200005c4 	.word	0x200005c4
 8006600:	200005c0 	.word	0x200005c0
 8006604:	e000ed04 	.word	0xe000ed04

08006608 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800660e:	4b05      	ldr	r3, [pc, #20]	; (8006624 <xTaskGetTickCount+0x1c>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006614:	687b      	ldr	r3, [r7, #4]
}
 8006616:	4618      	mov	r0, r3
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	200005b4 	.word	0x200005b4

08006628 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800662e:	f000 ff31 	bl	8007494 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006632:	2300      	movs	r3, #0
 8006634:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006636:	4b04      	ldr	r3, [pc, #16]	; (8006648 <xTaskGetTickCountFromISR+0x20>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800663c:	683b      	ldr	r3, [r7, #0]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	200005b4 	.word	0x200005b4

0800664c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006652:	2300      	movs	r3, #0
 8006654:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006656:	4b4e      	ldr	r3, [pc, #312]	; (8006790 <xTaskIncrementTick+0x144>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	f040 8087 	bne.w	800676e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006660:	4b4c      	ldr	r3, [pc, #304]	; (8006794 <xTaskIncrementTick+0x148>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3301      	adds	r3, #1
 8006666:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006668:	4a4a      	ldr	r2, [pc, #296]	; (8006794 <xTaskIncrementTick+0x148>)
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d11f      	bne.n	80066b4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006674:	4b48      	ldr	r3, [pc, #288]	; (8006798 <xTaskIncrementTick+0x14c>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d009      	beq.n	8006692 <xTaskIncrementTick+0x46>
 800667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	603b      	str	r3, [r7, #0]
 8006690:	e7fe      	b.n	8006690 <xTaskIncrementTick+0x44>
 8006692:	4b41      	ldr	r3, [pc, #260]	; (8006798 <xTaskIncrementTick+0x14c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	60fb      	str	r3, [r7, #12]
 8006698:	4b40      	ldr	r3, [pc, #256]	; (800679c <xTaskIncrementTick+0x150>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a3e      	ldr	r2, [pc, #248]	; (8006798 <xTaskIncrementTick+0x14c>)
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	4a3e      	ldr	r2, [pc, #248]	; (800679c <xTaskIncrementTick+0x150>)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	4b3e      	ldr	r3, [pc, #248]	; (80067a0 <xTaskIncrementTick+0x154>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3301      	adds	r3, #1
 80066ac:	4a3c      	ldr	r2, [pc, #240]	; (80067a0 <xTaskIncrementTick+0x154>)
 80066ae:	6013      	str	r3, [r2, #0]
 80066b0:	f000 fa98 	bl	8006be4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80066b4:	4b3b      	ldr	r3, [pc, #236]	; (80067a4 <xTaskIncrementTick+0x158>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d348      	bcc.n	8006750 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066be:	4b36      	ldr	r3, [pc, #216]	; (8006798 <xTaskIncrementTick+0x14c>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d104      	bne.n	80066d2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066c8:	4b36      	ldr	r3, [pc, #216]	; (80067a4 <xTaskIncrementTick+0x158>)
 80066ca:	f04f 32ff 	mov.w	r2, #4294967295
 80066ce:	601a      	str	r2, [r3, #0]
					break;
 80066d0:	e03e      	b.n	8006750 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066d2:	4b31      	ldr	r3, [pc, #196]	; (8006798 <xTaskIncrementTick+0x14c>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d203      	bcs.n	80066f2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80066ea:	4a2e      	ldr	r2, [pc, #184]	; (80067a4 <xTaskIncrementTick+0x158>)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80066f0:	e02e      	b.n	8006750 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	3304      	adds	r3, #4
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7fe fce1 	bl	80050be <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006700:	2b00      	cmp	r3, #0
 8006702:	d004      	beq.n	800670e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	3318      	adds	r3, #24
 8006708:	4618      	mov	r0, r3
 800670a:	f7fe fcd8 	bl	80050be <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006712:	2201      	movs	r2, #1
 8006714:	409a      	lsls	r2, r3
 8006716:	4b24      	ldr	r3, [pc, #144]	; (80067a8 <xTaskIncrementTick+0x15c>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4313      	orrs	r3, r2
 800671c:	4a22      	ldr	r2, [pc, #136]	; (80067a8 <xTaskIncrementTick+0x15c>)
 800671e:	6013      	str	r3, [r2, #0]
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006724:	4613      	mov	r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4413      	add	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4a1f      	ldr	r2, [pc, #124]	; (80067ac <xTaskIncrementTick+0x160>)
 800672e:	441a      	add	r2, r3
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	3304      	adds	r3, #4
 8006734:	4619      	mov	r1, r3
 8006736:	4610      	mov	r0, r2
 8006738:	f7fe fc64 	bl	8005004 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006740:	4b1b      	ldr	r3, [pc, #108]	; (80067b0 <xTaskIncrementTick+0x164>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006746:	429a      	cmp	r2, r3
 8006748:	d3b9      	bcc.n	80066be <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800674a:	2301      	movs	r3, #1
 800674c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800674e:	e7b6      	b.n	80066be <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006750:	4b17      	ldr	r3, [pc, #92]	; (80067b0 <xTaskIncrementTick+0x164>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006756:	4915      	ldr	r1, [pc, #84]	; (80067ac <xTaskIncrementTick+0x160>)
 8006758:	4613      	mov	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	440b      	add	r3, r1
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d907      	bls.n	8006778 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8006768:	2301      	movs	r3, #1
 800676a:	617b      	str	r3, [r7, #20]
 800676c:	e004      	b.n	8006778 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800676e:	4b11      	ldr	r3, [pc, #68]	; (80067b4 <xTaskIncrementTick+0x168>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3301      	adds	r3, #1
 8006774:	4a0f      	ldr	r2, [pc, #60]	; (80067b4 <xTaskIncrementTick+0x168>)
 8006776:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006778:	4b0f      	ldr	r3, [pc, #60]	; (80067b8 <xTaskIncrementTick+0x16c>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8006780:	2301      	movs	r3, #1
 8006782:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006784:	697b      	ldr	r3, [r7, #20]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3718      	adds	r7, #24
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	200005d8 	.word	0x200005d8
 8006794:	200005b4 	.word	0x200005b4
 8006798:	20000568 	.word	0x20000568
 800679c:	2000056c 	.word	0x2000056c
 80067a0:	200005c8 	.word	0x200005c8
 80067a4:	200005d0 	.word	0x200005d0
 80067a8:	200005b8 	.word	0x200005b8
 80067ac:	200004b4 	.word	0x200004b4
 80067b0:	200004b0 	.word	0x200004b0
 80067b4:	200005c0 	.word	0x200005c0
 80067b8:	200005c4 	.word	0x200005c4

080067bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80067bc:	b480      	push	{r7}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80067c2:	4b26      	ldr	r3, [pc, #152]	; (800685c <vTaskSwitchContext+0xa0>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80067ca:	4b25      	ldr	r3, [pc, #148]	; (8006860 <vTaskSwitchContext+0xa4>)
 80067cc:	2201      	movs	r2, #1
 80067ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80067d0:	e03e      	b.n	8006850 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80067d2:	4b23      	ldr	r3, [pc, #140]	; (8006860 <vTaskSwitchContext+0xa4>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067d8:	4b22      	ldr	r3, [pc, #136]	; (8006864 <vTaskSwitchContext+0xa8>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	fab3 f383 	clz	r3, r3
 80067e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80067e6:	7afb      	ldrb	r3, [r7, #11]
 80067e8:	f1c3 031f 	rsb	r3, r3, #31
 80067ec:	617b      	str	r3, [r7, #20]
 80067ee:	491e      	ldr	r1, [pc, #120]	; (8006868 <vTaskSwitchContext+0xac>)
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	4613      	mov	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	440b      	add	r3, r1
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d109      	bne.n	8006816 <vTaskSwitchContext+0x5a>
	__asm volatile
 8006802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006806:	f383 8811 	msr	BASEPRI, r3
 800680a:	f3bf 8f6f 	isb	sy
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	607b      	str	r3, [r7, #4]
 8006814:	e7fe      	b.n	8006814 <vTaskSwitchContext+0x58>
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	4613      	mov	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4a11      	ldr	r2, [pc, #68]	; (8006868 <vTaskSwitchContext+0xac>)
 8006822:	4413      	add	r3, r2
 8006824:	613b      	str	r3, [r7, #16]
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	605a      	str	r2, [r3, #4]
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	3308      	adds	r3, #8
 8006838:	429a      	cmp	r2, r3
 800683a:	d104      	bne.n	8006846 <vTaskSwitchContext+0x8a>
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	605a      	str	r2, [r3, #4]
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	4a07      	ldr	r2, [pc, #28]	; (800686c <vTaskSwitchContext+0xb0>)
 800684e:	6013      	str	r3, [r2, #0]
}
 8006850:	bf00      	nop
 8006852:	371c      	adds	r7, #28
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	200005d8 	.word	0x200005d8
 8006860:	200005c4 	.word	0x200005c4
 8006864:	200005b8 	.word	0x200005b8
 8006868:	200004b4 	.word	0x200004b4
 800686c:	200004b0 	.word	0x200004b0

08006870 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d109      	bne.n	8006894 <vTaskPlaceOnEventList+0x24>
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	e7fe      	b.n	8006892 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006894:	4b07      	ldr	r3, [pc, #28]	; (80068b4 <vTaskPlaceOnEventList+0x44>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	3318      	adds	r3, #24
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7fe fbd5 	bl	800504c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068a2:	2101      	movs	r1, #1
 80068a4:	6838      	ldr	r0, [r7, #0]
 80068a6:	f000 fb8b 	bl	8006fc0 <prvAddCurrentTaskToDelayedList>
}
 80068aa:	bf00      	nop
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	200004b0 	.word	0x200004b0

080068b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d109      	bne.n	80068e2 <xTaskRemoveFromEventList+0x2a>
 80068ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	e7fe      	b.n	80068e0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	3318      	adds	r3, #24
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fe fbe9 	bl	80050be <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068ec:	4b1d      	ldr	r3, [pc, #116]	; (8006964 <xTaskRemoveFromEventList+0xac>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d11c      	bne.n	800692e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	3304      	adds	r3, #4
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7fe fbe0 	bl	80050be <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006902:	2201      	movs	r2, #1
 8006904:	409a      	lsls	r2, r3
 8006906:	4b18      	ldr	r3, [pc, #96]	; (8006968 <xTaskRemoveFromEventList+0xb0>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4313      	orrs	r3, r2
 800690c:	4a16      	ldr	r2, [pc, #88]	; (8006968 <xTaskRemoveFromEventList+0xb0>)
 800690e:	6013      	str	r3, [r2, #0]
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006914:	4613      	mov	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4a13      	ldr	r2, [pc, #76]	; (800696c <xTaskRemoveFromEventList+0xb4>)
 800691e:	441a      	add	r2, r3
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	3304      	adds	r3, #4
 8006924:	4619      	mov	r1, r3
 8006926:	4610      	mov	r0, r2
 8006928:	f7fe fb6c 	bl	8005004 <vListInsertEnd>
 800692c:	e005      	b.n	800693a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	3318      	adds	r3, #24
 8006932:	4619      	mov	r1, r3
 8006934:	480e      	ldr	r0, [pc, #56]	; (8006970 <xTaskRemoveFromEventList+0xb8>)
 8006936:	f7fe fb65 	bl	8005004 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693e:	4b0d      	ldr	r3, [pc, #52]	; (8006974 <xTaskRemoveFromEventList+0xbc>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006944:	429a      	cmp	r2, r3
 8006946:	d905      	bls.n	8006954 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006948:	2301      	movs	r3, #1
 800694a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800694c:	4b0a      	ldr	r3, [pc, #40]	; (8006978 <xTaskRemoveFromEventList+0xc0>)
 800694e:	2201      	movs	r2, #1
 8006950:	601a      	str	r2, [r3, #0]
 8006952:	e001      	b.n	8006958 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8006954:	2300      	movs	r3, #0
 8006956:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006958:	697b      	ldr	r3, [r7, #20]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3718      	adds	r7, #24
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	200005d8 	.word	0x200005d8
 8006968:	200005b8 	.word	0x200005b8
 800696c:	200004b4 	.word	0x200004b4
 8006970:	20000570 	.word	0x20000570
 8006974:	200004b0 	.word	0x200004b0
 8006978:	200005c4 	.word	0x200005c4

0800697c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006984:	4b06      	ldr	r3, [pc, #24]	; (80069a0 <vTaskInternalSetTimeOutState+0x24>)
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800698c:	4b05      	ldr	r3, [pc, #20]	; (80069a4 <vTaskInternalSetTimeOutState+0x28>)
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	605a      	str	r2, [r3, #4]
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	200005c8 	.word	0x200005c8
 80069a4:	200005b4 	.word	0x200005b4

080069a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b088      	sub	sp, #32
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d109      	bne.n	80069cc <xTaskCheckForTimeOut+0x24>
 80069b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	613b      	str	r3, [r7, #16]
 80069ca:	e7fe      	b.n	80069ca <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d109      	bne.n	80069e6 <xTaskCheckForTimeOut+0x3e>
 80069d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	60fb      	str	r3, [r7, #12]
 80069e4:	e7fe      	b.n	80069e4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80069e6:	f000 fc79 	bl	80072dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80069ea:	4b1d      	ldr	r3, [pc, #116]	; (8006a60 <xTaskCheckForTimeOut+0xb8>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	69ba      	ldr	r2, [r7, #24]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a02:	d102      	bne.n	8006a0a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a04:	2300      	movs	r3, #0
 8006a06:	61fb      	str	r3, [r7, #28]
 8006a08:	e023      	b.n	8006a52 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	4b15      	ldr	r3, [pc, #84]	; (8006a64 <xTaskCheckForTimeOut+0xbc>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d007      	beq.n	8006a26 <xTaskCheckForTimeOut+0x7e>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d302      	bcc.n	8006a26 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a20:	2301      	movs	r3, #1
 8006a22:	61fb      	str	r3, [r7, #28]
 8006a24:	e015      	b.n	8006a52 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d20b      	bcs.n	8006a48 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	1ad2      	subs	r2, r2, r3
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f7ff ff9d 	bl	800697c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a42:	2300      	movs	r3, #0
 8006a44:	61fb      	str	r3, [r7, #28]
 8006a46:	e004      	b.n	8006a52 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a52:	f000 fc71 	bl	8007338 <vPortExitCritical>

	return xReturn;
 8006a56:	69fb      	ldr	r3, [r7, #28]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3720      	adds	r7, #32
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	200005b4 	.word	0x200005b4
 8006a64:	200005c8 	.word	0x200005c8

08006a68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a68:	b480      	push	{r7}
 8006a6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a6c:	4b03      	ldr	r3, [pc, #12]	; (8006a7c <vTaskMissedYield+0x14>)
 8006a6e:	2201      	movs	r2, #1
 8006a70:	601a      	str	r2, [r3, #0]
}
 8006a72:	bf00      	nop
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	200005c4 	.word	0x200005c4

08006a80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a88:	f000 f852 	bl	8006b30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a8c:	4b06      	ldr	r3, [pc, #24]	; (8006aa8 <prvIdleTask+0x28>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d9f9      	bls.n	8006a88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a94:	4b05      	ldr	r3, [pc, #20]	; (8006aac <prvIdleTask+0x2c>)
 8006a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a9a:	601a      	str	r2, [r3, #0]
 8006a9c:	f3bf 8f4f 	dsb	sy
 8006aa0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006aa4:	e7f0      	b.n	8006a88 <prvIdleTask+0x8>
 8006aa6:	bf00      	nop
 8006aa8:	200004b4 	.word	0x200004b4
 8006aac:	e000ed04 	.word	0xe000ed04

08006ab0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	607b      	str	r3, [r7, #4]
 8006aba:	e00c      	b.n	8006ad6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4a12      	ldr	r2, [pc, #72]	; (8006b10 <prvInitialiseTaskLists+0x60>)
 8006ac8:	4413      	add	r3, r2
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7fe fa6d 	bl	8004faa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	607b      	str	r3, [r7, #4]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b06      	cmp	r3, #6
 8006ada:	d9ef      	bls.n	8006abc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006adc:	480d      	ldr	r0, [pc, #52]	; (8006b14 <prvInitialiseTaskLists+0x64>)
 8006ade:	f7fe fa64 	bl	8004faa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ae2:	480d      	ldr	r0, [pc, #52]	; (8006b18 <prvInitialiseTaskLists+0x68>)
 8006ae4:	f7fe fa61 	bl	8004faa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ae8:	480c      	ldr	r0, [pc, #48]	; (8006b1c <prvInitialiseTaskLists+0x6c>)
 8006aea:	f7fe fa5e 	bl	8004faa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006aee:	480c      	ldr	r0, [pc, #48]	; (8006b20 <prvInitialiseTaskLists+0x70>)
 8006af0:	f7fe fa5b 	bl	8004faa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006af4:	480b      	ldr	r0, [pc, #44]	; (8006b24 <prvInitialiseTaskLists+0x74>)
 8006af6:	f7fe fa58 	bl	8004faa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006afa:	4b0b      	ldr	r3, [pc, #44]	; (8006b28 <prvInitialiseTaskLists+0x78>)
 8006afc:	4a05      	ldr	r2, [pc, #20]	; (8006b14 <prvInitialiseTaskLists+0x64>)
 8006afe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b00:	4b0a      	ldr	r3, [pc, #40]	; (8006b2c <prvInitialiseTaskLists+0x7c>)
 8006b02:	4a05      	ldr	r2, [pc, #20]	; (8006b18 <prvInitialiseTaskLists+0x68>)
 8006b04:	601a      	str	r2, [r3, #0]
}
 8006b06:	bf00      	nop
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	200004b4 	.word	0x200004b4
 8006b14:	20000540 	.word	0x20000540
 8006b18:	20000554 	.word	0x20000554
 8006b1c:	20000570 	.word	0x20000570
 8006b20:	20000584 	.word	0x20000584
 8006b24:	2000059c 	.word	0x2000059c
 8006b28:	20000568 	.word	0x20000568
 8006b2c:	2000056c 	.word	0x2000056c

08006b30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b36:	e019      	b.n	8006b6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b38:	f000 fbd0 	bl	80072dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b3c:	4b0f      	ldr	r3, [pc, #60]	; (8006b7c <prvCheckTasksWaitingTermination+0x4c>)
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	3304      	adds	r3, #4
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7fe fab8 	bl	80050be <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b4e:	4b0c      	ldr	r3, [pc, #48]	; (8006b80 <prvCheckTasksWaitingTermination+0x50>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	3b01      	subs	r3, #1
 8006b54:	4a0a      	ldr	r2, [pc, #40]	; (8006b80 <prvCheckTasksWaitingTermination+0x50>)
 8006b56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b58:	4b0a      	ldr	r3, [pc, #40]	; (8006b84 <prvCheckTasksWaitingTermination+0x54>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	4a09      	ldr	r2, [pc, #36]	; (8006b84 <prvCheckTasksWaitingTermination+0x54>)
 8006b60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b62:	f000 fbe9 	bl	8007338 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f80e 	bl	8006b88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b6c:	4b05      	ldr	r3, [pc, #20]	; (8006b84 <prvCheckTasksWaitingTermination+0x54>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1e1      	bne.n	8006b38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b74:	bf00      	nop
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	20000584 	.word	0x20000584
 8006b80:	200005b0 	.word	0x200005b0
 8006b84:	20000598 	.word	0x20000598

08006b88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d108      	bne.n	8006bac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f000 fd78 	bl	8007694 <vPortFree>
				vPortFree( pxTCB );
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fd75 	bl	8007694 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006baa:	e017      	b.n	8006bdc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d103      	bne.n	8006bbe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fd6c 	bl	8007694 <vPortFree>
	}
 8006bbc:	e00e      	b.n	8006bdc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d009      	beq.n	8006bdc <prvDeleteTCB+0x54>
 8006bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bcc:	f383 8811 	msr	BASEPRI, r3
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	60fb      	str	r3, [r7, #12]
 8006bda:	e7fe      	b.n	8006bda <prvDeleteTCB+0x52>
	}
 8006bdc:	bf00      	nop
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bea:	4b0c      	ldr	r3, [pc, #48]	; (8006c1c <prvResetNextTaskUnblockTime+0x38>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d104      	bne.n	8006bfe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bf4:	4b0a      	ldr	r3, [pc, #40]	; (8006c20 <prvResetNextTaskUnblockTime+0x3c>)
 8006bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bfa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006bfc:	e008      	b.n	8006c10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bfe:	4b07      	ldr	r3, [pc, #28]	; (8006c1c <prvResetNextTaskUnblockTime+0x38>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	4a04      	ldr	r2, [pc, #16]	; (8006c20 <prvResetNextTaskUnblockTime+0x3c>)
 8006c0e:	6013      	str	r3, [r2, #0]
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	20000568 	.word	0x20000568
 8006c20:	200005d0 	.word	0x200005d0

08006c24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c2a:	4b0b      	ldr	r3, [pc, #44]	; (8006c58 <xTaskGetSchedulerState+0x34>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d102      	bne.n	8006c38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c32:	2301      	movs	r3, #1
 8006c34:	607b      	str	r3, [r7, #4]
 8006c36:	e008      	b.n	8006c4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c38:	4b08      	ldr	r3, [pc, #32]	; (8006c5c <xTaskGetSchedulerState+0x38>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d102      	bne.n	8006c46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c40:	2302      	movs	r3, #2
 8006c42:	607b      	str	r3, [r7, #4]
 8006c44:	e001      	b.n	8006c4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c46:	2300      	movs	r3, #0
 8006c48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c4a:	687b      	ldr	r3, [r7, #4]
	}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	200005bc 	.word	0x200005bc
 8006c5c:	200005d8 	.word	0x200005d8

08006c60 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d069      	beq.n	8006d4a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c7a:	4b36      	ldr	r3, [pc, #216]	; (8006d54 <xTaskPriorityInherit+0xf4>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d259      	bcs.n	8006d38 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	db06      	blt.n	8006c9a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c8c:	4b31      	ldr	r3, [pc, #196]	; (8006d54 <xTaskPriorityInherit+0xf4>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c92:	f1c3 0207 	rsb	r2, r3, #7
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	6959      	ldr	r1, [r3, #20]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4a2b      	ldr	r2, [pc, #172]	; (8006d58 <xTaskPriorityInherit+0xf8>)
 8006cac:	4413      	add	r3, r2
 8006cae:	4299      	cmp	r1, r3
 8006cb0:	d13a      	bne.n	8006d28 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7fe fa01 	bl	80050be <uxListRemove>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d115      	bne.n	8006cee <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc6:	4924      	ldr	r1, [pc, #144]	; (8006d58 <xTaskPriorityInherit+0xf8>)
 8006cc8:	4613      	mov	r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	440b      	add	r3, r1
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10a      	bne.n	8006cee <xTaskPriorityInherit+0x8e>
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cdc:	2201      	movs	r2, #1
 8006cde:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce2:	43da      	mvns	r2, r3
 8006ce4:	4b1d      	ldr	r3, [pc, #116]	; (8006d5c <xTaskPriorityInherit+0xfc>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4013      	ands	r3, r2
 8006cea:	4a1c      	ldr	r2, [pc, #112]	; (8006d5c <xTaskPriorityInherit+0xfc>)
 8006cec:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006cee:	4b19      	ldr	r3, [pc, #100]	; (8006d54 <xTaskPriorityInherit+0xf4>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	409a      	lsls	r2, r3
 8006d00:	4b16      	ldr	r3, [pc, #88]	; (8006d5c <xTaskPriorityInherit+0xfc>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	4a15      	ldr	r2, [pc, #84]	; (8006d5c <xTaskPriorityInherit+0xfc>)
 8006d08:	6013      	str	r3, [r2, #0]
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d0e:	4613      	mov	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4a10      	ldr	r2, [pc, #64]	; (8006d58 <xTaskPriorityInherit+0xf8>)
 8006d18:	441a      	add	r2, r3
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	3304      	adds	r3, #4
 8006d1e:	4619      	mov	r1, r3
 8006d20:	4610      	mov	r0, r2
 8006d22:	f7fe f96f 	bl	8005004 <vListInsertEnd>
 8006d26:	e004      	b.n	8006d32 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d28:	4b0a      	ldr	r3, [pc, #40]	; (8006d54 <xTaskPriorityInherit+0xf4>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006d32:	2301      	movs	r3, #1
 8006d34:	60fb      	str	r3, [r7, #12]
 8006d36:	e008      	b.n	8006d4a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d3c:	4b05      	ldr	r3, [pc, #20]	; (8006d54 <xTaskPriorityInherit+0xf4>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d201      	bcs.n	8006d4a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006d46:	2301      	movs	r3, #1
 8006d48:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
	}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	200004b0 	.word	0x200004b0
 8006d58:	200004b4 	.word	0x200004b4
 8006d5c:	200005b8 	.word	0x200005b8

08006d60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d06c      	beq.n	8006e50 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d76:	4b39      	ldr	r3, [pc, #228]	; (8006e5c <xTaskPriorityDisinherit+0xfc>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d009      	beq.n	8006d94 <xTaskPriorityDisinherit+0x34>
 8006d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d84:	f383 8811 	msr	BASEPRI, r3
 8006d88:	f3bf 8f6f 	isb	sy
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	60fb      	str	r3, [r7, #12]
 8006d92:	e7fe      	b.n	8006d92 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d109      	bne.n	8006db0 <xTaskPriorityDisinherit+0x50>
 8006d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da0:	f383 8811 	msr	BASEPRI, r3
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	60bb      	str	r3, [r7, #8]
 8006dae:	e7fe      	b.n	8006dae <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006db4:	1e5a      	subs	r2, r3, #1
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d044      	beq.n	8006e50 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d140      	bne.n	8006e50 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	3304      	adds	r3, #4
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7fe f973 	bl	80050be <uxListRemove>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d115      	bne.n	8006e0a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de2:	491f      	ldr	r1, [pc, #124]	; (8006e60 <xTaskPriorityDisinherit+0x100>)
 8006de4:	4613      	mov	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	440b      	add	r3, r1
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10a      	bne.n	8006e0a <xTaskPriorityDisinherit+0xaa>
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df8:	2201      	movs	r2, #1
 8006dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006dfe:	43da      	mvns	r2, r3
 8006e00:	4b18      	ldr	r3, [pc, #96]	; (8006e64 <xTaskPriorityDisinherit+0x104>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4013      	ands	r3, r2
 8006e06:	4a17      	ldr	r2, [pc, #92]	; (8006e64 <xTaskPriorityDisinherit+0x104>)
 8006e08:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e16:	f1c3 0207 	rsb	r2, r3, #7
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e22:	2201      	movs	r2, #1
 8006e24:	409a      	lsls	r2, r3
 8006e26:	4b0f      	ldr	r3, [pc, #60]	; (8006e64 <xTaskPriorityDisinherit+0x104>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	4a0d      	ldr	r2, [pc, #52]	; (8006e64 <xTaskPriorityDisinherit+0x104>)
 8006e2e:	6013      	str	r3, [r2, #0]
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e34:	4613      	mov	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4a08      	ldr	r2, [pc, #32]	; (8006e60 <xTaskPriorityDisinherit+0x100>)
 8006e3e:	441a      	add	r2, r3
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	3304      	adds	r3, #4
 8006e44:	4619      	mov	r1, r3
 8006e46:	4610      	mov	r0, r2
 8006e48:	f7fe f8dc 	bl	8005004 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e50:	697b      	ldr	r3, [r7, #20]
	}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3718      	adds	r7, #24
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	200004b0 	.word	0x200004b0
 8006e60:	200004b4 	.word	0x200004b4
 8006e64:	200005b8 	.word	0x200005b8

08006e68 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b088      	sub	sp, #32
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006e76:	2301      	movs	r3, #1
 8006e78:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 8081 	beq.w	8006f84 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d109      	bne.n	8006e9e <vTaskPriorityDisinheritAfterTimeout+0x36>
 8006e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8e:	f383 8811 	msr	BASEPRI, r3
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	60fb      	str	r3, [r7, #12]
 8006e9c:	e7fe      	b.n	8006e9c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d902      	bls.n	8006eae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	61fb      	str	r3, [r7, #28]
 8006eac:	e002      	b.n	8006eb4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb8:	69fa      	ldr	r2, [r7, #28]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d062      	beq.n	8006f84 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d15d      	bne.n	8006f84 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006ec8:	4b30      	ldr	r3, [pc, #192]	; (8006f8c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	69ba      	ldr	r2, [r7, #24]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d109      	bne.n	8006ee6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8006ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed6:	f383 8811 	msr	BASEPRI, r3
 8006eda:	f3bf 8f6f 	isb	sy
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	60bb      	str	r3, [r7, #8]
 8006ee4:	e7fe      	b.n	8006ee4 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eea:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	69fa      	ldr	r2, [r7, #28]
 8006ef0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	db04      	blt.n	8006f04 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	f1c3 0207 	rsb	r2, r3, #7
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	6959      	ldr	r1, [r3, #20]
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4a1f      	ldr	r2, [pc, #124]	; (8006f90 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8006f14:	4413      	add	r3, r2
 8006f16:	4299      	cmp	r1, r3
 8006f18:	d134      	bne.n	8006f84 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	3304      	adds	r3, #4
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fe f8cd 	bl	80050be <uxListRemove>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d115      	bne.n	8006f56 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f2e:	4918      	ldr	r1, [pc, #96]	; (8006f90 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8006f30:	4613      	mov	r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	4413      	add	r3, r2
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	440b      	add	r3, r1
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10a      	bne.n	8006f56 <vTaskPriorityDisinheritAfterTimeout+0xee>
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f44:	2201      	movs	r2, #1
 8006f46:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4a:	43da      	mvns	r2, r3
 8006f4c:	4b11      	ldr	r3, [pc, #68]	; (8006f94 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4013      	ands	r3, r2
 8006f52:	4a10      	ldr	r2, [pc, #64]	; (8006f94 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8006f54:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	409a      	lsls	r2, r3
 8006f5e:	4b0d      	ldr	r3, [pc, #52]	; (8006f94 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	4a0b      	ldr	r2, [pc, #44]	; (8006f94 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8006f66:	6013      	str	r3, [r2, #0]
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4413      	add	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4a06      	ldr	r2, [pc, #24]	; (8006f90 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8006f76:	441a      	add	r2, r3
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	4610      	mov	r0, r2
 8006f80:	f7fe f840 	bl	8005004 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f84:	bf00      	nop
 8006f86:	3720      	adds	r7, #32
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	200004b0 	.word	0x200004b0
 8006f90:	200004b4 	.word	0x200004b4
 8006f94:	200005b8 	.word	0x200005b8

08006f98 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006f98:	b480      	push	{r7}
 8006f9a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006f9c:	4b07      	ldr	r3, [pc, #28]	; (8006fbc <pvTaskIncrementMutexHeldCount+0x24>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d004      	beq.n	8006fae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006fa4:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <pvTaskIncrementMutexHeldCount+0x24>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006faa:	3201      	adds	r2, #1
 8006fac:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006fae:	4b03      	ldr	r3, [pc, #12]	; (8006fbc <pvTaskIncrementMutexHeldCount+0x24>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
	}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	200004b0 	.word	0x200004b0

08006fc0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006fca:	4b29      	ldr	r3, [pc, #164]	; (8007070 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fd0:	4b28      	ldr	r3, [pc, #160]	; (8007074 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3304      	adds	r3, #4
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fe f871 	bl	80050be <uxListRemove>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10b      	bne.n	8006ffa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006fe2:	4b24      	ldr	r3, [pc, #144]	; (8007074 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe8:	2201      	movs	r2, #1
 8006fea:	fa02 f303 	lsl.w	r3, r2, r3
 8006fee:	43da      	mvns	r2, r3
 8006ff0:	4b21      	ldr	r3, [pc, #132]	; (8007078 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	4a20      	ldr	r2, [pc, #128]	; (8007078 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ff8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007000:	d10a      	bne.n	8007018 <prvAddCurrentTaskToDelayedList+0x58>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d007      	beq.n	8007018 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007008:	4b1a      	ldr	r3, [pc, #104]	; (8007074 <prvAddCurrentTaskToDelayedList+0xb4>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3304      	adds	r3, #4
 800700e:	4619      	mov	r1, r3
 8007010:	481a      	ldr	r0, [pc, #104]	; (800707c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007012:	f7fd fff7 	bl	8005004 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007016:	e026      	b.n	8007066 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4413      	add	r3, r2
 800701e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007020:	4b14      	ldr	r3, [pc, #80]	; (8007074 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	429a      	cmp	r2, r3
 800702e:	d209      	bcs.n	8007044 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007030:	4b13      	ldr	r3, [pc, #76]	; (8007080 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	4b0f      	ldr	r3, [pc, #60]	; (8007074 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	3304      	adds	r3, #4
 800703a:	4619      	mov	r1, r3
 800703c:	4610      	mov	r0, r2
 800703e:	f7fe f805 	bl	800504c <vListInsert>
}
 8007042:	e010      	b.n	8007066 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007044:	4b0f      	ldr	r3, [pc, #60]	; (8007084 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	4b0a      	ldr	r3, [pc, #40]	; (8007074 <prvAddCurrentTaskToDelayedList+0xb4>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3304      	adds	r3, #4
 800704e:	4619      	mov	r1, r3
 8007050:	4610      	mov	r0, r2
 8007052:	f7fd fffb 	bl	800504c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007056:	4b0c      	ldr	r3, [pc, #48]	; (8007088 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	429a      	cmp	r2, r3
 800705e:	d202      	bcs.n	8007066 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007060:	4a09      	ldr	r2, [pc, #36]	; (8007088 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	6013      	str	r3, [r2, #0]
}
 8007066:	bf00      	nop
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	200005b4 	.word	0x200005b4
 8007074:	200004b0 	.word	0x200004b0
 8007078:	200005b8 	.word	0x200005b8
 800707c:	2000059c 	.word	0x2000059c
 8007080:	2000056c 	.word	0x2000056c
 8007084:	20000568 	.word	0x20000568
 8007088:	200005d0 	.word	0x200005d0

0800708c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	3b04      	subs	r3, #4
 800709c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80070a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	3b04      	subs	r3, #4
 80070aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	f023 0201 	bic.w	r2, r3, #1
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	3b04      	subs	r3, #4
 80070ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80070bc:	4a0c      	ldr	r2, [pc, #48]	; (80070f0 <pxPortInitialiseStack+0x64>)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	3b14      	subs	r3, #20
 80070c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	3b04      	subs	r3, #4
 80070d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f06f 0202 	mvn.w	r2, #2
 80070da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	3b20      	subs	r3, #32
 80070e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80070e2:	68fb      	ldr	r3, [r7, #12]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	080070f5 	.word	0x080070f5

080070f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80070fa:	2300      	movs	r3, #0
 80070fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80070fe:	4b11      	ldr	r3, [pc, #68]	; (8007144 <prvTaskExitError+0x50>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007106:	d009      	beq.n	800711c <prvTaskExitError+0x28>
 8007108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710c:	f383 8811 	msr	BASEPRI, r3
 8007110:	f3bf 8f6f 	isb	sy
 8007114:	f3bf 8f4f 	dsb	sy
 8007118:	60fb      	str	r3, [r7, #12]
 800711a:	e7fe      	b.n	800711a <prvTaskExitError+0x26>
 800711c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007120:	f383 8811 	msr	BASEPRI, r3
 8007124:	f3bf 8f6f 	isb	sy
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800712e:	bf00      	nop
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d0fc      	beq.n	8007130 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007136:	bf00      	nop
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	2000000c 	.word	0x2000000c
	...

08007150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007150:	4b07      	ldr	r3, [pc, #28]	; (8007170 <pxCurrentTCBConst2>)
 8007152:	6819      	ldr	r1, [r3, #0]
 8007154:	6808      	ldr	r0, [r1, #0]
 8007156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800715a:	f380 8809 	msr	PSP, r0
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f04f 0000 	mov.w	r0, #0
 8007166:	f380 8811 	msr	BASEPRI, r0
 800716a:	4770      	bx	lr
 800716c:	f3af 8000 	nop.w

08007170 <pxCurrentTCBConst2>:
 8007170:	200004b0 	.word	0x200004b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007174:	bf00      	nop
 8007176:	bf00      	nop

08007178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007178:	4808      	ldr	r0, [pc, #32]	; (800719c <prvPortStartFirstTask+0x24>)
 800717a:	6800      	ldr	r0, [r0, #0]
 800717c:	6800      	ldr	r0, [r0, #0]
 800717e:	f380 8808 	msr	MSP, r0
 8007182:	f04f 0000 	mov.w	r0, #0
 8007186:	f380 8814 	msr	CONTROL, r0
 800718a:	b662      	cpsie	i
 800718c:	b661      	cpsie	f
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	df00      	svc	0
 8007198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800719a:	bf00      	nop
 800719c:	e000ed08 	.word	0xe000ed08

080071a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80071a6:	4b44      	ldr	r3, [pc, #272]	; (80072b8 <xPortStartScheduler+0x118>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a44      	ldr	r2, [pc, #272]	; (80072bc <xPortStartScheduler+0x11c>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d109      	bne.n	80071c4 <xPortStartScheduler+0x24>
 80071b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b4:	f383 8811 	msr	BASEPRI, r3
 80071b8:	f3bf 8f6f 	isb	sy
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	613b      	str	r3, [r7, #16]
 80071c2:	e7fe      	b.n	80071c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80071c4:	4b3c      	ldr	r3, [pc, #240]	; (80072b8 <xPortStartScheduler+0x118>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a3d      	ldr	r2, [pc, #244]	; (80072c0 <xPortStartScheduler+0x120>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d109      	bne.n	80071e2 <xPortStartScheduler+0x42>
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	60fb      	str	r3, [r7, #12]
 80071e0:	e7fe      	b.n	80071e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80071e2:	4b38      	ldr	r3, [pc, #224]	; (80072c4 <xPortStartScheduler+0x124>)
 80071e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	22ff      	movs	r2, #255	; 0xff
 80071f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80071fc:	78fb      	ldrb	r3, [r7, #3]
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007204:	b2da      	uxtb	r2, r3
 8007206:	4b30      	ldr	r3, [pc, #192]	; (80072c8 <xPortStartScheduler+0x128>)
 8007208:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800720a:	4b30      	ldr	r3, [pc, #192]	; (80072cc <xPortStartScheduler+0x12c>)
 800720c:	2207      	movs	r2, #7
 800720e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007210:	e009      	b.n	8007226 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007212:	4b2e      	ldr	r3, [pc, #184]	; (80072cc <xPortStartScheduler+0x12c>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	3b01      	subs	r3, #1
 8007218:	4a2c      	ldr	r2, [pc, #176]	; (80072cc <xPortStartScheduler+0x12c>)
 800721a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800721c:	78fb      	ldrb	r3, [r7, #3]
 800721e:	b2db      	uxtb	r3, r3
 8007220:	005b      	lsls	r3, r3, #1
 8007222:	b2db      	uxtb	r3, r3
 8007224:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007226:	78fb      	ldrb	r3, [r7, #3]
 8007228:	b2db      	uxtb	r3, r3
 800722a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800722e:	2b80      	cmp	r3, #128	; 0x80
 8007230:	d0ef      	beq.n	8007212 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007232:	4b26      	ldr	r3, [pc, #152]	; (80072cc <xPortStartScheduler+0x12c>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f1c3 0307 	rsb	r3, r3, #7
 800723a:	2b04      	cmp	r3, #4
 800723c:	d009      	beq.n	8007252 <xPortStartScheduler+0xb2>
 800723e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	60bb      	str	r3, [r7, #8]
 8007250:	e7fe      	b.n	8007250 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007252:	4b1e      	ldr	r3, [pc, #120]	; (80072cc <xPortStartScheduler+0x12c>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	021b      	lsls	r3, r3, #8
 8007258:	4a1c      	ldr	r2, [pc, #112]	; (80072cc <xPortStartScheduler+0x12c>)
 800725a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800725c:	4b1b      	ldr	r3, [pc, #108]	; (80072cc <xPortStartScheduler+0x12c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007264:	4a19      	ldr	r2, [pc, #100]	; (80072cc <xPortStartScheduler+0x12c>)
 8007266:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	b2da      	uxtb	r2, r3
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007270:	4b17      	ldr	r3, [pc, #92]	; (80072d0 <xPortStartScheduler+0x130>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a16      	ldr	r2, [pc, #88]	; (80072d0 <xPortStartScheduler+0x130>)
 8007276:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800727a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800727c:	4b14      	ldr	r3, [pc, #80]	; (80072d0 <xPortStartScheduler+0x130>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a13      	ldr	r2, [pc, #76]	; (80072d0 <xPortStartScheduler+0x130>)
 8007282:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007286:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007288:	f000 f8d6 	bl	8007438 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800728c:	4b11      	ldr	r3, [pc, #68]	; (80072d4 <xPortStartScheduler+0x134>)
 800728e:	2200      	movs	r2, #0
 8007290:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007292:	f000 f8f5 	bl	8007480 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007296:	4b10      	ldr	r3, [pc, #64]	; (80072d8 <xPortStartScheduler+0x138>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a0f      	ldr	r2, [pc, #60]	; (80072d8 <xPortStartScheduler+0x138>)
 800729c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80072a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80072a2:	f7ff ff69 	bl	8007178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80072a6:	f7ff fa89 	bl	80067bc <vTaskSwitchContext>
	prvTaskExitError();
 80072aa:	f7ff ff23 	bl	80070f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3718      	adds	r7, #24
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	e000ed00 	.word	0xe000ed00
 80072bc:	410fc271 	.word	0x410fc271
 80072c0:	410fc270 	.word	0x410fc270
 80072c4:	e000e400 	.word	0xe000e400
 80072c8:	200005dc 	.word	0x200005dc
 80072cc:	200005e0 	.word	0x200005e0
 80072d0:	e000ed20 	.word	0xe000ed20
 80072d4:	2000000c 	.word	0x2000000c
 80072d8:	e000ef34 	.word	0xe000ef34

080072dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e6:	f383 8811 	msr	BASEPRI, r3
 80072ea:	f3bf 8f6f 	isb	sy
 80072ee:	f3bf 8f4f 	dsb	sy
 80072f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80072f4:	4b0e      	ldr	r3, [pc, #56]	; (8007330 <vPortEnterCritical+0x54>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3301      	adds	r3, #1
 80072fa:	4a0d      	ldr	r2, [pc, #52]	; (8007330 <vPortEnterCritical+0x54>)
 80072fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80072fe:	4b0c      	ldr	r3, [pc, #48]	; (8007330 <vPortEnterCritical+0x54>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d10e      	bne.n	8007324 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007306:	4b0b      	ldr	r3, [pc, #44]	; (8007334 <vPortEnterCritical+0x58>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b00      	cmp	r3, #0
 800730e:	d009      	beq.n	8007324 <vPortEnterCritical+0x48>
 8007310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007314:	f383 8811 	msr	BASEPRI, r3
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	603b      	str	r3, [r7, #0]
 8007322:	e7fe      	b.n	8007322 <vPortEnterCritical+0x46>
	}
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr
 8007330:	2000000c 	.word	0x2000000c
 8007334:	e000ed04 	.word	0xe000ed04

08007338 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800733e:	4b11      	ldr	r3, [pc, #68]	; (8007384 <vPortExitCritical+0x4c>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d109      	bne.n	800735a <vPortExitCritical+0x22>
 8007346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	607b      	str	r3, [r7, #4]
 8007358:	e7fe      	b.n	8007358 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800735a:	4b0a      	ldr	r3, [pc, #40]	; (8007384 <vPortExitCritical+0x4c>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3b01      	subs	r3, #1
 8007360:	4a08      	ldr	r2, [pc, #32]	; (8007384 <vPortExitCritical+0x4c>)
 8007362:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007364:	4b07      	ldr	r3, [pc, #28]	; (8007384 <vPortExitCritical+0x4c>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d104      	bne.n	8007376 <vPortExitCritical+0x3e>
 800736c:	2300      	movs	r3, #0
 800736e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007376:	bf00      	nop
 8007378:	370c      	adds	r7, #12
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	2000000c 	.word	0x2000000c
	...

08007390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007390:	f3ef 8009 	mrs	r0, PSP
 8007394:	f3bf 8f6f 	isb	sy
 8007398:	4b15      	ldr	r3, [pc, #84]	; (80073f0 <pxCurrentTCBConst>)
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	f01e 0f10 	tst.w	lr, #16
 80073a0:	bf08      	it	eq
 80073a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80073a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073aa:	6010      	str	r0, [r2, #0]
 80073ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80073b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80073b4:	f380 8811 	msr	BASEPRI, r0
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f7ff f9fc 	bl	80067bc <vTaskSwitchContext>
 80073c4:	f04f 0000 	mov.w	r0, #0
 80073c8:	f380 8811 	msr	BASEPRI, r0
 80073cc:	bc09      	pop	{r0, r3}
 80073ce:	6819      	ldr	r1, [r3, #0]
 80073d0:	6808      	ldr	r0, [r1, #0]
 80073d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d6:	f01e 0f10 	tst.w	lr, #16
 80073da:	bf08      	it	eq
 80073dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80073e0:	f380 8809 	msr	PSP, r0
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	f3af 8000 	nop.w

080073f0 <pxCurrentTCBConst>:
 80073f0:	200004b0 	.word	0x200004b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop

080073f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007410:	f7ff f91c 	bl	800664c <xTaskIncrementTick>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d003      	beq.n	8007422 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800741a:	4b06      	ldr	r3, [pc, #24]	; (8007434 <SysTick_Handler+0x3c>)
 800741c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007420:	601a      	str	r2, [r3, #0]
 8007422:	2300      	movs	r3, #0
 8007424:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800742c:	bf00      	nop
 800742e:	3708      	adds	r7, #8
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	e000ed04 	.word	0xe000ed04

08007438 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007438:	b480      	push	{r7}
 800743a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800743c:	4b0b      	ldr	r3, [pc, #44]	; (800746c <vPortSetupTimerInterrupt+0x34>)
 800743e:	2200      	movs	r2, #0
 8007440:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007442:	4b0b      	ldr	r3, [pc, #44]	; (8007470 <vPortSetupTimerInterrupt+0x38>)
 8007444:	2200      	movs	r2, #0
 8007446:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007448:	4b0a      	ldr	r3, [pc, #40]	; (8007474 <vPortSetupTimerInterrupt+0x3c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a0a      	ldr	r2, [pc, #40]	; (8007478 <vPortSetupTimerInterrupt+0x40>)
 800744e:	fba2 2303 	umull	r2, r3, r2, r3
 8007452:	099b      	lsrs	r3, r3, #6
 8007454:	4a09      	ldr	r2, [pc, #36]	; (800747c <vPortSetupTimerInterrupt+0x44>)
 8007456:	3b01      	subs	r3, #1
 8007458:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800745a:	4b04      	ldr	r3, [pc, #16]	; (800746c <vPortSetupTimerInterrupt+0x34>)
 800745c:	2207      	movs	r2, #7
 800745e:	601a      	str	r2, [r3, #0]
}
 8007460:	bf00      	nop
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	e000e010 	.word	0xe000e010
 8007470:	e000e018 	.word	0xe000e018
 8007474:	20000000 	.word	0x20000000
 8007478:	10624dd3 	.word	0x10624dd3
 800747c:	e000e014 	.word	0xe000e014

08007480 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007480:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007490 <vPortEnableVFP+0x10>
 8007484:	6801      	ldr	r1, [r0, #0]
 8007486:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800748a:	6001      	str	r1, [r0, #0]
 800748c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800748e:	bf00      	nop
 8007490:	e000ed88 	.word	0xe000ed88

08007494 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800749a:	f3ef 8305 	mrs	r3, IPSR
 800749e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2b0f      	cmp	r3, #15
 80074a4:	d913      	bls.n	80074ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80074a6:	4a16      	ldr	r2, [pc, #88]	; (8007500 <vPortValidateInterruptPriority+0x6c>)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	4413      	add	r3, r2
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80074b0:	4b14      	ldr	r3, [pc, #80]	; (8007504 <vPortValidateInterruptPriority+0x70>)
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	7afa      	ldrb	r2, [r7, #11]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d209      	bcs.n	80074ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80074ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	607b      	str	r3, [r7, #4]
 80074cc:	e7fe      	b.n	80074cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80074ce:	4b0e      	ldr	r3, [pc, #56]	; (8007508 <vPortValidateInterruptPriority+0x74>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80074d6:	4b0d      	ldr	r3, [pc, #52]	; (800750c <vPortValidateInterruptPriority+0x78>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d909      	bls.n	80074f2 <vPortValidateInterruptPriority+0x5e>
 80074de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e2:	f383 8811 	msr	BASEPRI, r3
 80074e6:	f3bf 8f6f 	isb	sy
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	603b      	str	r3, [r7, #0]
 80074f0:	e7fe      	b.n	80074f0 <vPortValidateInterruptPriority+0x5c>
	}
 80074f2:	bf00      	nop
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	e000e3f0 	.word	0xe000e3f0
 8007504:	200005dc 	.word	0x200005dc
 8007508:	e000ed0c 	.word	0xe000ed0c
 800750c:	200005e0 	.word	0x200005e0

08007510 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b08a      	sub	sp, #40	; 0x28
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007518:	2300      	movs	r3, #0
 800751a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800751c:	f7fe ffca 	bl	80064b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007520:	4b57      	ldr	r3, [pc, #348]	; (8007680 <pvPortMalloc+0x170>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d101      	bne.n	800752c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007528:	f000 f90c 	bl	8007744 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800752c:	4b55      	ldr	r3, [pc, #340]	; (8007684 <pvPortMalloc+0x174>)
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4013      	ands	r3, r2
 8007534:	2b00      	cmp	r3, #0
 8007536:	f040 808c 	bne.w	8007652 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d01c      	beq.n	800757a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007540:	2208      	movs	r2, #8
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4413      	add	r3, r2
 8007546:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f003 0307 	and.w	r3, r3, #7
 800754e:	2b00      	cmp	r3, #0
 8007550:	d013      	beq.n	800757a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f023 0307 	bic.w	r3, r3, #7
 8007558:	3308      	adds	r3, #8
 800755a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f003 0307 	and.w	r3, r3, #7
 8007562:	2b00      	cmp	r3, #0
 8007564:	d009      	beq.n	800757a <pvPortMalloc+0x6a>
 8007566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756a:	f383 8811 	msr	BASEPRI, r3
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	617b      	str	r3, [r7, #20]
 8007578:	e7fe      	b.n	8007578 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d068      	beq.n	8007652 <pvPortMalloc+0x142>
 8007580:	4b41      	ldr	r3, [pc, #260]	; (8007688 <pvPortMalloc+0x178>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	429a      	cmp	r2, r3
 8007588:	d863      	bhi.n	8007652 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800758a:	4b40      	ldr	r3, [pc, #256]	; (800768c <pvPortMalloc+0x17c>)
 800758c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800758e:	4b3f      	ldr	r3, [pc, #252]	; (800768c <pvPortMalloc+0x17c>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007594:	e004      	b.n	80075a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007598:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d903      	bls.n	80075b2 <pvPortMalloc+0xa2>
 80075aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1f1      	bne.n	8007596 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80075b2:	4b33      	ldr	r3, [pc, #204]	; (8007680 <pvPortMalloc+0x170>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d04a      	beq.n	8007652 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80075bc:	6a3b      	ldr	r3, [r7, #32]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2208      	movs	r2, #8
 80075c2:	4413      	add	r3, r2
 80075c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80075c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80075ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d0:	685a      	ldr	r2, [r3, #4]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	1ad2      	subs	r2, r2, r3
 80075d6:	2308      	movs	r3, #8
 80075d8:	005b      	lsls	r3, r3, #1
 80075da:	429a      	cmp	r2, r3
 80075dc:	d91e      	bls.n	800761c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80075de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4413      	add	r3, r2
 80075e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	f003 0307 	and.w	r3, r3, #7
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d009      	beq.n	8007604 <pvPortMalloc+0xf4>
 80075f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	613b      	str	r3, [r7, #16]
 8007602:	e7fe      	b.n	8007602 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007606:	685a      	ldr	r2, [r3, #4]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	1ad2      	subs	r2, r2, r3
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007616:	69b8      	ldr	r0, [r7, #24]
 8007618:	f000 f8f6 	bl	8007808 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800761c:	4b1a      	ldr	r3, [pc, #104]	; (8007688 <pvPortMalloc+0x178>)
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	4a18      	ldr	r2, [pc, #96]	; (8007688 <pvPortMalloc+0x178>)
 8007628:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800762a:	4b17      	ldr	r3, [pc, #92]	; (8007688 <pvPortMalloc+0x178>)
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	4b18      	ldr	r3, [pc, #96]	; (8007690 <pvPortMalloc+0x180>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	429a      	cmp	r2, r3
 8007634:	d203      	bcs.n	800763e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007636:	4b14      	ldr	r3, [pc, #80]	; (8007688 <pvPortMalloc+0x178>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a15      	ldr	r2, [pc, #84]	; (8007690 <pvPortMalloc+0x180>)
 800763c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800763e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007640:	685a      	ldr	r2, [r3, #4]
 8007642:	4b10      	ldr	r3, [pc, #64]	; (8007684 <pvPortMalloc+0x174>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	431a      	orrs	r2, r3
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800764c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764e:	2200      	movs	r2, #0
 8007650:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007652:	f7fe ff3d 	bl	80064d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	f003 0307 	and.w	r3, r3, #7
 800765c:	2b00      	cmp	r3, #0
 800765e:	d009      	beq.n	8007674 <pvPortMalloc+0x164>
 8007660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	60fb      	str	r3, [r7, #12]
 8007672:	e7fe      	b.n	8007672 <pvPortMalloc+0x162>
	return pvReturn;
 8007674:	69fb      	ldr	r3, [r7, #28]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3728      	adds	r7, #40	; 0x28
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	200085ec 	.word	0x200085ec
 8007684:	200085f8 	.word	0x200085f8
 8007688:	200085f0 	.word	0x200085f0
 800768c:	200085e4 	.word	0x200085e4
 8007690:	200085f4 	.word	0x200085f4

08007694 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d046      	beq.n	8007734 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80076a6:	2308      	movs	r3, #8
 80076a8:	425b      	negs	r3, r3
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	4413      	add	r3, r2
 80076ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	4b20      	ldr	r3, [pc, #128]	; (800773c <vPortFree+0xa8>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4013      	ands	r3, r2
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d109      	bne.n	80076d6 <vPortFree+0x42>
 80076c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	60fb      	str	r3, [r7, #12]
 80076d4:	e7fe      	b.n	80076d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d009      	beq.n	80076f2 <vPortFree+0x5e>
 80076de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	60bb      	str	r3, [r7, #8]
 80076f0:	e7fe      	b.n	80076f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	685a      	ldr	r2, [r3, #4]
 80076f6:	4b11      	ldr	r3, [pc, #68]	; (800773c <vPortFree+0xa8>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4013      	ands	r3, r2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d019      	beq.n	8007734 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d115      	bne.n	8007734 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	4b0b      	ldr	r3, [pc, #44]	; (800773c <vPortFree+0xa8>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	43db      	mvns	r3, r3
 8007712:	401a      	ands	r2, r3
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007718:	f7fe fecc 	bl	80064b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	685a      	ldr	r2, [r3, #4]
 8007720:	4b07      	ldr	r3, [pc, #28]	; (8007740 <vPortFree+0xac>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4413      	add	r3, r2
 8007726:	4a06      	ldr	r2, [pc, #24]	; (8007740 <vPortFree+0xac>)
 8007728:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800772a:	6938      	ldr	r0, [r7, #16]
 800772c:	f000 f86c 	bl	8007808 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007730:	f7fe fece 	bl	80064d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007734:	bf00      	nop
 8007736:	3718      	adds	r7, #24
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	200085f8 	.word	0x200085f8
 8007740:	200085f0 	.word	0x200085f0

08007744 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800774a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800774e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007750:	4b27      	ldr	r3, [pc, #156]	; (80077f0 <prvHeapInit+0xac>)
 8007752:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f003 0307 	and.w	r3, r3, #7
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00c      	beq.n	8007778 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	3307      	adds	r3, #7
 8007762:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f023 0307 	bic.w	r3, r3, #7
 800776a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	4a1f      	ldr	r2, [pc, #124]	; (80077f0 <prvHeapInit+0xac>)
 8007774:	4413      	add	r3, r2
 8007776:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800777c:	4a1d      	ldr	r2, [pc, #116]	; (80077f4 <prvHeapInit+0xb0>)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007782:	4b1c      	ldr	r3, [pc, #112]	; (80077f4 <prvHeapInit+0xb0>)
 8007784:	2200      	movs	r2, #0
 8007786:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	4413      	add	r3, r2
 800778e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007790:	2208      	movs	r2, #8
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	1a9b      	subs	r3, r3, r2
 8007796:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f023 0307 	bic.w	r3, r3, #7
 800779e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4a15      	ldr	r2, [pc, #84]	; (80077f8 <prvHeapInit+0xb4>)
 80077a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80077a6:	4b14      	ldr	r3, [pc, #80]	; (80077f8 <prvHeapInit+0xb4>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2200      	movs	r2, #0
 80077ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80077ae:	4b12      	ldr	r3, [pc, #72]	; (80077f8 <prvHeapInit+0xb4>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2200      	movs	r2, #0
 80077b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	1ad2      	subs	r2, r2, r3
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80077c4:	4b0c      	ldr	r3, [pc, #48]	; (80077f8 <prvHeapInit+0xb4>)
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	4a0a      	ldr	r2, [pc, #40]	; (80077fc <prvHeapInit+0xb8>)
 80077d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	4a09      	ldr	r2, [pc, #36]	; (8007800 <prvHeapInit+0xbc>)
 80077da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80077dc:	4b09      	ldr	r3, [pc, #36]	; (8007804 <prvHeapInit+0xc0>)
 80077de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80077e2:	601a      	str	r2, [r3, #0]
}
 80077e4:	bf00      	nop
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	200005e4 	.word	0x200005e4
 80077f4:	200085e4 	.word	0x200085e4
 80077f8:	200085ec 	.word	0x200085ec
 80077fc:	200085f4 	.word	0x200085f4
 8007800:	200085f0 	.word	0x200085f0
 8007804:	200085f8 	.word	0x200085f8

08007808 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007810:	4b28      	ldr	r3, [pc, #160]	; (80078b4 <prvInsertBlockIntoFreeList+0xac>)
 8007812:	60fb      	str	r3, [r7, #12]
 8007814:	e002      	b.n	800781c <prvInsertBlockIntoFreeList+0x14>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	60fb      	str	r3, [r7, #12]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	429a      	cmp	r2, r3
 8007824:	d8f7      	bhi.n	8007816 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	4413      	add	r3, r2
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	429a      	cmp	r2, r3
 8007836:	d108      	bne.n	800784a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	685a      	ldr	r2, [r3, #4]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	441a      	add	r2, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	441a      	add	r2, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	429a      	cmp	r2, r3
 800785c:	d118      	bne.n	8007890 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	4b15      	ldr	r3, [pc, #84]	; (80078b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	429a      	cmp	r2, r3
 8007868:	d00d      	beq.n	8007886 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685a      	ldr	r2, [r3, #4]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	441a      	add	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	e008      	b.n	8007898 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007886:	4b0c      	ldr	r3, [pc, #48]	; (80078b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	601a      	str	r2, [r3, #0]
 800788e:	e003      	b.n	8007898 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	429a      	cmp	r2, r3
 800789e:	d002      	beq.n	80078a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078a6:	bf00      	nop
 80078a8:	3714      	adds	r7, #20
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	200085e4 	.word	0x200085e4
 80078b8:	200085ec 	.word	0x200085ec

080078bc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	330c      	adds	r3, #12
 80078cc:	461a      	mov	r2, r3
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f002 fa99 	bl	8009e08 <tcpip_send_msg_wait_sem>
 80078d6:	4603      	mov	r3, r0
 80078d8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80078da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d103      	bne.n	80078ea <netconn_apimsg+0x2e>
    return apimsg->err;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80078e8:	e001      	b.n	80078ee <netconn_apimsg+0x32>
  }
  return err;
 80078ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
	...

080078f8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b08c      	sub	sp, #48	; 0x30
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	4603      	mov	r3, r0
 8007900:	603a      	str	r2, [r7, #0]
 8007902:	71fb      	strb	r3, [r7, #7]
 8007904:	460b      	mov	r3, r1
 8007906:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007908:	79fb      	ldrb	r3, [r7, #7]
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	4618      	mov	r0, r3
 800790e:	f001 f91f 	bl	8008b50 <netconn_alloc>
 8007912:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8007914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007916:	2b00      	cmp	r3, #0
 8007918:	d054      	beq.n	80079c4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800791a:	79bb      	ldrb	r3, [r7, #6]
 800791c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800791e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007920:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007922:	f107 0308 	add.w	r3, r7, #8
 8007926:	4619      	mov	r1, r3
 8007928:	4829      	ldr	r0, [pc, #164]	; (80079d0 <netconn_new_with_proto_and_callback+0xd8>)
 800792a:	f7ff ffc7 	bl	80078bc <netconn_apimsg>
 800792e:	4603      	mov	r3, r0
 8007930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8007934:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007938:	2b00      	cmp	r3, #0
 800793a:	d043      	beq.n	80079c4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800793c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d005      	beq.n	8007950 <netconn_new_with_proto_and_callback+0x58>
 8007944:	4b23      	ldr	r3, [pc, #140]	; (80079d4 <netconn_new_with_proto_and_callback+0xdc>)
 8007946:	22a3      	movs	r2, #163	; 0xa3
 8007948:	4923      	ldr	r1, [pc, #140]	; (80079d8 <netconn_new_with_proto_and_callback+0xe0>)
 800794a:	4824      	ldr	r0, [pc, #144]	; (80079dc <netconn_new_with_proto_and_callback+0xe4>)
 800794c:	f010 fa3e 	bl	8017dcc <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007952:	3310      	adds	r3, #16
 8007954:	4618      	mov	r0, r3
 8007956:	f010 f880 	bl	8017a5a <sys_mbox_valid>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d105      	bne.n	800796c <netconn_new_with_proto_and_callback+0x74>
 8007960:	4b1c      	ldr	r3, [pc, #112]	; (80079d4 <netconn_new_with_proto_and_callback+0xdc>)
 8007962:	22a4      	movs	r2, #164	; 0xa4
 8007964:	491e      	ldr	r1, [pc, #120]	; (80079e0 <netconn_new_with_proto_and_callback+0xe8>)
 8007966:	481d      	ldr	r0, [pc, #116]	; (80079dc <netconn_new_with_proto_and_callback+0xe4>)
 8007968:	f010 fa30 	bl	8017dcc <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800796c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796e:	3314      	adds	r3, #20
 8007970:	4618      	mov	r0, r3
 8007972:	f010 f872 	bl	8017a5a <sys_mbox_valid>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d005      	beq.n	8007988 <netconn_new_with_proto_and_callback+0x90>
 800797c:	4b15      	ldr	r3, [pc, #84]	; (80079d4 <netconn_new_with_proto_and_callback+0xdc>)
 800797e:	22a6      	movs	r2, #166	; 0xa6
 8007980:	4918      	ldr	r1, [pc, #96]	; (80079e4 <netconn_new_with_proto_and_callback+0xec>)
 8007982:	4816      	ldr	r0, [pc, #88]	; (80079dc <netconn_new_with_proto_and_callback+0xe4>)
 8007984:	f010 fa22 	bl	8017dcc <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798a:	330c      	adds	r3, #12
 800798c:	4618      	mov	r0, r3
 800798e:	f010 f8f5 	bl	8017b7c <sys_sem_valid>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d105      	bne.n	80079a4 <netconn_new_with_proto_and_callback+0xac>
 8007998:	4b0e      	ldr	r3, [pc, #56]	; (80079d4 <netconn_new_with_proto_and_callback+0xdc>)
 800799a:	22a9      	movs	r2, #169	; 0xa9
 800799c:	4912      	ldr	r1, [pc, #72]	; (80079e8 <netconn_new_with_proto_and_callback+0xf0>)
 800799e:	480f      	ldr	r0, [pc, #60]	; (80079dc <netconn_new_with_proto_and_callback+0xe4>)
 80079a0:	f010 fa14 	bl	8017dcc <iprintf>
      sys_sem_free(&conn->op_completed);
 80079a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a6:	330c      	adds	r3, #12
 80079a8:	4618      	mov	r0, r3
 80079aa:	f010 f8da 	bl	8017b62 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80079ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b0:	3310      	adds	r3, #16
 80079b2:	4618      	mov	r0, r3
 80079b4:	f00f ffca 	bl	801794c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80079b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079ba:	2007      	movs	r0, #7
 80079bc:	f003 fddc 	bl	800b578 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80079c0:	2300      	movs	r3, #0
 80079c2:	e000      	b.n	80079c6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80079c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3730      	adds	r7, #48	; 0x30
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	08008b25 	.word	0x08008b25
 80079d4:	08019290 	.word	0x08019290
 80079d8:	080192c4 	.word	0x080192c4
 80079dc:	080192e8 	.word	0x080192e8
 80079e0:	08019310 	.word	0x08019310
 80079e4:	08019328 	.word	0x08019328
 80079e8:	0801934c 	.word	0x0801934c

080079ec <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b08c      	sub	sp, #48	; 0x30
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d101      	bne.n	80079fe <netconn_prepare_delete+0x12>
    return ERR_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	e014      	b.n	8007a28 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007a02:	2329      	movs	r3, #41	; 0x29
 8007a04:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8007a06:	f107 030c 	add.w	r3, r7, #12
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	4808      	ldr	r0, [pc, #32]	; (8007a30 <netconn_prepare_delete+0x44>)
 8007a0e:	f7ff ff55 	bl	80078bc <netconn_apimsg>
 8007a12:	4603      	mov	r3, r0
 8007a14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8007a18:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d002      	beq.n	8007a26 <netconn_prepare_delete+0x3a>
    return err;
 8007a20:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007a24:	e000      	b.n	8007a28 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3730      	adds	r7, #48	; 0x30
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	08009089 	.word	0x08009089

08007a34 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d101      	bne.n	8007a46 <netconn_delete+0x12>
    return ERR_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	e00d      	b.n	8007a62 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7ff ffd0 	bl	80079ec <netconn_prepare_delete>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8007a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d102      	bne.n	8007a5e <netconn_delete+0x2a>
    netconn_free(conn);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f001 f8e7 	bl	8008c2c <netconn_free>
  }
  return err;
 8007a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
	...

08007a6c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b08e      	sub	sp, #56	; 0x38
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	4613      	mov	r3, r2
 8007a78:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d109      	bne.n	8007a94 <netconn_bind+0x28>
 8007a80:	4b11      	ldr	r3, [pc, #68]	; (8007ac8 <netconn_bind+0x5c>)
 8007a82:	f44f 729c 	mov.w	r2, #312	; 0x138
 8007a86:	4911      	ldr	r1, [pc, #68]	; (8007acc <netconn_bind+0x60>)
 8007a88:	4811      	ldr	r0, [pc, #68]	; (8007ad0 <netconn_bind+0x64>)
 8007a8a:	f010 f99f 	bl	8017dcc <iprintf>
 8007a8e:	f06f 030f 	mvn.w	r3, #15
 8007a92:	e015      	b.n	8007ac0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d101      	bne.n	8007a9e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8007a9a:	4b0e      	ldr	r3, [pc, #56]	; (8007ad4 <netconn_bind+0x68>)
 8007a9c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007aa6:	88fb      	ldrh	r3, [r7, #6]
 8007aa8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007aaa:	f107 0314 	add.w	r3, r7, #20
 8007aae:	4619      	mov	r1, r3
 8007ab0:	4809      	ldr	r0, [pc, #36]	; (8007ad8 <netconn_bind+0x6c>)
 8007ab2:	f7ff ff03 	bl	80078bc <netconn_apimsg>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8007abc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3738      	adds	r7, #56	; 0x38
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	08019290 	.word	0x08019290
 8007acc:	080193c8 	.word	0x080193c8
 8007ad0:	080192e8 	.word	0x080192e8
 8007ad4:	08026f94 	.word	0x08026f94
 8007ad8:	08009251 	.word	0x08009251

08007adc <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b08c      	sub	sp, #48	; 0x30
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d109      	bne.n	8007b02 <netconn_listen_with_backlog+0x26>
 8007aee:	4b0d      	ldr	r3, [pc, #52]	; (8007b24 <netconn_listen_with_backlog+0x48>)
 8007af0:	f240 12bb 	movw	r2, #443	; 0x1bb
 8007af4:	490c      	ldr	r1, [pc, #48]	; (8007b28 <netconn_listen_with_backlog+0x4c>)
 8007af6:	480d      	ldr	r0, [pc, #52]	; (8007b2c <netconn_listen_with_backlog+0x50>)
 8007af8:	f010 f968 	bl	8017dcc <iprintf>
 8007afc:	f06f 030f 	mvn.w	r3, #15
 8007b00:	e00c      	b.n	8007b1c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8007b06:	f107 030c 	add.w	r3, r7, #12
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	4808      	ldr	r0, [pc, #32]	; (8007b30 <netconn_listen_with_backlog+0x54>)
 8007b0e:	f7ff fed5 	bl	80078bc <netconn_apimsg>
 8007b12:	4603      	mov	r3, r0
 8007b14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8007b18:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3730      	adds	r7, #48	; 0x30
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	08019290 	.word	0x08019290
 8007b28:	08019448 	.word	0x08019448
 8007b2c:	080192e8 	.word	0x080192e8
 8007b30:	080092c9 	.word	0x080092c9

08007b34 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d109      	bne.n	8007b58 <netconn_accept+0x24>
 8007b44:	4b3d      	ldr	r3, [pc, #244]	; (8007c3c <netconn_accept+0x108>)
 8007b46:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007b4a:	493d      	ldr	r1, [pc, #244]	; (8007c40 <netconn_accept+0x10c>)
 8007b4c:	483d      	ldr	r0, [pc, #244]	; (8007c44 <netconn_accept+0x110>)
 8007b4e:	f010 f93d 	bl	8017dcc <iprintf>
 8007b52:	f06f 030f 	mvn.w	r3, #15
 8007b56:	e06c      	b.n	8007c32 <netconn_accept+0xfe>
  *new_conn = NULL;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d109      	bne.n	8007b78 <netconn_accept+0x44>
 8007b64:	4b35      	ldr	r3, [pc, #212]	; (8007c3c <netconn_accept+0x108>)
 8007b66:	f240 12e3 	movw	r2, #483	; 0x1e3
 8007b6a:	4937      	ldr	r1, [pc, #220]	; (8007c48 <netconn_accept+0x114>)
 8007b6c:	4835      	ldr	r0, [pc, #212]	; (8007c44 <netconn_accept+0x110>)
 8007b6e:	f010 f92d 	bl	8017dcc <iprintf>
 8007b72:	f06f 030f 	mvn.w	r3, #15
 8007b76:	e05c      	b.n	8007c32 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fb6c 	bl	8008256 <netconn_err>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8007b82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d002      	beq.n	8007b90 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8007b8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007b8e:	e050      	b.n	8007c32 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	3314      	adds	r3, #20
 8007b94:	4618      	mov	r0, r3
 8007b96:	f00f ff60 	bl	8017a5a <sys_mbox_valid>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d005      	beq.n	8007bac <netconn_accept+0x78>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	7f1b      	ldrb	r3, [r3, #28]
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d002      	beq.n	8007bb2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8007bac:	f06f 030e 	mvn.w	r3, #14
 8007bb0:	e03f      	b.n	8007c32 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	7f1b      	ldrb	r3, [r3, #28]
 8007bb6:	f003 0302 	and.w	r3, r3, #2
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00e      	beq.n	8007bdc <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	3314      	adds	r3, #20
 8007bc2:	f107 020c 	add.w	r2, r7, #12
 8007bc6:	4611      	mov	r1, r2
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f00f ff2a 	bl	8017a22 <sys_arch_mbox_tryfetch>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd4:	d10a      	bne.n	8007bec <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8007bd6:	f06f 0306 	mvn.w	r3, #6
 8007bda:	e02a      	b.n	8007c32 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	3314      	adds	r3, #20
 8007be0:	f107 010c 	add.w	r1, r7, #12
 8007be4:	2200      	movs	r2, #0
 8007be6:	4618      	mov	r0, r3
 8007be8:	f00f fedc 	bl	80179a4 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d005      	beq.n	8007c00 <netconn_accept+0xcc>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	2101      	movs	r1, #1
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f107 0213 	add.w	r2, r7, #19
 8007c06:	4611      	mov	r1, r2
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f000 fb71 	bl	80082f0 <lwip_netconn_is_err_msg>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d002      	beq.n	8007c1a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8007c14:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007c18:	e00b      	b.n	8007c32 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d102      	bne.n	8007c26 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8007c20:	f06f 030e 	mvn.w	r3, #14
 8007c24:	e005      	b.n	8007c32 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	697a      	ldr	r2, [r7, #20]
 8007c2e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007c30:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3718      	adds	r7, #24
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	08019290 	.word	0x08019290
 8007c40:	08019468 	.word	0x08019468
 8007c44:	080192e8 	.word	0x080192e8
 8007c48:	08019488 	.word	0x08019488

08007c4c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b088      	sub	sp, #32
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	4613      	mov	r3, r2
 8007c58:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d109      	bne.n	8007c78 <netconn_recv_data+0x2c>
 8007c64:	4b58      	ldr	r3, [pc, #352]	; (8007dc8 <netconn_recv_data+0x17c>)
 8007c66:	f44f 7212 	mov.w	r2, #584	; 0x248
 8007c6a:	4958      	ldr	r1, [pc, #352]	; (8007dcc <netconn_recv_data+0x180>)
 8007c6c:	4858      	ldr	r0, [pc, #352]	; (8007dd0 <netconn_recv_data+0x184>)
 8007c6e:	f010 f8ad 	bl	8017dcc <iprintf>
 8007c72:	f06f 030f 	mvn.w	r3, #15
 8007c76:	e0a2      	b.n	8007dbe <netconn_recv_data+0x172>
  *new_buf = NULL;
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d109      	bne.n	8007c98 <netconn_recv_data+0x4c>
 8007c84:	4b50      	ldr	r3, [pc, #320]	; (8007dc8 <netconn_recv_data+0x17c>)
 8007c86:	f240 224a 	movw	r2, #586	; 0x24a
 8007c8a:	4952      	ldr	r1, [pc, #328]	; (8007dd4 <netconn_recv_data+0x188>)
 8007c8c:	4850      	ldr	r0, [pc, #320]	; (8007dd0 <netconn_recv_data+0x184>)
 8007c8e:	f010 f89d 	bl	8017dcc <iprintf>
 8007c92:	f06f 030f 	mvn.w	r3, #15
 8007c96:	e092      	b.n	8007dbe <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	3310      	adds	r3, #16
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f00f fedc 	bl	8017a5a <sys_mbox_valid>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10e      	bne.n	8007cc6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f000 fad4 	bl	8008256 <netconn_err>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8007cb2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d002      	beq.n	8007cc0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8007cba:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007cbe:	e07e      	b.n	8007dbe <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8007cc0:	f06f 030a 	mvn.w	r3, #10
 8007cc4:	e07b      	b.n	8007dbe <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	7f1b      	ldrb	r3, [r3, #28]
 8007cca:	f003 0302 	and.w	r3, r3, #2
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10f      	bne.n	8007cf2 <netconn_recv_data+0xa6>
 8007cd2:	79fb      	ldrb	r3, [r7, #7]
 8007cd4:	f003 0304 	and.w	r3, r3, #4
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10a      	bne.n	8007cf2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	7f1b      	ldrb	r3, [r3, #28]
 8007ce0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d104      	bne.n	8007cf2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d023      	beq.n	8007d3a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	3310      	adds	r3, #16
 8007cf6:	f107 0218 	add.w	r2, r7, #24
 8007cfa:	4611      	mov	r1, r2
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f00f fe90 	bl	8017a22 <sys_arch_mbox_tryfetch>
 8007d02:	4603      	mov	r3, r0
 8007d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d08:	d11f      	bne.n	8007d4a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 faa3 	bl	8008256 <netconn_err>
 8007d10:	4603      	mov	r3, r0
 8007d12:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8007d14:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d002      	beq.n	8007d22 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8007d1c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007d20:	e04d      	b.n	8007dbe <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	7f1b      	ldrb	r3, [r3, #28]
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d002      	beq.n	8007d34 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8007d2e:	f06f 030a 	mvn.w	r3, #10
 8007d32:	e044      	b.n	8007dbe <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8007d34:	f06f 0306 	mvn.w	r3, #6
 8007d38:	e041      	b.n	8007dbe <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	3310      	adds	r3, #16
 8007d3e:	f107 0118 	add.w	r1, r7, #24
 8007d42:	2200      	movs	r2, #0
 8007d44:	4618      	mov	r0, r3
 8007d46:	f00f fe2d 	bl	80179a4 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d52:	2b10      	cmp	r3, #16
 8007d54:	d117      	bne.n	8007d86 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	f107 0217 	add.w	r2, r7, #23
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f000 fac6 	bl	80082f0 <lwip_netconn_is_err_msg>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d009      	beq.n	8007d7e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8007d6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d6e:	f113 0f0f 	cmn.w	r3, #15
 8007d72:	d101      	bne.n	8007d78 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8007d74:	2300      	movs	r3, #0
 8007d76:	e022      	b.n	8007dbe <netconn_recv_data+0x172>
      }
      return err;
 8007d78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d7c:	e01f      	b.n	8007dbe <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	891b      	ldrh	r3, [r3, #8]
 8007d82:	83fb      	strh	r3, [r7, #30]
 8007d84:	e00d      	b.n	8007da2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d106      	bne.n	8007d9a <netconn_recv_data+0x14e>
 8007d8c:	4b0e      	ldr	r3, [pc, #56]	; (8007dc8 <netconn_recv_data+0x17c>)
 8007d8e:	f240 2291 	movw	r2, #657	; 0x291
 8007d92:	4911      	ldr	r1, [pc, #68]	; (8007dd8 <netconn_recv_data+0x18c>)
 8007d94:	480e      	ldr	r0, [pc, #56]	; (8007dd0 <netconn_recv_data+0x184>)
 8007d96:	f010 f819 	bl	8017dcc <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	891b      	ldrh	r3, [r3, #8]
 8007da0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d005      	beq.n	8007db6 <netconn_recv_data+0x16a>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dae:	8bfa      	ldrh	r2, [r7, #30]
 8007db0:	2101      	movs	r1, #1
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8007db6:	69ba      	ldr	r2, [r7, #24]
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3720      	adds	r7, #32
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	08019290 	.word	0x08019290
 8007dcc:	080194a8 	.word	0x080194a8
 8007dd0:	080192e8 	.word	0x080192e8
 8007dd4:	080194c8 	.word	0x080194c8
 8007dd8:	080194e4 	.word	0x080194e4

08007ddc <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d005      	beq.n	8007dfa <netconn_tcp_recvd_msg+0x1e>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007df6:	2b10      	cmp	r3, #16
 8007df8:	d009      	beq.n	8007e0e <netconn_tcp_recvd_msg+0x32>
 8007dfa:	4b0c      	ldr	r3, [pc, #48]	; (8007e2c <netconn_tcp_recvd_msg+0x50>)
 8007dfc:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8007e00:	490b      	ldr	r1, [pc, #44]	; (8007e30 <netconn_tcp_recvd_msg+0x54>)
 8007e02:	480c      	ldr	r0, [pc, #48]	; (8007e34 <netconn_tcp_recvd_msg+0x58>)
 8007e04:	f00f ffe2 	bl	8017dcc <iprintf>
 8007e08:	f06f 030f 	mvn.w	r3, #15
 8007e0c:	e00a      	b.n	8007e24 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8007e1a:	6879      	ldr	r1, [r7, #4]
 8007e1c:	4806      	ldr	r0, [pc, #24]	; (8007e38 <netconn_tcp_recvd_msg+0x5c>)
 8007e1e:	f7ff fd4d 	bl	80078bc <netconn_apimsg>
 8007e22:	4603      	mov	r3, r0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	08019290 	.word	0x08019290
 8007e30:	080194f0 	.word	0x080194f0
 8007e34:	080192e8 	.word	0x080192e8
 8007e38:	080093f9 	.word	0x080093f9

08007e3c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b090      	sub	sp, #64	; 0x40
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	4613      	mov	r3, r2
 8007e48:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	3310      	adds	r3, #16
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f00f fe03 	bl	8017a5a <sys_mbox_valid>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d102      	bne.n	8007e60 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8007e5a:	f06f 030a 	mvn.w	r3, #10
 8007e5e:	e06d      	b.n	8007f3c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	7f1b      	ldrb	r3, [r3, #28]
 8007e64:	b25b      	sxtb	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	da07      	bge.n	8007e7a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	7f1b      	ldrb	r3, [r3, #28]
 8007e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e72:	b2da      	uxtb	r2, r3
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8007e78:	e039      	b.n	8007eee <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8007e7a:	79fb      	ldrb	r3, [r7, #7]
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	68b9      	ldr	r1, [r7, #8]
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f7ff fee3 	bl	8007c4c <netconn_recv_data>
 8007e86:	4603      	mov	r3, r0
 8007e88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8007e8c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d002      	beq.n	8007e9a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8007e94:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007e98:	e050      	b.n	8007f3c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8007ea0:	79fb      	ldrb	r3, [r7, #7]
 8007ea2:	f003 0308 	and.w	r3, r3, #8
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10e      	bne.n	8007ec8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8007eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <netconn_recv_data_tcp+0x7a>
 8007eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb2:	891b      	ldrh	r3, [r3, #8]
 8007eb4:	e000      	b.n	8007eb8 <netconn_recv_data_tcp+0x7c>
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8007eba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007ebc:	f107 0214 	add.w	r2, r7, #20
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f7ff ff8a 	bl	8007ddc <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d134      	bne.n	8007f38 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8007ece:	79fb      	ldrb	r3, [r7, #7]
 8007ed0:	f003 0310 	and.w	r3, r3, #16
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d009      	beq.n	8007eec <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	7f1b      	ldrb	r3, [r3, #28]
 8007edc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ee0:	b2da      	uxtb	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8007ee6:	f06f 0306 	mvn.w	r3, #6
 8007eea:	e027      	b.n	8007f3c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8007eec:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d005      	beq.n	8007f02 <netconn_recv_data_tcp+0xc6>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efa:	2200      	movs	r2, #0
 8007efc:	2101      	movs	r1, #1
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d10f      	bne.n	8007f2a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f000 f9a3 	bl	8008256 <netconn_err>
 8007f10:	4603      	mov	r3, r0
 8007f12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8007f16:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d002      	beq.n	8007f24 <netconn_recv_data_tcp+0xe8>
          return err;
 8007f1e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f22:	e00b      	b.n	8007f3c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8007f24:	f06f 030d 	mvn.w	r3, #13
 8007f28:	e008      	b.n	8007f3c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8007f2a:	2101      	movs	r1, #1
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f000 f955 	bl	80081dc <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8007f32:	f06f 030e 	mvn.w	r3, #14
 8007f36:	e001      	b.n	8007f3c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8007f38:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3740      	adds	r7, #64	; 0x40
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b086      	sub	sp, #24
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d109      	bne.n	8007f6c <netconn_recv+0x28>
 8007f58:	4b32      	ldr	r3, [pc, #200]	; (8008024 <netconn_recv+0xe0>)
 8007f5a:	f240 3263 	movw	r2, #867	; 0x363
 8007f5e:	4932      	ldr	r1, [pc, #200]	; (8008028 <netconn_recv+0xe4>)
 8007f60:	4832      	ldr	r0, [pc, #200]	; (800802c <netconn_recv+0xe8>)
 8007f62:	f00f ff33 	bl	8017dcc <iprintf>
 8007f66:	f06f 030f 	mvn.w	r3, #15
 8007f6a:	e056      	b.n	800801a <netconn_recv+0xd6>
  *new_buf = NULL;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d109      	bne.n	8007f8c <netconn_recv+0x48>
 8007f78:	4b2a      	ldr	r3, [pc, #168]	; (8008024 <netconn_recv+0xe0>)
 8007f7a:	f240 3265 	movw	r2, #869	; 0x365
 8007f7e:	492c      	ldr	r1, [pc, #176]	; (8008030 <netconn_recv+0xec>)
 8007f80:	482a      	ldr	r0, [pc, #168]	; (800802c <netconn_recv+0xe8>)
 8007f82:	f00f ff23 	bl	8017dcc <iprintf>
 8007f86:	f06f 030f 	mvn.w	r3, #15
 8007f8a:	e046      	b.n	800801a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f94:	2b10      	cmp	r3, #16
 8007f96:	d13a      	bne.n	800800e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8007f9c:	2006      	movs	r0, #6
 8007f9e:	f003 fa99 	bl	800b4d4 <memp_malloc>
 8007fa2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d102      	bne.n	8007fb0 <netconn_recv+0x6c>
      return ERR_MEM;
 8007faa:	f04f 33ff 	mov.w	r3, #4294967295
 8007fae:	e034      	b.n	800801a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8007fb0:	f107 030c 	add.w	r3, r7, #12
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f7ff ff3f 	bl	8007e3c <netconn_recv_data_tcp>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8007fc2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d006      	beq.n	8007fd8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8007fca:	6979      	ldr	r1, [r7, #20]
 8007fcc:	2006      	movs	r0, #6
 8007fce:	f003 fad3 	bl	800b578 <memp_free>
      return err;
 8007fd2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007fd6:	e020      	b.n	800801a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d106      	bne.n	8007fec <netconn_recv+0xa8>
 8007fde:	4b11      	ldr	r3, [pc, #68]	; (8008024 <netconn_recv+0xe0>)
 8007fe0:	f240 3279 	movw	r2, #889	; 0x379
 8007fe4:	4913      	ldr	r1, [pc, #76]	; (8008034 <netconn_recv+0xf0>)
 8007fe6:	4811      	ldr	r0, [pc, #68]	; (800802c <netconn_recv+0xe8>)
 8007fe8:	f00f fef0 	bl	8017dcc <iprintf>

    buf->p = p;
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	2200      	movs	r2, #0
 8008002:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800800a:	2300      	movs	r3, #0
 800800c:	e005      	b.n	800801a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800800e:	2200      	movs	r2, #0
 8008010:	6839      	ldr	r1, [r7, #0]
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7ff fe1a 	bl	8007c4c <netconn_recv_data>
 8008018:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800801a:	4618      	mov	r0, r3
 800801c:	3718      	adds	r7, #24
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	08019290 	.word	0x08019290
 8008028:	080194a8 	.word	0x080194a8
 800802c:	080192e8 	.word	0x080192e8
 8008030:	080194c8 	.word	0x080194c8
 8008034:	08019540 	.word	0x08019540

08008038 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b088      	sub	sp, #32
 800803c:	af02      	add	r7, sp, #8
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	607a      	str	r2, [r7, #4]
 8008044:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800804e:	78fa      	ldrb	r2, [r7, #3]
 8008050:	f107 0110 	add.w	r1, r7, #16
 8008054:	6a3b      	ldr	r3, [r7, #32]
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	4613      	mov	r3, r2
 800805a:	2201      	movs	r2, #1
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f000 f805 	bl	800806c <netconn_write_vectors_partly>
 8008062:	4603      	mov	r3, r0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3718      	adds	r7, #24
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b092      	sub	sp, #72	; 0x48
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	4611      	mov	r1, r2
 8008078:	461a      	mov	r2, r3
 800807a:	460b      	mov	r3, r1
 800807c:	80fb      	strh	r3, [r7, #6]
 800807e:	4613      	mov	r3, r2
 8008080:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d109      	bne.n	800809c <netconn_write_vectors_partly+0x30>
 8008088:	4b4e      	ldr	r3, [pc, #312]	; (80081c4 <netconn_write_vectors_partly+0x158>)
 800808a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800808e:	494e      	ldr	r1, [pc, #312]	; (80081c8 <netconn_write_vectors_partly+0x15c>)
 8008090:	484e      	ldr	r0, [pc, #312]	; (80081cc <netconn_write_vectors_partly+0x160>)
 8008092:	f00f fe9b 	bl	8017dcc <iprintf>
 8008096:	f06f 030f 	mvn.w	r3, #15
 800809a:	e08e      	b.n	80081ba <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080a4:	2b10      	cmp	r3, #16
 80080a6:	d009      	beq.n	80080bc <netconn_write_vectors_partly+0x50>
 80080a8:	4b46      	ldr	r3, [pc, #280]	; (80081c4 <netconn_write_vectors_partly+0x158>)
 80080aa:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80080ae:	4948      	ldr	r1, [pc, #288]	; (80081d0 <netconn_write_vectors_partly+0x164>)
 80080b0:	4846      	ldr	r0, [pc, #280]	; (80081cc <netconn_write_vectors_partly+0x160>)
 80080b2:	f00f fe8b 	bl	8017dcc <iprintf>
 80080b6:	f06f 0305 	mvn.w	r3, #5
 80080ba:	e07e      	b.n	80081ba <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	7f1b      	ldrb	r3, [r3, #28]
 80080c0:	f003 0302 	and.w	r3, r3, #2
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d104      	bne.n	80080d2 <netconn_write_vectors_partly+0x66>
 80080c8:	797b      	ldrb	r3, [r7, #5]
 80080ca:	f003 0304 	and.w	r3, r3, #4
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d001      	beq.n	80080d6 <netconn_write_vectors_partly+0x6a>
 80080d2:	2301      	movs	r3, #1
 80080d4:	e000      	b.n	80080d8 <netconn_write_vectors_partly+0x6c>
 80080d6:	2300      	movs	r3, #0
 80080d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80080dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d005      	beq.n	80080f0 <netconn_write_vectors_partly+0x84>
 80080e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d102      	bne.n	80080f0 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80080ea:	f06f 0305 	mvn.w	r3, #5
 80080ee:	e064      	b.n	80081ba <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 80080f0:	2300      	movs	r3, #0
 80080f2:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 80080f4:	2300      	movs	r3, #0
 80080f6:	643b      	str	r3, [r7, #64]	; 0x40
 80080f8:	e015      	b.n	8008126 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 80080fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080fc:	00db      	lsls	r3, r3, #3
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	4413      	add	r3, r2
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008106:	4413      	add	r3, r2
 8008108:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800810a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800810c:	00db      	lsls	r3, r3, #3
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	4413      	add	r3, r2
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008116:	429a      	cmp	r2, r3
 8008118:	d202      	bcs.n	8008120 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800811a:	f06f 0305 	mvn.w	r3, #5
 800811e:	e04c      	b.n	80081ba <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008122:	3301      	adds	r3, #1
 8008124:	643b      	str	r3, [r7, #64]	; 0x40
 8008126:	88fb      	ldrh	r3, [r7, #6]
 8008128:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800812a:	429a      	cmp	r2, r3
 800812c:	dbe5      	blt.n	80080fa <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800812e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008130:	2b00      	cmp	r3, #0
 8008132:	d101      	bne.n	8008138 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	e040      	b.n	80081ba <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800813a:	2b00      	cmp	r3, #0
 800813c:	da0a      	bge.n	8008154 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800813e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008140:	2b00      	cmp	r3, #0
 8008142:	d102      	bne.n	800814a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8008144:	f06f 0305 	mvn.w	r3, #5
 8008148:	e037      	b.n	80081ba <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800814a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800814e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8008150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008152:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800815c:	88fb      	ldrh	r3, [r7, #6]
 800815e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008160:	2300      	movs	r3, #0
 8008162:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008164:	797b      	ldrb	r3, [r7, #5]
 8008166:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800816a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800816c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800816e:	2300      	movs	r3, #0
 8008170:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008172:	f107 0314 	add.w	r3, r7, #20
 8008176:	4619      	mov	r1, r3
 8008178:	4816      	ldr	r0, [pc, #88]	; (80081d4 <netconn_write_vectors_partly+0x168>)
 800817a:	f7ff fb9f 	bl	80078bc <netconn_apimsg>
 800817e:	4603      	mov	r3, r0
 8008180:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8008184:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008188:	2b00      	cmp	r3, #0
 800818a:	d114      	bne.n	80081b6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800818c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800818e:	2b00      	cmp	r3, #0
 8008190:	d002      	beq.n	8008198 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008196:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008198:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10a      	bne.n	80081b6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80081a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d006      	beq.n	80081b6 <netconn_write_vectors_partly+0x14a>
 80081a8:	4b06      	ldr	r3, [pc, #24]	; (80081c4 <netconn_write_vectors_partly+0x158>)
 80081aa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80081ae:	490a      	ldr	r1, [pc, #40]	; (80081d8 <netconn_write_vectors_partly+0x16c>)
 80081b0:	4806      	ldr	r0, [pc, #24]	; (80081cc <netconn_write_vectors_partly+0x160>)
 80081b2:	f00f fe0b 	bl	8017dcc <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80081b6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3748      	adds	r7, #72	; 0x48
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	08019290 	.word	0x08019290
 80081c8:	08019568 	.word	0x08019568
 80081cc:	080192e8 	.word	0x080192e8
 80081d0:	08019584 	.word	0x08019584
 80081d4:	080097fd 	.word	0x080097fd
 80081d8:	080195a8 	.word	0x080195a8

080081dc <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b08c      	sub	sp, #48	; 0x30
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	460b      	mov	r3, r1
 80081e6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d109      	bne.n	8008202 <netconn_close_shutdown+0x26>
 80081ee:	4b0f      	ldr	r3, [pc, #60]	; (800822c <netconn_close_shutdown+0x50>)
 80081f0:	f240 4247 	movw	r2, #1095	; 0x447
 80081f4:	490e      	ldr	r1, [pc, #56]	; (8008230 <netconn_close_shutdown+0x54>)
 80081f6:	480f      	ldr	r0, [pc, #60]	; (8008234 <netconn_close_shutdown+0x58>)
 80081f8:	f00f fde8 	bl	8017dcc <iprintf>
 80081fc:	f06f 030f 	mvn.w	r3, #15
 8008200:	e010      	b.n	8008224 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008206:	78fb      	ldrb	r3, [r7, #3]
 8008208:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800820a:	2329      	movs	r3, #41	; 0x29
 800820c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800820e:	f107 030c 	add.w	r3, r7, #12
 8008212:	4619      	mov	r1, r3
 8008214:	4808      	ldr	r0, [pc, #32]	; (8008238 <netconn_close_shutdown+0x5c>)
 8008216:	f7ff fb51 	bl	80078bc <netconn_apimsg>
 800821a:	4603      	mov	r3, r0
 800821c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008220:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008224:	4618      	mov	r0, r3
 8008226:	3730      	adds	r7, #48	; 0x30
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	08019290 	.word	0x08019290
 8008230:	080195cc 	.word	0x080195cc
 8008234:	080192e8 	.word	0x080192e8
 8008238:	08009915 	.word	0x08009915

0800823c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008244:	2103      	movs	r1, #3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7ff ffc8 	bl	80081dc <netconn_close_shutdown>
 800824c:	4603      	mov	r3, r0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b084      	sub	sp, #16
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d101      	bne.n	8008268 <netconn_err+0x12>
    return ERR_OK;
 8008264:	2300      	movs	r3, #0
 8008266:	e00d      	b.n	8008284 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008268:	f00f fd12 	bl	8017c90 <sys_arch_protect>
 800826c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	7a1b      	ldrb	r3, [r3, #8]
 8008272:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f00f fd16 	bl	8017cac <sys_arch_unprotect>
  return err;
 8008280:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	4603      	mov	r3, r0
 8008294:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800829a:	f113 0f0e 	cmn.w	r3, #14
 800829e:	d008      	beq.n	80082b2 <lwip_netconn_err_to_msg+0x26>
 80082a0:	f113 0f0d 	cmn.w	r3, #13
 80082a4:	d003      	beq.n	80082ae <lwip_netconn_err_to_msg+0x22>
 80082a6:	f113 0f0f 	cmn.w	r3, #15
 80082aa:	d004      	beq.n	80082b6 <lwip_netconn_err_to_msg+0x2a>
 80082ac:	e005      	b.n	80082ba <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80082ae:	4b0a      	ldr	r3, [pc, #40]	; (80082d8 <lwip_netconn_err_to_msg+0x4c>)
 80082b0:	e00e      	b.n	80082d0 <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80082b2:	4b0a      	ldr	r3, [pc, #40]	; (80082dc <lwip_netconn_err_to_msg+0x50>)
 80082b4:	e00c      	b.n	80082d0 <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80082b6:	4b0a      	ldr	r3, [pc, #40]	; (80082e0 <lwip_netconn_err_to_msg+0x54>)
 80082b8:	e00a      	b.n	80082d0 <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80082ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d005      	beq.n	80082ce <lwip_netconn_err_to_msg+0x42>
 80082c2:	4b08      	ldr	r3, [pc, #32]	; (80082e4 <lwip_netconn_err_to_msg+0x58>)
 80082c4:	227d      	movs	r2, #125	; 0x7d
 80082c6:	4908      	ldr	r1, [pc, #32]	; (80082e8 <lwip_netconn_err_to_msg+0x5c>)
 80082c8:	4808      	ldr	r0, [pc, #32]	; (80082ec <lwip_netconn_err_to_msg+0x60>)
 80082ca:	f00f fd7f 	bl	8017dcc <iprintf>
      return NULL;
 80082ce:	2300      	movs	r3, #0
  }
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	0801cd38 	.word	0x0801cd38
 80082dc:	0801cd39 	.word	0x0801cd39
 80082e0:	0801cd3a 	.word	0x0801cd3a
 80082e4:	080195e8 	.word	0x080195e8
 80082e8:	0801961c 	.word	0x0801961c
 80082ec:	0801962c 	.word	0x0801962c

080082f0 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d105      	bne.n	800830c <lwip_netconn_is_err_msg+0x1c>
 8008300:	4b12      	ldr	r3, [pc, #72]	; (800834c <lwip_netconn_is_err_msg+0x5c>)
 8008302:	2285      	movs	r2, #133	; 0x85
 8008304:	4912      	ldr	r1, [pc, #72]	; (8008350 <lwip_netconn_is_err_msg+0x60>)
 8008306:	4813      	ldr	r0, [pc, #76]	; (8008354 <lwip_netconn_is_err_msg+0x64>)
 8008308:	f00f fd60 	bl	8017dcc <iprintf>

  if (msg == &netconn_aborted) {
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a12      	ldr	r2, [pc, #72]	; (8008358 <lwip_netconn_is_err_msg+0x68>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d104      	bne.n	800831e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	22f3      	movs	r2, #243	; 0xf3
 8008318:	701a      	strb	r2, [r3, #0]
    return 1;
 800831a:	2301      	movs	r3, #1
 800831c:	e012      	b.n	8008344 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4a0e      	ldr	r2, [pc, #56]	; (800835c <lwip_netconn_is_err_msg+0x6c>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d104      	bne.n	8008330 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	22f2      	movs	r2, #242	; 0xf2
 800832a:	701a      	strb	r2, [r3, #0]
    return 1;
 800832c:	2301      	movs	r3, #1
 800832e:	e009      	b.n	8008344 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4a0b      	ldr	r2, [pc, #44]	; (8008360 <lwip_netconn_is_err_msg+0x70>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d104      	bne.n	8008342 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	22f1      	movs	r2, #241	; 0xf1
 800833c:	701a      	strb	r2, [r3, #0]
    return 1;
 800833e:	2301      	movs	r3, #1
 8008340:	e000      	b.n	8008344 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	080195e8 	.word	0x080195e8
 8008350:	08019654 	.word	0x08019654
 8008354:	0801962c 	.word	0x0801962c
 8008358:	0801cd38 	.word	0x0801cd38
 800835c:	0801cd39 	.word	0x0801cd39
 8008360:	0801cd3a 	.word	0x0801cd3a

08008364 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b088      	sub	sp, #32
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d105      	bne.n	8008384 <recv_udp+0x20>
 8008378:	4b34      	ldr	r3, [pc, #208]	; (800844c <recv_udp+0xe8>)
 800837a:	22e5      	movs	r2, #229	; 0xe5
 800837c:	4934      	ldr	r1, [pc, #208]	; (8008450 <recv_udp+0xec>)
 800837e:	4835      	ldr	r0, [pc, #212]	; (8008454 <recv_udp+0xf0>)
 8008380:	f00f fd24 	bl	8017dcc <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d105      	bne.n	8008396 <recv_udp+0x32>
 800838a:	4b30      	ldr	r3, [pc, #192]	; (800844c <recv_udp+0xe8>)
 800838c:	22e6      	movs	r2, #230	; 0xe6
 800838e:	4932      	ldr	r1, [pc, #200]	; (8008458 <recv_udp+0xf4>)
 8008390:	4830      	ldr	r0, [pc, #192]	; (8008454 <recv_udp+0xf0>)
 8008392:	f00f fd1b 	bl	8017dcc <iprintf>
  conn = (struct netconn *)arg;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d103      	bne.n	80083a8 <recv_udp+0x44>
    pbuf_free(p);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f003 ff95 	bl	800c2d0 <pbuf_free>
    return;
 80083a6:	e04d      	b.n	8008444 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d005      	beq.n	80083be <recv_udp+0x5a>
 80083b2:	4b26      	ldr	r3, [pc, #152]	; (800844c <recv_udp+0xe8>)
 80083b4:	22ee      	movs	r2, #238	; 0xee
 80083b6:	4929      	ldr	r1, [pc, #164]	; (800845c <recv_udp+0xf8>)
 80083b8:	4826      	ldr	r0, [pc, #152]	; (8008454 <recv_udp+0xf0>)
 80083ba:	f00f fd07 	bl	8017dcc <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	3310      	adds	r3, #16
 80083c2:	4618      	mov	r0, r3
 80083c4:	f00f fb49 	bl	8017a5a <sys_mbox_valid>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d103      	bne.n	80083d6 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f003 ff7e 	bl	800c2d0 <pbuf_free>
    return;
 80083d4:	e036      	b.n	8008444 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80083d6:	2006      	movs	r0, #6
 80083d8:	f003 f87c 	bl	800b4d4 <memp_malloc>
 80083dc:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d103      	bne.n	80083ec <recv_udp+0x88>
    pbuf_free(p);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f003 ff73 	bl	800c2d0 <pbuf_free>
    return;
 80083ea:	e02b      	b.n	8008444 <recv_udp+0xe0>
  } else {
    buf->p = p;
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d002      	beq.n	8008404 <recv_udp+0xa0>
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	e000      	b.n	8008406 <recv_udp+0xa2>
 8008404:	2300      	movs	r3, #0
 8008406:	69ba      	ldr	r2, [r7, #24]
 8008408:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800840e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	891b      	ldrh	r3, [r3, #8]
 8008414:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	3310      	adds	r3, #16
 800841a:	69b9      	ldr	r1, [r7, #24]
 800841c:	4618      	mov	r0, r3
 800841e:	f00f faa7 	bl	8017970 <sys_mbox_trypost>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d003      	beq.n	8008430 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008428:	69b8      	ldr	r0, [r7, #24]
 800842a:	f001 faff 	bl	8009a2c <netbuf_delete>
    return;
 800842e:	e009      	b.n	8008444 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008434:	2b00      	cmp	r3, #0
 8008436:	d005      	beq.n	8008444 <recv_udp+0xe0>
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843c:	8afa      	ldrh	r2, [r7, #22]
 800843e:	2100      	movs	r1, #0
 8008440:	69f8      	ldr	r0, [r7, #28]
 8008442:	4798      	blx	r3
  }
}
 8008444:	3720      	adds	r7, #32
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	080195e8 	.word	0x080195e8
 8008450:	08019660 	.word	0x08019660
 8008454:	0801962c 	.word	0x0801962c
 8008458:	08019684 	.word	0x08019684
 800845c:	080196a4 	.word	0x080196a4

08008460 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b088      	sub	sp, #32
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
 800846c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d106      	bne.n	8008482 <recv_tcp+0x22>
 8008474:	4b36      	ldr	r3, [pc, #216]	; (8008550 <recv_tcp+0xf0>)
 8008476:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800847a:	4936      	ldr	r1, [pc, #216]	; (8008554 <recv_tcp+0xf4>)
 800847c:	4836      	ldr	r0, [pc, #216]	; (8008558 <recv_tcp+0xf8>)
 800847e:	f00f fca5 	bl	8017dcc <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d106      	bne.n	8008496 <recv_tcp+0x36>
 8008488:	4b31      	ldr	r3, [pc, #196]	; (8008550 <recv_tcp+0xf0>)
 800848a:	f240 122d 	movw	r2, #301	; 0x12d
 800848e:	4933      	ldr	r1, [pc, #204]	; (800855c <recv_tcp+0xfc>)
 8008490:	4831      	ldr	r0, [pc, #196]	; (8008558 <recv_tcp+0xf8>)
 8008492:	f00f fc9b 	bl	8017dcc <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8008496:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d006      	beq.n	80084ac <recv_tcp+0x4c>
 800849e:	4b2c      	ldr	r3, [pc, #176]	; (8008550 <recv_tcp+0xf0>)
 80084a0:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80084a4:	492e      	ldr	r1, [pc, #184]	; (8008560 <recv_tcp+0x100>)
 80084a6:	482c      	ldr	r0, [pc, #176]	; (8008558 <recv_tcp+0xf8>)
 80084a8:	f00f fc90 	bl	8017dcc <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d102      	bne.n	80084bc <recv_tcp+0x5c>
    return ERR_VAL;
 80084b6:	f06f 0305 	mvn.w	r3, #5
 80084ba:	e045      	b.n	8008548 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d006      	beq.n	80084d4 <recv_tcp+0x74>
 80084c6:	4b22      	ldr	r3, [pc, #136]	; (8008550 <recv_tcp+0xf0>)
 80084c8:	f240 1235 	movw	r2, #309	; 0x135
 80084cc:	4925      	ldr	r1, [pc, #148]	; (8008564 <recv_tcp+0x104>)
 80084ce:	4822      	ldr	r0, [pc, #136]	; (8008558 <recv_tcp+0xf8>)
 80084d0:	f00f fc7c 	bl	8017dcc <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	3310      	adds	r3, #16
 80084d8:	4618      	mov	r0, r3
 80084da:	f00f fabe 	bl	8017a5a <sys_mbox_valid>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10d      	bne.n	8008500 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d008      	beq.n	80084fc <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	891b      	ldrh	r3, [r3, #8]
 80084ee:	4619      	mov	r1, r3
 80084f0:	68b8      	ldr	r0, [r7, #8]
 80084f2:	f004 febd 	bl	800d270 <tcp_recved>
      pbuf_free(p);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f003 feea 	bl	800c2d0 <pbuf_free>
    }
    return ERR_OK;
 80084fc:	2300      	movs	r3, #0
 80084fe:	e023      	b.n	8008548 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d005      	beq.n	8008512 <recv_tcp+0xb2>
    msg = p;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	891b      	ldrh	r3, [r3, #8]
 800850e:	83fb      	strh	r3, [r7, #30]
 8008510:	e003      	b.n	800851a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8008512:	4b15      	ldr	r3, [pc, #84]	; (8008568 <recv_tcp+0x108>)
 8008514:	61bb      	str	r3, [r7, #24]
    len = 0;
 8008516:	2300      	movs	r3, #0
 8008518:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	3310      	adds	r3, #16
 800851e:	69b9      	ldr	r1, [r7, #24]
 8008520:	4618      	mov	r0, r3
 8008522:	f00f fa25 	bl	8017970 <sys_mbox_trypost>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d002      	beq.n	8008532 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800852c:	f04f 33ff 	mov.w	r3, #4294967295
 8008530:	e00a      	b.n	8008548 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008536:	2b00      	cmp	r3, #0
 8008538:	d005      	beq.n	8008546 <recv_tcp+0xe6>
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853e:	8bfa      	ldrh	r2, [r7, #30]
 8008540:	2100      	movs	r1, #0
 8008542:	6978      	ldr	r0, [r7, #20]
 8008544:	4798      	blx	r3
  }

  return ERR_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3720      	adds	r7, #32
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	080195e8 	.word	0x080195e8
 8008554:	080196c4 	.word	0x080196c4
 8008558:	0801962c 	.word	0x0801962c
 800855c:	080196e8 	.word	0x080196e8
 8008560:	08019708 	.word	0x08019708
 8008564:	08019720 	.word	0x08019720
 8008568:	0801cd3a 	.word	0x0801cd3a

0800856c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d106      	bne.n	800858e <poll_tcp+0x22>
 8008580:	4b29      	ldr	r3, [pc, #164]	; (8008628 <poll_tcp+0xbc>)
 8008582:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8008586:	4929      	ldr	r1, [pc, #164]	; (800862c <poll_tcp+0xc0>)
 8008588:	4829      	ldr	r0, [pc, #164]	; (8008630 <poll_tcp+0xc4>)
 800858a:	f00f fc1f 	bl	8017dcc <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	785b      	ldrb	r3, [r3, #1]
 8008592:	2b01      	cmp	r3, #1
 8008594:	d104      	bne.n	80085a0 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008596:	2101      	movs	r1, #1
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f000 ff63 	bl	8009464 <lwip_netconn_do_writemore>
 800859e:	e016      	b.n	80085ce <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	785b      	ldrb	r3, [r3, #1]
 80085a4:	2b04      	cmp	r3, #4
 80085a6:	d112      	bne.n	80085ce <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6a1b      	ldr	r3, [r3, #32]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00a      	beq.n	80085c6 <poll_tcp+0x5a>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6a1b      	ldr	r3, [r3, #32]
 80085b4:	7a5b      	ldrb	r3, [r3, #9]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d005      	beq.n	80085c6 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6a1b      	ldr	r3, [r3, #32]
 80085be:	7a5a      	ldrb	r2, [r3, #9]
 80085c0:	3a01      	subs	r2, #1
 80085c2:	b2d2      	uxtb	r2, r2
 80085c4:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80085c6:	2101      	movs	r1, #1
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f000 fbf7 	bl	8008dbc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	7f1b      	ldrb	r3, [r3, #28]
 80085d2:	f003 0310 	and.w	r3, r3, #16
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d021      	beq.n	800861e <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d01d      	beq.n	800861e <poll_tcp+0xb2>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80085ea:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80085ee:	d316      	bcc.n	800861e <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80085f8:	2b04      	cmp	r3, #4
 80085fa:	d810      	bhi.n	800861e <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	7f1b      	ldrb	r3, [r3, #28]
 8008600:	f023 0310 	bic.w	r3, r3, #16
 8008604:	b2da      	uxtb	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860e:	2b00      	cmp	r3, #0
 8008610:	d005      	beq.n	800861e <poll_tcp+0xb2>
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008616:	2200      	movs	r2, #0
 8008618:	2102      	movs	r1, #2
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	080195e8 	.word	0x080195e8
 800862c:	08019740 	.word	0x08019740
 8008630:	0801962c 	.word	0x0801962c

08008634 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b086      	sub	sp, #24
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	4613      	mov	r3, r2
 8008640:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d106      	bne.n	800865a <sent_tcp+0x26>
 800864c:	4b20      	ldr	r3, [pc, #128]	; (80086d0 <sent_tcp+0x9c>)
 800864e:	f240 1293 	movw	r2, #403	; 0x193
 8008652:	4920      	ldr	r1, [pc, #128]	; (80086d4 <sent_tcp+0xa0>)
 8008654:	4820      	ldr	r0, [pc, #128]	; (80086d8 <sent_tcp+0xa4>)
 8008656:	f00f fbb9 	bl	8017dcc <iprintf>

  if (conn) {
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d032      	beq.n	80086c6 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	785b      	ldrb	r3, [r3, #1]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d104      	bne.n	8008672 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008668:	2101      	movs	r1, #1
 800866a:	6978      	ldr	r0, [r7, #20]
 800866c:	f000 fefa 	bl	8009464 <lwip_netconn_do_writemore>
 8008670:	e007      	b.n	8008682 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	785b      	ldrb	r3, [r3, #1]
 8008676:	2b04      	cmp	r3, #4
 8008678:	d103      	bne.n	8008682 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800867a:	2101      	movs	r1, #1
 800867c:	6978      	ldr	r0, [r7, #20]
 800867e:	f000 fb9d 	bl	8008dbc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d01d      	beq.n	80086c6 <sent_tcp+0x92>
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008692:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008696:	d316      	bcc.n	80086c6 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80086a0:	2b04      	cmp	r3, #4
 80086a2:	d810      	bhi.n	80086c6 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	7f1b      	ldrb	r3, [r3, #28]
 80086a8:	f023 0310 	bic.w	r3, r3, #16
 80086ac:	b2da      	uxtb	r2, r3
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d005      	beq.n	80086c6 <sent_tcp+0x92>
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086be:	88fa      	ldrh	r2, [r7, #6]
 80086c0:	2102      	movs	r1, #2
 80086c2:	6978      	ldr	r0, [r7, #20]
 80086c4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3718      	adds	r7, #24
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	080195e8 	.word	0x080195e8
 80086d4:	08019740 	.word	0x08019740
 80086d8:	0801962c 	.word	0x0801962c

080086dc <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b088      	sub	sp, #32
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	460b      	mov	r3, r1
 80086e6:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d106      	bne.n	8008700 <err_tcp+0x24>
 80086f2:	4b5f      	ldr	r3, [pc, #380]	; (8008870 <err_tcp+0x194>)
 80086f4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80086f8:	495e      	ldr	r1, [pc, #376]	; (8008874 <err_tcp+0x198>)
 80086fa:	485f      	ldr	r0, [pc, #380]	; (8008878 <err_tcp+0x19c>)
 80086fc:	f00f fb66 	bl	8017dcc <iprintf>

  SYS_ARCH_PROTECT(lev);
 8008700:	f00f fac6 	bl	8017c90 <sys_arch_protect>
 8008704:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	2200      	movs	r2, #0
 800870a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	78fa      	ldrb	r2, [r7, #3]
 8008710:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	7f1b      	ldrb	r3, [r3, #28]
 8008716:	f043 0301 	orr.w	r3, r3, #1
 800871a:	b2da      	uxtb	r2, r3
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	785b      	ldrb	r3, [r3, #1]
 8008724:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	2200      	movs	r2, #0
 800872a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800872c:	69b8      	ldr	r0, [r7, #24]
 800872e:	f00f fabd 	bl	8017cac <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008736:	2b00      	cmp	r3, #0
 8008738:	d005      	beq.n	8008746 <err_tcp+0x6a>
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873e:	2200      	movs	r2, #0
 8008740:	2104      	movs	r1, #4
 8008742:	69f8      	ldr	r0, [r7, #28]
 8008744:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874a:	2b00      	cmp	r3, #0
 800874c:	d005      	beq.n	800875a <err_tcp+0x7e>
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008752:	2200      	movs	r2, #0
 8008754:	2100      	movs	r1, #0
 8008756:	69f8      	ldr	r0, [r7, #28]
 8008758:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875e:	2b00      	cmp	r3, #0
 8008760:	d005      	beq.n	800876e <err_tcp+0x92>
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008766:	2200      	movs	r2, #0
 8008768:	2102      	movs	r1, #2
 800876a:	69f8      	ldr	r0, [r7, #28]
 800876c:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800876e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008772:	4618      	mov	r0, r3
 8008774:	f7ff fd8a 	bl	800828c <lwip_netconn_err_to_msg>
 8008778:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	3310      	adds	r3, #16
 800877e:	4618      	mov	r0, r3
 8008780:	f00f f96b 	bl	8017a5a <sys_mbox_valid>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d005      	beq.n	8008796 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	3310      	adds	r3, #16
 800878e:	6939      	ldr	r1, [r7, #16]
 8008790:	4618      	mov	r0, r3
 8008792:	f00f f8ed 	bl	8017970 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	3314      	adds	r3, #20
 800879a:	4618      	mov	r0, r3
 800879c:	f00f f95d 	bl	8017a5a <sys_mbox_valid>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d005      	beq.n	80087b2 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	3314      	adds	r3, #20
 80087aa:	6939      	ldr	r1, [r7, #16]
 80087ac:	4618      	mov	r0, r3
 80087ae:	f00f f8df 	bl	8017970 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80087b2:	7dfb      	ldrb	r3, [r7, #23]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d005      	beq.n	80087c4 <err_tcp+0xe8>
 80087b8:	7dfb      	ldrb	r3, [r7, #23]
 80087ba:	2b04      	cmp	r3, #4
 80087bc:	d002      	beq.n	80087c4 <err_tcp+0xe8>
 80087be:	7dfb      	ldrb	r3, [r7, #23]
 80087c0:	2b03      	cmp	r3, #3
 80087c2:	d143      	bne.n	800884c <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	7f1b      	ldrb	r3, [r3, #28]
 80087c8:	f003 0304 	and.w	r3, r3, #4
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	bf14      	ite	ne
 80087d0:	2301      	movne	r3, #1
 80087d2:	2300      	moveq	r3, #0
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	7f1b      	ldrb	r3, [r3, #28]
 80087dc:	f023 0304 	bic.w	r3, r3, #4
 80087e0:	b2da      	uxtb	r2, r3
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d13b      	bne.n	8008864 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	6a1b      	ldr	r3, [r3, #32]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d106      	bne.n	8008802 <err_tcp+0x126>
 80087f4:	4b1e      	ldr	r3, [pc, #120]	; (8008870 <err_tcp+0x194>)
 80087f6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80087fa:	4920      	ldr	r1, [pc, #128]	; (800887c <err_tcp+0x1a0>)
 80087fc:	481e      	ldr	r0, [pc, #120]	; (8008878 <err_tcp+0x19c>)
 80087fe:	f00f fae5 	bl	8017dcc <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8008802:	7dfb      	ldrb	r3, [r7, #23]
 8008804:	2b04      	cmp	r3, #4
 8008806:	d104      	bne.n	8008812 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	6a1b      	ldr	r3, [r3, #32]
 800880c:	2200      	movs	r2, #0
 800880e:	711a      	strb	r2, [r3, #4]
 8008810:	e003      	b.n	800881a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	6a1b      	ldr	r3, [r3, #32]
 8008816:	78fa      	ldrb	r2, [r7, #3]
 8008818:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	330c      	adds	r3, #12
 8008822:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8008824:	68b8      	ldr	r0, [r7, #8]
 8008826:	f00f f9a9 	bl	8017b7c <sys_sem_valid>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d106      	bne.n	800883e <err_tcp+0x162>
 8008830:	4b0f      	ldr	r3, [pc, #60]	; (8008870 <err_tcp+0x194>)
 8008832:	f240 12ef 	movw	r2, #495	; 0x1ef
 8008836:	4912      	ldr	r1, [pc, #72]	; (8008880 <err_tcp+0x1a4>)
 8008838:	480f      	ldr	r0, [pc, #60]	; (8008878 <err_tcp+0x19c>)
 800883a:	f00f fac7 	bl	8017dcc <iprintf>
      conn->current_msg = NULL;
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	2200      	movs	r2, #0
 8008842:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8008844:	68b8      	ldr	r0, [r7, #8]
 8008846:	f00f f97f 	bl	8017b48 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800884a:	e00b      	b.n	8008864 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	6a1b      	ldr	r3, [r3, #32]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d008      	beq.n	8008866 <err_tcp+0x18a>
 8008854:	4b06      	ldr	r3, [pc, #24]	; (8008870 <err_tcp+0x194>)
 8008856:	f240 12f7 	movw	r2, #503	; 0x1f7
 800885a:	490a      	ldr	r1, [pc, #40]	; (8008884 <err_tcp+0x1a8>)
 800885c:	4806      	ldr	r0, [pc, #24]	; (8008878 <err_tcp+0x19c>)
 800885e:	f00f fab5 	bl	8017dcc <iprintf>
  }
}
 8008862:	e000      	b.n	8008866 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8008864:	bf00      	nop
}
 8008866:	bf00      	nop
 8008868:	3720      	adds	r7, #32
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	080195e8 	.word	0x080195e8
 8008874:	08019740 	.word	0x08019740
 8008878:	0801962c 	.word	0x0801962c
 800887c:	08019750 	.word	0x08019750
 8008880:	0801976c 	.word	0x0801976c
 8008884:	08019788 	.word	0x08019788

08008888 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8008896:	6879      	ldr	r1, [r7, #4]
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f005 fbc9 	bl	800e030 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800889e:	490a      	ldr	r1, [pc, #40]	; (80088c8 <setup_tcp+0x40>)
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f005 fbd7 	bl	800e054 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80088a6:	4909      	ldr	r1, [pc, #36]	; (80088cc <setup_tcp+0x44>)
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f005 fbf5 	bl	800e098 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80088ae:	2202      	movs	r2, #2
 80088b0:	4907      	ldr	r1, [pc, #28]	; (80088d0 <setup_tcp+0x48>)
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f005 fc4c 	bl	800e150 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80088b8:	4906      	ldr	r1, [pc, #24]	; (80088d4 <setup_tcp+0x4c>)
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f005 fc0e 	bl	800e0dc <tcp_err>
}
 80088c0:	bf00      	nop
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	08008461 	.word	0x08008461
 80088cc:	08008635 	.word	0x08008635
 80088d0:	0800856d 	.word	0x0800856d
 80088d4:	080086dd 	.word	0x080086dd

080088d8 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80088d8:	b590      	push	{r4, r7, lr}
 80088da:	b089      	sub	sp, #36	; 0x24
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	4613      	mov	r3, r2
 80088e4:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d102      	bne.n	80088f6 <accept_function+0x1e>
    return ERR_VAL;
 80088f0:	f06f 0305 	mvn.w	r3, #5
 80088f4:	e0a1      	b.n	8008a3a <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	3314      	adds	r3, #20
 80088fa:	4618      	mov	r0, r3
 80088fc:	f00f f8ad 	bl	8017a5a <sys_mbox_valid>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d102      	bne.n	800890c <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8008906:	f06f 0305 	mvn.w	r3, #5
 800890a:	e096      	b.n	8008a3a <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d11b      	bne.n	800894a <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	f103 0414 	add.w	r4, r3, #20
 8008918:	f06f 000c 	mvn.w	r0, #12
 800891c:	f7ff fcb6 	bl	800828c <lwip_netconn_err_to_msg>
 8008920:	4603      	mov	r3, r0
 8008922:	4619      	mov	r1, r3
 8008924:	4620      	mov	r0, r4
 8008926:	f00f f823 	bl	8017970 <sys_mbox_trypost>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d109      	bne.n	8008944 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008934:	2b00      	cmp	r3, #0
 8008936:	d005      	beq.n	8008944 <accept_function+0x6c>
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893c:	2200      	movs	r2, #0
 800893e:	2100      	movs	r1, #0
 8008940:	69f8      	ldr	r0, [r7, #28]
 8008942:	4798      	blx	r3
    }
    return ERR_VAL;
 8008944:	f06f 0305 	mvn.w	r3, #5
 8008948:	e077      	b.n	8008a3a <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800894a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d006      	beq.n	8008960 <accept_function+0x88>
 8008952:	4b3c      	ldr	r3, [pc, #240]	; (8008a44 <accept_function+0x16c>)
 8008954:	f240 222a 	movw	r2, #554	; 0x22a
 8008958:	493b      	ldr	r1, [pc, #236]	; (8008a48 <accept_function+0x170>)
 800895a:	483c      	ldr	r0, [pc, #240]	; (8008a4c <accept_function+0x174>)
 800895c:	f00f fa36 	bl	8017dcc <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	781a      	ldrb	r2, [r3, #0]
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008968:	4619      	mov	r1, r3
 800896a:	4610      	mov	r0, r2
 800896c:	f000 f8f0 	bl	8008b50 <netconn_alloc>
 8008970:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d11b      	bne.n	80089b0 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	f103 0414 	add.w	r4, r3, #20
 800897e:	f06f 000c 	mvn.w	r0, #12
 8008982:	f7ff fc83 	bl	800828c <lwip_netconn_err_to_msg>
 8008986:	4603      	mov	r3, r0
 8008988:	4619      	mov	r1, r3
 800898a:	4620      	mov	r0, r4
 800898c:	f00e fff0 	bl	8017970 <sys_mbox_trypost>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d109      	bne.n	80089aa <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899a:	2b00      	cmp	r3, #0
 800899c:	d005      	beq.n	80089aa <accept_function+0xd2>
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a2:	2200      	movs	r2, #0
 80089a4:	2100      	movs	r1, #0
 80089a6:	69f8      	ldr	r0, [r7, #28]
 80089a8:	4798      	blx	r3
    }
    return ERR_MEM;
 80089aa:	f04f 33ff 	mov.w	r3, #4294967295
 80089ae:	e044      	b.n	8008a3a <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 80089b6:	69b8      	ldr	r0, [r7, #24]
 80089b8:	f7ff ff66 	bl	8008888 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	3314      	adds	r3, #20
 80089c0:	69b9      	ldr	r1, [r7, #24]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f00e ffd4 	bl	8017970 <sys_mbox_trypost>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d02a      	beq.n	8008a24 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 80089d4:	2100      	movs	r1, #0
 80089d6:	6978      	ldr	r0, [r7, #20]
 80089d8:	f005 fb2a 	bl	800e030 <tcp_arg>
    tcp_recv(pcb, NULL);
 80089dc:	2100      	movs	r1, #0
 80089de:	6978      	ldr	r0, [r7, #20]
 80089e0:	f005 fb38 	bl	800e054 <tcp_recv>
    tcp_sent(pcb, NULL);
 80089e4:	2100      	movs	r1, #0
 80089e6:	6978      	ldr	r0, [r7, #20]
 80089e8:	f005 fb56 	bl	800e098 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 80089ec:	2200      	movs	r2, #0
 80089ee:	2100      	movs	r1, #0
 80089f0:	6978      	ldr	r0, [r7, #20]
 80089f2:	f005 fbad 	bl	800e150 <tcp_poll>
    tcp_err(pcb, NULL);
 80089f6:	2100      	movs	r1, #0
 80089f8:	6978      	ldr	r0, [r7, #20]
 80089fa:	f005 fb6f 	bl	800e0dc <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	2200      	movs	r2, #0
 8008a02:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	3310      	adds	r3, #16
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f00e ff9f 	bl	801794c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	3310      	adds	r3, #16
 8008a12:	4618      	mov	r0, r3
 8008a14:	f00f f832 	bl	8017a7c <sys_mbox_set_invalid>
    netconn_free(newconn);
 8008a18:	69b8      	ldr	r0, [r7, #24]
 8008a1a:	f000 f907 	bl	8008c2c <netconn_free>
    return ERR_MEM;
 8008a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a22:	e00a      	b.n	8008a3a <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d005      	beq.n	8008a38 <accept_function+0x160>
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a30:	2200      	movs	r2, #0
 8008a32:	2100      	movs	r1, #0
 8008a34:	69f8      	ldr	r0, [r7, #28]
 8008a36:	4798      	blx	r3
  }

  return ERR_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3724      	adds	r7, #36	; 0x24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd90      	pop	{r4, r7, pc}
 8008a42:	bf00      	nop
 8008a44:	080195e8 	.word	0x080195e8
 8008a48:	080197a4 	.word	0x080197a4
 8008a4c:	0801962c 	.word	0x0801962c

08008a50 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8008a50:	b590      	push	{r4, r7, lr}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d006      	beq.n	8008a74 <pcb_new+0x24>
 8008a66:	4b2b      	ldr	r3, [pc, #172]	; (8008b14 <pcb_new+0xc4>)
 8008a68:	f240 2265 	movw	r2, #613	; 0x265
 8008a6c:	492a      	ldr	r1, [pc, #168]	; (8008b18 <pcb_new+0xc8>)
 8008a6e:	482b      	ldr	r0, [pc, #172]	; (8008b1c <pcb_new+0xcc>)
 8008a70:	f00f f9ac 	bl	8017dcc <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a7e:	2b10      	cmp	r3, #16
 8008a80:	d022      	beq.n	8008ac8 <pcb_new+0x78>
 8008a82:	2b20      	cmp	r3, #32
 8008a84:	d133      	bne.n	8008aee <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681c      	ldr	r4, [r3, #0]
 8008a8a:	7bfb      	ldrb	r3, [r7, #15]
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f00a fd80 	bl	8013592 <udp_new_ip_type>
 8008a92:	4603      	mov	r3, r0
 8008a94:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d02a      	beq.n	8008af6 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	2b22      	cmp	r3, #34	; 0x22
 8008aa8:	d104      	bne.n	8008ab4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	6858      	ldr	r0, [r3, #4]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	4917      	ldr	r1, [pc, #92]	; (8008b20 <pcb_new+0xd0>)
 8008ac2:	f00a fced 	bl	80134a0 <udp_recv>
      }
      break;
 8008ac6:	e016      	b.n	8008af6 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681c      	ldr	r4, [r3, #0]
 8008acc:	7bfb      	ldrb	r3, [r7, #15]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f005 faa0 	bl	800e014 <tcp_new_ip_type>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00b      	beq.n	8008afa <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7ff fece 	bl	8008888 <setup_tcp>
      }
      break;
 8008aec:	e005      	b.n	8008afa <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	22fa      	movs	r2, #250	; 0xfa
 8008af2:	711a      	strb	r2, [r3, #4]
      return;
 8008af4:	e00a      	b.n	8008b0c <pcb_new+0xbc>
      break;
 8008af6:	bf00      	nop
 8008af8:	e000      	b.n	8008afc <pcb_new+0xac>
      break;
 8008afa:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d102      	bne.n	8008b0c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	22ff      	movs	r2, #255	; 0xff
 8008b0a:	711a      	strb	r2, [r3, #4]
  }
}
 8008b0c:	3714      	adds	r7, #20
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd90      	pop	{r4, r7, pc}
 8008b12:	bf00      	nop
 8008b14:	080195e8 	.word	0x080195e8
 8008b18:	080197cc 	.word	0x080197cc
 8008b1c:	0801962c 	.word	0x0801962c
 8008b20:	08008365 	.word	0x08008365

08008b24 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d102      	bne.n	8008b46 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f7ff ff85 	bl	8008a50 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8008b46:	bf00      	nop
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
	...

08008b50 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b086      	sub	sp, #24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	4603      	mov	r3, r0
 8008b58:	6039      	str	r1, [r7, #0]
 8008b5a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008b60:	2007      	movs	r0, #7
 8008b62:	f002 fcb7 	bl	800b4d4 <memp_malloc>
 8008b66:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <netconn_alloc+0x22>
    return NULL;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	e052      	b.n	8008c18 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2200      	movs	r2, #0
 8008b76:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	79fa      	ldrb	r2, [r7, #7]
 8008b7c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2200      	movs	r2, #0
 8008b82:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8008b84:	79fb      	ldrb	r3, [r7, #7]
 8008b86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b8a:	2b10      	cmp	r3, #16
 8008b8c:	d004      	beq.n	8008b98 <netconn_alloc+0x48>
 8008b8e:	2b20      	cmp	r3, #32
 8008b90:	d105      	bne.n	8008b9e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8008b92:	2306      	movs	r3, #6
 8008b94:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8008b96:	e00a      	b.n	8008bae <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8008b98:	2306      	movs	r3, #6
 8008b9a:	617b      	str	r3, [r7, #20]
      break;
 8008b9c:	e007      	b.n	8008bae <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8008b9e:	4b20      	ldr	r3, [pc, #128]	; (8008c20 <netconn_alloc+0xd0>)
 8008ba0:	f240 22e5 	movw	r2, #741	; 0x2e5
 8008ba4:	491f      	ldr	r1, [pc, #124]	; (8008c24 <netconn_alloc+0xd4>)
 8008ba6:	4820      	ldr	r0, [pc, #128]	; (8008c28 <netconn_alloc+0xd8>)
 8008ba8:	f00f f910 	bl	8017dcc <iprintf>
      goto free_and_return;
 8008bac:	e02f      	b.n	8008c0e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	3310      	adds	r3, #16
 8008bb2:	6979      	ldr	r1, [r7, #20]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f00e fea7 	bl	8017908 <sys_mbox_new>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d125      	bne.n	8008c0c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	330c      	adds	r3, #12
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f00e ff65 	bl	8017a96 <sys_sem_new>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d005      	beq.n	8008bde <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	3310      	adds	r3, #16
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f00e feb8 	bl	801794c <sys_mbox_free>
    goto free_and_return;
 8008bdc:	e017      	b.n	8008c0e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	3314      	adds	r3, #20
 8008be2:	4618      	mov	r0, r3
 8008be4:	f00e ff4a 	bl	8017a7c <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2200      	movs	r2, #0
 8008bec:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8008bf4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	683a      	ldr	r2, [r7, #0]
 8008bfa:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	7cfa      	ldrb	r2, [r7, #19]
 8008c06:	771a      	strb	r2, [r3, #28]
  return conn;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	e005      	b.n	8008c18 <netconn_alloc+0xc8>
    goto free_and_return;
 8008c0c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8008c0e:	68f9      	ldr	r1, [r7, #12]
 8008c10:	2007      	movs	r0, #7
 8008c12:	f002 fcb1 	bl	800b578 <memp_free>
  return NULL;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3718      	adds	r7, #24
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	080195e8 	.word	0x080195e8
 8008c24:	080197ec 	.word	0x080197ec
 8008c28:	0801962c 	.word	0x0801962c

08008c2c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d006      	beq.n	8008c4a <netconn_free+0x1e>
 8008c3c:	4b1b      	ldr	r3, [pc, #108]	; (8008cac <netconn_free+0x80>)
 8008c3e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008c42:	491b      	ldr	r1, [pc, #108]	; (8008cb0 <netconn_free+0x84>)
 8008c44:	481b      	ldr	r0, [pc, #108]	; (8008cb4 <netconn_free+0x88>)
 8008c46:	f00f f8c1 	bl	8017dcc <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	3310      	adds	r3, #16
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f00e ff03 	bl	8017a5a <sys_mbox_valid>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d006      	beq.n	8008c68 <netconn_free+0x3c>
 8008c5a:	4b14      	ldr	r3, [pc, #80]	; (8008cac <netconn_free+0x80>)
 8008c5c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8008c60:	4915      	ldr	r1, [pc, #84]	; (8008cb8 <netconn_free+0x8c>)
 8008c62:	4814      	ldr	r0, [pc, #80]	; (8008cb4 <netconn_free+0x88>)
 8008c64:	f00f f8b2 	bl	8017dcc <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	3314      	adds	r3, #20
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f00e fef4 	bl	8017a5a <sys_mbox_valid>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d006      	beq.n	8008c86 <netconn_free+0x5a>
 8008c78:	4b0c      	ldr	r3, [pc, #48]	; (8008cac <netconn_free+0x80>)
 8008c7a:	f240 3227 	movw	r2, #807	; 0x327
 8008c7e:	490f      	ldr	r1, [pc, #60]	; (8008cbc <netconn_free+0x90>)
 8008c80:	480c      	ldr	r0, [pc, #48]	; (8008cb4 <netconn_free+0x88>)
 8008c82:	f00f f8a3 	bl	8017dcc <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	330c      	adds	r3, #12
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f00e ff69 	bl	8017b62 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	330c      	adds	r3, #12
 8008c94:	4618      	mov	r0, r3
 8008c96:	f00e ff82 	bl	8017b9e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8008c9a:	6879      	ldr	r1, [r7, #4]
 8008c9c:	2007      	movs	r0, #7
 8008c9e:	f002 fc6b 	bl	800b578 <memp_free>
}
 8008ca2:	bf00      	nop
 8008ca4:	3708      	adds	r7, #8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	080195e8 	.word	0x080195e8
 8008cb0:	08019814 	.word	0x08019814
 8008cb4:	0801962c 	.word	0x0801962c
 8008cb8:	08019844 	.word	0x08019844
 8008cbc:	08019880 	.word	0x08019880

08008cc0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	3310      	adds	r3, #16
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f00e fec4 	bl	8017a5a <sys_mbox_valid>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d02f      	beq.n	8008d38 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008cd8:	e018      	b.n	8008d0c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ce2:	2b10      	cmp	r3, #16
 8008ce4:	d10e      	bne.n	8008d04 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	f107 020f 	add.w	r2, r7, #15
 8008cec:	4611      	mov	r1, r2
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7ff fafe 	bl	80082f0 <lwip_netconn_is_err_msg>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d108      	bne.n	8008d0c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f003 fae7 	bl	800c2d0 <pbuf_free>
 8008d02:	e003      	b.n	8008d0c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	4618      	mov	r0, r3
 8008d08:	f000 fe90 	bl	8009a2c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	3310      	adds	r3, #16
 8008d10:	f107 0210 	add.w	r2, r7, #16
 8008d14:	4611      	mov	r1, r2
 8008d16:	4618      	mov	r0, r3
 8008d18:	f00e fe83 	bl	8017a22 <sys_arch_mbox_tryfetch>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d22:	d1da      	bne.n	8008cda <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	3310      	adds	r3, #16
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f00e fe0f 	bl	801794c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	3310      	adds	r3, #16
 8008d32:	4618      	mov	r0, r3
 8008d34:	f00e fea2 	bl	8017a7c <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	3314      	adds	r3, #20
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f00e fe8c 	bl	8017a5a <sys_mbox_valid>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d034      	beq.n	8008db2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008d48:	e01d      	b.n	8008d86 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	f107 020e 	add.w	r2, r7, #14
 8008d50:	4611      	mov	r1, r2
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7ff facc 	bl	80082f0 <lwip_netconn_is_err_msg>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d113      	bne.n	8008d86 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8008d62:	6978      	ldr	r0, [r7, #20]
 8008d64:	f7ff ffac 	bl	8008cc0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d007      	beq.n	8008d80 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	4618      	mov	r0, r3
 8008d76:	f004 f8a1 	bl	800cebc <tcp_abort>
            newconn->pcb.tcp = NULL;
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8008d80:	6978      	ldr	r0, [r7, #20]
 8008d82:	f7ff ff53 	bl	8008c2c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	3314      	adds	r3, #20
 8008d8a:	f107 0210 	add.w	r2, r7, #16
 8008d8e:	4611      	mov	r1, r2
 8008d90:	4618      	mov	r0, r3
 8008d92:	f00e fe46 	bl	8017a22 <sys_arch_mbox_tryfetch>
 8008d96:	4603      	mov	r3, r0
 8008d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d9c:	d1d5      	bne.n	8008d4a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	3314      	adds	r3, #20
 8008da2:	4618      	mov	r0, r3
 8008da4:	f00e fdd2 	bl	801794c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	3314      	adds	r3, #20
 8008dac:	4618      	mov	r0, r3
 8008dae:	f00e fe65 	bl	8017a7c <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8008db2:	bf00      	nop
 8008db4:	3718      	adds	r7, #24
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
	...

08008dbc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b086      	sub	sp, #24
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d106      	bne.n	8008de0 <lwip_netconn_do_close_internal+0x24>
 8008dd2:	4ba1      	ldr	r3, [pc, #644]	; (8009058 <lwip_netconn_do_close_internal+0x29c>)
 8008dd4:	f240 32a2 	movw	r2, #930	; 0x3a2
 8008dd8:	49a0      	ldr	r1, [pc, #640]	; (800905c <lwip_netconn_do_close_internal+0x2a0>)
 8008dda:	48a1      	ldr	r0, [pc, #644]	; (8009060 <lwip_netconn_do_close_internal+0x2a4>)
 8008ddc:	f00e fff6 	bl	8017dcc <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008de8:	2b10      	cmp	r3, #16
 8008dea:	d006      	beq.n	8008dfa <lwip_netconn_do_close_internal+0x3e>
 8008dec:	4b9a      	ldr	r3, [pc, #616]	; (8009058 <lwip_netconn_do_close_internal+0x29c>)
 8008dee:	f240 32a3 	movw	r2, #931	; 0x3a3
 8008df2:	499c      	ldr	r1, [pc, #624]	; (8009064 <lwip_netconn_do_close_internal+0x2a8>)
 8008df4:	489a      	ldr	r0, [pc, #616]	; (8009060 <lwip_netconn_do_close_internal+0x2a4>)
 8008df6:	f00e ffe9 	bl	8017dcc <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	785b      	ldrb	r3, [r3, #1]
 8008dfe:	2b04      	cmp	r3, #4
 8008e00:	d006      	beq.n	8008e10 <lwip_netconn_do_close_internal+0x54>
 8008e02:	4b95      	ldr	r3, [pc, #596]	; (8009058 <lwip_netconn_do_close_internal+0x29c>)
 8008e04:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8008e08:	4997      	ldr	r1, [pc, #604]	; (8009068 <lwip_netconn_do_close_internal+0x2ac>)
 8008e0a:	4895      	ldr	r0, [pc, #596]	; (8009060 <lwip_netconn_do_close_internal+0x2a4>)
 8008e0c:	f00e ffde 	bl	8017dcc <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d106      	bne.n	8008e26 <lwip_netconn_do_close_internal+0x6a>
 8008e18:	4b8f      	ldr	r3, [pc, #572]	; (8009058 <lwip_netconn_do_close_internal+0x29c>)
 8008e1a:	f240 32a5 	movw	r2, #933	; 0x3a5
 8008e1e:	4993      	ldr	r1, [pc, #588]	; (800906c <lwip_netconn_do_close_internal+0x2b0>)
 8008e20:	488f      	ldr	r0, [pc, #572]	; (8009060 <lwip_netconn_do_close_internal+0x2a4>)
 8008e22:	f00e ffd3 	bl	8017dcc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a1b      	ldr	r3, [r3, #32]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d106      	bne.n	8008e3c <lwip_netconn_do_close_internal+0x80>
 8008e2e:	4b8a      	ldr	r3, [pc, #552]	; (8009058 <lwip_netconn_do_close_internal+0x29c>)
 8008e30:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008e34:	498e      	ldr	r1, [pc, #568]	; (8009070 <lwip_netconn_do_close_internal+0x2b4>)
 8008e36:	488a      	ldr	r0, [pc, #552]	; (8009060 <lwip_netconn_do_close_internal+0x2a4>)
 8008e38:	f00e ffc8 	bl	8017dcc <iprintf>

  tpcb = conn->pcb.tcp;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a1b      	ldr	r3, [r3, #32]
 8008e46:	7a1b      	ldrb	r3, [r3, #8]
 8008e48:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8008e4a:	7bfb      	ldrb	r3, [r7, #15]
 8008e4c:	f003 0301 	and.w	r3, r3, #1
 8008e50:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8008e52:	7bfb      	ldrb	r3, [r7, #15]
 8008e54:	f003 0302 	and.w	r3, r3, #2
 8008e58:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8008e5a:	7bfb      	ldrb	r3, [r7, #15]
 8008e5c:	2b03      	cmp	r3, #3
 8008e5e:	d102      	bne.n	8008e66 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8008e60:	2301      	movs	r3, #1
 8008e62:	75bb      	strb	r3, [r7, #22]
 8008e64:	e01f      	b.n	8008ea6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8008e66:	7bbb      	ldrb	r3, [r7, #14]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d00e      	beq.n	8008e8a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8008e70:	2b05      	cmp	r3, #5
 8008e72:	d007      	beq.n	8008e84 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8008e78:	2b06      	cmp	r3, #6
 8008e7a:	d003      	beq.n	8008e84 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8008e80:	2b08      	cmp	r3, #8
 8008e82:	d102      	bne.n	8008e8a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8008e84:	2301      	movs	r3, #1
 8008e86:	75bb      	strb	r3, [r7, #22]
 8008e88:	e00d      	b.n	8008ea6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8008e8a:	7b7b      	ldrb	r3, [r7, #13]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d008      	beq.n	8008ea2 <lwip_netconn_do_close_internal+0xe6>
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	8b5b      	ldrh	r3, [r3, #26]
 8008e94:	f003 0310 	and.w	r3, r3, #16
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d002      	beq.n	8008ea2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	75bb      	strb	r3, [r7, #22]
 8008ea0:	e001      	b.n	8008ea6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8008ea6:	7dbb      	ldrb	r3, [r7, #22]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d003      	beq.n	8008eb4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8008eac:	2100      	movs	r1, #0
 8008eae:	6938      	ldr	r0, [r7, #16]
 8008eb0:	f005 f8be 	bl	800e030 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	7d1b      	ldrb	r3, [r3, #20]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d104      	bne.n	8008ec6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8008ebc:	2100      	movs	r1, #0
 8008ebe:	6938      	ldr	r0, [r7, #16]
 8008ec0:	f005 f92e 	bl	800e120 <tcp_accept>
 8008ec4:	e01d      	b.n	8008f02 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d007      	beq.n	8008edc <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8008ecc:	2100      	movs	r1, #0
 8008ece:	6938      	ldr	r0, [r7, #16]
 8008ed0:	f005 f8c0 	bl	800e054 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	6938      	ldr	r0, [r7, #16]
 8008ed8:	f005 f922 	bl	800e120 <tcp_accept>
    }
    if (shut_tx) {
 8008edc:	7b7b      	ldrb	r3, [r7, #13]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d003      	beq.n	8008eea <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	6938      	ldr	r0, [r7, #16]
 8008ee6:	f005 f8d7 	bl	800e098 <tcp_sent>
    }
    if (shut_close) {
 8008eea:	7dbb      	ldrb	r3, [r7, #22]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d008      	beq.n	8008f02 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	6938      	ldr	r0, [r7, #16]
 8008ef6:	f005 f92b 	bl	800e150 <tcp_poll>
      tcp_err(tpcb, NULL);
 8008efa:	2100      	movs	r1, #0
 8008efc:	6938      	ldr	r0, [r7, #16]
 8008efe:	f005 f8ed 	bl	800e0dc <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8008f02:	7dbb      	ldrb	r3, [r7, #22]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d005      	beq.n	8008f14 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8008f08:	6938      	ldr	r0, [r7, #16]
 8008f0a:	f003 fe93 	bl	800cc34 <tcp_close>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	75fb      	strb	r3, [r7, #23]
 8008f12:	e007      	b.n	8008f24 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8008f14:	7bbb      	ldrb	r3, [r7, #14]
 8008f16:	7b7a      	ldrb	r2, [r7, #13]
 8008f18:	4619      	mov	r1, r3
 8008f1a:	6938      	ldr	r0, [r7, #16]
 8008f1c:	f003 feb6 	bl	800cc8c <tcp_shutdown>
 8008f20:	4603      	mov	r3, r0
 8008f22:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8008f24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d102      	bne.n	8008f32 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	757b      	strb	r3, [r7, #21]
 8008f30:	e016      	b.n	8008f60 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8008f32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f3a:	d10f      	bne.n	8008f5c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6a1b      	ldr	r3, [r3, #32]
 8008f40:	7a5b      	ldrb	r3, [r3, #9]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d10c      	bne.n	8008f60 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8008f46:	2301      	movs	r3, #1
 8008f48:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8008f4a:	7dbb      	ldrb	r3, [r7, #22]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d007      	beq.n	8008f60 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8008f50:	6938      	ldr	r0, [r7, #16]
 8008f52:	f003 ffb3 	bl	800cebc <tcp_abort>
          err = ERR_OK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	75fb      	strb	r3, [r7, #23]
 8008f5a:	e001      	b.n	8008f60 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8008f60:	7d7b      	ldrb	r3, [r7, #21]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d044      	beq.n	8008ff0 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a1b      	ldr	r3, [r3, #32]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	330c      	adds	r3, #12
 8008f6e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6a1b      	ldr	r3, [r3, #32]
 8008f74:	7dfa      	ldrb	r2, [r7, #23]
 8008f76:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8008f84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d129      	bne.n	8008fe0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8008f8c:	7dbb      	ldrb	r3, [r7, #22]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00c      	beq.n	8008fac <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d005      	beq.n	8008fac <lwip_netconn_do_close_internal+0x1f0>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	2104      	movs	r1, #4
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	4798      	blx	r3
      }
      if (shut_rx) {
 8008fac:	7bbb      	ldrb	r3, [r7, #14]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d009      	beq.n	8008fc6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d005      	beq.n	8008fc6 <lwip_netconn_do_close_internal+0x20a>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	4798      	blx	r3
      }
      if (shut_tx) {
 8008fc6:	7b7b      	ldrb	r3, [r7, #13]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d009      	beq.n	8008fe0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d005      	beq.n	8008fe0 <lwip_netconn_do_close_internal+0x224>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd8:	2200      	movs	r2, #0
 8008fda:	2102      	movs	r1, #2
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8008fe0:	78fb      	ldrb	r3, [r7, #3]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d002      	beq.n	8008fec <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8008fe6:	68b8      	ldr	r0, [r7, #8]
 8008fe8:	f00e fdae 	bl	8017b48 <sys_sem_signal>
    }
    return ERR_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	e02e      	b.n	800904e <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8008ff0:	7d7b      	ldrb	r3, [r7, #21]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d11e      	bne.n	8009034 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	7d1b      	ldrb	r3, [r3, #20]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d106      	bne.n	800900c <lwip_netconn_do_close_internal+0x250>
 8008ffe:	4b16      	ldr	r3, [pc, #88]	; (8009058 <lwip_netconn_do_close_internal+0x29c>)
 8009000:	f240 4241 	movw	r2, #1089	; 0x441
 8009004:	491b      	ldr	r1, [pc, #108]	; (8009074 <lwip_netconn_do_close_internal+0x2b8>)
 8009006:	4816      	ldr	r0, [pc, #88]	; (8009060 <lwip_netconn_do_close_internal+0x2a4>)
 8009008:	f00e fee0 	bl	8017dcc <iprintf>
    if (shut_tx) {
 800900c:	7b7b      	ldrb	r3, [r7, #13]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d003      	beq.n	800901a <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 8009012:	4919      	ldr	r1, [pc, #100]	; (8009078 <lwip_netconn_do_close_internal+0x2bc>)
 8009014:	6938      	ldr	r0, [r7, #16]
 8009016:	f005 f83f 	bl	800e098 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800901a:	2201      	movs	r2, #1
 800901c:	4917      	ldr	r1, [pc, #92]	; (800907c <lwip_netconn_do_close_internal+0x2c0>)
 800901e:	6938      	ldr	r0, [r7, #16]
 8009020:	f005 f896 	bl	800e150 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009024:	4916      	ldr	r1, [pc, #88]	; (8009080 <lwip_netconn_do_close_internal+0x2c4>)
 8009026:	6938      	ldr	r0, [r7, #16]
 8009028:	f005 f858 	bl	800e0dc <tcp_err>
    tcp_arg(tpcb, conn);
 800902c:	6879      	ldr	r1, [r7, #4]
 800902e:	6938      	ldr	r0, [r7, #16]
 8009030:	f004 fffe 	bl	800e030 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009034:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d106      	bne.n	800904a <lwip_netconn_do_close_internal+0x28e>
 800903c:	4b06      	ldr	r3, [pc, #24]	; (8009058 <lwip_netconn_do_close_internal+0x29c>)
 800903e:	f240 424d 	movw	r2, #1101	; 0x44d
 8009042:	4910      	ldr	r1, [pc, #64]	; (8009084 <lwip_netconn_do_close_internal+0x2c8>)
 8009044:	4806      	ldr	r0, [pc, #24]	; (8009060 <lwip_netconn_do_close_internal+0x2a4>)
 8009046:	f00e fec1 	bl	8017dcc <iprintf>
  return err;
 800904a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800904e:	4618      	mov	r0, r3
 8009050:	3718      	adds	r7, #24
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	080195e8 	.word	0x080195e8
 800905c:	080198bc 	.word	0x080198bc
 8009060:	0801962c 	.word	0x0801962c
 8009064:	080198cc 	.word	0x080198cc
 8009068:	080198ec 	.word	0x080198ec
 800906c:	08019910 	.word	0x08019910
 8009070:	08019750 	.word	0x08019750
 8009074:	08019924 	.word	0x08019924
 8009078:	08008635 	.word	0x08008635
 800907c:	0800856d 	.word	0x0800856d
 8009080:	080086dd 	.word	0x080086dd
 8009084:	08019948 	.word	0x08019948

08009088 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	785b      	ldrb	r3, [r3, #1]
 800909a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800909c:	7afb      	ldrb	r3, [r7, #11]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00d      	beq.n	80090be <lwip_netconn_do_delconn+0x36>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090ac:	2b10      	cmp	r3, #16
 80090ae:	d006      	beq.n	80090be <lwip_netconn_do_delconn+0x36>
 80090b0:	4b60      	ldr	r3, [pc, #384]	; (8009234 <lwip_netconn_do_delconn+0x1ac>)
 80090b2:	f240 425f 	movw	r2, #1119	; 0x45f
 80090b6:	4960      	ldr	r1, [pc, #384]	; (8009238 <lwip_netconn_do_delconn+0x1b0>)
 80090b8:	4860      	ldr	r0, [pc, #384]	; (800923c <lwip_netconn_do_delconn+0x1b4>)
 80090ba:	f00e fe87 	bl	8017dcc <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80090be:	7afb      	ldrb	r3, [r7, #11]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d005      	beq.n	80090d0 <lwip_netconn_do_delconn+0x48>
 80090c4:	7afb      	ldrb	r3, [r7, #11]
 80090c6:	2b02      	cmp	r3, #2
 80090c8:	d002      	beq.n	80090d0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80090ca:	7afb      	ldrb	r3, [r7, #11]
 80090cc:	2b03      	cmp	r3, #3
 80090ce:	d109      	bne.n	80090e4 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80090d0:	7afb      	ldrb	r3, [r7, #11]
 80090d2:	2b03      	cmp	r3, #3
 80090d4:	d10a      	bne.n	80090ec <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	7f1b      	ldrb	r3, [r3, #28]
 80090dc:	f003 0304 	and.w	r3, r3, #4
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d103      	bne.n	80090ec <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	22fb      	movs	r2, #251	; 0xfb
 80090e8:	711a      	strb	r2, [r3, #4]
 80090ea:	e097      	b.n	800921c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80090ec:	7afb      	ldrb	r3, [r7, #11]
 80090ee:	2b03      	cmp	r3, #3
 80090f0:	d10d      	bne.n	800910e <lwip_netconn_do_delconn+0x86>
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	7f1b      	ldrb	r3, [r3, #28]
 80090f8:	f003 0304 	and.w	r3, r3, #4
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d106      	bne.n	800910e <lwip_netconn_do_delconn+0x86>
 8009100:	4b4c      	ldr	r3, [pc, #304]	; (8009234 <lwip_netconn_do_delconn+0x1ac>)
 8009102:	f240 427b 	movw	r2, #1147	; 0x47b
 8009106:	494e      	ldr	r1, [pc, #312]	; (8009240 <lwip_netconn_do_delconn+0x1b8>)
 8009108:	484c      	ldr	r0, [pc, #304]	; (800923c <lwip_netconn_do_delconn+0x1b4>)
 800910a:	f00e fe5f 	bl	8017dcc <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2200      	movs	r2, #0
 8009112:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4618      	mov	r0, r3
 800911a:	f7ff fdd1 	bl	8008cc0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d05f      	beq.n	80091e8 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009132:	2b10      	cmp	r3, #16
 8009134:	d00e      	beq.n	8009154 <lwip_netconn_do_delconn+0xcc>
 8009136:	2b20      	cmp	r3, #32
 8009138:	d000      	beq.n	800913c <lwip_netconn_do_delconn+0xb4>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 800913a:	e051      	b.n	80091e0 <lwip_netconn_do_delconn+0x158>
          msg->conn->pcb.udp->recv_arg = NULL;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	4618      	mov	r0, r3
 800914e:	f00a f9c7 	bl	80134e0 <udp_remove>
          break;
 8009152:	e045      	b.n	80091e0 <lwip_netconn_do_delconn+0x158>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d006      	beq.n	800916c <lwip_netconn_do_delconn+0xe4>
 800915e:	4b35      	ldr	r3, [pc, #212]	; (8009234 <lwip_netconn_do_delconn+0x1ac>)
 8009160:	f240 4294 	movw	r2, #1172	; 0x494
 8009164:	4937      	ldr	r1, [pc, #220]	; (8009244 <lwip_netconn_do_delconn+0x1bc>)
 8009166:	4835      	ldr	r0, [pc, #212]	; (800923c <lwip_netconn_do_delconn+0x1b4>)
 8009168:	f00e fe30 	bl	8017dcc <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2204      	movs	r2, #4
 8009172:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2203      	movs	r2, #3
 8009178:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	2100      	movs	r1, #0
 8009188:	4618      	mov	r0, r3
 800918a:	f7ff fe17 	bl	8008dbc <lwip_netconn_do_close_internal>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d04a      	beq.n	800922a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	785b      	ldrb	r3, [r3, #1]
 800919a:	2b04      	cmp	r3, #4
 800919c:	d006      	beq.n	80091ac <lwip_netconn_do_delconn+0x124>
 800919e:	4b25      	ldr	r3, [pc, #148]	; (8009234 <lwip_netconn_do_delconn+0x1ac>)
 80091a0:	f240 429a 	movw	r2, #1178	; 0x49a
 80091a4:	4928      	ldr	r1, [pc, #160]	; (8009248 <lwip_netconn_do_delconn+0x1c0>)
 80091a6:	4825      	ldr	r0, [pc, #148]	; (800923c <lwip_netconn_do_delconn+0x1b4>)
 80091a8:	f00e fe10 	bl	8017dcc <iprintf>
            UNLOCK_TCPIP_CORE();
 80091ac:	4827      	ldr	r0, [pc, #156]	; (800924c <lwip_netconn_do_delconn+0x1c4>)
 80091ae:	f00e fd3c 	bl	8017c2a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	330c      	adds	r3, #12
 80091b8:	2100      	movs	r1, #0
 80091ba:	4618      	mov	r0, r3
 80091bc:	f00e fc93 	bl	8017ae6 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80091c0:	4822      	ldr	r0, [pc, #136]	; (800924c <lwip_netconn_do_delconn+0x1c4>)
 80091c2:	f00e fd23 	bl	8017c0c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	785b      	ldrb	r3, [r3, #1]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d02c      	beq.n	800922a <lwip_netconn_do_delconn+0x1a2>
 80091d0:	4b18      	ldr	r3, [pc, #96]	; (8009234 <lwip_netconn_do_delconn+0x1ac>)
 80091d2:	f240 429e 	movw	r2, #1182	; 0x49e
 80091d6:	491c      	ldr	r1, [pc, #112]	; (8009248 <lwip_netconn_do_delconn+0x1c0>)
 80091d8:	4818      	ldr	r0, [pc, #96]	; (800923c <lwip_netconn_do_delconn+0x1b4>)
 80091da:	f00e fdf7 	bl	8017dcc <iprintf>
          return;
 80091de:	e024      	b.n	800922a <lwip_netconn_do_delconn+0x1a2>
      }
      msg->conn->pcb.tcp = NULL;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2200      	movs	r2, #0
 80091e6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d007      	beq.n	8009202 <lwip_netconn_do_delconn+0x17a>
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	6810      	ldr	r0, [r2, #0]
 80091fc:	2200      	movs	r2, #0
 80091fe:	2100      	movs	r1, #0
 8009200:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009208:	2b00      	cmp	r3, #0
 800920a:	d007      	beq.n	800921c <lwip_netconn_do_delconn+0x194>
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	6810      	ldr	r0, [r2, #0]
 8009216:	2200      	movs	r2, #0
 8009218:	2102      	movs	r1, #2
 800921a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	330c      	adds	r3, #12
 8009222:	4618      	mov	r0, r3
 8009224:	f00e fcaa 	bl	8017b7c <sys_sem_valid>
 8009228:	e000      	b.n	800922c <lwip_netconn_do_delconn+0x1a4>
          return;
 800922a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	080195e8 	.word	0x080195e8
 8009238:	08019958 	.word	0x08019958
 800923c:	0801962c 	.word	0x0801962c
 8009240:	0801996c 	.word	0x0801996c
 8009244:	0801998c 	.word	0x0801998c
 8009248:	080199a8 	.word	0x080199a8
 800924c:	2000bddc 	.word	0x2000bddc

08009250 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d026      	beq.n	80092b4 <lwip_netconn_do_bind+0x64>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009270:	2b10      	cmp	r3, #16
 8009272:	d00e      	beq.n	8009292 <lwip_netconn_do_bind+0x42>
 8009274:	2b20      	cmp	r3, #32
 8009276:	d119      	bne.n	80092ac <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	6858      	ldr	r0, [r3, #4]
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	6899      	ldr	r1, [r3, #8]
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	899b      	ldrh	r3, [r3, #12]
 8009286:	461a      	mov	r2, r3
 8009288:	f00a f814 	bl	80132b4 <udp_bind>
 800928c:	4603      	mov	r3, r0
 800928e:	73fb      	strb	r3, [r7, #15]
        break;
 8009290:	e012      	b.n	80092b8 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	6858      	ldr	r0, [r3, #4]
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	6899      	ldr	r1, [r3, #8]
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	899b      	ldrh	r3, [r3, #12]
 80092a0:	461a      	mov	r2, r3
 80092a2:	f003 fe17 	bl	800ced4 <tcp_bind>
 80092a6:	4603      	mov	r3, r0
 80092a8:	73fb      	strb	r3, [r7, #15]
        break;
 80092aa:	e005      	b.n	80092b8 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80092ac:	23fa      	movs	r3, #250	; 0xfa
 80092ae:	73fb      	strb	r3, [r7, #15]
        break;
 80092b0:	bf00      	nop
 80092b2:	e001      	b.n	80092b8 <lwip_netconn_do_bind+0x68>
    }
  } else {
    err = ERR_VAL;
 80092b4:	23fa      	movs	r3, #250	; 0xfa
 80092b6:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	7bfa      	ldrb	r2, [r7, #15]
 80092bc:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80092be:	bf00      	nop
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
	...

080092c8 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d07f      	beq.n	80093de <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092e8:	2b10      	cmp	r3, #16
 80092ea:	d175      	bne.n	80093d8 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	785b      	ldrb	r3, [r3, #1]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d165      	bne.n	80093c2 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	7d1b      	ldrb	r3, [r3, #20]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d002      	beq.n	8009308 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8009302:	23fa      	movs	r3, #250	; 0xfa
 8009304:	72fb      	strb	r3, [r7, #11]
 8009306:	e06c      	b.n	80093e2 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8009308:	23ff      	movs	r3, #255	; 0xff
 800930a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	f107 020b 	add.w	r2, r7, #11
 8009316:	7cf9      	ldrb	r1, [r7, #19]
 8009318:	4618      	mov	r0, r3
 800931a:	f003 fea5 	bl	800d068 <tcp_listen_with_backlog_and_err>
 800931e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d05d      	beq.n	80093e2 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	3310      	adds	r3, #16
 800932c:	4618      	mov	r0, r3
 800932e:	f00e fb94 	bl	8017a5a <sys_mbox_valid>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d00b      	beq.n	8009350 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	3310      	adds	r3, #16
 800933e:	4618      	mov	r0, r3
 8009340:	f00e fb04 	bl	801794c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	3310      	adds	r3, #16
 800934a:	4618      	mov	r0, r3
 800934c:	f00e fb96 	bl	8017a7c <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8009350:	2300      	movs	r3, #0
 8009352:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	3314      	adds	r3, #20
 800935a:	4618      	mov	r0, r3
 800935c:	f00e fb7d 	bl	8017a5a <sys_mbox_valid>
 8009360:	4603      	mov	r3, r0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d108      	bne.n	8009378 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	3314      	adds	r3, #20
 800936c:	2106      	movs	r1, #6
 800936e:	4618      	mov	r0, r3
 8009370:	f00e faca 	bl	8017908 <sys_mbox_new>
 8009374:	4603      	mov	r3, r0
 8009376:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8009378:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d118      	bne.n	80093b2 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2202      	movs	r2, #2
 8009386:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	685a      	ldr	r2, [r3, #4]
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4619      	mov	r1, r3
 800939c:	4610      	mov	r0, r2
 800939e:	f004 fe47 	bl	800e030 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	4912      	ldr	r1, [pc, #72]	; (80093f4 <lwip_netconn_do_listen+0x12c>)
 80093aa:	4618      	mov	r0, r3
 80093ac:	f004 feb8 	bl	800e120 <tcp_accept>
 80093b0:	e017      	b.n	80093e2 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	f003 fc3e 	bl	800cc34 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2200      	movs	r2, #0
 80093be:	605a      	str	r2, [r3, #4]
 80093c0:	e00f      	b.n	80093e2 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	785b      	ldrb	r3, [r3, #1]
 80093c8:	2b02      	cmp	r3, #2
 80093ca:	d102      	bne.n	80093d2 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 80093cc:	2300      	movs	r3, #0
 80093ce:	72fb      	strb	r3, [r7, #11]
 80093d0:	e007      	b.n	80093e2 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 80093d2:	23f5      	movs	r3, #245	; 0xf5
 80093d4:	72fb      	strb	r3, [r7, #11]
 80093d6:	e004      	b.n	80093e2 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 80093d8:	23f0      	movs	r3, #240	; 0xf0
 80093da:	72fb      	strb	r3, [r7, #11]
 80093dc:	e001      	b.n	80093e2 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 80093de:	23f5      	movs	r3, #245	; 0xf5
 80093e0:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 80093e2:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80093ea:	bf00      	nop
 80093ec:	3718      	adds	r7, #24
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	080088d9 	.word	0x080088d9

080093f8 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b086      	sub	sp, #24
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	2200      	movs	r2, #0
 8009408:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d022      	beq.n	800945a <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800941e:	2b10      	cmp	r3, #16
 8009420:	d11b      	bne.n	800945a <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800942e:	d202      	bcs.n	8009436 <lwip_netconn_do_recv+0x3e>
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	b29b      	uxth	r3, r3
 8009434:	e001      	b.n	800943a <lwip_netconn_do_recv+0x42>
 8009436:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800943a:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	89fa      	ldrh	r2, [r7, #14]
 8009444:	4611      	mov	r1, r2
 8009446:	4618      	mov	r0, r3
 8009448:	f003 ff12 	bl	800d270 <tcp_recved>
        remaining -= recved;
 800944c:	89fb      	ldrh	r3, [r7, #14]
 800944e:	697a      	ldr	r2, [r7, #20]
 8009450:	1ad3      	subs	r3, r2, r3
 8009452:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d1e6      	bne.n	8009428 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800945a:	bf00      	nop
 800945c:	3718      	adds	r7, #24
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
	...

08009464 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b088      	sub	sp, #32
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	460b      	mov	r3, r1
 800946e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009470:	2300      	movs	r3, #0
 8009472:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d106      	bne.n	8009488 <lwip_netconn_do_writemore+0x24>
 800947a:	4b96      	ldr	r3, [pc, #600]	; (80096d4 <lwip_netconn_do_writemore+0x270>)
 800947c:	f240 6273 	movw	r2, #1651	; 0x673
 8009480:	4995      	ldr	r1, [pc, #596]	; (80096d8 <lwip_netconn_do_writemore+0x274>)
 8009482:	4896      	ldr	r0, [pc, #600]	; (80096dc <lwip_netconn_do_writemore+0x278>)
 8009484:	f00e fca2 	bl	8017dcc <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	785b      	ldrb	r3, [r3, #1]
 800948c:	2b01      	cmp	r3, #1
 800948e:	d006      	beq.n	800949e <lwip_netconn_do_writemore+0x3a>
 8009490:	4b90      	ldr	r3, [pc, #576]	; (80096d4 <lwip_netconn_do_writemore+0x270>)
 8009492:	f240 6274 	movw	r2, #1652	; 0x674
 8009496:	4992      	ldr	r1, [pc, #584]	; (80096e0 <lwip_netconn_do_writemore+0x27c>)
 8009498:	4890      	ldr	r0, [pc, #576]	; (80096dc <lwip_netconn_do_writemore+0x278>)
 800949a:	f00e fc97 	bl	8017dcc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a1b      	ldr	r3, [r3, #32]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d106      	bne.n	80094b4 <lwip_netconn_do_writemore+0x50>
 80094a6:	4b8b      	ldr	r3, [pc, #556]	; (80096d4 <lwip_netconn_do_writemore+0x270>)
 80094a8:	f240 6275 	movw	r2, #1653	; 0x675
 80094ac:	498d      	ldr	r1, [pc, #564]	; (80096e4 <lwip_netconn_do_writemore+0x280>)
 80094ae:	488b      	ldr	r0, [pc, #556]	; (80096dc <lwip_netconn_do_writemore+0x278>)
 80094b0:	f00e fc8c 	bl	8017dcc <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d106      	bne.n	80094ca <lwip_netconn_do_writemore+0x66>
 80094bc:	4b85      	ldr	r3, [pc, #532]	; (80096d4 <lwip_netconn_do_writemore+0x270>)
 80094be:	f240 6276 	movw	r2, #1654	; 0x676
 80094c2:	4989      	ldr	r1, [pc, #548]	; (80096e8 <lwip_netconn_do_writemore+0x284>)
 80094c4:	4885      	ldr	r0, [pc, #532]	; (80096dc <lwip_netconn_do_writemore+0x278>)
 80094c6:	f00e fc81 	bl	8017dcc <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	699a      	ldr	r2, [r3, #24]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6a1b      	ldr	r3, [r3, #32]
 80094d4:	695b      	ldr	r3, [r3, #20]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d306      	bcc.n	80094e8 <lwip_netconn_do_writemore+0x84>
 80094da:	4b7e      	ldr	r3, [pc, #504]	; (80096d4 <lwip_netconn_do_writemore+0x270>)
 80094dc:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80094e0:	4982      	ldr	r1, [pc, #520]	; (80096ec <lwip_netconn_do_writemore+0x288>)
 80094e2:	487e      	ldr	r0, [pc, #504]	; (80096dc <lwip_netconn_do_writemore+0x278>)
 80094e4:	f00e fc72 	bl	8017dcc <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a1b      	ldr	r3, [r3, #32]
 80094ec:	899b      	ldrh	r3, [r3, #12]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d106      	bne.n	8009500 <lwip_netconn_do_writemore+0x9c>
 80094f2:	4b78      	ldr	r3, [pc, #480]	; (80096d4 <lwip_netconn_do_writemore+0x270>)
 80094f4:	f240 6279 	movw	r2, #1657	; 0x679
 80094f8:	497d      	ldr	r1, [pc, #500]	; (80096f0 <lwip_netconn_do_writemore+0x28c>)
 80094fa:	4878      	ldr	r0, [pc, #480]	; (80096dc <lwip_netconn_do_writemore+0x278>)
 80094fc:	f00e fc66 	bl	8017dcc <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6a1b      	ldr	r3, [r3, #32]
 8009504:	7f1b      	ldrb	r3, [r3, #28]
 8009506:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	7f1b      	ldrb	r3, [r3, #28]
 800950c:	f003 0302 	and.w	r3, r3, #2
 8009510:	2b00      	cmp	r3, #0
 8009512:	d104      	bne.n	800951e <lwip_netconn_do_writemore+0xba>
 8009514:	7ebb      	ldrb	r3, [r7, #26]
 8009516:	f003 0304 	and.w	r3, r3, #4
 800951a:	2b00      	cmp	r3, #0
 800951c:	d001      	beq.n	8009522 <lwip_netconn_do_writemore+0xbe>
 800951e:	2301      	movs	r3, #1
 8009520:	e000      	b.n	8009524 <lwip_netconn_do_writemore+0xc0>
 8009522:	2300      	movs	r3, #0
 8009524:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a1b      	ldr	r3, [r3, #32]
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a1b      	ldr	r3, [r3, #32]
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	4413      	add	r3, r2
 8009536:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6a1b      	ldr	r3, [r3, #32]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	685a      	ldr	r2, [r3, #4]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6a1b      	ldr	r3, [r3, #32]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	1ad3      	subs	r3, r2, r3
 8009548:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009550:	d307      	bcc.n	8009562 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8009552:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009556:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009558:	7ebb      	ldrb	r3, [r7, #26]
 800955a:	f043 0302 	orr.w	r3, r3, #2
 800955e:	76bb      	strb	r3, [r7, #26]
 8009560:	e001      	b.n	8009566 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800956e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8009570:	89fa      	ldrh	r2, [r7, #14]
 8009572:	8bbb      	ldrh	r3, [r7, #28]
 8009574:	429a      	cmp	r2, r3
 8009576:	d216      	bcs.n	80095a6 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8009578:	89fb      	ldrh	r3, [r7, #14]
 800957a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800957c:	7e3b      	ldrb	r3, [r7, #24]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00d      	beq.n	800959e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8009582:	8bbb      	ldrh	r3, [r7, #28]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10e      	bne.n	80095a6 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6a1b      	ldr	r3, [r3, #32]
 800958c:	699b      	ldr	r3, [r3, #24]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d102      	bne.n	8009598 <lwip_netconn_do_writemore+0x134>
 8009592:	f06f 0306 	mvn.w	r3, #6
 8009596:	e000      	b.n	800959a <lwip_netconn_do_writemore+0x136>
 8009598:	2300      	movs	r3, #0
 800959a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800959c:	e07d      	b.n	800969a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800959e:	7ebb      	ldrb	r3, [r7, #26]
 80095a0:	f043 0302 	orr.w	r3, r3, #2
 80095a4:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a1b      	ldr	r3, [r3, #32]
 80095aa:	691a      	ldr	r2, [r3, #16]
 80095ac:	8bbb      	ldrh	r3, [r7, #28]
 80095ae:	441a      	add	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6a1b      	ldr	r3, [r3, #32]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d906      	bls.n	80095ca <lwip_netconn_do_writemore+0x166>
 80095bc:	4b45      	ldr	r3, [pc, #276]	; (80096d4 <lwip_netconn_do_writemore+0x270>)
 80095be:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80095c2:	494c      	ldr	r1, [pc, #304]	; (80096f4 <lwip_netconn_do_writemore+0x290>)
 80095c4:	4845      	ldr	r0, [pc, #276]	; (80096dc <lwip_netconn_do_writemore+0x278>)
 80095c6:	f00e fc01 	bl	8017dcc <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80095ca:	8bbb      	ldrh	r3, [r7, #28]
 80095cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d103      	bne.n	80095dc <lwip_netconn_do_writemore+0x178>
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095da:	d209      	bcs.n	80095f0 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80095e0:	8bba      	ldrh	r2, [r7, #28]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d10b      	bne.n	80095fe <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6a1b      	ldr	r3, [r3, #32]
 80095ea:	899b      	ldrh	r3, [r3, #12]
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d906      	bls.n	80095fe <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80095f0:	2301      	movs	r3, #1
 80095f2:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80095f4:	7ebb      	ldrb	r3, [r7, #26]
 80095f6:	f043 0302 	orr.w	r3, r3, #2
 80095fa:	76bb      	strb	r3, [r7, #26]
 80095fc:	e001      	b.n	8009602 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80095fe:	2300      	movs	r3, #0
 8009600:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6858      	ldr	r0, [r3, #4]
 8009606:	7ebb      	ldrb	r3, [r7, #26]
 8009608:	8bba      	ldrh	r2, [r7, #28]
 800960a:	6979      	ldr	r1, [r7, #20]
 800960c:	f007 fc4c 	bl	8010ea8 <tcp_write>
 8009610:	4603      	mov	r3, r0
 8009612:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8009614:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d12c      	bne.n	8009676 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6a1b      	ldr	r3, [r3, #32]
 8009620:	6999      	ldr	r1, [r3, #24]
 8009622:	8bba      	ldrh	r2, [r7, #28]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6a1b      	ldr	r3, [r3, #32]
 8009628:	440a      	add	r2, r1
 800962a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6a1b      	ldr	r3, [r3, #32]
 8009630:	6919      	ldr	r1, [r3, #16]
 8009632:	8bba      	ldrh	r2, [r7, #28]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a1b      	ldr	r3, [r3, #32]
 8009638:	440a      	add	r2, r1
 800963a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6a1b      	ldr	r3, [r3, #32]
 8009640:	691a      	ldr	r2, [r3, #16]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6a1b      	ldr	r3, [r3, #32]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	429a      	cmp	r2, r3
 800964c:	d113      	bne.n	8009676 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a1b      	ldr	r3, [r3, #32]
 8009652:	899a      	ldrh	r2, [r3, #12]
 8009654:	3a01      	subs	r2, #1
 8009656:	b292      	uxth	r2, r2
 8009658:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a1b      	ldr	r3, [r3, #32]
 800965e:	899b      	ldrh	r3, [r3, #12]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d008      	beq.n	8009676 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6a1b      	ldr	r3, [r3, #32]
 8009668:	689a      	ldr	r2, [r3, #8]
 800966a:	3208      	adds	r2, #8
 800966c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6a1b      	ldr	r3, [r3, #32]
 8009672:	2200      	movs	r2, #0
 8009674:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8009676:	7e7b      	ldrb	r3, [r7, #25]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d004      	beq.n	8009686 <lwip_netconn_do_writemore+0x222>
 800967c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009680:	2b00      	cmp	r3, #0
 8009682:	f43f af50 	beq.w	8009526 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8009686:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d004      	beq.n	8009698 <lwip_netconn_do_writemore+0x234>
 800968e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009696:	d146      	bne.n	8009726 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8009698:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800969a:	7e3b      	ldrb	r3, [r7, #24]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d02b      	beq.n	80096f8 <lwip_netconn_do_writemore+0x294>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6a1b      	ldr	r3, [r3, #32]
 80096a4:	699a      	ldr	r2, [r3, #24]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a1b      	ldr	r3, [r3, #32]
 80096aa:	695b      	ldr	r3, [r3, #20]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d223      	bcs.n	80096f8 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d005      	beq.n	80096c4 <lwip_netconn_do_writemore+0x260>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096bc:	2200      	movs	r2, #0
 80096be:	2103      	movs	r1, #3
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	7f1b      	ldrb	r3, [r3, #28]
 80096c8:	f043 0310 	orr.w	r3, r3, #16
 80096cc:	b2da      	uxtb	r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	771a      	strb	r2, [r3, #28]
 80096d2:	e028      	b.n	8009726 <lwip_netconn_do_writemore+0x2c2>
 80096d4:	080195e8 	.word	0x080195e8
 80096d8:	08019740 	.word	0x08019740
 80096dc:	0801962c 	.word	0x0801962c
 80096e0:	08019a48 	.word	0x08019a48
 80096e4:	08019750 	.word	0x08019750
 80096e8:	08019a68 	.word	0x08019a68
 80096ec:	08019a80 	.word	0x08019a80
 80096f0:	08019ac0 	.word	0x08019ac0
 80096f4:	08019ae8 	.word	0x08019ae8
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009700:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009704:	d305      	bcc.n	8009712 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800970e:	2b04      	cmp	r3, #4
 8009710:	d909      	bls.n	8009726 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009716:	2b00      	cmp	r3, #0
 8009718:	d005      	beq.n	8009726 <lwip_netconn_do_writemore+0x2c2>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971e:	2200      	movs	r2, #0
 8009720:	2103      	movs	r1, #3
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8009726:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d11d      	bne.n	800976a <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a1b      	ldr	r3, [r3, #32]
 8009732:	699a      	ldr	r2, [r3, #24]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6a1b      	ldr	r3, [r3, #32]
 8009738:	695b      	ldr	r3, [r3, #20]
 800973a:	429a      	cmp	r2, r3
 800973c:	d002      	beq.n	8009744 <lwip_netconn_do_writemore+0x2e0>
 800973e:	7e3b      	ldrb	r3, [r7, #24]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d001      	beq.n	8009748 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8009744:	2301      	movs	r3, #1
 8009746:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	4618      	mov	r0, r3
 800974e:	f008 f997 	bl	8011a80 <tcp_output>
 8009752:	4603      	mov	r3, r0
 8009754:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8009756:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800975a:	f113 0f04 	cmn.w	r3, #4
 800975e:	d12c      	bne.n	80097ba <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009760:	7b3b      	ldrb	r3, [r7, #12]
 8009762:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009764:	2301      	movs	r3, #1
 8009766:	76fb      	strb	r3, [r7, #27]
 8009768:	e027      	b.n	80097ba <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800976a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800976e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009772:	d120      	bne.n	80097b6 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	4618      	mov	r0, r3
 800977a:	f008 f981 	bl	8011a80 <tcp_output>
 800977e:	4603      	mov	r3, r0
 8009780:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8009782:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009786:	f113 0f04 	cmn.w	r3, #4
 800978a:	d104      	bne.n	8009796 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800978c:	7b7b      	ldrb	r3, [r7, #13]
 800978e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009790:	2301      	movs	r3, #1
 8009792:	76fb      	strb	r3, [r7, #27]
 8009794:	e011      	b.n	80097ba <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8009796:	7e3b      	ldrb	r3, [r7, #24]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d00e      	beq.n	80097ba <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a1b      	ldr	r3, [r3, #32]
 80097a0:	699b      	ldr	r3, [r3, #24]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d102      	bne.n	80097ac <lwip_netconn_do_writemore+0x348>
 80097a6:	f06f 0306 	mvn.w	r3, #6
 80097aa:	e000      	b.n	80097ae <lwip_netconn_do_writemore+0x34a>
 80097ac:	2300      	movs	r3, #0
 80097ae:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80097b0:	2301      	movs	r3, #1
 80097b2:	76fb      	strb	r3, [r7, #27]
 80097b4:	e001      	b.n	80097ba <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80097b6:	2301      	movs	r3, #1
 80097b8:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 80097ba:	7efb      	ldrb	r3, [r7, #27]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d015      	beq.n	80097ec <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6a1b      	ldr	r3, [r3, #32]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	330c      	adds	r3, #12
 80097c8:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6a1b      	ldr	r3, [r3, #32]
 80097ce:	7ffa      	ldrb	r2, [r7, #31]
 80097d0:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80097de:	78fb      	ldrb	r3, [r7, #3]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d006      	beq.n	80097f2 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80097e4:	68b8      	ldr	r0, [r7, #8]
 80097e6:	f00e f9af 	bl	8017b48 <sys_sem_signal>
 80097ea:	e002      	b.n	80097f2 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80097ec:	f04f 33ff 	mov.w	r3, #4294967295
 80097f0:	e000      	b.n	80097f4 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3720      	adds	r7, #32
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4618      	mov	r0, r3
 800980e:	f7fe fd22 	bl	8008256 <netconn_err>
 8009812:	4603      	mov	r3, r0
 8009814:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d166      	bne.n	80098ec <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009828:	2b10      	cmp	r3, #16
 800982a:	d15d      	bne.n	80098e8 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	785b      	ldrb	r3, [r3, #1]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d002      	beq.n	800983c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8009836:	23fb      	movs	r3, #251	; 0xfb
 8009838:	73fb      	strb	r3, [r7, #15]
 800983a:	e057      	b.n	80098ec <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d04d      	beq.n	80098e2 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2201      	movs	r2, #1
 800984c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	6a1b      	ldr	r3, [r3, #32]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d006      	beq.n	8009866 <lwip_netconn_do_write+0x6a>
 8009858:	4b28      	ldr	r3, [pc, #160]	; (80098fc <lwip_netconn_do_write+0x100>)
 800985a:	f240 7223 	movw	r2, #1827	; 0x723
 800985e:	4928      	ldr	r1, [pc, #160]	; (8009900 <lwip_netconn_do_write+0x104>)
 8009860:	4828      	ldr	r0, [pc, #160]	; (8009904 <lwip_netconn_do_write+0x108>)
 8009862:	f00e fab3 	bl	8017dcc <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	695b      	ldr	r3, [r3, #20]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d106      	bne.n	800987c <lwip_netconn_do_write+0x80>
 800986e:	4b23      	ldr	r3, [pc, #140]	; (80098fc <lwip_netconn_do_write+0x100>)
 8009870:	f240 7224 	movw	r2, #1828	; 0x724
 8009874:	4924      	ldr	r1, [pc, #144]	; (8009908 <lwip_netconn_do_write+0x10c>)
 8009876:	4823      	ldr	r0, [pc, #140]	; (8009904 <lwip_netconn_do_write+0x108>)
 8009878:	f00e faa8 	bl	8017dcc <iprintf>
        msg->conn->current_msg = msg;
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	68ba      	ldr	r2, [r7, #8]
 8009882:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2100      	movs	r1, #0
 800988a:	4618      	mov	r0, r3
 800988c:	f7ff fdea 	bl	8009464 <lwip_netconn_do_writemore>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d02e      	beq.n	80098f4 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	785b      	ldrb	r3, [r3, #1]
 800989c:	2b01      	cmp	r3, #1
 800989e:	d006      	beq.n	80098ae <lwip_netconn_do_write+0xb2>
 80098a0:	4b16      	ldr	r3, [pc, #88]	; (80098fc <lwip_netconn_do_write+0x100>)
 80098a2:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80098a6:	4919      	ldr	r1, [pc, #100]	; (800990c <lwip_netconn_do_write+0x110>)
 80098a8:	4816      	ldr	r0, [pc, #88]	; (8009904 <lwip_netconn_do_write+0x108>)
 80098aa:	f00e fa8f 	bl	8017dcc <iprintf>
          UNLOCK_TCPIP_CORE();
 80098ae:	4818      	ldr	r0, [pc, #96]	; (8009910 <lwip_netconn_do_write+0x114>)
 80098b0:	f00e f9bb 	bl	8017c2a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	330c      	adds	r3, #12
 80098ba:	2100      	movs	r1, #0
 80098bc:	4618      	mov	r0, r3
 80098be:	f00e f912 	bl	8017ae6 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80098c2:	4813      	ldr	r0, [pc, #76]	; (8009910 <lwip_netconn_do_write+0x114>)
 80098c4:	f00e f9a2 	bl	8017c0c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	785b      	ldrb	r3, [r3, #1]
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d110      	bne.n	80098f4 <lwip_netconn_do_write+0xf8>
 80098d2:	4b0a      	ldr	r3, [pc, #40]	; (80098fc <lwip_netconn_do_write+0x100>)
 80098d4:	f240 722c 	movw	r2, #1836	; 0x72c
 80098d8:	490c      	ldr	r1, [pc, #48]	; (800990c <lwip_netconn_do_write+0x110>)
 80098da:	480a      	ldr	r0, [pc, #40]	; (8009904 <lwip_netconn_do_write+0x108>)
 80098dc:	f00e fa76 	bl	8017dcc <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 80098e0:	e008      	b.n	80098f4 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 80098e2:	23f5      	movs	r3, #245	; 0xf5
 80098e4:	73fb      	strb	r3, [r7, #15]
 80098e6:	e001      	b.n	80098ec <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 80098e8:	23fa      	movs	r3, #250	; 0xfa
 80098ea:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	7bfa      	ldrb	r2, [r7, #15]
 80098f0:	711a      	strb	r2, [r3, #4]
 80098f2:	e000      	b.n	80098f6 <lwip_netconn_do_write+0xfa>
        return;
 80098f4:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	080195e8 	.word	0x080195e8
 8009900:	0801998c 	.word	0x0801998c
 8009904:	0801962c 	.word	0x0801962c
 8009908:	08019b14 	.word	0x08019b14
 800990c:	080199a8 	.word	0x080199a8
 8009910:	2000bddc 	.word	0x2000bddc

08009914 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	785b      	ldrb	r3, [r3, #1]
 8009926:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d069      	beq.n	8009a06 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800993c:	2b10      	cmp	r3, #16
 800993e:	d162      	bne.n	8009a06 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009944:	2b03      	cmp	r3, #3
 8009946:	d002      	beq.n	800994e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009948:	7afb      	ldrb	r3, [r7, #11]
 800994a:	2b02      	cmp	r3, #2
 800994c:	d05b      	beq.n	8009a06 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800994e:	7afb      	ldrb	r3, [r7, #11]
 8009950:	2b03      	cmp	r3, #3
 8009952:	d103      	bne.n	800995c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	22f5      	movs	r2, #245	; 0xf5
 8009958:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800995a:	e059      	b.n	8009a10 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800995c:	7afb      	ldrb	r3, [r7, #11]
 800995e:	2b01      	cmp	r3, #1
 8009960:	d103      	bne.n	800996a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	22fb      	movs	r2, #251	; 0xfb
 8009966:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009968:	e052      	b.n	8009a10 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	7a1b      	ldrb	r3, [r3, #8]
 800996e:	f003 0301 	and.w	r3, r3, #1
 8009972:	2b00      	cmp	r3, #0
 8009974:	d004      	beq.n	8009980 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4618      	mov	r0, r3
 800997c:	f7ff f9a0 	bl	8008cc0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6a1b      	ldr	r3, [r3, #32]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d006      	beq.n	8009998 <lwip_netconn_do_close+0x84>
 800998a:	4b23      	ldr	r3, [pc, #140]	; (8009a18 <lwip_netconn_do_close+0x104>)
 800998c:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8009990:	4922      	ldr	r1, [pc, #136]	; (8009a1c <lwip_netconn_do_close+0x108>)
 8009992:	4823      	ldr	r0, [pc, #140]	; (8009a20 <lwip_netconn_do_close+0x10c>)
 8009994:	f00e fa1a 	bl	8017dcc <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2204      	movs	r2, #4
 800999e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2100      	movs	r1, #0
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7ff fa04 	bl	8008dbc <lwip_netconn_do_close_internal>
 80099b4:	4603      	mov	r3, r0
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d029      	beq.n	8009a0e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	785b      	ldrb	r3, [r3, #1]
 80099c0:	2b04      	cmp	r3, #4
 80099c2:	d006      	beq.n	80099d2 <lwip_netconn_do_close+0xbe>
 80099c4:	4b14      	ldr	r3, [pc, #80]	; (8009a18 <lwip_netconn_do_close+0x104>)
 80099c6:	f240 72c2 	movw	r2, #1986	; 0x7c2
 80099ca:	4916      	ldr	r1, [pc, #88]	; (8009a24 <lwip_netconn_do_close+0x110>)
 80099cc:	4814      	ldr	r0, [pc, #80]	; (8009a20 <lwip_netconn_do_close+0x10c>)
 80099ce:	f00e f9fd 	bl	8017dcc <iprintf>
        UNLOCK_TCPIP_CORE();
 80099d2:	4815      	ldr	r0, [pc, #84]	; (8009a28 <lwip_netconn_do_close+0x114>)
 80099d4:	f00e f929 	bl	8017c2a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	330c      	adds	r3, #12
 80099de:	2100      	movs	r1, #0
 80099e0:	4618      	mov	r0, r3
 80099e2:	f00e f880 	bl	8017ae6 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 80099e6:	4810      	ldr	r0, [pc, #64]	; (8009a28 <lwip_netconn_do_close+0x114>)
 80099e8:	f00e f910 	bl	8017c0c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	785b      	ldrb	r3, [r3, #1]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00b      	beq.n	8009a0e <lwip_netconn_do_close+0xfa>
 80099f6:	4b08      	ldr	r3, [pc, #32]	; (8009a18 <lwip_netconn_do_close+0x104>)
 80099f8:	f240 72c6 	movw	r2, #1990	; 0x7c6
 80099fc:	4909      	ldr	r1, [pc, #36]	; (8009a24 <lwip_netconn_do_close+0x110>)
 80099fe:	4808      	ldr	r0, [pc, #32]	; (8009a20 <lwip_netconn_do_close+0x10c>)
 8009a00:	f00e f9e4 	bl	8017dcc <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8009a04:	e003      	b.n	8009a0e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	22f5      	movs	r2, #245	; 0xf5
 8009a0a:	711a      	strb	r2, [r3, #4]
 8009a0c:	e000      	b.n	8009a10 <lwip_netconn_do_close+0xfc>
      return;
 8009a0e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	080195e8 	.word	0x080195e8
 8009a1c:	0801998c 	.word	0x0801998c
 8009a20:	0801962c 	.word	0x0801962c
 8009a24:	080199a8 	.word	0x080199a8
 8009a28:	2000bddc 	.word	0x2000bddc

08009a2c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d013      	beq.n	8009a62 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00b      	beq.n	8009a5a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4618      	mov	r0, r3
 8009a48:	f002 fc42 	bl	800c2d0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	605a      	str	r2, [r3, #4]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	685a      	ldr	r2, [r3, #4]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8009a5a:	6879      	ldr	r1, [r7, #4]
 8009a5c:	2006      	movs	r0, #6
 8009a5e:	f001 fd8b 	bl	800b578 <memp_free>
  }
}
 8009a62:	bf00      	nop
 8009a64:	3708      	adds	r7, #8
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
	...

08009a6c <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d108      	bne.n	8009a90 <netbuf_data+0x24>
 8009a7e:	4b1b      	ldr	r3, [pc, #108]	; (8009aec <netbuf_data+0x80>)
 8009a80:	22c6      	movs	r2, #198	; 0xc6
 8009a82:	491b      	ldr	r1, [pc, #108]	; (8009af0 <netbuf_data+0x84>)
 8009a84:	481b      	ldr	r0, [pc, #108]	; (8009af4 <netbuf_data+0x88>)
 8009a86:	f00e f9a1 	bl	8017dcc <iprintf>
 8009a8a:	f06f 030f 	mvn.w	r3, #15
 8009a8e:	e029      	b.n	8009ae4 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d108      	bne.n	8009aa8 <netbuf_data+0x3c>
 8009a96:	4b15      	ldr	r3, [pc, #84]	; (8009aec <netbuf_data+0x80>)
 8009a98:	22c7      	movs	r2, #199	; 0xc7
 8009a9a:	4917      	ldr	r1, [pc, #92]	; (8009af8 <netbuf_data+0x8c>)
 8009a9c:	4815      	ldr	r0, [pc, #84]	; (8009af4 <netbuf_data+0x88>)
 8009a9e:	f00e f995 	bl	8017dcc <iprintf>
 8009aa2:	f06f 030f 	mvn.w	r3, #15
 8009aa6:	e01d      	b.n	8009ae4 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d108      	bne.n	8009ac0 <netbuf_data+0x54>
 8009aae:	4b0f      	ldr	r3, [pc, #60]	; (8009aec <netbuf_data+0x80>)
 8009ab0:	22c8      	movs	r2, #200	; 0xc8
 8009ab2:	4912      	ldr	r1, [pc, #72]	; (8009afc <netbuf_data+0x90>)
 8009ab4:	480f      	ldr	r0, [pc, #60]	; (8009af4 <netbuf_data+0x88>)
 8009ab6:	f00e f989 	bl	8017dcc <iprintf>
 8009aba:	f06f 030f 	mvn.w	r3, #15
 8009abe:	e011      	b.n	8009ae4 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d102      	bne.n	8009ace <netbuf_data+0x62>
    return ERR_BUF;
 8009ac8:	f06f 0301 	mvn.w	r3, #1
 8009acc:	e00a      	b.n	8009ae4 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	685a      	ldr	r2, [r3, #4]
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	895a      	ldrh	r2, [r3, #10]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	08019b40 	.word	0x08019b40
 8009af0:	08019c48 	.word	0x08019c48
 8009af4:	08019b90 	.word	0x08019b90
 8009af8:	08019c64 	.word	0x08019c64
 8009afc:	08019c84 	.word	0x08019c84

08009b00 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d108      	bne.n	8009b20 <netbuf_next+0x20>
 8009b0e:	4b11      	ldr	r3, [pc, #68]	; (8009b54 <netbuf_next+0x54>)
 8009b10:	22e0      	movs	r2, #224	; 0xe0
 8009b12:	4911      	ldr	r1, [pc, #68]	; (8009b58 <netbuf_next+0x58>)
 8009b14:	4811      	ldr	r0, [pc, #68]	; (8009b5c <netbuf_next+0x5c>)
 8009b16:	f00e f959 	bl	8017dcc <iprintf>
 8009b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b1e:	e014      	b.n	8009b4a <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d102      	bne.n	8009b30 <netbuf_next+0x30>
    return -1;
 8009b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b2e:	e00c      	b.n	8009b4a <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d101      	bne.n	8009b48 <netbuf_next+0x48>
    return 1;
 8009b44:	2301      	movs	r3, #1
 8009b46:	e000      	b.n	8009b4a <netbuf_next+0x4a>
  }
  return 0;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	08019b40 	.word	0x08019b40
 8009b58:	08019ca0 	.word	0x08019ca0
 8009b5c:	08019b90 	.word	0x08019b90

08009b60 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009b6a:	f009 f84f 	bl	8012c0c <sys_timeouts_sleeptime>
 8009b6e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b76:	d10b      	bne.n	8009b90 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009b78:	4813      	ldr	r0, [pc, #76]	; (8009bc8 <tcpip_timeouts_mbox_fetch+0x68>)
 8009b7a:	f00e f856 	bl	8017c2a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009b7e:	2200      	movs	r2, #0
 8009b80:	6839      	ldr	r1, [r7, #0]
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f00d ff0e 	bl	80179a4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009b88:	480f      	ldr	r0, [pc, #60]	; (8009bc8 <tcpip_timeouts_mbox_fetch+0x68>)
 8009b8a:	f00e f83f 	bl	8017c0c <sys_mutex_lock>
    return;
 8009b8e:	e018      	b.n	8009bc2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d102      	bne.n	8009b9c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009b96:	f008 ffff 	bl	8012b98 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009b9a:	e7e6      	b.n	8009b6a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009b9c:	480a      	ldr	r0, [pc, #40]	; (8009bc8 <tcpip_timeouts_mbox_fetch+0x68>)
 8009b9e:	f00e f844 	bl	8017c2a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009ba2:	68fa      	ldr	r2, [r7, #12]
 8009ba4:	6839      	ldr	r1, [r7, #0]
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f00d fefc 	bl	80179a4 <sys_arch_mbox_fetch>
 8009bac:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009bae:	4806      	ldr	r0, [pc, #24]	; (8009bc8 <tcpip_timeouts_mbox_fetch+0x68>)
 8009bb0:	f00e f82c 	bl	8017c0c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bba:	d102      	bne.n	8009bc2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009bbc:	f008 ffec 	bl	8012b98 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009bc0:	e7d3      	b.n	8009b6a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	2000bddc 	.word	0x2000bddc

08009bcc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009bd4:	4810      	ldr	r0, [pc, #64]	; (8009c18 <tcpip_thread+0x4c>)
 8009bd6:	f00e f819 	bl	8017c0c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009bda:	4b10      	ldr	r3, [pc, #64]	; (8009c1c <tcpip_thread+0x50>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d005      	beq.n	8009bee <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009be2:	4b0e      	ldr	r3, [pc, #56]	; (8009c1c <tcpip_thread+0x50>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a0e      	ldr	r2, [pc, #56]	; (8009c20 <tcpip_thread+0x54>)
 8009be8:	6812      	ldr	r2, [r2, #0]
 8009bea:	4610      	mov	r0, r2
 8009bec:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009bee:	f107 030c 	add.w	r3, r7, #12
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	480b      	ldr	r0, [pc, #44]	; (8009c24 <tcpip_thread+0x58>)
 8009bf6:	f7ff ffb3 	bl	8009b60 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d106      	bne.n	8009c0e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009c00:	4b09      	ldr	r3, [pc, #36]	; (8009c28 <tcpip_thread+0x5c>)
 8009c02:	2291      	movs	r2, #145	; 0x91
 8009c04:	4909      	ldr	r1, [pc, #36]	; (8009c2c <tcpip_thread+0x60>)
 8009c06:	480a      	ldr	r0, [pc, #40]	; (8009c30 <tcpip_thread+0x64>)
 8009c08:	f00e f8e0 	bl	8017dcc <iprintf>
      continue;
 8009c0c:	e003      	b.n	8009c16 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f000 f80f 	bl	8009c34 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009c16:	e7ea      	b.n	8009bee <tcpip_thread+0x22>
 8009c18:	2000bddc 	.word	0x2000bddc
 8009c1c:	200085fc 	.word	0x200085fc
 8009c20:	20008600 	.word	0x20008600
 8009c24:	20008604 	.word	0x20008604
 8009c28:	08019cd8 	.word	0x08019cd8
 8009c2c:	08019d08 	.word	0x08019d08
 8009c30:	08019d28 	.word	0x08019d28

08009c34 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d018      	beq.n	8009c76 <tcpip_thread_handle_msg+0x42>
 8009c44:	2b02      	cmp	r3, #2
 8009c46:	d021      	beq.n	8009c8c <tcpip_thread_handle_msg+0x58>
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d126      	bne.n	8009c9a <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	6850      	ldr	r0, [r2, #4]
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	6892      	ldr	r2, [r2, #8]
 8009c58:	4611      	mov	r1, r2
 8009c5a:	4798      	blx	r3
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d004      	beq.n	8009c6c <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	4618      	mov	r0, r3
 8009c68:	f002 fb32 	bl	800c2d0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009c6c:	6879      	ldr	r1, [r7, #4]
 8009c6e:	2009      	movs	r0, #9
 8009c70:	f001 fc82 	bl	800b578 <memp_free>
      break;
 8009c74:	e018      	b.n	8009ca8 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	6892      	ldr	r2, [r2, #8]
 8009c7e:	4610      	mov	r0, r2
 8009c80:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009c82:	6879      	ldr	r1, [r7, #4]
 8009c84:	2008      	movs	r0, #8
 8009c86:	f001 fc77 	bl	800b578 <memp_free>
      break;
 8009c8a:	e00d      	b.n	8009ca8 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	6892      	ldr	r2, [r2, #8]
 8009c94:	4610      	mov	r0, r2
 8009c96:	4798      	blx	r3
      break;
 8009c98:	e006      	b.n	8009ca8 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009c9a:	4b05      	ldr	r3, [pc, #20]	; (8009cb0 <tcpip_thread_handle_msg+0x7c>)
 8009c9c:	22cf      	movs	r2, #207	; 0xcf
 8009c9e:	4905      	ldr	r1, [pc, #20]	; (8009cb4 <tcpip_thread_handle_msg+0x80>)
 8009ca0:	4805      	ldr	r0, [pc, #20]	; (8009cb8 <tcpip_thread_handle_msg+0x84>)
 8009ca2:	f00e f893 	bl	8017dcc <iprintf>
      break;
 8009ca6:	bf00      	nop
  }
}
 8009ca8:	bf00      	nop
 8009caa:	3708      	adds	r7, #8
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	08019cd8 	.word	0x08019cd8
 8009cb4:	08019d08 	.word	0x08019d08
 8009cb8:	08019d28 	.word	0x08019d28

08009cbc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b086      	sub	sp, #24
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009cc8:	481a      	ldr	r0, [pc, #104]	; (8009d34 <tcpip_inpkt+0x78>)
 8009cca:	f00d fec6 	bl	8017a5a <sys_mbox_valid>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d105      	bne.n	8009ce0 <tcpip_inpkt+0x24>
 8009cd4:	4b18      	ldr	r3, [pc, #96]	; (8009d38 <tcpip_inpkt+0x7c>)
 8009cd6:	22fc      	movs	r2, #252	; 0xfc
 8009cd8:	4918      	ldr	r1, [pc, #96]	; (8009d3c <tcpip_inpkt+0x80>)
 8009cda:	4819      	ldr	r0, [pc, #100]	; (8009d40 <tcpip_inpkt+0x84>)
 8009cdc:	f00e f876 	bl	8017dcc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009ce0:	2009      	movs	r0, #9
 8009ce2:	f001 fbf7 	bl	800b4d4 <memp_malloc>
 8009ce6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d102      	bne.n	8009cf4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009cee:	f04f 33ff 	mov.w	r3, #4294967295
 8009cf2:	e01a      	b.n	8009d2a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009d0c:	6979      	ldr	r1, [r7, #20]
 8009d0e:	4809      	ldr	r0, [pc, #36]	; (8009d34 <tcpip_inpkt+0x78>)
 8009d10:	f00d fe2e 	bl	8017970 <sys_mbox_trypost>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d006      	beq.n	8009d28 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009d1a:	6979      	ldr	r1, [r7, #20]
 8009d1c:	2009      	movs	r0, #9
 8009d1e:	f001 fc2b 	bl	800b578 <memp_free>
    return ERR_MEM;
 8009d22:	f04f 33ff 	mov.w	r3, #4294967295
 8009d26:	e000      	b.n	8009d2a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009d28:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3718      	adds	r7, #24
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	20008604 	.word	0x20008604
 8009d38:	08019cd8 	.word	0x08019cd8
 8009d3c:	08019d50 	.word	0x08019d50
 8009d40:	08019d28 	.word	0x08019d28

08009d44 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009d54:	f003 0318 	and.w	r3, r3, #24
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d006      	beq.n	8009d6a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009d5c:	4a08      	ldr	r2, [pc, #32]	; (8009d80 <tcpip_input+0x3c>)
 8009d5e:	6839      	ldr	r1, [r7, #0]
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f7ff ffab 	bl	8009cbc <tcpip_inpkt>
 8009d66:	4603      	mov	r3, r0
 8009d68:	e005      	b.n	8009d76 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009d6a:	4a06      	ldr	r2, [pc, #24]	; (8009d84 <tcpip_input+0x40>)
 8009d6c:	6839      	ldr	r1, [r7, #0]
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f7ff ffa4 	bl	8009cbc <tcpip_inpkt>
 8009d74:	4603      	mov	r3, r0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3708      	adds	r7, #8
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	0801775d 	.word	0x0801775d
 8009d84:	08016641 	.word	0x08016641

08009d88 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009d92:	4819      	ldr	r0, [pc, #100]	; (8009df8 <tcpip_try_callback+0x70>)
 8009d94:	f00d fe61 	bl	8017a5a <sys_mbox_valid>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d106      	bne.n	8009dac <tcpip_try_callback+0x24>
 8009d9e:	4b17      	ldr	r3, [pc, #92]	; (8009dfc <tcpip_try_callback+0x74>)
 8009da0:	f240 125d 	movw	r2, #349	; 0x15d
 8009da4:	4916      	ldr	r1, [pc, #88]	; (8009e00 <tcpip_try_callback+0x78>)
 8009da6:	4817      	ldr	r0, [pc, #92]	; (8009e04 <tcpip_try_callback+0x7c>)
 8009da8:	f00e f810 	bl	8017dcc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009dac:	2008      	movs	r0, #8
 8009dae:	f001 fb91 	bl	800b4d4 <memp_malloc>
 8009db2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d102      	bne.n	8009dc0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009dba:	f04f 33ff 	mov.w	r3, #4294967295
 8009dbe:	e017      	b.n	8009df0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	683a      	ldr	r2, [r7, #0]
 8009dd0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009dd2:	68f9      	ldr	r1, [r7, #12]
 8009dd4:	4808      	ldr	r0, [pc, #32]	; (8009df8 <tcpip_try_callback+0x70>)
 8009dd6:	f00d fdcb 	bl	8017970 <sys_mbox_trypost>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d006      	beq.n	8009dee <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009de0:	68f9      	ldr	r1, [r7, #12]
 8009de2:	2008      	movs	r0, #8
 8009de4:	f001 fbc8 	bl	800b578 <memp_free>
    return ERR_MEM;
 8009de8:	f04f 33ff 	mov.w	r3, #4294967295
 8009dec:	e000      	b.n	8009df0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3710      	adds	r7, #16
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	20008604 	.word	0x20008604
 8009dfc:	08019cd8 	.word	0x08019cd8
 8009e00:	08019d50 	.word	0x08019d50
 8009e04:	08019d28 	.word	0x08019d28

08009e08 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8009e14:	4806      	ldr	r0, [pc, #24]	; (8009e30 <tcpip_send_msg_wait_sem+0x28>)
 8009e16:	f00d fef9 	bl	8017c0c <sys_mutex_lock>
  fn(apimsg);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	68b8      	ldr	r0, [r7, #8]
 8009e1e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8009e20:	4803      	ldr	r0, [pc, #12]	; (8009e30 <tcpip_send_msg_wait_sem+0x28>)
 8009e22:	f00d ff02 	bl	8017c2a <sys_mutex_unlock>
  return ERR_OK;
 8009e26:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	2000bddc 	.word	0x2000bddc

08009e34 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af02      	add	r7, sp, #8
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009e3e:	f000 fec1 	bl	800abc4 <lwip_init>

  tcpip_init_done = initfunc;
 8009e42:	4a17      	ldr	r2, [pc, #92]	; (8009ea0 <tcpip_init+0x6c>)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009e48:	4a16      	ldr	r2, [pc, #88]	; (8009ea4 <tcpip_init+0x70>)
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009e4e:	2106      	movs	r1, #6
 8009e50:	4815      	ldr	r0, [pc, #84]	; (8009ea8 <tcpip_init+0x74>)
 8009e52:	f00d fd59 	bl	8017908 <sys_mbox_new>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d006      	beq.n	8009e6a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009e5c:	4b13      	ldr	r3, [pc, #76]	; (8009eac <tcpip_init+0x78>)
 8009e5e:	f240 2261 	movw	r2, #609	; 0x261
 8009e62:	4913      	ldr	r1, [pc, #76]	; (8009eb0 <tcpip_init+0x7c>)
 8009e64:	4813      	ldr	r0, [pc, #76]	; (8009eb4 <tcpip_init+0x80>)
 8009e66:	f00d ffb1 	bl	8017dcc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009e6a:	4813      	ldr	r0, [pc, #76]	; (8009eb8 <tcpip_init+0x84>)
 8009e6c:	f00d feb2 	bl	8017bd4 <sys_mutex_new>
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d006      	beq.n	8009e84 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009e76:	4b0d      	ldr	r3, [pc, #52]	; (8009eac <tcpip_init+0x78>)
 8009e78:	f240 2265 	movw	r2, #613	; 0x265
 8009e7c:	490f      	ldr	r1, [pc, #60]	; (8009ebc <tcpip_init+0x88>)
 8009e7e:	480d      	ldr	r0, [pc, #52]	; (8009eb4 <tcpip_init+0x80>)
 8009e80:	f00d ffa4 	bl	8017dcc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009e84:	2300      	movs	r3, #0
 8009e86:	9300      	str	r3, [sp, #0]
 8009e88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	490c      	ldr	r1, [pc, #48]	; (8009ec0 <tcpip_init+0x8c>)
 8009e90:	480c      	ldr	r0, [pc, #48]	; (8009ec4 <tcpip_init+0x90>)
 8009e92:	f00d fed7 	bl	8017c44 <sys_thread_new>
}
 8009e96:	bf00      	nop
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	200085fc 	.word	0x200085fc
 8009ea4:	20008600 	.word	0x20008600
 8009ea8:	20008604 	.word	0x20008604
 8009eac:	08019cd8 	.word	0x08019cd8
 8009eb0:	08019d60 	.word	0x08019d60
 8009eb4:	08019d28 	.word	0x08019d28
 8009eb8:	2000bddc 	.word	0x2000bddc
 8009ebc:	08019d84 	.word	0x08019d84
 8009ec0:	08009bcd 	.word	0x08009bcd
 8009ec4:	08019da8 	.word	0x08019da8

08009ec8 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d002      	beq.n	8009ede <fs_open+0x16>
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d102      	bne.n	8009ee4 <fs_open+0x1c>
    return ERR_ARG;
 8009ede:	f06f 030f 	mvn.w	r3, #15
 8009ee2:	e028      	b.n	8009f36 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8009ee4:	4b16      	ldr	r3, [pc, #88]	; (8009f40 <fs_open+0x78>)
 8009ee6:	60fb      	str	r3, [r7, #12]
 8009ee8:	e020      	b.n	8009f2c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	4619      	mov	r1, r3
 8009ef0:	6838      	ldr	r0, [r7, #0]
 8009ef2:	f7f6 f97d 	bl	80001f0 <strcmp>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d114      	bne.n	8009f26 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	689a      	ldr	r2, [r3, #8]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	68da      	ldr	r2, [r3, #12]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	68da      	ldr	r2, [r3, #12]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	7c1a      	ldrb	r2, [r3, #16]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8009f22:	2300      	movs	r3, #0
 8009f24:	e007      	b.n	8009f36 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	60fb      	str	r3, [r7, #12]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d1db      	bne.n	8009eea <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8009f32:	f06f 0305 	mvn.w	r3, #5
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3710      	adds	r7, #16
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	08026e38 	.word	0x08026e38

08009f44 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8009f4c:	bf00      	nop
 8009f4e:	370c      	adds	r7, #12
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	685a      	ldr	r2, [r3, #4]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	1ad3      	subs	r3, r2, r3
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	370c      	adds	r7, #12
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr

08009f76 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b082      	sub	sp, #8
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8009f7e:	222c      	movs	r2, #44	; 0x2c
 8009f80:	2100      	movs	r1, #0
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f00d ff19 	bl	8017dba <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8009f88:	bf00      	nop
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8009f96:	202c      	movs	r0, #44	; 0x2c
 8009f98:	f001 f91a 	bl	800b1d0 <mem_malloc>
 8009f9c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d002      	beq.n	8009faa <http_state_alloc+0x1a>
    http_state_init(ret);
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f7ff ffe6 	bl	8009f76 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8009faa:	687b      	ldr	r3, [r7, #4]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	695b      	ldr	r3, [r3, #20]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d007      	beq.n	8009fd4 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	695b      	ldr	r3, [r3, #20]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7ff ffbb 	bl	8009f44 <fs_close>
    hs->handle = NULL;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6a1b      	ldr	r3, [r3, #32]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d007      	beq.n	8009fec <http_state_eof+0x38>
    pbuf_free(hs->req);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6a1b      	ldr	r3, [r3, #32]
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f002 f975 	bl	800c2d0 <pbuf_free>
    hs->req = NULL;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8009fec:	bf00      	nop
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d005      	beq.n	800a00e <http_state_free+0x1a>
    http_state_eof(hs);
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f7ff ffd6 	bl	8009fb4 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 ff47 	bl	800ae9c <mem_free>
  }
}
 800a00e:	bf00      	nop
 800a010:	3708      	adds	r7, #8
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
	...

0800a018 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b086      	sub	sp, #24
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	607a      	str	r2, [r7, #4]
 800a024:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d106      	bne.n	800a03a <http_write+0x22>
 800a02c:	4b2c      	ldr	r3, [pc, #176]	; (800a0e0 <http_write+0xc8>)
 800a02e:	f240 2219 	movw	r2, #537	; 0x219
 800a032:	492c      	ldr	r1, [pc, #176]	; (800a0e4 <http_write+0xcc>)
 800a034:	482c      	ldr	r0, [pc, #176]	; (800a0e8 <http_write+0xd0>)
 800a036:	f00d fec9 	bl	8017dcc <iprintf>
  len = *length;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	881b      	ldrh	r3, [r3, #0]
 800a03e:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800a040:	8afb      	ldrh	r3, [r7, #22]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d101      	bne.n	800a04a <http_write+0x32>
    return ERR_OK;
 800a046:	2300      	movs	r3, #0
 800a048:	e045      	b.n	800a0d6 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a050:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800a052:	8aba      	ldrh	r2, [r7, #20]
 800a054:	8afb      	ldrh	r3, [r7, #22]
 800a056:	429a      	cmp	r2, r3
 800a058:	d201      	bcs.n	800a05e <http_write+0x46>
    len = max_len;
 800a05a:	8abb      	ldrh	r3, [r7, #20]
 800a05c:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a062:	005b      	lsls	r3, r3, #1
 800a064:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800a066:	8afa      	ldrh	r2, [r7, #22]
 800a068:	8abb      	ldrh	r3, [r7, #20]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d901      	bls.n	800a072 <http_write+0x5a>
    len = max_len;
 800a06e:	8abb      	ldrh	r3, [r7, #20]
 800a070:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800a072:	78fb      	ldrb	r3, [r7, #3]
 800a074:	8afa      	ldrh	r2, [r7, #22]
 800a076:	68b9      	ldr	r1, [r7, #8]
 800a078:	68f8      	ldr	r0, [r7, #12]
 800a07a:	f006 ff15 	bl	8010ea8 <tcp_write>
 800a07e:	4603      	mov	r3, r0
 800a080:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800a082:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a08a:	d10f      	bne.n	800a0ac <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a092:	2b00      	cmp	r3, #0
 800a094:	d004      	beq.n	800a0a0 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800a09c:	2b08      	cmp	r3, #8
 800a09e:	d902      	bls.n	800a0a6 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	82fb      	strh	r3, [r7, #22]
 800a0a4:	e002      	b.n	800a0ac <http_write+0x94>
      } else {
        len /= 2;
 800a0a6:	8afb      	ldrh	r3, [r7, #22]
 800a0a8:	085b      	lsrs	r3, r3, #1
 800a0aa:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800a0ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b4:	d102      	bne.n	800a0bc <http_write+0xa4>
 800a0b6:	8afb      	ldrh	r3, [r7, #22]
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d8da      	bhi.n	800a072 <http_write+0x5a>

  if (err == ERR_OK) {
 800a0bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d103      	bne.n	800a0cc <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	8afa      	ldrh	r2, [r7, #22]
 800a0c8:	801a      	strh	r2, [r3, #0]
 800a0ca:	e002      	b.n	800a0d2 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800a0d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3718      	adds	r7, #24
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	08019df8 	.word	0x08019df8
 800a0e4:	08019e30 	.word	0x08019e30
 800a0e8:	08019e40 	.word	0x08019e40

0800a0ec <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	4613      	mov	r3, r2
 800a0f8:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f003 ff97 	bl	800e030 <tcp_arg>
  altcp_recv(pcb, NULL);
 800a102:	2100      	movs	r1, #0
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f003 ffa5 	bl	800e054 <tcp_recv>
  altcp_err(pcb, NULL);
 800a10a:	2100      	movs	r1, #0
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f003 ffe5 	bl	800e0dc <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800a112:	2200      	movs	r2, #0
 800a114:	2100      	movs	r1, #0
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f004 f81a 	bl	800e150 <tcp_poll>
  altcp_sent(pcb, NULL);
 800a11c:	2100      	movs	r1, #0
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	f003 ffba 	bl	800e098 <tcp_sent>
  if (hs != NULL) {
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d002      	beq.n	800a130 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800a12a:	68b8      	ldr	r0, [r7, #8]
 800a12c:	f7ff ff62 	bl	8009ff4 <http_state_free>
  }

  if (abort_conn) {
 800a130:	79fb      	ldrb	r3, [r7, #7]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d004      	beq.n	800a140 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	f002 fec0 	bl	800cebc <tcp_abort>
    return ERR_OK;
 800a13c:	2300      	movs	r3, #0
 800a13e:	e00f      	b.n	800a160 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800a140:	68f8      	ldr	r0, [r7, #12]
 800a142:	f002 fd77 	bl	800cc34 <tcp_close>
 800a146:	4603      	mov	r3, r0
 800a148:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800a14a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d004      	beq.n	800a15c <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800a152:	2204      	movs	r2, #4
 800a154:	4904      	ldr	r1, [pc, #16]	; (800a168 <http_close_or_abort_conn+0x7c>)
 800a156:	68f8      	ldr	r0, [r7, #12]
 800a158:	f003 fffa 	bl	800e150 <tcp_poll>
  }
  return err;
 800a15c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3718      	adds	r7, #24
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	0800a82f 	.word	0x0800a82f

0800a16c <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800a176:	2200      	movs	r2, #0
 800a178:	6839      	ldr	r1, [r7, #0]
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f7ff ffb6 	bl	800a0ec <http_close_or_abort_conn>
 800a180:	4603      	mov	r3, r0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3708      	adds	r7, #8
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b082      	sub	sp, #8
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
 800a192:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800a194:	6839      	ldr	r1, [r7, #0]
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f7ff ffe8 	bl	800a16c <http_close_conn>
  }
}
 800a19c:	bf00      	nop
 800a19e:	3708      	adds	r7, #8
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	695b      	ldr	r3, [r3, #20]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d105      	bne.n	800a1c2 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800a1b6:	6839      	ldr	r1, [r7, #0]
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f7ff ffe6 	bl	800a18a <http_eof>
    return 0;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	e016      	b.n	800a1f0 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	695b      	ldr	r3, [r3, #20]
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7ff fec6 	bl	8009f58 <fs_bytes_left>
 800a1cc:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	dc05      	bgt.n	800a1e0 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800a1d4:	6839      	ldr	r1, [r7, #0]
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f7ff ffd7 	bl	800a18a <http_eof>
    return 0;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	e007      	b.n	800a1f0 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800a1e0:	4b05      	ldr	r3, [pc, #20]	; (800a1f8 <http_check_eof+0x54>)
 800a1e2:	f240 429d 	movw	r2, #1181	; 0x49d
 800a1e6:	4905      	ldr	r1, [pc, #20]	; (800a1fc <http_check_eof+0x58>)
 800a1e8:	4805      	ldr	r0, [pc, #20]	; (800a200 <http_check_eof+0x5c>)
 800a1ea:	f00d fdef 	bl	8017dcc <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800a1ee:	2301      	movs	r3, #1
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3710      	adds	r7, #16
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	08019df8 	.word	0x08019df8
 800a1fc:	08019e68 	.word	0x08019e68
 800a200:	08019e40 	.word	0x08019e40

0800a204 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800a20e:	2300      	movs	r3, #0
 800a210:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a216:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d803      	bhi.n	800a226 <http_send_data_nonssi+0x22>
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a222:	b29b      	uxth	r3, r3
 800a224:	e001      	b.n	800a22a <http_send_data_nonssi+0x26>
 800a226:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a22a:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	6999      	ldr	r1, [r3, #24]
 800a230:	f107 020c 	add.w	r2, r7, #12
 800a234:	2300      	movs	r3, #0
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f7ff feee 	bl	800a018 <http_write>
 800a23c:	4603      	mov	r3, r0
 800a23e:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800a240:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d10d      	bne.n	800a264 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800a248:	2301      	movs	r3, #1
 800a24a:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	699b      	ldr	r3, [r3, #24]
 800a250:	89ba      	ldrh	r2, [r7, #12]
 800a252:	441a      	add	r2, r3
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25c:	89ba      	ldrh	r2, [r7, #12]
 800a25e:	1a9a      	subs	r2, r3, r2
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800a264:	7bfb      	ldrb	r3, [r7, #15]
}
 800a266:	4618      	mov	r0, r3
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a26e:	b580      	push	{r7, lr}
 800a270:	b084      	sub	sp, #16
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
 800a276:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800a278:	2300      	movs	r3, #0
 800a27a:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d101      	bne.n	800a286 <http_send+0x18>
    return 0;
 800a282:	2300      	movs	r3, #0
 800a284:	e025      	b.n	800a2d2 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d108      	bne.n	800a2a0 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800a28e:	6839      	ldr	r1, [r7, #0]
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f7ff ff87 	bl	800a1a4 <http_check_eof>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d101      	bne.n	800a2a0 <http_send+0x32>
      return 0;
 800a29c:	2300      	movs	r3, #0
 800a29e:	e018      	b.n	800a2d2 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800a2a0:	6839      	ldr	r1, [r7, #0]
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f7ff ffae 	bl	800a204 <http_send_data_nonssi>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d10d      	bne.n	800a2d0 <http_send+0x62>
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	695b      	ldr	r3, [r3, #20]
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7ff fe4d 	bl	8009f58 <fs_bytes_left>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	dc05      	bgt.n	800a2d0 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800a2c4:	6839      	ldr	r1, [r7, #0]
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f7ff ff5f 	bl	800a18a <http_eof>
    return 0;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	e000      	b.n	800a2d2 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800a2d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3710      	adds	r7, #16
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
	...

0800a2dc <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	4a1c      	ldr	r2, [pc, #112]	; (800a35c <http_get_404_file+0x80>)
 800a2ea:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	4610      	mov	r0, r2
 800a2f6:	f7ff fde7 	bl	8009ec8 <fs_open>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a2fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d024      	beq.n	800a350 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	4a15      	ldr	r2, [pc, #84]	; (800a360 <http_get_404_file+0x84>)
 800a30a:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4619      	mov	r1, r3
 800a314:	4610      	mov	r0, r2
 800a316:	f7ff fdd7 	bl	8009ec8 <fs_open>
 800a31a:	4603      	mov	r3, r0
 800a31c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a31e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d014      	beq.n	800a350 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	4a0e      	ldr	r2, [pc, #56]	; (800a364 <http_get_404_file+0x88>)
 800a32a:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4619      	mov	r1, r3
 800a334:	4610      	mov	r0, r2
 800a336:	f7ff fdc7 	bl	8009ec8 <fs_open>
 800a33a:	4603      	mov	r3, r0
 800a33c:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800a33e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d004      	beq.n	800a350 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	2200      	movs	r2, #0
 800a34a:	601a      	str	r2, [r3, #0]
        return NULL;
 800a34c:	2300      	movs	r3, #0
 800a34e:	e000      	b.n	800a352 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800a350:	687b      	ldr	r3, [r7, #4]
}
 800a352:	4618      	mov	r0, r3
 800a354:	3710      	adds	r7, #16
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	08019ea0 	.word	0x08019ea0
 800a360:	08019eac 	.word	0x08019eac
 800a364:	08019eb8 	.word	0x08019eb8

0800a368 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b08e      	sub	sp, #56	; 0x38
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800a378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d106      	bne.n	800a38c <http_parse_request+0x24>
 800a37e:	4b65      	ldr	r3, [pc, #404]	; (800a514 <http_parse_request+0x1ac>)
 800a380:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800a384:	4964      	ldr	r1, [pc, #400]	; (800a518 <http_parse_request+0x1b0>)
 800a386:	4865      	ldr	r0, [pc, #404]	; (800a51c <http_parse_request+0x1b4>)
 800a388:	f00d fd20 	bl	8017dcc <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d106      	bne.n	800a3a0 <http_parse_request+0x38>
 800a392:	4b60      	ldr	r3, [pc, #384]	; (800a514 <http_parse_request+0x1ac>)
 800a394:	f240 72af 	movw	r2, #1967	; 0x7af
 800a398:	4961      	ldr	r1, [pc, #388]	; (800a520 <http_parse_request+0x1b8>)
 800a39a:	4860      	ldr	r0, [pc, #384]	; (800a51c <http_parse_request+0x1b4>)
 800a39c:	f00d fd16 	bl	8017dcc <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	695b      	ldr	r3, [r3, #20]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d103      	bne.n	800a3b0 <http_parse_request+0x48>
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	699b      	ldr	r3, [r3, #24]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d002      	beq.n	800a3b6 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800a3b0:	f06f 0307 	mvn.w	r3, #7
 800a3b4:	e0aa      	b.n	800a50c <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	6a1b      	ldr	r3, [r3, #32]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d103      	bne.n	800a3c6 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3c2:	621a      	str	r2, [r3, #32]
 800a3c4:	e005      	b.n	800a3d2 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	6a1b      	ldr	r3, [r3, #32]
 800a3ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f002 f84d 	bl	800c46c <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800a3d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3d4:	f002 f822 	bl	800c41c <pbuf_ref>

  if (hs->req->next != NULL) {
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	6a1b      	ldr	r3, [r3, #32]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d012      	beq.n	800a408 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	6a1b      	ldr	r3, [r3, #32]
 800a3e6:	891b      	ldrh	r3, [r3, #8]
 800a3e8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	bf28      	it	cs
 800a3f0:	4613      	movcs	r3, r2
 800a3f2:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	6a18      	ldr	r0, [r3, #32]
 800a3f8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	4949      	ldr	r1, [pc, #292]	; (800a524 <http_parse_request+0x1bc>)
 800a3fe:	f002 f96d 	bl	800c6dc <pbuf_copy_partial>
    data = httpd_req_buf;
 800a402:	4b48      	ldr	r3, [pc, #288]	; (800a524 <http_parse_request+0x1bc>)
 800a404:	637b      	str	r3, [r7, #52]	; 0x34
 800a406:	e005      	b.n	800a414 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800a408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800a40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a410:	895b      	ldrh	r3, [r3, #10]
 800a412:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800a414:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a416:	2b06      	cmp	r3, #6
 800a418:	d963      	bls.n	800a4e2 <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800a41a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a41c:	461a      	mov	r2, r3
 800a41e:	4942      	ldr	r1, [pc, #264]	; (800a528 <http_parse_request+0x1c0>)
 800a420:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a422:	f000 fb99 	bl	800ab58 <lwip_strnstr>
 800a426:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800a428:	6a3b      	ldr	r3, [r7, #32]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d059      	beq.n	800a4e2 <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800a42e:	2300      	movs	r3, #0
 800a430:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800a432:	2204      	movs	r2, #4
 800a434:	493d      	ldr	r1, [pc, #244]	; (800a52c <http_parse_request+0x1c4>)
 800a436:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a438:	f00d fdc3 	bl	8017fc2 <strncmp>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d117      	bne.n	800a472 <http_parse_request+0x10a>
        sp1 = data + 3;
 800a442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a444:	3303      	adds	r3, #3
 800a446:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800a448:	69fb      	ldr	r3, [r7, #28]
 800a44a:	3301      	adds	r3, #1
 800a44c:	461a      	mov	r2, r3
 800a44e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a450:	1ad3      	subs	r3, r2, r3
 800a452:	b29b      	uxth	r3, r3
 800a454:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a456:	1ad3      	subs	r3, r2, r3
 800a458:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800a45a:	69fb      	ldr	r3, [r7, #28]
 800a45c:	3301      	adds	r3, #1
 800a45e:	8b7a      	ldrh	r2, [r7, #26]
 800a460:	4933      	ldr	r1, [pc, #204]	; (800a530 <http_parse_request+0x1c8>)
 800a462:	4618      	mov	r0, r3
 800a464:	f000 fb78 	bl	800ab58 <lwip_strnstr>
 800a468:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800a46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d111      	bne.n	800a494 <http_parse_request+0x12c>
 800a470:	e006      	b.n	800a480 <http_parse_request+0x118>
        data[4] = 0;
 800a472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a474:	3304      	adds	r3, #4
 800a476:	2200      	movs	r2, #0
 800a478:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800a47a:	f06f 030f 	mvn.w	r3, #15
 800a47e:	e045      	b.n	800a50c <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	3301      	adds	r3, #1
 800a484:	8b7a      	ldrh	r2, [r7, #26]
 800a486:	4928      	ldr	r1, [pc, #160]	; (800a528 <http_parse_request+0x1c0>)
 800a488:	4618      	mov	r0, r3
 800a48a:	f000 fb65 	bl	800ab58 <lwip_strnstr>
 800a48e:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800a490:	2301      	movs	r3, #1
 800a492:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800a494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a496:	69fa      	ldr	r2, [r7, #28]
 800a498:	3201      	adds	r2, #1
 800a49a:	1a9b      	subs	r3, r3, r2
 800a49c:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800a49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d01e      	beq.n	800a4e2 <http_parse_request+0x17a>
 800a4a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4a6:	69fb      	ldr	r3, [r7, #28]
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d91a      	bls.n	800a4e2 <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800a4ac:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	4920      	ldr	r1, [pc, #128]	; (800a534 <http_parse_request+0x1cc>)
 800a4b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a4b4:	f000 fb50 	bl	800ab58 <lwip_strnstr>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d011      	beq.n	800a4e2 <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800a4ca:	8b3b      	ldrh	r3, [r7, #24]
 800a4cc:	697a      	ldr	r2, [r7, #20]
 800a4ce:	4413      	add	r3, r2
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800a4d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4d6:	6979      	ldr	r1, [r7, #20]
 800a4d8:	68b8      	ldr	r0, [r7, #8]
 800a4da:	f000 f82d 	bl	800a538 <http_find_file>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	e014      	b.n	800a50c <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	6a1b      	ldr	r3, [r3, #32]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f001 ff80 	bl	800c3ec <pbuf_clen>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	6a1b      	ldr	r3, [r3, #32]
 800a4f4:	891b      	ldrh	r3, [r3, #8]
 800a4f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4fa:	d205      	bcs.n	800a508 <http_parse_request+0x1a0>
 800a4fc:	8a7b      	ldrh	r3, [r7, #18]
 800a4fe:	2b05      	cmp	r3, #5
 800a500:	d802      	bhi.n	800a508 <http_parse_request+0x1a0>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800a502:	f06f 0304 	mvn.w	r3, #4
 800a506:	e001      	b.n	800a50c <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800a508:	f06f 030f 	mvn.w	r3, #15
  }
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3738      	adds	r7, #56	; 0x38
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}
 800a514:	08019df8 	.word	0x08019df8
 800a518:	08019ec4 	.word	0x08019ec4
 800a51c:	08019e40 	.word	0x08019e40
 800a520:	08019ed0 	.word	0x08019ed0
 800a524:	20008608 	.word	0x20008608
 800a528:	08019edc 	.word	0x08019edc
 800a52c:	08019ee0 	.word	0x08019ee0
 800a530:	08019ee8 	.word	0x08019ee8
 800a534:	08019eec 	.word	0x08019eec

0800a538 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b092      	sub	sp, #72	; 0x48
 800a53c:	af02      	add	r7, sp, #8
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800a544:	2300      	movs	r3, #0
 800a546:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800a548:	2300      	movs	r3, #0
 800a54a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800a54c:	2300      	movs	r3, #0
 800a54e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	4618      	mov	r0, r3
 800a556:	f7f5 fe55 	bl	8000204 <strlen>
 800a55a:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800a55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d06b      	beq.n	800a63a <http_find_file+0x102>
 800a562:	68ba      	ldr	r2, [r7, #8]
 800a564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a566:	3b01      	subs	r3, #1
 800a568:	4413      	add	r3, r2
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	2b2f      	cmp	r3, #47	; 0x2f
 800a56e:	d164      	bne.n	800a63a <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800a570:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800a572:	4a53      	ldr	r2, [pc, #332]	; (800a6c0 <http_find_file+0x188>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d102      	bne.n	800a57e <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800a578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d15d      	bne.n	800a63a <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800a57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a580:	3b01      	subs	r3, #1
 800a582:	2b3f      	cmp	r3, #63	; 0x3f
 800a584:	bf28      	it	cs
 800a586:	233f      	movcs	r3, #63	; 0x3f
 800a588:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800a58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d00a      	beq.n	800a5a6 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a594:	4619      	mov	r1, r3
 800a596:	484a      	ldr	r0, [pc, #296]	; (800a6c0 <http_find_file+0x188>)
 800a598:	f00d fbeb 	bl	8017d72 <memcpy>
      http_uri_buf[copy_len] = 0;
 800a59c:	4a48      	ldr	r2, [pc, #288]	; (800a6c0 <http_find_file+0x188>)
 800a59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a0:	4413      	add	r3, r2
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5aa:	e043      	b.n	800a634 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d028      	beq.n	800a604 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800a5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800a5b8:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800a5ba:	6a3b      	ldr	r3, [r7, #32]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d01e      	beq.n	800a5fe <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800a5c0:	4a40      	ldr	r2, [pc, #256]	; (800a6c4 <http_find_file+0x18c>)
 800a5c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7f5 fe1b 	bl	8000204 <strlen>
 800a5ce:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800a5d0:	69fa      	ldr	r2, [r7, #28]
 800a5d2:	6a3b      	ldr	r3, [r7, #32]
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	bf28      	it	cs
 800a5d8:	4613      	movcs	r3, r2
 800a5da:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800a5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5de:	4a38      	ldr	r2, [pc, #224]	; (800a6c0 <http_find_file+0x188>)
 800a5e0:	1898      	adds	r0, r3, r2
 800a5e2:	4a38      	ldr	r2, [pc, #224]	; (800a6c4 <http_find_file+0x18c>)
 800a5e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5e6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a5ea:	69ba      	ldr	r2, [r7, #24]
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	f00d fbc0 	bl	8017d72 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800a5f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5f4:	69bb      	ldr	r3, [r7, #24]
 800a5f6:	4413      	add	r3, r2
 800a5f8:	4a31      	ldr	r2, [pc, #196]	; (800a6c0 <http_find_file+0x188>)
 800a5fa:	2100      	movs	r1, #0
 800a5fc:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800a5fe:	4b30      	ldr	r3, [pc, #192]	; (800a6c0 <http_find_file+0x188>)
 800a600:	633b      	str	r3, [r7, #48]	; 0x30
 800a602:	e004      	b.n	800a60e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800a604:	4a2f      	ldr	r2, [pc, #188]	; (800a6c4 <http_find_file+0x18c>)
 800a606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a608:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a60c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a612:	4618      	mov	r0, r3
 800a614:	f7ff fc58 	bl	8009ec8 <fs_open>
 800a618:	4603      	mov	r3, r0
 800a61a:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800a61c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d104      	bne.n	800a62e <http_find_file+0xf6>
        uri = file_name;
 800a624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a626:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800a62c:	e005      	b.n	800a63a <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800a62e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a630:	3301      	adds	r3, #1
 800a632:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a636:	2b04      	cmp	r3, #4
 800a638:	d9b8      	bls.n	800a5ac <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800a63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d124      	bne.n	800a68a <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	213f      	movs	r1, #63	; 0x3f
 800a644:	4618      	mov	r0, r3
 800a646:	f00d fcaf 	bl	8017fa8 <strchr>
 800a64a:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800a64c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d005      	beq.n	800a65e <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800a652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a654:	2200      	movs	r2, #0
 800a656:	701a      	strb	r2, [r3, #0]
      params++;
 800a658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a65a:	3301      	adds	r3, #1
 800a65c:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	68ba      	ldr	r2, [r7, #8]
 800a662:	4611      	mov	r1, r2
 800a664:	4618      	mov	r0, r3
 800a666:	f7ff fc2f 	bl	8009ec8 <fs_open>
 800a66a:	4603      	mov	r3, r0
 800a66c:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800a66e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d102      	bne.n	800a67c <http_find_file+0x144>
      file = &hs->file_handle;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	63bb      	str	r3, [r7, #56]	; 0x38
 800a67a:	e006      	b.n	800a68a <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800a67c:	f107 0308 	add.w	r3, r7, #8
 800a680:	4619      	mov	r1, r3
 800a682:	68f8      	ldr	r0, [r7, #12]
 800a684:	f7ff fe2a 	bl	800a2dc <http_get_404_file>
 800a688:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800a68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d106      	bne.n	800a69e <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800a690:	f107 0308 	add.w	r3, r7, #8
 800a694:	4619      	mov	r1, r3
 800a696:	68f8      	ldr	r0, [r7, #12]
 800a698:	f7ff fe20 	bl	800a2dc <http_get_404_file>
 800a69c:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800a69e:	68ba      	ldr	r2, [r7, #8]
 800a6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6a2:	9301      	str	r3, [sp, #4]
 800a6a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a6a8:	9300      	str	r3, [sp, #0]
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a6b0:	68f8      	ldr	r0, [r7, #12]
 800a6b2:	f000 f809 	bl	800a6c8 <http_init_file>
 800a6b6:	4603      	mov	r3, r0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3740      	adds	r7, #64	; 0x40
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	20008a08 	.word	0x20008a08
 800a6c4:	08026e4c 	.word	0x08026e4c

0800a6c8 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b086      	sub	sp, #24
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	607a      	str	r2, [r7, #4]
 800a6d4:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d05d      	beq.n	800a798 <http_init_file+0xd0>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d106      	bne.n	800a6f2 <http_init_file+0x2a>
 800a6e4:	4b35      	ldr	r3, [pc, #212]	; (800a7bc <http_init_file+0xf4>)
 800a6e6:	f640 120b 	movw	r2, #2315	; 0x90b
 800a6ea:	4935      	ldr	r1, [pc, #212]	; (800a7c0 <http_init_file+0xf8>)
 800a6ec:	4835      	ldr	r0, [pc, #212]	; (800a7c4 <http_init_file+0xfc>)
 800a6ee:	f00d fb6d 	bl	8017dcc <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	68ba      	ldr	r2, [r7, #8]
 800a6f6:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	2b00      	cmp	r3, #0
 800a706:	da06      	bge.n	800a716 <http_init_file+0x4e>
 800a708:	4b2c      	ldr	r3, [pc, #176]	; (800a7bc <http_init_file+0xf4>)
 800a70a:	f640 1234 	movw	r2, #2356	; 0x934
 800a70e:	492e      	ldr	r1, [pc, #184]	; (800a7c8 <http_init_file+0x100>)
 800a710:	482c      	ldr	r0, [pc, #176]	; (800a7c4 <http_init_file+0xfc>)
 800a712:	f00d fb5b 	bl	8017dcc <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	461a      	mov	r2, r3
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2200      	movs	r2, #0
 800a724:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	695b      	ldr	r3, [r3, #20]
 800a72c:	7c1b      	ldrb	r3, [r3, #16]
 800a72e:	f003 0301 	and.w	r3, r3, #1
 800a732:	2b00      	cmp	r3, #0
 800a734:	d106      	bne.n	800a744 <http_init_file+0x7c>
 800a736:	4b21      	ldr	r3, [pc, #132]	; (800a7bc <http_init_file+0xf4>)
 800a738:	f640 1244 	movw	r2, #2372	; 0x944
 800a73c:	4923      	ldr	r1, [pc, #140]	; (800a7cc <http_init_file+0x104>)
 800a73e:	4821      	ldr	r0, [pc, #132]	; (800a7c4 <http_init_file+0xfc>)
 800a740:	f00d fb44 	bl	8017dcc <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d033      	beq.n	800a7b2 <http_init_file+0xea>
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	695b      	ldr	r3, [r3, #20]
 800a74e:	7c1b      	ldrb	r3, [r3, #16]
 800a750:	f003 0301 	and.w	r3, r3, #1
 800a754:	2b00      	cmp	r3, #0
 800a756:	d02c      	beq.n	800a7b2 <http_init_file+0xea>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	6998      	ldr	r0, [r3, #24]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a760:	461a      	mov	r2, r3
 800a762:	491b      	ldr	r1, [pc, #108]	; (800a7d0 <http_init_file+0x108>)
 800a764:	f000 f9f8 	bl	800ab58 <lwip_strnstr>
 800a768:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d020      	beq.n	800a7b2 <http_init_file+0xea>
        int diff = file_start + 4 - hs->file;
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	3304      	adds	r3, #4
 800a774:	461a      	mov	r2, r3
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	699b      	ldr	r3, [r3, #24]
 800a77a:	1ad3      	subs	r3, r2, r3
 800a77c:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	699a      	ldr	r2, [r3, #24]
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	441a      	add	r2, r3
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	1ad2      	subs	r2, r2, r3
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	625a      	str	r2, [r3, #36]	; 0x24
 800a796:	e00c      	b.n	800a7b2 <http_init_file+0xea>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2200      	movs	r2, #0
 800a79c:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800a7b2:	2300      	movs	r3, #0
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3718      	adds	r7, #24
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}
 800a7bc:	08019df8 	.word	0x08019df8
 800a7c0:	08019ef4 	.word	0x08019ef4
 800a7c4:	08019e40 	.word	0x08019e40
 800a7c8:	08019f08 	.word	0x08019f08
 800a7cc:	08019f28 	.word	0x08019f28
 800a7d0:	08019eec 	.word	0x08019eec

0800a7d4 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	460b      	mov	r3, r1
 800a7de:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d002      	beq.n	800a7f0 <http_err+0x1c>
    http_state_free(hs);
 800a7ea:	68f8      	ldr	r0, [r7, #12]
 800a7ec:	f7ff fc02 	bl	8009ff4 <http_state_free>
  }
}
 800a7f0:	bf00      	nop
 800a7f2:	3710      	adds	r7, #16
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b086      	sub	sp, #24
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	4613      	mov	r3, r2
 800a804:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d101      	bne.n	800a814 <http_sent+0x1c>
    return ERR_OK;
 800a810:	2300      	movs	r3, #0
 800a812:	e008      	b.n	800a826 <http_sent+0x2e>
  }

  hs->retries = 0;
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	2200      	movs	r2, #0
 800a818:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800a81c:	6979      	ldr	r1, [r7, #20]
 800a81e:	68b8      	ldr	r0, [r7, #8]
 800a820:	f7ff fd25 	bl	800a26e <http_send>

  return ERR_OK;
 800a824:	2300      	movs	r3, #0
}
 800a826:	4618      	mov	r0, r3
 800a828:	3718      	adds	r7, #24
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800a82e:	b580      	push	{r7, lr}
 800a830:	b084      	sub	sp, #16
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
 800a836:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d107      	bne.n	800a852 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800a842:	2100      	movs	r1, #0
 800a844:	6838      	ldr	r0, [r7, #0]
 800a846:	f7ff fc91 	bl	800a16c <http_close_conn>
 800a84a:	4603      	mov	r3, r0
 800a84c:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800a84e:	2300      	movs	r3, #0
 800a850:	e021      	b.n	800a896 <http_poll+0x68>
  } else {
    hs->retries++;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a858:	3301      	adds	r3, #1
 800a85a:	b2da      	uxtb	r2, r3
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a868:	2b04      	cmp	r3, #4
 800a86a:	d105      	bne.n	800a878 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800a86c:	68f9      	ldr	r1, [r7, #12]
 800a86e:	6838      	ldr	r0, [r7, #0]
 800a870:	f7ff fc7c 	bl	800a16c <http_close_conn>
      return ERR_OK;
 800a874:	2300      	movs	r3, #0
 800a876:	e00e      	b.n	800a896 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	695b      	ldr	r3, [r3, #20]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d009      	beq.n	800a894 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800a880:	68f9      	ldr	r1, [r7, #12]
 800a882:	6838      	ldr	r0, [r7, #0]
 800a884:	f7ff fcf3 	bl	800a26e <http_send>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d002      	beq.n	800a894 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800a88e:	6838      	ldr	r0, [r7, #0]
 800a890:	f007 f8f6 	bl	8011a80 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800a894:	2300      	movs	r3, #0
}
 800a896:	4618      	mov	r0, r3
 800a898:	3710      	adds	r7, #16
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
	...

0800a8a0 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b086      	sub	sp, #24
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	607a      	str	r2, [r7, #4]
 800a8ac:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800a8b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d105      	bne.n	800a8c6 <http_recv+0x26>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d002      	beq.n	800a8c6 <http_recv+0x26>
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d111      	bne.n	800a8ea <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d008      	beq.n	800a8de <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	891b      	ldrh	r3, [r3, #8]
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	68b8      	ldr	r0, [r7, #8]
 800a8d4:	f002 fccc 	bl	800d270 <tcp_recved>
      pbuf_free(p);
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f001 fcf9 	bl	800c2d0 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800a8de:	6979      	ldr	r1, [r7, #20]
 800a8e0:	68b8      	ldr	r0, [r7, #8]
 800a8e2:	f7ff fc43 	bl	800a16c <http_close_conn>
    return ERR_OK;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	e055      	b.n	800a996 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	891b      	ldrh	r3, [r3, #8]
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	68b8      	ldr	r0, [r7, #8]
 800a8f2:	f002 fcbd 	bl	800d270 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	695b      	ldr	r3, [r3, #20]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d147      	bne.n	800a98e <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800a8fe:	68ba      	ldr	r2, [r7, #8]
 800a900:	6979      	ldr	r1, [r7, #20]
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f7ff fd30 	bl	800a368 <http_parse_request>
 800a908:	4603      	mov	r3, r0
 800a90a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800a90c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d015      	beq.n	800a940 <http_recv+0xa0>
 800a914:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a918:	f113 0f05 	cmn.w	r3, #5
 800a91c:	d010      	beq.n	800a940 <http_recv+0xa0>
 800a91e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a922:	f113 0f10 	cmn.w	r3, #16
 800a926:	d00b      	beq.n	800a940 <http_recv+0xa0>
 800a928:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a92c:	f113 0f08 	cmn.w	r3, #8
 800a930:	d006      	beq.n	800a940 <http_recv+0xa0>
 800a932:	4b1b      	ldr	r3, [pc, #108]	; (800a9a0 <http_recv+0x100>)
 800a934:	f640 2205 	movw	r2, #2565	; 0xa05
 800a938:	491a      	ldr	r1, [pc, #104]	; (800a9a4 <http_recv+0x104>)
 800a93a:	481b      	ldr	r0, [pc, #108]	; (800a9a8 <http_recv+0x108>)
 800a93c:	f00d fa46 	bl	8017dcc <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800a940:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a944:	f113 0f05 	cmn.w	r3, #5
 800a948:	d00b      	beq.n	800a962 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	6a1b      	ldr	r3, [r3, #32]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d007      	beq.n	800a962 <http_recv+0xc2>
          pbuf_free(hs->req);
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	6a1b      	ldr	r3, [r3, #32]
 800a956:	4618      	mov	r0, r3
 800a958:	f001 fcba 	bl	800c2d0 <pbuf_free>
          hs->req = NULL;
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	2200      	movs	r2, #0
 800a960:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f001 fcb4 	bl	800c2d0 <pbuf_free>
      if (parsed == ERR_OK) {
 800a968:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d104      	bne.n	800a97a <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800a970:	6979      	ldr	r1, [r7, #20]
 800a972:	68b8      	ldr	r0, [r7, #8]
 800a974:	f7ff fc7b 	bl	800a26e <http_send>
 800a978:	e00c      	b.n	800a994 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800a97a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a97e:	f113 0f10 	cmn.w	r3, #16
 800a982:	d107      	bne.n	800a994 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800a984:	6979      	ldr	r1, [r7, #20]
 800a986:	68b8      	ldr	r0, [r7, #8]
 800a988:	f7ff fbf0 	bl	800a16c <http_close_conn>
 800a98c:	e002      	b.n	800a994 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f001 fc9e 	bl	800c2d0 <pbuf_free>
    }
  }
  return ERR_OK;
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	3718      	adds	r7, #24
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	08019df8 	.word	0x08019df8
 800a9a4:	08019f54 	.word	0x08019f54
 800a9a8:	08019e40 	.word	0x08019e40

0800a9ac <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b086      	sub	sp, #24
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	4613      	mov	r3, r2
 800a9b8:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800a9ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d102      	bne.n	800a9c8 <http_accept+0x1c>
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d102      	bne.n	800a9ce <http_accept+0x22>
    return ERR_VAL;
 800a9c8:	f06f 0305 	mvn.w	r3, #5
 800a9cc:	e025      	b.n	800aa1a <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800a9ce:	2101      	movs	r1, #1
 800a9d0:	68b8      	ldr	r0, [r7, #8]
 800a9d2:	f003 f92d 	bl	800dc30 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800a9d6:	f7ff fadb 	bl	8009f90 <http_state_alloc>
 800a9da:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d102      	bne.n	800a9e8 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800a9e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9e6:	e018      	b.n	800aa1a <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	68ba      	ldr	r2, [r7, #8]
 800a9ec:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800a9ee:	6979      	ldr	r1, [r7, #20]
 800a9f0:	68b8      	ldr	r0, [r7, #8]
 800a9f2:	f003 fb1d 	bl	800e030 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800a9f6:	490b      	ldr	r1, [pc, #44]	; (800aa24 <http_accept+0x78>)
 800a9f8:	68b8      	ldr	r0, [r7, #8]
 800a9fa:	f003 fb2b 	bl	800e054 <tcp_recv>
  altcp_err(pcb, http_err);
 800a9fe:	490a      	ldr	r1, [pc, #40]	; (800aa28 <http_accept+0x7c>)
 800aa00:	68b8      	ldr	r0, [r7, #8]
 800aa02:	f003 fb6b 	bl	800e0dc <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800aa06:	2204      	movs	r2, #4
 800aa08:	4908      	ldr	r1, [pc, #32]	; (800aa2c <http_accept+0x80>)
 800aa0a:	68b8      	ldr	r0, [r7, #8]
 800aa0c:	f003 fba0 	bl	800e150 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800aa10:	4907      	ldr	r1, [pc, #28]	; (800aa30 <http_accept+0x84>)
 800aa12:	68b8      	ldr	r0, [r7, #8]
 800aa14:	f003 fb40 	bl	800e098 <tcp_sent>

  return ERR_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3718      	adds	r7, #24
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	0800a8a1 	.word	0x0800a8a1
 800aa28:	0800a7d5 	.word	0x0800a7d5
 800aa2c:	0800a82f 	.word	0x0800a82f
 800aa30:	0800a7f9 	.word	0x0800a7f9

0800aa34 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d029      	beq.n	800aa9a <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800aa46:	2101      	movs	r1, #1
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f003 f8f1 	bl	800dc30 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800aa4e:	887b      	ldrh	r3, [r7, #2]
 800aa50:	461a      	mov	r2, r3
 800aa52:	4914      	ldr	r1, [pc, #80]	; (800aaa4 <httpd_init_pcb+0x70>)
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f002 fa3d 	bl	800ced4 <tcp_bind>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800aa5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d006      	beq.n	800aa74 <httpd_init_pcb+0x40>
 800aa66:	4b10      	ldr	r3, [pc, #64]	; (800aaa8 <httpd_init_pcb+0x74>)
 800aa68:	f640 2257 	movw	r2, #2647	; 0xa57
 800aa6c:	490f      	ldr	r1, [pc, #60]	; (800aaac <httpd_init_pcb+0x78>)
 800aa6e:	4810      	ldr	r0, [pc, #64]	; (800aab0 <httpd_init_pcb+0x7c>)
 800aa70:	f00d f9ac 	bl	8017dcc <iprintf>
    pcb = altcp_listen(pcb);
 800aa74:	21ff      	movs	r1, #255	; 0xff
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f002 fae4 	bl	800d044 <tcp_listen_with_backlog>
 800aa7c:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d106      	bne.n	800aa92 <httpd_init_pcb+0x5e>
 800aa84:	4b08      	ldr	r3, [pc, #32]	; (800aaa8 <httpd_init_pcb+0x74>)
 800aa86:	f640 2259 	movw	r2, #2649	; 0xa59
 800aa8a:	490a      	ldr	r1, [pc, #40]	; (800aab4 <httpd_init_pcb+0x80>)
 800aa8c:	4808      	ldr	r0, [pc, #32]	; (800aab0 <httpd_init_pcb+0x7c>)
 800aa8e:	f00d f99d 	bl	8017dcc <iprintf>
    altcp_accept(pcb, http_accept);
 800aa92:	4909      	ldr	r1, [pc, #36]	; (800aab8 <httpd_init_pcb+0x84>)
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f003 fb43 	bl	800e120 <tcp_accept>
  }
}
 800aa9a:	bf00      	nop
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	bf00      	nop
 800aaa4:	08026f94 	.word	0x08026f94
 800aaa8:	08019df8 	.word	0x08019df8
 800aaac:	08019f80 	.word	0x08019f80
 800aab0:	08019e40 	.word	0x08019e40
 800aab4:	08019f9c 	.word	0x08019f9c
 800aab8:	0800a9ad 	.word	0x0800a9ad

0800aabc <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b082      	sub	sp, #8
 800aac0:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800aac2:	202e      	movs	r0, #46	; 0x2e
 800aac4:	f003 faa6 	bl	800e014 <tcp_new_ip_type>
 800aac8:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d106      	bne.n	800aade <httpd_init+0x22>
 800aad0:	4b07      	ldr	r3, [pc, #28]	; (800aaf0 <httpd_init+0x34>)
 800aad2:	f640 2272 	movw	r2, #2674	; 0xa72
 800aad6:	4907      	ldr	r1, [pc, #28]	; (800aaf4 <httpd_init+0x38>)
 800aad8:	4807      	ldr	r0, [pc, #28]	; (800aaf8 <httpd_init+0x3c>)
 800aada:	f00d f977 	bl	8017dcc <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800aade:	2150      	movs	r1, #80	; 0x50
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f7ff ffa7 	bl	800aa34 <httpd_init_pcb>
}
 800aae6:	bf00      	nop
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	08019df8 	.word	0x08019df8
 800aaf4:	08019fbc 	.word	0x08019fbc
 800aaf8:	08019e40 	.word	0x08019e40

0800aafc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b083      	sub	sp, #12
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	4603      	mov	r3, r0
 800ab04:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ab06:	88fb      	ldrh	r3, [r7, #6]
 800ab08:	021b      	lsls	r3, r3, #8
 800ab0a:	b21a      	sxth	r2, r3
 800ab0c:	88fb      	ldrh	r3, [r7, #6]
 800ab0e:	0a1b      	lsrs	r3, r3, #8
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	b21b      	sxth	r3, r3
 800ab14:	4313      	orrs	r3, r2
 800ab16:	b21b      	sxth	r3, r3
 800ab18:	b29b      	uxth	r3, r3
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	370c      	adds	r7, #12
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr

0800ab26 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ab26:	b480      	push	{r7}
 800ab28:	b083      	sub	sp, #12
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	061a      	lsls	r2, r3, #24
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	021b      	lsls	r3, r3, #8
 800ab36:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ab3a:	431a      	orrs	r2, r3
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	0a1b      	lsrs	r3, r3, #8
 800ab40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ab44:	431a      	orrs	r2, r3
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	0e1b      	lsrs	r3, r3, #24
 800ab4a:	4313      	orrs	r3, r2
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b086      	sub	sp, #24
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800ab64:	68b8      	ldr	r0, [r7, #8]
 800ab66:	f7f5 fb4d 	bl	8000204 <strlen>
 800ab6a:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d101      	bne.n	800ab76 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	e022      	b.n	800abbc <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	617b      	str	r3, [r7, #20]
 800ab7a:	e012      	b.n	800aba2 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	781a      	ldrb	r2, [r3, #0]
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d109      	bne.n	800ab9c <lwip_strnstr+0x44>
 800ab88:	693a      	ldr	r2, [r7, #16]
 800ab8a:	68b9      	ldr	r1, [r7, #8]
 800ab8c:	6978      	ldr	r0, [r7, #20]
 800ab8e:	f00d fa18 	bl	8017fc2 <strncmp>
 800ab92:	4603      	mov	r3, r0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d101      	bne.n	800ab9c <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	e00f      	b.n	800abbc <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	617b      	str	r3, [r7, #20]
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d007      	beq.n	800abba <lwip_strnstr+0x62>
 800abaa:	697a      	ldr	r2, [r7, #20]
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	441a      	add	r2, r3
 800abb0:	68f9      	ldr	r1, [r7, #12]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	440b      	add	r3, r1
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d9e0      	bls.n	800ab7c <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800abba:	2300      	movs	r3, #0
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3718      	adds	r7, #24
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800abca:	2300      	movs	r3, #0
 800abcc:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800abce:	f00c fff3 	bl	8017bb8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800abd2:	f000 f8d5 	bl	800ad80 <mem_init>
  memp_init();
 800abd6:	f000 fc31 	bl	800b43c <memp_init>
  pbuf_init();
  netif_init();
 800abda:	f000 fcf7 	bl	800b5cc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800abde:	f008 f84d 	bl	8012c7c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800abe2:	f001 fe1f 	bl	800c824 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800abe6:	f007 ff91 	bl	8012b0c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800abea:	bf00      	nop
 800abec:	3708      	adds	r7, #8
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
	...

0800abf4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	4603      	mov	r3, r0
 800abfc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800abfe:	4b05      	ldr	r3, [pc, #20]	; (800ac14 <ptr_to_mem+0x20>)
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	88fb      	ldrh	r3, [r7, #6]
 800ac04:	4413      	add	r3, r2
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	370c      	adds	r7, #12
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr
 800ac12:	bf00      	nop
 800ac14:	20008a48 	.word	0x20008a48

0800ac18 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	4a05      	ldr	r2, [pc, #20]	; (800ac38 <mem_to_ptr+0x20>)
 800ac24:	6812      	ldr	r2, [r2, #0]
 800ac26:	1a9b      	subs	r3, r3, r2
 800ac28:	b29b      	uxth	r3, r3
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	370c      	adds	r7, #12
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr
 800ac36:	bf00      	nop
 800ac38:	20008a48 	.word	0x20008a48

0800ac3c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ac3c:	b590      	push	{r4, r7, lr}
 800ac3e:	b085      	sub	sp, #20
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ac44:	4b45      	ldr	r3, [pc, #276]	; (800ad5c <plug_holes+0x120>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d206      	bcs.n	800ac5c <plug_holes+0x20>
 800ac4e:	4b44      	ldr	r3, [pc, #272]	; (800ad60 <plug_holes+0x124>)
 800ac50:	f240 12df 	movw	r2, #479	; 0x1df
 800ac54:	4943      	ldr	r1, [pc, #268]	; (800ad64 <plug_holes+0x128>)
 800ac56:	4844      	ldr	r0, [pc, #272]	; (800ad68 <plug_holes+0x12c>)
 800ac58:	f00d f8b8 	bl	8017dcc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ac5c:	4b43      	ldr	r3, [pc, #268]	; (800ad6c <plug_holes+0x130>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d306      	bcc.n	800ac74 <plug_holes+0x38>
 800ac66:	4b3e      	ldr	r3, [pc, #248]	; (800ad60 <plug_holes+0x124>)
 800ac68:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ac6c:	4940      	ldr	r1, [pc, #256]	; (800ad70 <plug_holes+0x134>)
 800ac6e:	483e      	ldr	r0, [pc, #248]	; (800ad68 <plug_holes+0x12c>)
 800ac70:	f00d f8ac 	bl	8017dcc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	791b      	ldrb	r3, [r3, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d006      	beq.n	800ac8a <plug_holes+0x4e>
 800ac7c:	4b38      	ldr	r3, [pc, #224]	; (800ad60 <plug_holes+0x124>)
 800ac7e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ac82:	493c      	ldr	r1, [pc, #240]	; (800ad74 <plug_holes+0x138>)
 800ac84:	4838      	ldr	r0, [pc, #224]	; (800ad68 <plug_holes+0x12c>)
 800ac86:	f00d f8a1 	bl	8017dcc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	881b      	ldrh	r3, [r3, #0]
 800ac8e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ac92:	d906      	bls.n	800aca2 <plug_holes+0x66>
 800ac94:	4b32      	ldr	r3, [pc, #200]	; (800ad60 <plug_holes+0x124>)
 800ac96:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ac9a:	4937      	ldr	r1, [pc, #220]	; (800ad78 <plug_holes+0x13c>)
 800ac9c:	4832      	ldr	r0, [pc, #200]	; (800ad68 <plug_holes+0x12c>)
 800ac9e:	f00d f895 	bl	8017dcc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	881b      	ldrh	r3, [r3, #0]
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7ff ffa4 	bl	800abf4 <ptr_to_mem>
 800acac:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d024      	beq.n	800ad00 <plug_holes+0xc4>
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	791b      	ldrb	r3, [r3, #4]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d120      	bne.n	800ad00 <plug_holes+0xc4>
 800acbe:	4b2b      	ldr	r3, [pc, #172]	; (800ad6c <plug_holes+0x130>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d01b      	beq.n	800ad00 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800acc8:	4b2c      	ldr	r3, [pc, #176]	; (800ad7c <plug_holes+0x140>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	68fa      	ldr	r2, [r7, #12]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d102      	bne.n	800acd8 <plug_holes+0x9c>
      lfree = mem;
 800acd2:	4a2a      	ldr	r2, [pc, #168]	; (800ad7c <plug_holes+0x140>)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	881a      	ldrh	r2, [r3, #0]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	881b      	ldrh	r3, [r3, #0]
 800ace4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ace8:	d00a      	beq.n	800ad00 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	881b      	ldrh	r3, [r3, #0]
 800acee:	4618      	mov	r0, r3
 800acf0:	f7ff ff80 	bl	800abf4 <ptr_to_mem>
 800acf4:	4604      	mov	r4, r0
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f7ff ff8e 	bl	800ac18 <mem_to_ptr>
 800acfc:	4603      	mov	r3, r0
 800acfe:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	885b      	ldrh	r3, [r3, #2]
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7ff ff75 	bl	800abf4 <ptr_to_mem>
 800ad0a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ad0c:	68ba      	ldr	r2, [r7, #8]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d01f      	beq.n	800ad54 <plug_holes+0x118>
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	791b      	ldrb	r3, [r3, #4]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d11b      	bne.n	800ad54 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ad1c:	4b17      	ldr	r3, [pc, #92]	; (800ad7c <plug_holes+0x140>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d102      	bne.n	800ad2c <plug_holes+0xf0>
      lfree = pmem;
 800ad26:	4a15      	ldr	r2, [pc, #84]	; (800ad7c <plug_holes+0x140>)
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	881a      	ldrh	r2, [r3, #0]
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	881b      	ldrh	r3, [r3, #0]
 800ad38:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ad3c:	d00a      	beq.n	800ad54 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	881b      	ldrh	r3, [r3, #0]
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7ff ff56 	bl	800abf4 <ptr_to_mem>
 800ad48:	4604      	mov	r4, r0
 800ad4a:	68b8      	ldr	r0, [r7, #8]
 800ad4c:	f7ff ff64 	bl	800ac18 <mem_to_ptr>
 800ad50:	4603      	mov	r3, r0
 800ad52:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ad54:	bf00      	nop
 800ad56:	3714      	adds	r7, #20
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd90      	pop	{r4, r7, pc}
 800ad5c:	20008a48 	.word	0x20008a48
 800ad60:	08019fd8 	.word	0x08019fd8
 800ad64:	0801a008 	.word	0x0801a008
 800ad68:	0801a020 	.word	0x0801a020
 800ad6c:	20008a4c 	.word	0x20008a4c
 800ad70:	0801a048 	.word	0x0801a048
 800ad74:	0801a064 	.word	0x0801a064
 800ad78:	0801a080 	.word	0x0801a080
 800ad7c:	20008a54 	.word	0x20008a54

0800ad80 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b082      	sub	sp, #8
 800ad84:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ad86:	4b1f      	ldr	r3, [pc, #124]	; (800ae04 <mem_init+0x84>)
 800ad88:	3303      	adds	r3, #3
 800ad8a:	f023 0303 	bic.w	r3, r3, #3
 800ad8e:	461a      	mov	r2, r3
 800ad90:	4b1d      	ldr	r3, [pc, #116]	; (800ae08 <mem_init+0x88>)
 800ad92:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ad94:	4b1c      	ldr	r3, [pc, #112]	; (800ae08 <mem_init+0x88>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ada0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2200      	movs	r2, #0
 800ada6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2200      	movs	r2, #0
 800adac:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800adae:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800adb2:	f7ff ff1f 	bl	800abf4 <ptr_to_mem>
 800adb6:	4602      	mov	r2, r0
 800adb8:	4b14      	ldr	r3, [pc, #80]	; (800ae0c <mem_init+0x8c>)
 800adba:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800adbc:	4b13      	ldr	r3, [pc, #76]	; (800ae0c <mem_init+0x8c>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	2201      	movs	r2, #1
 800adc2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800adc4:	4b11      	ldr	r3, [pc, #68]	; (800ae0c <mem_init+0x8c>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800adcc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800adce:	4b0f      	ldr	r3, [pc, #60]	; (800ae0c <mem_init+0x8c>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800add6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800add8:	4b0b      	ldr	r3, [pc, #44]	; (800ae08 <mem_init+0x88>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4a0c      	ldr	r2, [pc, #48]	; (800ae10 <mem_init+0x90>)
 800adde:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ade0:	480c      	ldr	r0, [pc, #48]	; (800ae14 <mem_init+0x94>)
 800ade2:	f00c fef7 	bl	8017bd4 <sys_mutex_new>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d006      	beq.n	800adfa <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800adec:	4b0a      	ldr	r3, [pc, #40]	; (800ae18 <mem_init+0x98>)
 800adee:	f240 221f 	movw	r2, #543	; 0x21f
 800adf2:	490a      	ldr	r1, [pc, #40]	; (800ae1c <mem_init+0x9c>)
 800adf4:	480a      	ldr	r0, [pc, #40]	; (800ae20 <mem_init+0xa0>)
 800adf6:	f00c ffe9 	bl	8017dcc <iprintf>
  }
}
 800adfa:	bf00      	nop
 800adfc:	3708      	adds	r7, #8
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	2000bdf8 	.word	0x2000bdf8
 800ae08:	20008a48 	.word	0x20008a48
 800ae0c:	20008a4c 	.word	0x20008a4c
 800ae10:	20008a54 	.word	0x20008a54
 800ae14:	20008a50 	.word	0x20008a50
 800ae18:	08019fd8 	.word	0x08019fd8
 800ae1c:	0801a0ac 	.word	0x0801a0ac
 800ae20:	0801a020 	.word	0x0801a020

0800ae24 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b086      	sub	sp, #24
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f7ff fef3 	bl	800ac18 <mem_to_ptr>
 800ae32:	4603      	mov	r3, r0
 800ae34:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	881b      	ldrh	r3, [r3, #0]
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7ff feda 	bl	800abf4 <ptr_to_mem>
 800ae40:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	885b      	ldrh	r3, [r3, #2]
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7ff fed4 	bl	800abf4 <ptr_to_mem>
 800ae4c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	881b      	ldrh	r3, [r3, #0]
 800ae52:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae56:	d818      	bhi.n	800ae8a <mem_link_valid+0x66>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	885b      	ldrh	r3, [r3, #2]
 800ae5c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae60:	d813      	bhi.n	800ae8a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ae66:	8afa      	ldrh	r2, [r7, #22]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d004      	beq.n	800ae76 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	881b      	ldrh	r3, [r3, #0]
 800ae70:	8afa      	ldrh	r2, [r7, #22]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d109      	bne.n	800ae8a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ae76:	4b08      	ldr	r3, [pc, #32]	; (800ae98 <mem_link_valid+0x74>)
 800ae78:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ae7a:	693a      	ldr	r2, [r7, #16]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d006      	beq.n	800ae8e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	885b      	ldrh	r3, [r3, #2]
 800ae84:	8afa      	ldrh	r2, [r7, #22]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d001      	beq.n	800ae8e <mem_link_valid+0x6a>
    return 0;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	e000      	b.n	800ae90 <mem_link_valid+0x6c>
  }
  return 1;
 800ae8e:	2301      	movs	r3, #1
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3718      	adds	r7, #24
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	20008a4c 	.word	0x20008a4c

0800ae9c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b088      	sub	sp, #32
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d070      	beq.n	800af8c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f003 0303 	and.w	r3, r3, #3
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d00d      	beq.n	800aed0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800aeb4:	4b37      	ldr	r3, [pc, #220]	; (800af94 <mem_free+0xf8>)
 800aeb6:	f240 2273 	movw	r2, #627	; 0x273
 800aeba:	4937      	ldr	r1, [pc, #220]	; (800af98 <mem_free+0xfc>)
 800aebc:	4837      	ldr	r0, [pc, #220]	; (800af9c <mem_free+0x100>)
 800aebe:	f00c ff85 	bl	8017dcc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800aec2:	f00c fee5 	bl	8017c90 <sys_arch_protect>
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f00c feef 	bl	8017cac <sys_arch_unprotect>
    return;
 800aece:	e05e      	b.n	800af8e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	3b08      	subs	r3, #8
 800aed4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800aed6:	4b32      	ldr	r3, [pc, #200]	; (800afa0 <mem_free+0x104>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	69fa      	ldr	r2, [r7, #28]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d306      	bcc.n	800aeee <mem_free+0x52>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f103 020c 	add.w	r2, r3, #12
 800aee6:	4b2f      	ldr	r3, [pc, #188]	; (800afa4 <mem_free+0x108>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d90d      	bls.n	800af0a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800aeee:	4b29      	ldr	r3, [pc, #164]	; (800af94 <mem_free+0xf8>)
 800aef0:	f240 227f 	movw	r2, #639	; 0x27f
 800aef4:	492c      	ldr	r1, [pc, #176]	; (800afa8 <mem_free+0x10c>)
 800aef6:	4829      	ldr	r0, [pc, #164]	; (800af9c <mem_free+0x100>)
 800aef8:	f00c ff68 	bl	8017dcc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800aefc:	f00c fec8 	bl	8017c90 <sys_arch_protect>
 800af00:	6138      	str	r0, [r7, #16]
 800af02:	6938      	ldr	r0, [r7, #16]
 800af04:	f00c fed2 	bl	8017cac <sys_arch_unprotect>
    return;
 800af08:	e041      	b.n	800af8e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800af0a:	4828      	ldr	r0, [pc, #160]	; (800afac <mem_free+0x110>)
 800af0c:	f00c fe7e 	bl	8017c0c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800af10:	69fb      	ldr	r3, [r7, #28]
 800af12:	791b      	ldrb	r3, [r3, #4]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d110      	bne.n	800af3a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800af18:	4b1e      	ldr	r3, [pc, #120]	; (800af94 <mem_free+0xf8>)
 800af1a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800af1e:	4924      	ldr	r1, [pc, #144]	; (800afb0 <mem_free+0x114>)
 800af20:	481e      	ldr	r0, [pc, #120]	; (800af9c <mem_free+0x100>)
 800af22:	f00c ff53 	bl	8017dcc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800af26:	4821      	ldr	r0, [pc, #132]	; (800afac <mem_free+0x110>)
 800af28:	f00c fe7f 	bl	8017c2a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800af2c:	f00c feb0 	bl	8017c90 <sys_arch_protect>
 800af30:	6178      	str	r0, [r7, #20]
 800af32:	6978      	ldr	r0, [r7, #20]
 800af34:	f00c feba 	bl	8017cac <sys_arch_unprotect>
    return;
 800af38:	e029      	b.n	800af8e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800af3a:	69f8      	ldr	r0, [r7, #28]
 800af3c:	f7ff ff72 	bl	800ae24 <mem_link_valid>
 800af40:	4603      	mov	r3, r0
 800af42:	2b00      	cmp	r3, #0
 800af44:	d110      	bne.n	800af68 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800af46:	4b13      	ldr	r3, [pc, #76]	; (800af94 <mem_free+0xf8>)
 800af48:	f240 2295 	movw	r2, #661	; 0x295
 800af4c:	4919      	ldr	r1, [pc, #100]	; (800afb4 <mem_free+0x118>)
 800af4e:	4813      	ldr	r0, [pc, #76]	; (800af9c <mem_free+0x100>)
 800af50:	f00c ff3c 	bl	8017dcc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800af54:	4815      	ldr	r0, [pc, #84]	; (800afac <mem_free+0x110>)
 800af56:	f00c fe68 	bl	8017c2a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800af5a:	f00c fe99 	bl	8017c90 <sys_arch_protect>
 800af5e:	61b8      	str	r0, [r7, #24]
 800af60:	69b8      	ldr	r0, [r7, #24]
 800af62:	f00c fea3 	bl	8017cac <sys_arch_unprotect>
    return;
 800af66:	e012      	b.n	800af8e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800af68:	69fb      	ldr	r3, [r7, #28]
 800af6a:	2200      	movs	r2, #0
 800af6c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800af6e:	4b12      	ldr	r3, [pc, #72]	; (800afb8 <mem_free+0x11c>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	69fa      	ldr	r2, [r7, #28]
 800af74:	429a      	cmp	r2, r3
 800af76:	d202      	bcs.n	800af7e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800af78:	4a0f      	ldr	r2, [pc, #60]	; (800afb8 <mem_free+0x11c>)
 800af7a:	69fb      	ldr	r3, [r7, #28]
 800af7c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800af7e:	69f8      	ldr	r0, [r7, #28]
 800af80:	f7ff fe5c 	bl	800ac3c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800af84:	4809      	ldr	r0, [pc, #36]	; (800afac <mem_free+0x110>)
 800af86:	f00c fe50 	bl	8017c2a <sys_mutex_unlock>
 800af8a:	e000      	b.n	800af8e <mem_free+0xf2>
    return;
 800af8c:	bf00      	nop
}
 800af8e:	3720      	adds	r7, #32
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}
 800af94:	08019fd8 	.word	0x08019fd8
 800af98:	0801a0c8 	.word	0x0801a0c8
 800af9c:	0801a020 	.word	0x0801a020
 800afa0:	20008a48 	.word	0x20008a48
 800afa4:	20008a4c 	.word	0x20008a4c
 800afa8:	0801a0ec 	.word	0x0801a0ec
 800afac:	20008a50 	.word	0x20008a50
 800afb0:	0801a108 	.word	0x0801a108
 800afb4:	0801a130 	.word	0x0801a130
 800afb8:	20008a54 	.word	0x20008a54

0800afbc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b088      	sub	sp, #32
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	460b      	mov	r3, r1
 800afc6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800afc8:	887b      	ldrh	r3, [r7, #2]
 800afca:	3303      	adds	r3, #3
 800afcc:	b29b      	uxth	r3, r3
 800afce:	f023 0303 	bic.w	r3, r3, #3
 800afd2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800afd4:	8bfb      	ldrh	r3, [r7, #30]
 800afd6:	2b0b      	cmp	r3, #11
 800afd8:	d801      	bhi.n	800afde <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800afda:	230c      	movs	r3, #12
 800afdc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800afde:	8bfb      	ldrh	r3, [r7, #30]
 800afe0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800afe4:	d803      	bhi.n	800afee <mem_trim+0x32>
 800afe6:	8bfa      	ldrh	r2, [r7, #30]
 800afe8:	887b      	ldrh	r3, [r7, #2]
 800afea:	429a      	cmp	r2, r3
 800afec:	d201      	bcs.n	800aff2 <mem_trim+0x36>
    return NULL;
 800afee:	2300      	movs	r3, #0
 800aff0:	e0d8      	b.n	800b1a4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800aff2:	4b6e      	ldr	r3, [pc, #440]	; (800b1ac <mem_trim+0x1f0>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	429a      	cmp	r2, r3
 800affa:	d304      	bcc.n	800b006 <mem_trim+0x4a>
 800affc:	4b6c      	ldr	r3, [pc, #432]	; (800b1b0 <mem_trim+0x1f4>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	429a      	cmp	r2, r3
 800b004:	d306      	bcc.n	800b014 <mem_trim+0x58>
 800b006:	4b6b      	ldr	r3, [pc, #428]	; (800b1b4 <mem_trim+0x1f8>)
 800b008:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b00c:	496a      	ldr	r1, [pc, #424]	; (800b1b8 <mem_trim+0x1fc>)
 800b00e:	486b      	ldr	r0, [pc, #428]	; (800b1bc <mem_trim+0x200>)
 800b010:	f00c fedc 	bl	8017dcc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b014:	4b65      	ldr	r3, [pc, #404]	; (800b1ac <mem_trim+0x1f0>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d304      	bcc.n	800b028 <mem_trim+0x6c>
 800b01e:	4b64      	ldr	r3, [pc, #400]	; (800b1b0 <mem_trim+0x1f4>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	429a      	cmp	r2, r3
 800b026:	d307      	bcc.n	800b038 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b028:	f00c fe32 	bl	8017c90 <sys_arch_protect>
 800b02c:	60b8      	str	r0, [r7, #8]
 800b02e:	68b8      	ldr	r0, [r7, #8]
 800b030:	f00c fe3c 	bl	8017cac <sys_arch_unprotect>
    return rmem;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	e0b5      	b.n	800b1a4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	3b08      	subs	r3, #8
 800b03c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b03e:	69b8      	ldr	r0, [r7, #24]
 800b040:	f7ff fdea 	bl	800ac18 <mem_to_ptr>
 800b044:	4603      	mov	r3, r0
 800b046:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b048:	69bb      	ldr	r3, [r7, #24]
 800b04a:	881a      	ldrh	r2, [r3, #0]
 800b04c:	8afb      	ldrh	r3, [r7, #22]
 800b04e:	1ad3      	subs	r3, r2, r3
 800b050:	b29b      	uxth	r3, r3
 800b052:	3b08      	subs	r3, #8
 800b054:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b056:	8bfa      	ldrh	r2, [r7, #30]
 800b058:	8abb      	ldrh	r3, [r7, #20]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d906      	bls.n	800b06c <mem_trim+0xb0>
 800b05e:	4b55      	ldr	r3, [pc, #340]	; (800b1b4 <mem_trim+0x1f8>)
 800b060:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b064:	4956      	ldr	r1, [pc, #344]	; (800b1c0 <mem_trim+0x204>)
 800b066:	4855      	ldr	r0, [pc, #340]	; (800b1bc <mem_trim+0x200>)
 800b068:	f00c feb0 	bl	8017dcc <iprintf>
  if (newsize > size) {
 800b06c:	8bfa      	ldrh	r2, [r7, #30]
 800b06e:	8abb      	ldrh	r3, [r7, #20]
 800b070:	429a      	cmp	r2, r3
 800b072:	d901      	bls.n	800b078 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800b074:	2300      	movs	r3, #0
 800b076:	e095      	b.n	800b1a4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800b078:	8bfa      	ldrh	r2, [r7, #30]
 800b07a:	8abb      	ldrh	r3, [r7, #20]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d101      	bne.n	800b084 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	e08f      	b.n	800b1a4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b084:	484f      	ldr	r0, [pc, #316]	; (800b1c4 <mem_trim+0x208>)
 800b086:	f00c fdc1 	bl	8017c0c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	881b      	ldrh	r3, [r3, #0]
 800b08e:	4618      	mov	r0, r3
 800b090:	f7ff fdb0 	bl	800abf4 <ptr_to_mem>
 800b094:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	791b      	ldrb	r3, [r3, #4]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d13f      	bne.n	800b11e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b09e:	69bb      	ldr	r3, [r7, #24]
 800b0a0:	881b      	ldrh	r3, [r3, #0]
 800b0a2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b0a6:	d106      	bne.n	800b0b6 <mem_trim+0xfa>
 800b0a8:	4b42      	ldr	r3, [pc, #264]	; (800b1b4 <mem_trim+0x1f8>)
 800b0aa:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b0ae:	4946      	ldr	r1, [pc, #280]	; (800b1c8 <mem_trim+0x20c>)
 800b0b0:	4842      	ldr	r0, [pc, #264]	; (800b1bc <mem_trim+0x200>)
 800b0b2:	f00c fe8b 	bl	8017dcc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	881b      	ldrh	r3, [r3, #0]
 800b0ba:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b0bc:	8afa      	ldrh	r2, [r7, #22]
 800b0be:	8bfb      	ldrh	r3, [r7, #30]
 800b0c0:	4413      	add	r3, r2
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	3308      	adds	r3, #8
 800b0c6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b0c8:	4b40      	ldr	r3, [pc, #256]	; (800b1cc <mem_trim+0x210>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	693a      	ldr	r2, [r7, #16]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d106      	bne.n	800b0e0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800b0d2:	89fb      	ldrh	r3, [r7, #14]
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7ff fd8d 	bl	800abf4 <ptr_to_mem>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	4b3b      	ldr	r3, [pc, #236]	; (800b1cc <mem_trim+0x210>)
 800b0de:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b0e0:	89fb      	ldrh	r3, [r7, #14]
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7ff fd86 	bl	800abf4 <ptr_to_mem>
 800b0e8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	89ba      	ldrh	r2, [r7, #12]
 800b0f4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	8afa      	ldrh	r2, [r7, #22]
 800b0fa:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b0fc:	69bb      	ldr	r3, [r7, #24]
 800b0fe:	89fa      	ldrh	r2, [r7, #14]
 800b100:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	881b      	ldrh	r3, [r3, #0]
 800b106:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b10a:	d047      	beq.n	800b19c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	881b      	ldrh	r3, [r3, #0]
 800b110:	4618      	mov	r0, r3
 800b112:	f7ff fd6f 	bl	800abf4 <ptr_to_mem>
 800b116:	4602      	mov	r2, r0
 800b118:	89fb      	ldrh	r3, [r7, #14]
 800b11a:	8053      	strh	r3, [r2, #2]
 800b11c:	e03e      	b.n	800b19c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b11e:	8bfb      	ldrh	r3, [r7, #30]
 800b120:	f103 0214 	add.w	r2, r3, #20
 800b124:	8abb      	ldrh	r3, [r7, #20]
 800b126:	429a      	cmp	r2, r3
 800b128:	d838      	bhi.n	800b19c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b12a:	8afa      	ldrh	r2, [r7, #22]
 800b12c:	8bfb      	ldrh	r3, [r7, #30]
 800b12e:	4413      	add	r3, r2
 800b130:	b29b      	uxth	r3, r3
 800b132:	3308      	adds	r3, #8
 800b134:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	881b      	ldrh	r3, [r3, #0]
 800b13a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b13e:	d106      	bne.n	800b14e <mem_trim+0x192>
 800b140:	4b1c      	ldr	r3, [pc, #112]	; (800b1b4 <mem_trim+0x1f8>)
 800b142:	f240 3216 	movw	r2, #790	; 0x316
 800b146:	4920      	ldr	r1, [pc, #128]	; (800b1c8 <mem_trim+0x20c>)
 800b148:	481c      	ldr	r0, [pc, #112]	; (800b1bc <mem_trim+0x200>)
 800b14a:	f00c fe3f 	bl	8017dcc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b14e:	89fb      	ldrh	r3, [r7, #14]
 800b150:	4618      	mov	r0, r3
 800b152:	f7ff fd4f 	bl	800abf4 <ptr_to_mem>
 800b156:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b158:	4b1c      	ldr	r3, [pc, #112]	; (800b1cc <mem_trim+0x210>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	693a      	ldr	r2, [r7, #16]
 800b15e:	429a      	cmp	r2, r3
 800b160:	d202      	bcs.n	800b168 <mem_trim+0x1ac>
      lfree = mem2;
 800b162:	4a1a      	ldr	r2, [pc, #104]	; (800b1cc <mem_trim+0x210>)
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	2200      	movs	r2, #0
 800b16c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b16e:	69bb      	ldr	r3, [r7, #24]
 800b170:	881a      	ldrh	r2, [r3, #0]
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	8afa      	ldrh	r2, [r7, #22]
 800b17a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b17c:	69bb      	ldr	r3, [r7, #24]
 800b17e:	89fa      	ldrh	r2, [r7, #14]
 800b180:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	881b      	ldrh	r3, [r3, #0]
 800b186:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b18a:	d007      	beq.n	800b19c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	881b      	ldrh	r3, [r3, #0]
 800b190:	4618      	mov	r0, r3
 800b192:	f7ff fd2f 	bl	800abf4 <ptr_to_mem>
 800b196:	4602      	mov	r2, r0
 800b198:	89fb      	ldrh	r3, [r7, #14]
 800b19a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b19c:	4809      	ldr	r0, [pc, #36]	; (800b1c4 <mem_trim+0x208>)
 800b19e:	f00c fd44 	bl	8017c2a <sys_mutex_unlock>
  return rmem;
 800b1a2:	687b      	ldr	r3, [r7, #4]
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3720      	adds	r7, #32
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}
 800b1ac:	20008a48 	.word	0x20008a48
 800b1b0:	20008a4c 	.word	0x20008a4c
 800b1b4:	08019fd8 	.word	0x08019fd8
 800b1b8:	0801a164 	.word	0x0801a164
 800b1bc:	0801a020 	.word	0x0801a020
 800b1c0:	0801a17c 	.word	0x0801a17c
 800b1c4:	20008a50 	.word	0x20008a50
 800b1c8:	0801a19c 	.word	0x0801a19c
 800b1cc:	20008a54 	.word	0x20008a54

0800b1d0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b088      	sub	sp, #32
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b1da:	88fb      	ldrh	r3, [r7, #6]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d101      	bne.n	800b1e4 <mem_malloc+0x14>
    return NULL;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	e0e2      	b.n	800b3aa <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b1e4:	88fb      	ldrh	r3, [r7, #6]
 800b1e6:	3303      	adds	r3, #3
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	f023 0303 	bic.w	r3, r3, #3
 800b1ee:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b1f0:	8bbb      	ldrh	r3, [r7, #28]
 800b1f2:	2b0b      	cmp	r3, #11
 800b1f4:	d801      	bhi.n	800b1fa <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b1f6:	230c      	movs	r3, #12
 800b1f8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b1fa:	8bbb      	ldrh	r3, [r7, #28]
 800b1fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b200:	d803      	bhi.n	800b20a <mem_malloc+0x3a>
 800b202:	8bba      	ldrh	r2, [r7, #28]
 800b204:	88fb      	ldrh	r3, [r7, #6]
 800b206:	429a      	cmp	r2, r3
 800b208:	d201      	bcs.n	800b20e <mem_malloc+0x3e>
    return NULL;
 800b20a:	2300      	movs	r3, #0
 800b20c:	e0cd      	b.n	800b3aa <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b20e:	4869      	ldr	r0, [pc, #420]	; (800b3b4 <mem_malloc+0x1e4>)
 800b210:	f00c fcfc 	bl	8017c0c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b214:	4b68      	ldr	r3, [pc, #416]	; (800b3b8 <mem_malloc+0x1e8>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4618      	mov	r0, r3
 800b21a:	f7ff fcfd 	bl	800ac18 <mem_to_ptr>
 800b21e:	4603      	mov	r3, r0
 800b220:	83fb      	strh	r3, [r7, #30]
 800b222:	e0b7      	b.n	800b394 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b224:	8bfb      	ldrh	r3, [r7, #30]
 800b226:	4618      	mov	r0, r3
 800b228:	f7ff fce4 	bl	800abf4 <ptr_to_mem>
 800b22c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	791b      	ldrb	r3, [r3, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	f040 80a7 	bne.w	800b386 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	881b      	ldrh	r3, [r3, #0]
 800b23c:	461a      	mov	r2, r3
 800b23e:	8bfb      	ldrh	r3, [r7, #30]
 800b240:	1ad3      	subs	r3, r2, r3
 800b242:	f1a3 0208 	sub.w	r2, r3, #8
 800b246:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b248:	429a      	cmp	r2, r3
 800b24a:	f0c0 809c 	bcc.w	800b386 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	881b      	ldrh	r3, [r3, #0]
 800b252:	461a      	mov	r2, r3
 800b254:	8bfb      	ldrh	r3, [r7, #30]
 800b256:	1ad3      	subs	r3, r2, r3
 800b258:	f1a3 0208 	sub.w	r2, r3, #8
 800b25c:	8bbb      	ldrh	r3, [r7, #28]
 800b25e:	3314      	adds	r3, #20
 800b260:	429a      	cmp	r2, r3
 800b262:	d333      	bcc.n	800b2cc <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b264:	8bfa      	ldrh	r2, [r7, #30]
 800b266:	8bbb      	ldrh	r3, [r7, #28]
 800b268:	4413      	add	r3, r2
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	3308      	adds	r3, #8
 800b26e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b270:	8a7b      	ldrh	r3, [r7, #18]
 800b272:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b276:	d106      	bne.n	800b286 <mem_malloc+0xb6>
 800b278:	4b50      	ldr	r3, [pc, #320]	; (800b3bc <mem_malloc+0x1ec>)
 800b27a:	f240 3287 	movw	r2, #903	; 0x387
 800b27e:	4950      	ldr	r1, [pc, #320]	; (800b3c0 <mem_malloc+0x1f0>)
 800b280:	4850      	ldr	r0, [pc, #320]	; (800b3c4 <mem_malloc+0x1f4>)
 800b282:	f00c fda3 	bl	8017dcc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b286:	8a7b      	ldrh	r3, [r7, #18]
 800b288:	4618      	mov	r0, r3
 800b28a:	f7ff fcb3 	bl	800abf4 <ptr_to_mem>
 800b28e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2200      	movs	r2, #0
 800b294:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	881a      	ldrh	r2, [r3, #0]
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	8bfa      	ldrh	r2, [r7, #30]
 800b2a2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	8a7a      	ldrh	r2, [r7, #18]
 800b2a8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	881b      	ldrh	r3, [r3, #0]
 800b2b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b2b8:	d00b      	beq.n	800b2d2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	881b      	ldrh	r3, [r3, #0]
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7ff fc98 	bl	800abf4 <ptr_to_mem>
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	8a7b      	ldrh	r3, [r7, #18]
 800b2c8:	8053      	strh	r3, [r2, #2]
 800b2ca:	e002      	b.n	800b2d2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b2d2:	4b39      	ldr	r3, [pc, #228]	; (800b3b8 <mem_malloc+0x1e8>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	697a      	ldr	r2, [r7, #20]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d127      	bne.n	800b32c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800b2dc:	4b36      	ldr	r3, [pc, #216]	; (800b3b8 <mem_malloc+0x1e8>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b2e2:	e005      	b.n	800b2f0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b2e4:	69bb      	ldr	r3, [r7, #24]
 800b2e6:	881b      	ldrh	r3, [r3, #0]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7ff fc83 	bl	800abf4 <ptr_to_mem>
 800b2ee:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b2f0:	69bb      	ldr	r3, [r7, #24]
 800b2f2:	791b      	ldrb	r3, [r3, #4]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d004      	beq.n	800b302 <mem_malloc+0x132>
 800b2f8:	4b33      	ldr	r3, [pc, #204]	; (800b3c8 <mem_malloc+0x1f8>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	69ba      	ldr	r2, [r7, #24]
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d1f0      	bne.n	800b2e4 <mem_malloc+0x114>
          }
          lfree = cur;
 800b302:	4a2d      	ldr	r2, [pc, #180]	; (800b3b8 <mem_malloc+0x1e8>)
 800b304:	69bb      	ldr	r3, [r7, #24]
 800b306:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b308:	4b2b      	ldr	r3, [pc, #172]	; (800b3b8 <mem_malloc+0x1e8>)
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	4b2e      	ldr	r3, [pc, #184]	; (800b3c8 <mem_malloc+0x1f8>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	429a      	cmp	r2, r3
 800b312:	d00b      	beq.n	800b32c <mem_malloc+0x15c>
 800b314:	4b28      	ldr	r3, [pc, #160]	; (800b3b8 <mem_malloc+0x1e8>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	791b      	ldrb	r3, [r3, #4]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d006      	beq.n	800b32c <mem_malloc+0x15c>
 800b31e:	4b27      	ldr	r3, [pc, #156]	; (800b3bc <mem_malloc+0x1ec>)
 800b320:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b324:	4929      	ldr	r1, [pc, #164]	; (800b3cc <mem_malloc+0x1fc>)
 800b326:	4827      	ldr	r0, [pc, #156]	; (800b3c4 <mem_malloc+0x1f4>)
 800b328:	f00c fd50 	bl	8017dcc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b32c:	4821      	ldr	r0, [pc, #132]	; (800b3b4 <mem_malloc+0x1e4>)
 800b32e:	f00c fc7c 	bl	8017c2a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b332:	8bba      	ldrh	r2, [r7, #28]
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	4413      	add	r3, r2
 800b338:	3308      	adds	r3, #8
 800b33a:	4a23      	ldr	r2, [pc, #140]	; (800b3c8 <mem_malloc+0x1f8>)
 800b33c:	6812      	ldr	r2, [r2, #0]
 800b33e:	4293      	cmp	r3, r2
 800b340:	d906      	bls.n	800b350 <mem_malloc+0x180>
 800b342:	4b1e      	ldr	r3, [pc, #120]	; (800b3bc <mem_malloc+0x1ec>)
 800b344:	f240 32ba 	movw	r2, #954	; 0x3ba
 800b348:	4921      	ldr	r1, [pc, #132]	; (800b3d0 <mem_malloc+0x200>)
 800b34a:	481e      	ldr	r0, [pc, #120]	; (800b3c4 <mem_malloc+0x1f4>)
 800b34c:	f00c fd3e 	bl	8017dcc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	f003 0303 	and.w	r3, r3, #3
 800b356:	2b00      	cmp	r3, #0
 800b358:	d006      	beq.n	800b368 <mem_malloc+0x198>
 800b35a:	4b18      	ldr	r3, [pc, #96]	; (800b3bc <mem_malloc+0x1ec>)
 800b35c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800b360:	491c      	ldr	r1, [pc, #112]	; (800b3d4 <mem_malloc+0x204>)
 800b362:	4818      	ldr	r0, [pc, #96]	; (800b3c4 <mem_malloc+0x1f4>)
 800b364:	f00c fd32 	bl	8017dcc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	f003 0303 	and.w	r3, r3, #3
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d006      	beq.n	800b380 <mem_malloc+0x1b0>
 800b372:	4b12      	ldr	r3, [pc, #72]	; (800b3bc <mem_malloc+0x1ec>)
 800b374:	f240 32be 	movw	r2, #958	; 0x3be
 800b378:	4917      	ldr	r1, [pc, #92]	; (800b3d8 <mem_malloc+0x208>)
 800b37a:	4812      	ldr	r0, [pc, #72]	; (800b3c4 <mem_malloc+0x1f4>)
 800b37c:	f00c fd26 	bl	8017dcc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	3308      	adds	r3, #8
 800b384:	e011      	b.n	800b3aa <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800b386:	8bfb      	ldrh	r3, [r7, #30]
 800b388:	4618      	mov	r0, r3
 800b38a:	f7ff fc33 	bl	800abf4 <ptr_to_mem>
 800b38e:	4603      	mov	r3, r0
 800b390:	881b      	ldrh	r3, [r3, #0]
 800b392:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b394:	8bfa      	ldrh	r2, [r7, #30]
 800b396:	8bbb      	ldrh	r3, [r7, #28]
 800b398:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b39c:	429a      	cmp	r2, r3
 800b39e:	f4ff af41 	bcc.w	800b224 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b3a2:	4804      	ldr	r0, [pc, #16]	; (800b3b4 <mem_malloc+0x1e4>)
 800b3a4:	f00c fc41 	bl	8017c2a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b3a8:	2300      	movs	r3, #0
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3720      	adds	r7, #32
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	20008a50 	.word	0x20008a50
 800b3b8:	20008a54 	.word	0x20008a54
 800b3bc:	08019fd8 	.word	0x08019fd8
 800b3c0:	0801a19c 	.word	0x0801a19c
 800b3c4:	0801a020 	.word	0x0801a020
 800b3c8:	20008a4c 	.word	0x20008a4c
 800b3cc:	0801a1b0 	.word	0x0801a1b0
 800b3d0:	0801a1cc 	.word	0x0801a1cc
 800b3d4:	0801a1fc 	.word	0x0801a1fc
 800b3d8:	0801a22c 	.word	0x0801a22c

0800b3dc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b085      	sub	sp, #20
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	689b      	ldr	r3, [r3, #8]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	3303      	adds	r3, #3
 800b3f2:	f023 0303 	bic.w	r3, r3, #3
 800b3f6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	60fb      	str	r3, [r7, #12]
 800b3fc:	e011      	b.n	800b422 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	681a      	ldr	r2, [r3, #0]
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	689b      	ldr	r3, [r3, #8]
 800b40c:	68ba      	ldr	r2, [r7, #8]
 800b40e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	881b      	ldrh	r3, [r3, #0]
 800b414:	461a      	mov	r2, r3
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	4413      	add	r3, r2
 800b41a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	3301      	adds	r3, #1
 800b420:	60fb      	str	r3, [r7, #12]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	885b      	ldrh	r3, [r3, #2]
 800b426:	461a      	mov	r2, r3
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	4293      	cmp	r3, r2
 800b42c:	dbe7      	blt.n	800b3fe <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b42e:	bf00      	nop
 800b430:	3714      	adds	r7, #20
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr
	...

0800b43c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b442:	2300      	movs	r3, #0
 800b444:	80fb      	strh	r3, [r7, #6]
 800b446:	e009      	b.n	800b45c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b448:	88fb      	ldrh	r3, [r7, #6]
 800b44a:	4a08      	ldr	r2, [pc, #32]	; (800b46c <memp_init+0x30>)
 800b44c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b450:	4618      	mov	r0, r3
 800b452:	f7ff ffc3 	bl	800b3dc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b456:	88fb      	ldrh	r3, [r7, #6]
 800b458:	3301      	adds	r3, #1
 800b45a:	80fb      	strh	r3, [r7, #6]
 800b45c:	88fb      	ldrh	r3, [r7, #6]
 800b45e:	2b0c      	cmp	r3, #12
 800b460:	d9f2      	bls.n	800b448 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b462:	bf00      	nop
 800b464:	3708      	adds	r7, #8
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
 800b46a:	bf00      	nop
 800b46c:	08026f10 	.word	0x08026f10

0800b470 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b478:	f00c fc0a 	bl	8017c90 <sys_arch_protect>
 800b47c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	689b      	ldr	r3, [r3, #8]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d015      	beq.n	800b4b8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	68ba      	ldr	r2, [r7, #8]
 800b492:	6812      	ldr	r2, [r2, #0]
 800b494:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	f003 0303 	and.w	r3, r3, #3
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d006      	beq.n	800b4ae <do_memp_malloc_pool+0x3e>
 800b4a0:	4b09      	ldr	r3, [pc, #36]	; (800b4c8 <do_memp_malloc_pool+0x58>)
 800b4a2:	f240 1219 	movw	r2, #281	; 0x119
 800b4a6:	4909      	ldr	r1, [pc, #36]	; (800b4cc <do_memp_malloc_pool+0x5c>)
 800b4a8:	4809      	ldr	r0, [pc, #36]	; (800b4d0 <do_memp_malloc_pool+0x60>)
 800b4aa:	f00c fc8f 	bl	8017dcc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b4ae:	68f8      	ldr	r0, [r7, #12]
 800b4b0:	f00c fbfc 	bl	8017cac <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	e003      	b.n	800b4c0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b4b8:	68f8      	ldr	r0, [r7, #12]
 800b4ba:	f00c fbf7 	bl	8017cac <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b4be:	2300      	movs	r3, #0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3710      	adds	r7, #16
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	0801a250 	.word	0x0801a250
 800b4cc:	0801a280 	.word	0x0801a280
 800b4d0:	0801a2a4 	.word	0x0801a2a4

0800b4d4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	4603      	mov	r3, r0
 800b4dc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b4de:	79fb      	ldrb	r3, [r7, #7]
 800b4e0:	2b0c      	cmp	r3, #12
 800b4e2:	d908      	bls.n	800b4f6 <memp_malloc+0x22>
 800b4e4:	4b0a      	ldr	r3, [pc, #40]	; (800b510 <memp_malloc+0x3c>)
 800b4e6:	f240 1257 	movw	r2, #343	; 0x157
 800b4ea:	490a      	ldr	r1, [pc, #40]	; (800b514 <memp_malloc+0x40>)
 800b4ec:	480a      	ldr	r0, [pc, #40]	; (800b518 <memp_malloc+0x44>)
 800b4ee:	f00c fc6d 	bl	8017dcc <iprintf>
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	e008      	b.n	800b508 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b4f6:	79fb      	ldrb	r3, [r7, #7]
 800b4f8:	4a08      	ldr	r2, [pc, #32]	; (800b51c <memp_malloc+0x48>)
 800b4fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7ff ffb6 	bl	800b470 <do_memp_malloc_pool>
 800b504:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b506:	68fb      	ldr	r3, [r7, #12]
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3710      	adds	r7, #16
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	0801a250 	.word	0x0801a250
 800b514:	0801a2e0 	.word	0x0801a2e0
 800b518:	0801a2a4 	.word	0x0801a2a4
 800b51c:	08026f10 	.word	0x08026f10

0800b520 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	f003 0303 	and.w	r3, r3, #3
 800b530:	2b00      	cmp	r3, #0
 800b532:	d006      	beq.n	800b542 <do_memp_free_pool+0x22>
 800b534:	4b0d      	ldr	r3, [pc, #52]	; (800b56c <do_memp_free_pool+0x4c>)
 800b536:	f240 126d 	movw	r2, #365	; 0x16d
 800b53a:	490d      	ldr	r1, [pc, #52]	; (800b570 <do_memp_free_pool+0x50>)
 800b53c:	480d      	ldr	r0, [pc, #52]	; (800b574 <do_memp_free_pool+0x54>)
 800b53e:	f00c fc45 	bl	8017dcc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b546:	f00c fba3 	bl	8017c90 <sys_arch_protect>
 800b54a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	681a      	ldr	r2, [r3, #0]
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	68fa      	ldr	r2, [r7, #12]
 800b55c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b55e:	68b8      	ldr	r0, [r7, #8]
 800b560:	f00c fba4 	bl	8017cac <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b564:	bf00      	nop
 800b566:	3710      	adds	r7, #16
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	0801a250 	.word	0x0801a250
 800b570:	0801a300 	.word	0x0801a300
 800b574:	0801a2a4 	.word	0x0801a2a4

0800b578 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	4603      	mov	r3, r0
 800b580:	6039      	str	r1, [r7, #0]
 800b582:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b584:	79fb      	ldrb	r3, [r7, #7]
 800b586:	2b0c      	cmp	r3, #12
 800b588:	d907      	bls.n	800b59a <memp_free+0x22>
 800b58a:	4b0c      	ldr	r3, [pc, #48]	; (800b5bc <memp_free+0x44>)
 800b58c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b590:	490b      	ldr	r1, [pc, #44]	; (800b5c0 <memp_free+0x48>)
 800b592:	480c      	ldr	r0, [pc, #48]	; (800b5c4 <memp_free+0x4c>)
 800b594:	f00c fc1a 	bl	8017dcc <iprintf>
 800b598:	e00c      	b.n	800b5b4 <memp_free+0x3c>

  if (mem == NULL) {
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d008      	beq.n	800b5b2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b5a0:	79fb      	ldrb	r3, [r7, #7]
 800b5a2:	4a09      	ldr	r2, [pc, #36]	; (800b5c8 <memp_free+0x50>)
 800b5a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5a8:	6839      	ldr	r1, [r7, #0]
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7ff ffb8 	bl	800b520 <do_memp_free_pool>
 800b5b0:	e000      	b.n	800b5b4 <memp_free+0x3c>
    return;
 800b5b2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b5b4:	3708      	adds	r7, #8
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	0801a250 	.word	0x0801a250
 800b5c0:	0801a320 	.word	0x0801a320
 800b5c4:	0801a2a4 	.word	0x0801a2a4
 800b5c8:	08026f10 	.word	0x08026f10

0800b5cc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b5d0:	bf00      	nop
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr
	...

0800b5dc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b086      	sub	sp, #24
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	60f8      	str	r0, [r7, #12]
 800b5e4:	60b9      	str	r1, [r7, #8]
 800b5e6:	607a      	str	r2, [r7, #4]
 800b5e8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d108      	bne.n	800b602 <netif_add+0x26>
 800b5f0:	4b5b      	ldr	r3, [pc, #364]	; (800b760 <netif_add+0x184>)
 800b5f2:	f240 1227 	movw	r2, #295	; 0x127
 800b5f6:	495b      	ldr	r1, [pc, #364]	; (800b764 <netif_add+0x188>)
 800b5f8:	485b      	ldr	r0, [pc, #364]	; (800b768 <netif_add+0x18c>)
 800b5fa:	f00c fbe7 	bl	8017dcc <iprintf>
 800b5fe:	2300      	movs	r3, #0
 800b600:	e0a9      	b.n	800b756 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b604:	2b00      	cmp	r3, #0
 800b606:	d108      	bne.n	800b61a <netif_add+0x3e>
 800b608:	4b55      	ldr	r3, [pc, #340]	; (800b760 <netif_add+0x184>)
 800b60a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b60e:	4957      	ldr	r1, [pc, #348]	; (800b76c <netif_add+0x190>)
 800b610:	4855      	ldr	r0, [pc, #340]	; (800b768 <netif_add+0x18c>)
 800b612:	f00c fbdb 	bl	8017dcc <iprintf>
 800b616:	2300      	movs	r3, #0
 800b618:	e09d      	b.n	800b756 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d101      	bne.n	800b624 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b620:	4b53      	ldr	r3, [pc, #332]	; (800b770 <netif_add+0x194>)
 800b622:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d101      	bne.n	800b62e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b62a:	4b51      	ldr	r3, [pc, #324]	; (800b770 <netif_add+0x194>)
 800b62c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d101      	bne.n	800b638 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b634:	4b4e      	ldr	r3, [pc, #312]	; (800b770 <netif_add+0x194>)
 800b636:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2200      	movs	r2, #0
 800b63c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2200      	movs	r2, #0
 800b642:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2200      	movs	r2, #0
 800b648:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	4a49      	ldr	r2, [pc, #292]	; (800b774 <netif_add+0x198>)
 800b64e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	2200      	movs	r2, #0
 800b654:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	2200      	movs	r2, #0
 800b65a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	3324      	adds	r3, #36	; 0x24
 800b662:	2204      	movs	r2, #4
 800b664:	2100      	movs	r1, #0
 800b666:	4618      	mov	r0, r3
 800b668:	f00c fba7 	bl	8017dba <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2200      	movs	r2, #0
 800b670:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	6a3a      	ldr	r2, [r7, #32]
 800b676:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b678:	4b3f      	ldr	r3, [pc, #252]	; (800b778 <netif_add+0x19c>)
 800b67a:	781a      	ldrb	r2, [r3, #0]
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b686:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	68b9      	ldr	r1, [r7, #8]
 800b68e:	68f8      	ldr	r0, [r7, #12]
 800b690:	f000 f914 	bl	800b8bc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	4798      	blx	r3
 800b69a:	4603      	mov	r3, r0
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d001      	beq.n	800b6a4 <netif_add+0xc8>
    return NULL;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	e058      	b.n	800b756 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b6aa:	2bff      	cmp	r3, #255	; 0xff
 800b6ac:	d103      	bne.n	800b6b6 <netif_add+0xda>
        netif->num = 0;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b6ba:	4b30      	ldr	r3, [pc, #192]	; (800b77c <netif_add+0x1a0>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	617b      	str	r3, [r7, #20]
 800b6c0:	e02b      	b.n	800b71a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b6c2:	697a      	ldr	r2, [r7, #20]
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d106      	bne.n	800b6d8 <netif_add+0xfc>
 800b6ca:	4b25      	ldr	r3, [pc, #148]	; (800b760 <netif_add+0x184>)
 800b6cc:	f240 128b 	movw	r2, #395	; 0x18b
 800b6d0:	492b      	ldr	r1, [pc, #172]	; (800b780 <netif_add+0x1a4>)
 800b6d2:	4825      	ldr	r0, [pc, #148]	; (800b768 <netif_add+0x18c>)
 800b6d4:	f00c fb7a 	bl	8017dcc <iprintf>
        num_netifs++;
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	3301      	adds	r3, #1
 800b6dc:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	2bff      	cmp	r3, #255	; 0xff
 800b6e2:	dd06      	ble.n	800b6f2 <netif_add+0x116>
 800b6e4:	4b1e      	ldr	r3, [pc, #120]	; (800b760 <netif_add+0x184>)
 800b6e6:	f240 128d 	movw	r2, #397	; 0x18d
 800b6ea:	4926      	ldr	r1, [pc, #152]	; (800b784 <netif_add+0x1a8>)
 800b6ec:	481e      	ldr	r0, [pc, #120]	; (800b768 <netif_add+0x18c>)
 800b6ee:	f00c fb6d 	bl	8017dcc <iprintf>
        if (netif2->num == netif->num) {
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d108      	bne.n	800b714 <netif_add+0x138>
          netif->num++;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b708:	3301      	adds	r3, #1
 800b70a:	b2da      	uxtb	r2, r3
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800b712:	e005      	b.n	800b720 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	617b      	str	r3, [r7, #20]
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d1d0      	bne.n	800b6c2 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d1be      	bne.n	800b6a4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b72c:	2bfe      	cmp	r3, #254	; 0xfe
 800b72e:	d103      	bne.n	800b738 <netif_add+0x15c>
    netif_num = 0;
 800b730:	4b11      	ldr	r3, [pc, #68]	; (800b778 <netif_add+0x19c>)
 800b732:	2200      	movs	r2, #0
 800b734:	701a      	strb	r2, [r3, #0]
 800b736:	e006      	b.n	800b746 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b73e:	3301      	adds	r3, #1
 800b740:	b2da      	uxtb	r2, r3
 800b742:	4b0d      	ldr	r3, [pc, #52]	; (800b778 <netif_add+0x19c>)
 800b744:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b746:	4b0d      	ldr	r3, [pc, #52]	; (800b77c <netif_add+0x1a0>)
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b74e:	4a0b      	ldr	r2, [pc, #44]	; (800b77c <netif_add+0x1a0>)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b754:	68fb      	ldr	r3, [r7, #12]
}
 800b756:	4618      	mov	r0, r3
 800b758:	3718      	adds	r7, #24
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	0801a33c 	.word	0x0801a33c
 800b764:	0801a3d0 	.word	0x0801a3d0
 800b768:	0801a38c 	.word	0x0801a38c
 800b76c:	0801a3ec 	.word	0x0801a3ec
 800b770:	08026f94 	.word	0x08026f94
 800b774:	0800bb9f 	.word	0x0800bb9f
 800b778:	20008a8c 	.word	0x20008a8c
 800b77c:	2000f504 	.word	0x2000f504
 800b780:	0801a410 	.word	0x0801a410
 800b784:	0801a424 	.word	0x0801a424

0800b788 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b792:	6839      	ldr	r1, [r7, #0]
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f002 fe81 	bl	800e49c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b79a:	6839      	ldr	r1, [r7, #0]
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f007 ff05 	bl	80135ac <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b7a2:	bf00      	nop
 800b7a4:	3708      	adds	r7, #8
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
	...

0800b7ac <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b086      	sub	sp, #24
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d106      	bne.n	800b7cc <netif_do_set_ipaddr+0x20>
 800b7be:	4b1d      	ldr	r3, [pc, #116]	; (800b834 <netif_do_set_ipaddr+0x88>)
 800b7c0:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b7c4:	491c      	ldr	r1, [pc, #112]	; (800b838 <netif_do_set_ipaddr+0x8c>)
 800b7c6:	481d      	ldr	r0, [pc, #116]	; (800b83c <netif_do_set_ipaddr+0x90>)
 800b7c8:	f00c fb00 	bl	8017dcc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d106      	bne.n	800b7e0 <netif_do_set_ipaddr+0x34>
 800b7d2:	4b18      	ldr	r3, [pc, #96]	; (800b834 <netif_do_set_ipaddr+0x88>)
 800b7d4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b7d8:	4917      	ldr	r1, [pc, #92]	; (800b838 <netif_do_set_ipaddr+0x8c>)
 800b7da:	4818      	ldr	r0, [pc, #96]	; (800b83c <netif_do_set_ipaddr+0x90>)
 800b7dc:	f00c faf6 	bl	8017dcc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	681a      	ldr	r2, [r3, #0]
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	3304      	adds	r3, #4
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d01c      	beq.n	800b828 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	3304      	adds	r3, #4
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b7fe:	f107 0314 	add.w	r3, r7, #20
 800b802:	4619      	mov	r1, r3
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f7ff ffbf 	bl	800b788 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d002      	beq.n	800b816 <netif_do_set_ipaddr+0x6a>
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	e000      	b.n	800b818 <netif_do_set_ipaddr+0x6c>
 800b816:	2300      	movs	r3, #0
 800b818:	68fa      	ldr	r2, [r7, #12]
 800b81a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b81c:	2101      	movs	r1, #1
 800b81e:	68f8      	ldr	r0, [r7, #12]
 800b820:	f000 f8d2 	bl	800b9c8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b824:	2301      	movs	r3, #1
 800b826:	e000      	b.n	800b82a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b828:	2300      	movs	r3, #0
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3718      	adds	r7, #24
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	0801a33c 	.word	0x0801a33c
 800b838:	0801a454 	.word	0x0801a454
 800b83c:	0801a38c 	.word	0x0801a38c

0800b840 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b840:	b480      	push	{r7}
 800b842:	b085      	sub	sp, #20
 800b844:	af00      	add	r7, sp, #0
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	60b9      	str	r1, [r7, #8]
 800b84a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	3308      	adds	r3, #8
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	429a      	cmp	r2, r3
 800b858:	d00a      	beq.n	800b870 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d002      	beq.n	800b866 <netif_do_set_netmask+0x26>
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	e000      	b.n	800b868 <netif_do_set_netmask+0x28>
 800b866:	2300      	movs	r3, #0
 800b868:	68fa      	ldr	r2, [r7, #12]
 800b86a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b86c:	2301      	movs	r3, #1
 800b86e:	e000      	b.n	800b872 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b870:	2300      	movs	r3, #0
}
 800b872:	4618      	mov	r0, r3
 800b874:	3714      	adds	r7, #20
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr

0800b87e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b87e:	b480      	push	{r7}
 800b880:	b085      	sub	sp, #20
 800b882:	af00      	add	r7, sp, #0
 800b884:	60f8      	str	r0, [r7, #12]
 800b886:	60b9      	str	r1, [r7, #8]
 800b888:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	681a      	ldr	r2, [r3, #0]
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	330c      	adds	r3, #12
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	429a      	cmp	r2, r3
 800b896:	d00a      	beq.n	800b8ae <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d002      	beq.n	800b8a4 <netif_do_set_gw+0x26>
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	e000      	b.n	800b8a6 <netif_do_set_gw+0x28>
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	68fa      	ldr	r2, [r7, #12]
 800b8a8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e000      	b.n	800b8b0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b8ae:	2300      	movs	r3, #0
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3714      	adds	r7, #20
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr

0800b8bc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b088      	sub	sp, #32
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	60b9      	str	r1, [r7, #8]
 800b8c6:	607a      	str	r2, [r7, #4]
 800b8c8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d101      	bne.n	800b8dc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b8d8:	4b1c      	ldr	r3, [pc, #112]	; (800b94c <netif_set_addr+0x90>)
 800b8da:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d101      	bne.n	800b8e6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b8e2:	4b1a      	ldr	r3, [pc, #104]	; (800b94c <netif_set_addr+0x90>)
 800b8e4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d101      	bne.n	800b8f0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b8ec:	4b17      	ldr	r3, [pc, #92]	; (800b94c <netif_set_addr+0x90>)
 800b8ee:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d003      	beq.n	800b8fe <netif_set_addr+0x42>
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d101      	bne.n	800b902 <netif_set_addr+0x46>
 800b8fe:	2301      	movs	r3, #1
 800b900:	e000      	b.n	800b904 <netif_set_addr+0x48>
 800b902:	2300      	movs	r3, #0
 800b904:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d006      	beq.n	800b91a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b90c:	f107 0310 	add.w	r3, r7, #16
 800b910:	461a      	mov	r2, r3
 800b912:	68b9      	ldr	r1, [r7, #8]
 800b914:	68f8      	ldr	r0, [r7, #12]
 800b916:	f7ff ff49 	bl	800b7ac <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b91a:	69fa      	ldr	r2, [r7, #28]
 800b91c:	6879      	ldr	r1, [r7, #4]
 800b91e:	68f8      	ldr	r0, [r7, #12]
 800b920:	f7ff ff8e 	bl	800b840 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b924:	69ba      	ldr	r2, [r7, #24]
 800b926:	6839      	ldr	r1, [r7, #0]
 800b928:	68f8      	ldr	r0, [r7, #12]
 800b92a:	f7ff ffa8 	bl	800b87e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d106      	bne.n	800b942 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b934:	f107 0310 	add.w	r3, r7, #16
 800b938:	461a      	mov	r2, r3
 800b93a:	68b9      	ldr	r1, [r7, #8]
 800b93c:	68f8      	ldr	r0, [r7, #12]
 800b93e:	f7ff ff35 	bl	800b7ac <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b942:	bf00      	nop
 800b944:	3720      	adds	r7, #32
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	08026f94 	.word	0x08026f94

0800b950 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b950:	b480      	push	{r7}
 800b952:	b083      	sub	sp, #12
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b958:	4a04      	ldr	r2, [pc, #16]	; (800b96c <netif_set_default+0x1c>)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b95e:	bf00      	nop
 800b960:	370c      	adds	r7, #12
 800b962:	46bd      	mov	sp, r7
 800b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b968:	4770      	bx	lr
 800b96a:	bf00      	nop
 800b96c:	2000f508 	.word	0x2000f508

0800b970 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d107      	bne.n	800b98e <netif_set_up+0x1e>
 800b97e:	4b0f      	ldr	r3, [pc, #60]	; (800b9bc <netif_set_up+0x4c>)
 800b980:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b984:	490e      	ldr	r1, [pc, #56]	; (800b9c0 <netif_set_up+0x50>)
 800b986:	480f      	ldr	r0, [pc, #60]	; (800b9c4 <netif_set_up+0x54>)
 800b988:	f00c fa20 	bl	8017dcc <iprintf>
 800b98c:	e013      	b.n	800b9b6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b994:	f003 0301 	and.w	r3, r3, #1
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d10c      	bne.n	800b9b6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b9a2:	f043 0301 	orr.w	r3, r3, #1
 800b9a6:	b2da      	uxtb	r2, r3
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b9ae:	2103      	movs	r1, #3
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 f809 	bl	800b9c8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b9b6:	3708      	adds	r7, #8
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	0801a33c 	.word	0x0801a33c
 800b9c0:	0801a4c4 	.word	0x0801a4c4
 800b9c4:	0801a38c 	.word	0x0801a38c

0800b9c8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d106      	bne.n	800b9e8 <netif_issue_reports+0x20>
 800b9da:	4b18      	ldr	r3, [pc, #96]	; (800ba3c <netif_issue_reports+0x74>)
 800b9dc:	f240 326d 	movw	r2, #877	; 0x36d
 800b9e0:	4917      	ldr	r1, [pc, #92]	; (800ba40 <netif_issue_reports+0x78>)
 800b9e2:	4818      	ldr	r0, [pc, #96]	; (800ba44 <netif_issue_reports+0x7c>)
 800b9e4:	f00c f9f2 	bl	8017dcc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b9ee:	f003 0304 	and.w	r3, r3, #4
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d01e      	beq.n	800ba34 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b9fc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d017      	beq.n	800ba34 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ba04:	78fb      	ldrb	r3, [r7, #3]
 800ba06:	f003 0301 	and.w	r3, r3, #1
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d013      	beq.n	800ba36 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	3304      	adds	r3, #4
 800ba12:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d00e      	beq.n	800ba36 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ba1e:	f003 0308 	and.w	r3, r3, #8
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d007      	beq.n	800ba36 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	3304      	adds	r3, #4
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f00a fbcd 	bl	80161cc <etharp_request>
 800ba32:	e000      	b.n	800ba36 <netif_issue_reports+0x6e>
    return;
 800ba34:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ba36:	3708      	adds	r7, #8
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}
 800ba3c:	0801a33c 	.word	0x0801a33c
 800ba40:	0801a4e0 	.word	0x0801a4e0
 800ba44:	0801a38c 	.word	0x0801a38c

0800ba48 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b082      	sub	sp, #8
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d107      	bne.n	800ba66 <netif_set_down+0x1e>
 800ba56:	4b12      	ldr	r3, [pc, #72]	; (800baa0 <netif_set_down+0x58>)
 800ba58:	f240 329b 	movw	r2, #923	; 0x39b
 800ba5c:	4911      	ldr	r1, [pc, #68]	; (800baa4 <netif_set_down+0x5c>)
 800ba5e:	4812      	ldr	r0, [pc, #72]	; (800baa8 <netif_set_down+0x60>)
 800ba60:	f00c f9b4 	bl	8017dcc <iprintf>
 800ba64:	e019      	b.n	800ba9a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ba6c:	f003 0301 	and.w	r3, r3, #1
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d012      	beq.n	800ba9a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ba7a:	f023 0301 	bic.w	r3, r3, #1
 800ba7e:	b2da      	uxtb	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ba8c:	f003 0308 	and.w	r3, r3, #8
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d002      	beq.n	800ba9a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f009 ff53 	bl	8015940 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ba9a:	3708      	adds	r7, #8
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}
 800baa0:	0801a33c 	.word	0x0801a33c
 800baa4:	0801a504 	.word	0x0801a504
 800baa8:	0801a38c 	.word	0x0801a38c

0800baac <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b082      	sub	sp, #8
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d107      	bne.n	800baca <netif_set_link_up+0x1e>
 800baba:	4b15      	ldr	r3, [pc, #84]	; (800bb10 <netif_set_link_up+0x64>)
 800babc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800bac0:	4914      	ldr	r1, [pc, #80]	; (800bb14 <netif_set_link_up+0x68>)
 800bac2:	4815      	ldr	r0, [pc, #84]	; (800bb18 <netif_set_link_up+0x6c>)
 800bac4:	f00c f982 	bl	8017dcc <iprintf>
 800bac8:	e01e      	b.n	800bb08 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bad0:	f003 0304 	and.w	r3, r3, #4
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d117      	bne.n	800bb08 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bade:	f043 0304 	orr.w	r3, r3, #4
 800bae2:	b2da      	uxtb	r2, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f008 f988 	bl	8013e00 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800baf0:	2103      	movs	r1, #3
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f7ff ff68 	bl	800b9c8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	69db      	ldr	r3, [r3, #28]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d003      	beq.n	800bb08 <netif_set_link_up+0x5c>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	69db      	ldr	r3, [r3, #28]
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bb08:	3708      	adds	r7, #8
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	0801a33c 	.word	0x0801a33c
 800bb14:	0801a524 	.word	0x0801a524
 800bb18:	0801a38c 	.word	0x0801a38c

0800bb1c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b082      	sub	sp, #8
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d107      	bne.n	800bb3a <netif_set_link_down+0x1e>
 800bb2a:	4b11      	ldr	r3, [pc, #68]	; (800bb70 <netif_set_link_down+0x54>)
 800bb2c:	f240 4206 	movw	r2, #1030	; 0x406
 800bb30:	4910      	ldr	r1, [pc, #64]	; (800bb74 <netif_set_link_down+0x58>)
 800bb32:	4811      	ldr	r0, [pc, #68]	; (800bb78 <netif_set_link_down+0x5c>)
 800bb34:	f00c f94a 	bl	8017dcc <iprintf>
 800bb38:	e017      	b.n	800bb6a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb40:	f003 0304 	and.w	r3, r3, #4
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d010      	beq.n	800bb6a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb4e:	f023 0304 	bic.w	r3, r3, #4
 800bb52:	b2da      	uxtb	r2, r3
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	69db      	ldr	r3, [r3, #28]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d003      	beq.n	800bb6a <netif_set_link_down+0x4e>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	69db      	ldr	r3, [r3, #28]
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bb6a:	3708      	adds	r7, #8
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	0801a33c 	.word	0x0801a33c
 800bb74:	0801a548 	.word	0x0801a548
 800bb78:	0801a38c 	.word	0x0801a38c

0800bb7c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b083      	sub	sp, #12
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d002      	beq.n	800bb92 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	683a      	ldr	r2, [r7, #0]
 800bb90:	61da      	str	r2, [r3, #28]
  }
}
 800bb92:	bf00      	nop
 800bb94:	370c      	adds	r7, #12
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr

0800bb9e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800bb9e:	b480      	push	{r7}
 800bba0:	b085      	sub	sp, #20
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	60f8      	str	r0, [r7, #12]
 800bba6:	60b9      	str	r1, [r7, #8]
 800bba8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800bbaa:	f06f 030b 	mvn.w	r3, #11
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3714      	adds	r7, #20
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr
	...

0800bbbc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b085      	sub	sp, #20
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800bbc6:	79fb      	ldrb	r3, [r7, #7]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d013      	beq.n	800bbf4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800bbcc:	4b0d      	ldr	r3, [pc, #52]	; (800bc04 <netif_get_by_index+0x48>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	60fb      	str	r3, [r7, #12]
 800bbd2:	e00c      	b.n	800bbee <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bbda:	3301      	adds	r3, #1
 800bbdc:	b2db      	uxtb	r3, r3
 800bbde:	79fa      	ldrb	r2, [r7, #7]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d101      	bne.n	800bbe8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	e006      	b.n	800bbf6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	60fb      	str	r3, [r7, #12]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d1ef      	bne.n	800bbd4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800bbf4:	2300      	movs	r3, #0
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3714      	adds	r7, #20
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc00:	4770      	bx	lr
 800bc02:	bf00      	nop
 800bc04:	2000f504 	.word	0x2000f504

0800bc08 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800bc0e:	f00c f83f 	bl	8017c90 <sys_arch_protect>
 800bc12:	6038      	str	r0, [r7, #0]
 800bc14:	4b0d      	ldr	r3, [pc, #52]	; (800bc4c <pbuf_free_ooseq+0x44>)
 800bc16:	2200      	movs	r2, #0
 800bc18:	701a      	strb	r2, [r3, #0]
 800bc1a:	6838      	ldr	r0, [r7, #0]
 800bc1c:	f00c f846 	bl	8017cac <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bc20:	4b0b      	ldr	r3, [pc, #44]	; (800bc50 <pbuf_free_ooseq+0x48>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	607b      	str	r3, [r7, #4]
 800bc26:	e00a      	b.n	800bc3e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d003      	beq.n	800bc38 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f002 fc71 	bl	800e518 <tcp_free_ooseq>
      return;
 800bc36:	e005      	b.n	800bc44 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	68db      	ldr	r3, [r3, #12]
 800bc3c:	607b      	str	r3, [r7, #4]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d1f1      	bne.n	800bc28 <pbuf_free_ooseq+0x20>
    }
  }
}
 800bc44:	3708      	adds	r7, #8
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	2000f50c 	.word	0x2000f50c
 800bc50:	2000f514 	.word	0x2000f514

0800bc54 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800bc5c:	f7ff ffd4 	bl	800bc08 <pbuf_free_ooseq>
}
 800bc60:	bf00      	nop
 800bc62:	3708      	adds	r7, #8
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800bc6e:	f00c f80f 	bl	8017c90 <sys_arch_protect>
 800bc72:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800bc74:	4b0f      	ldr	r3, [pc, #60]	; (800bcb4 <pbuf_pool_is_empty+0x4c>)
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800bc7a:	4b0e      	ldr	r3, [pc, #56]	; (800bcb4 <pbuf_pool_is_empty+0x4c>)
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f00c f813 	bl	8017cac <sys_arch_unprotect>

  if (!queued) {
 800bc86:	78fb      	ldrb	r3, [r7, #3]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d10f      	bne.n	800bcac <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800bc8c:	2100      	movs	r1, #0
 800bc8e:	480a      	ldr	r0, [pc, #40]	; (800bcb8 <pbuf_pool_is_empty+0x50>)
 800bc90:	f7fe f87a 	bl	8009d88 <tcpip_try_callback>
 800bc94:	4603      	mov	r3, r0
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d008      	beq.n	800bcac <pbuf_pool_is_empty+0x44>
 800bc9a:	f00b fff9 	bl	8017c90 <sys_arch_protect>
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	4b04      	ldr	r3, [pc, #16]	; (800bcb4 <pbuf_pool_is_empty+0x4c>)
 800bca2:	2200      	movs	r2, #0
 800bca4:	701a      	strb	r2, [r3, #0]
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f00c f800 	bl	8017cac <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800bcac:	bf00      	nop
 800bcae:	3708      	adds	r7, #8
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	2000f50c 	.word	0x2000f50c
 800bcb8:	0800bc55 	.word	0x0800bc55

0800bcbc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b085      	sub	sp, #20
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	4611      	mov	r1, r2
 800bcc8:	461a      	mov	r2, r3
 800bcca:	460b      	mov	r3, r1
 800bccc:	80fb      	strh	r3, [r7, #6]
 800bcce:	4613      	mov	r3, r2
 800bcd0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	68ba      	ldr	r2, [r7, #8]
 800bcdc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	88fa      	ldrh	r2, [r7, #6]
 800bce2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	88ba      	ldrh	r2, [r7, #4]
 800bce8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bcea:	8b3b      	ldrh	r3, [r7, #24]
 800bcec:	b2da      	uxtb	r2, r3
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	7f3a      	ldrb	r2, [r7, #28]
 800bcf6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2200      	movs	r2, #0
 800bd02:	73da      	strb	r2, [r3, #15]
}
 800bd04:	bf00      	nop
 800bd06:	3714      	adds	r7, #20
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b08c      	sub	sp, #48	; 0x30
 800bd14:	af02      	add	r7, sp, #8
 800bd16:	4603      	mov	r3, r0
 800bd18:	71fb      	strb	r3, [r7, #7]
 800bd1a:	460b      	mov	r3, r1
 800bd1c:	80bb      	strh	r3, [r7, #4]
 800bd1e:	4613      	mov	r3, r2
 800bd20:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800bd22:	79fb      	ldrb	r3, [r7, #7]
 800bd24:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800bd26:	887b      	ldrh	r3, [r7, #2]
 800bd28:	2b41      	cmp	r3, #65	; 0x41
 800bd2a:	d00b      	beq.n	800bd44 <pbuf_alloc+0x34>
 800bd2c:	2b41      	cmp	r3, #65	; 0x41
 800bd2e:	dc02      	bgt.n	800bd36 <pbuf_alloc+0x26>
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	d007      	beq.n	800bd44 <pbuf_alloc+0x34>
 800bd34:	e0c2      	b.n	800bebc <pbuf_alloc+0x1ac>
 800bd36:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bd3a:	d00b      	beq.n	800bd54 <pbuf_alloc+0x44>
 800bd3c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bd40:	d070      	beq.n	800be24 <pbuf_alloc+0x114>
 800bd42:	e0bb      	b.n	800bebc <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800bd44:	887a      	ldrh	r2, [r7, #2]
 800bd46:	88bb      	ldrh	r3, [r7, #4]
 800bd48:	4619      	mov	r1, r3
 800bd4a:	2000      	movs	r0, #0
 800bd4c:	f000 f8d2 	bl	800bef4 <pbuf_alloc_reference>
 800bd50:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800bd52:	e0bd      	b.n	800bed0 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800bd54:	2300      	movs	r3, #0
 800bd56:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bd5c:	88bb      	ldrh	r3, [r7, #4]
 800bd5e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bd60:	200c      	movs	r0, #12
 800bd62:	f7ff fbb7 	bl	800b4d4 <memp_malloc>
 800bd66:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d109      	bne.n	800bd82 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800bd6e:	f7ff ff7b 	bl	800bc68 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800bd72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d002      	beq.n	800bd7e <pbuf_alloc+0x6e>
            pbuf_free(p);
 800bd78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd7a:	f000 faa9 	bl	800c2d0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	e0a7      	b.n	800bed2 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800bd82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd84:	3303      	adds	r3, #3
 800bd86:	b29b      	uxth	r3, r3
 800bd88:	f023 0303 	bic.w	r3, r3, #3
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	8b7a      	ldrh	r2, [r7, #26]
 800bd96:	4293      	cmp	r3, r2
 800bd98:	bf28      	it	cs
 800bd9a:	4613      	movcs	r3, r2
 800bd9c:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800bd9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bda0:	3310      	adds	r3, #16
 800bda2:	693a      	ldr	r2, [r7, #16]
 800bda4:	4413      	add	r3, r2
 800bda6:	3303      	adds	r3, #3
 800bda8:	f023 0303 	bic.w	r3, r3, #3
 800bdac:	4618      	mov	r0, r3
 800bdae:	89f9      	ldrh	r1, [r7, #14]
 800bdb0:	8b7a      	ldrh	r2, [r7, #26]
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	9301      	str	r3, [sp, #4]
 800bdb6:	887b      	ldrh	r3, [r7, #2]
 800bdb8:	9300      	str	r3, [sp, #0]
 800bdba:	460b      	mov	r3, r1
 800bdbc:	4601      	mov	r1, r0
 800bdbe:	6938      	ldr	r0, [r7, #16]
 800bdc0:	f7ff ff7c 	bl	800bcbc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	f003 0303 	and.w	r3, r3, #3
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d006      	beq.n	800bdde <pbuf_alloc+0xce>
 800bdd0:	4b42      	ldr	r3, [pc, #264]	; (800bedc <pbuf_alloc+0x1cc>)
 800bdd2:	f240 1201 	movw	r2, #257	; 0x101
 800bdd6:	4942      	ldr	r1, [pc, #264]	; (800bee0 <pbuf_alloc+0x1d0>)
 800bdd8:	4842      	ldr	r0, [pc, #264]	; (800bee4 <pbuf_alloc+0x1d4>)
 800bdda:	f00b fff7 	bl	8017dcc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bdde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bde0:	3303      	adds	r3, #3
 800bde2:	f023 0303 	bic.w	r3, r3, #3
 800bde6:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bdea:	d106      	bne.n	800bdfa <pbuf_alloc+0xea>
 800bdec:	4b3b      	ldr	r3, [pc, #236]	; (800bedc <pbuf_alloc+0x1cc>)
 800bdee:	f240 1203 	movw	r2, #259	; 0x103
 800bdf2:	493d      	ldr	r1, [pc, #244]	; (800bee8 <pbuf_alloc+0x1d8>)
 800bdf4:	483b      	ldr	r0, [pc, #236]	; (800bee4 <pbuf_alloc+0x1d4>)
 800bdf6:	f00b ffe9 	bl	8017dcc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800bdfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d102      	bne.n	800be06 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	627b      	str	r3, [r7, #36]	; 0x24
 800be04:	e002      	b.n	800be0c <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800be06:	69fb      	ldr	r3, [r7, #28]
 800be08:	693a      	ldr	r2, [r7, #16]
 800be0a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800be10:	8b7a      	ldrh	r2, [r7, #26]
 800be12:	89fb      	ldrh	r3, [r7, #14]
 800be14:	1ad3      	subs	r3, r2, r3
 800be16:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800be18:	2300      	movs	r3, #0
 800be1a:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800be1c:	8b7b      	ldrh	r3, [r7, #26]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d19e      	bne.n	800bd60 <pbuf_alloc+0x50>
      break;
 800be22:	e055      	b.n	800bed0 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800be24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be26:	3303      	adds	r3, #3
 800be28:	b29b      	uxth	r3, r3
 800be2a:	f023 0303 	bic.w	r3, r3, #3
 800be2e:	b29a      	uxth	r2, r3
 800be30:	88bb      	ldrh	r3, [r7, #4]
 800be32:	3303      	adds	r3, #3
 800be34:	b29b      	uxth	r3, r3
 800be36:	f023 0303 	bic.w	r3, r3, #3
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	4413      	add	r3, r2
 800be3e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800be40:	8b3b      	ldrh	r3, [r7, #24]
 800be42:	3310      	adds	r3, #16
 800be44:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800be46:	8b3a      	ldrh	r2, [r7, #24]
 800be48:	88bb      	ldrh	r3, [r7, #4]
 800be4a:	3303      	adds	r3, #3
 800be4c:	f023 0303 	bic.w	r3, r3, #3
 800be50:	429a      	cmp	r2, r3
 800be52:	d306      	bcc.n	800be62 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800be54:	8afa      	ldrh	r2, [r7, #22]
 800be56:	88bb      	ldrh	r3, [r7, #4]
 800be58:	3303      	adds	r3, #3
 800be5a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800be5e:	429a      	cmp	r2, r3
 800be60:	d201      	bcs.n	800be66 <pbuf_alloc+0x156>
        return NULL;
 800be62:	2300      	movs	r3, #0
 800be64:	e035      	b.n	800bed2 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800be66:	8afb      	ldrh	r3, [r7, #22]
 800be68:	4618      	mov	r0, r3
 800be6a:	f7ff f9b1 	bl	800b1d0 <mem_malloc>
 800be6e:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800be70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be72:	2b00      	cmp	r3, #0
 800be74:	d101      	bne.n	800be7a <pbuf_alloc+0x16a>
        return NULL;
 800be76:	2300      	movs	r3, #0
 800be78:	e02b      	b.n	800bed2 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800be7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be7c:	3310      	adds	r3, #16
 800be7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be80:	4413      	add	r3, r2
 800be82:	3303      	adds	r3, #3
 800be84:	f023 0303 	bic.w	r3, r3, #3
 800be88:	4618      	mov	r0, r3
 800be8a:	88b9      	ldrh	r1, [r7, #4]
 800be8c:	88ba      	ldrh	r2, [r7, #4]
 800be8e:	2300      	movs	r3, #0
 800be90:	9301      	str	r3, [sp, #4]
 800be92:	887b      	ldrh	r3, [r7, #2]
 800be94:	9300      	str	r3, [sp, #0]
 800be96:	460b      	mov	r3, r1
 800be98:	4601      	mov	r1, r0
 800be9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be9c:	f7ff ff0e 	bl	800bcbc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea2:	685b      	ldr	r3, [r3, #4]
 800bea4:	f003 0303 	and.w	r3, r3, #3
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d010      	beq.n	800bece <pbuf_alloc+0x1be>
 800beac:	4b0b      	ldr	r3, [pc, #44]	; (800bedc <pbuf_alloc+0x1cc>)
 800beae:	f240 1223 	movw	r2, #291	; 0x123
 800beb2:	490e      	ldr	r1, [pc, #56]	; (800beec <pbuf_alloc+0x1dc>)
 800beb4:	480b      	ldr	r0, [pc, #44]	; (800bee4 <pbuf_alloc+0x1d4>)
 800beb6:	f00b ff89 	bl	8017dcc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800beba:	e008      	b.n	800bece <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bebc:	4b07      	ldr	r3, [pc, #28]	; (800bedc <pbuf_alloc+0x1cc>)
 800bebe:	f240 1227 	movw	r2, #295	; 0x127
 800bec2:	490b      	ldr	r1, [pc, #44]	; (800bef0 <pbuf_alloc+0x1e0>)
 800bec4:	4807      	ldr	r0, [pc, #28]	; (800bee4 <pbuf_alloc+0x1d4>)
 800bec6:	f00b ff81 	bl	8017dcc <iprintf>
      return NULL;
 800beca:	2300      	movs	r3, #0
 800becc:	e001      	b.n	800bed2 <pbuf_alloc+0x1c2>
      break;
 800bece:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3728      	adds	r7, #40	; 0x28
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	0801a56c 	.word	0x0801a56c
 800bee0:	0801a59c 	.word	0x0801a59c
 800bee4:	0801a5cc 	.word	0x0801a5cc
 800bee8:	0801a5f4 	.word	0x0801a5f4
 800beec:	0801a628 	.word	0x0801a628
 800bef0:	0801a654 	.word	0x0801a654

0800bef4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b086      	sub	sp, #24
 800bef8:	af02      	add	r7, sp, #8
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	460b      	mov	r3, r1
 800befe:	807b      	strh	r3, [r7, #2]
 800bf00:	4613      	mov	r3, r2
 800bf02:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bf04:	883b      	ldrh	r3, [r7, #0]
 800bf06:	2b41      	cmp	r3, #65	; 0x41
 800bf08:	d009      	beq.n	800bf1e <pbuf_alloc_reference+0x2a>
 800bf0a:	883b      	ldrh	r3, [r7, #0]
 800bf0c:	2b01      	cmp	r3, #1
 800bf0e:	d006      	beq.n	800bf1e <pbuf_alloc_reference+0x2a>
 800bf10:	4b0f      	ldr	r3, [pc, #60]	; (800bf50 <pbuf_alloc_reference+0x5c>)
 800bf12:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800bf16:	490f      	ldr	r1, [pc, #60]	; (800bf54 <pbuf_alloc_reference+0x60>)
 800bf18:	480f      	ldr	r0, [pc, #60]	; (800bf58 <pbuf_alloc_reference+0x64>)
 800bf1a:	f00b ff57 	bl	8017dcc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800bf1e:	200b      	movs	r0, #11
 800bf20:	f7ff fad8 	bl	800b4d4 <memp_malloc>
 800bf24:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d101      	bne.n	800bf30 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	e00b      	b.n	800bf48 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800bf30:	8879      	ldrh	r1, [r7, #2]
 800bf32:	887a      	ldrh	r2, [r7, #2]
 800bf34:	2300      	movs	r3, #0
 800bf36:	9301      	str	r3, [sp, #4]
 800bf38:	883b      	ldrh	r3, [r7, #0]
 800bf3a:	9300      	str	r3, [sp, #0]
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	6879      	ldr	r1, [r7, #4]
 800bf40:	68f8      	ldr	r0, [r7, #12]
 800bf42:	f7ff febb 	bl	800bcbc <pbuf_init_alloced_pbuf>
  return p;
 800bf46:	68fb      	ldr	r3, [r7, #12]
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3710      	adds	r7, #16
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	0801a56c 	.word	0x0801a56c
 800bf54:	0801a670 	.word	0x0801a670
 800bf58:	0801a5cc 	.word	0x0801a5cc

0800bf5c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b088      	sub	sp, #32
 800bf60:	af02      	add	r7, sp, #8
 800bf62:	607b      	str	r3, [r7, #4]
 800bf64:	4603      	mov	r3, r0
 800bf66:	73fb      	strb	r3, [r7, #15]
 800bf68:	460b      	mov	r3, r1
 800bf6a:	81bb      	strh	r3, [r7, #12]
 800bf6c:	4613      	mov	r3, r2
 800bf6e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800bf70:	7bfb      	ldrb	r3, [r7, #15]
 800bf72:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bf74:	8a7b      	ldrh	r3, [r7, #18]
 800bf76:	3303      	adds	r3, #3
 800bf78:	f023 0203 	bic.w	r2, r3, #3
 800bf7c:	89bb      	ldrh	r3, [r7, #12]
 800bf7e:	441a      	add	r2, r3
 800bf80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d901      	bls.n	800bf8a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800bf86:	2300      	movs	r3, #0
 800bf88:	e018      	b.n	800bfbc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800bf8a:	6a3b      	ldr	r3, [r7, #32]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d007      	beq.n	800bfa0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bf90:	8a7b      	ldrh	r3, [r7, #18]
 800bf92:	3303      	adds	r3, #3
 800bf94:	f023 0303 	bic.w	r3, r3, #3
 800bf98:	6a3a      	ldr	r2, [r7, #32]
 800bf9a:	4413      	add	r3, r2
 800bf9c:	617b      	str	r3, [r7, #20]
 800bf9e:	e001      	b.n	800bfa4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	89b9      	ldrh	r1, [r7, #12]
 800bfa8:	89ba      	ldrh	r2, [r7, #12]
 800bfaa:	2302      	movs	r3, #2
 800bfac:	9301      	str	r3, [sp, #4]
 800bfae:	897b      	ldrh	r3, [r7, #10]
 800bfb0:	9300      	str	r3, [sp, #0]
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	6979      	ldr	r1, [r7, #20]
 800bfb6:	f7ff fe81 	bl	800bcbc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800bfba:	687b      	ldr	r3, [r7, #4]
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3718      	adds	r7, #24
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	460b      	mov	r3, r1
 800bfce:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d106      	bne.n	800bfe4 <pbuf_realloc+0x20>
 800bfd6:	4b3a      	ldr	r3, [pc, #232]	; (800c0c0 <pbuf_realloc+0xfc>)
 800bfd8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800bfdc:	4939      	ldr	r1, [pc, #228]	; (800c0c4 <pbuf_realloc+0x100>)
 800bfde:	483a      	ldr	r0, [pc, #232]	; (800c0c8 <pbuf_realloc+0x104>)
 800bfe0:	f00b fef4 	bl	8017dcc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	891b      	ldrh	r3, [r3, #8]
 800bfe8:	887a      	ldrh	r2, [r7, #2]
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d264      	bcs.n	800c0b8 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	891a      	ldrh	r2, [r3, #8]
 800bff2:	887b      	ldrh	r3, [r7, #2]
 800bff4:	1ad3      	subs	r3, r2, r3
 800bff6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800bff8:	887b      	ldrh	r3, [r7, #2]
 800bffa:	817b      	strh	r3, [r7, #10]
  q = p;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c000:	e018      	b.n	800c034 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	895b      	ldrh	r3, [r3, #10]
 800c006:	897a      	ldrh	r2, [r7, #10]
 800c008:	1ad3      	subs	r3, r2, r3
 800c00a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	891a      	ldrh	r2, [r3, #8]
 800c010:	893b      	ldrh	r3, [r7, #8]
 800c012:	1ad3      	subs	r3, r2, r3
 800c014:	b29a      	uxth	r2, r3
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d106      	bne.n	800c034 <pbuf_realloc+0x70>
 800c026:	4b26      	ldr	r3, [pc, #152]	; (800c0c0 <pbuf_realloc+0xfc>)
 800c028:	f240 12af 	movw	r2, #431	; 0x1af
 800c02c:	4927      	ldr	r1, [pc, #156]	; (800c0cc <pbuf_realloc+0x108>)
 800c02e:	4826      	ldr	r0, [pc, #152]	; (800c0c8 <pbuf_realloc+0x104>)
 800c030:	f00b fecc 	bl	8017dcc <iprintf>
  while (rem_len > q->len) {
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	895b      	ldrh	r3, [r3, #10]
 800c038:	897a      	ldrh	r2, [r7, #10]
 800c03a:	429a      	cmp	r2, r3
 800c03c:	d8e1      	bhi.n	800c002 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	7b1b      	ldrb	r3, [r3, #12]
 800c042:	f003 030f 	and.w	r3, r3, #15
 800c046:	2b00      	cmp	r3, #0
 800c048:	d122      	bne.n	800c090 <pbuf_realloc+0xcc>
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	895b      	ldrh	r3, [r3, #10]
 800c04e:	897a      	ldrh	r2, [r7, #10]
 800c050:	429a      	cmp	r2, r3
 800c052:	d01d      	beq.n	800c090 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	7b5b      	ldrb	r3, [r3, #13]
 800c058:	f003 0302 	and.w	r3, r3, #2
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d117      	bne.n	800c090 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	461a      	mov	r2, r3
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	1ad3      	subs	r3, r2, r3
 800c06a:	b29a      	uxth	r2, r3
 800c06c:	897b      	ldrh	r3, [r7, #10]
 800c06e:	4413      	add	r3, r2
 800c070:	b29b      	uxth	r3, r3
 800c072:	4619      	mov	r1, r3
 800c074:	68f8      	ldr	r0, [r7, #12]
 800c076:	f7fe ffa1 	bl	800afbc <mem_trim>
 800c07a:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d106      	bne.n	800c090 <pbuf_realloc+0xcc>
 800c082:	4b0f      	ldr	r3, [pc, #60]	; (800c0c0 <pbuf_realloc+0xfc>)
 800c084:	f240 12bd 	movw	r2, #445	; 0x1bd
 800c088:	4911      	ldr	r1, [pc, #68]	; (800c0d0 <pbuf_realloc+0x10c>)
 800c08a:	480f      	ldr	r0, [pc, #60]	; (800c0c8 <pbuf_realloc+0x104>)
 800c08c:	f00b fe9e 	bl	8017dcc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	897a      	ldrh	r2, [r7, #10]
 800c094:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	895a      	ldrh	r2, [r3, #10]
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d004      	beq.n	800c0b0 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f000 f910 	bl	800c2d0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	601a      	str	r2, [r3, #0]
 800c0b6:	e000      	b.n	800c0ba <pbuf_realloc+0xf6>
    return;
 800c0b8:	bf00      	nop

}
 800c0ba:	3710      	adds	r7, #16
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}
 800c0c0:	0801a56c 	.word	0x0801a56c
 800c0c4:	0801a684 	.word	0x0801a684
 800c0c8:	0801a5cc 	.word	0x0801a5cc
 800c0cc:	0801a69c 	.word	0x0801a69c
 800c0d0:	0801a6b4 	.word	0x0801a6b4

0800c0d4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b086      	sub	sp, #24
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	60b9      	str	r1, [r7, #8]
 800c0de:	4613      	mov	r3, r2
 800c0e0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d106      	bne.n	800c0f6 <pbuf_add_header_impl+0x22>
 800c0e8:	4b2b      	ldr	r3, [pc, #172]	; (800c198 <pbuf_add_header_impl+0xc4>)
 800c0ea:	f240 12df 	movw	r2, #479	; 0x1df
 800c0ee:	492b      	ldr	r1, [pc, #172]	; (800c19c <pbuf_add_header_impl+0xc8>)
 800c0f0:	482b      	ldr	r0, [pc, #172]	; (800c1a0 <pbuf_add_header_impl+0xcc>)
 800c0f2:	f00b fe6b 	bl	8017dcc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d003      	beq.n	800c104 <pbuf_add_header_impl+0x30>
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c102:	d301      	bcc.n	800c108 <pbuf_add_header_impl+0x34>
    return 1;
 800c104:	2301      	movs	r3, #1
 800c106:	e043      	b.n	800c190 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d101      	bne.n	800c112 <pbuf_add_header_impl+0x3e>
    return 0;
 800c10e:	2300      	movs	r3, #0
 800c110:	e03e      	b.n	800c190 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	891a      	ldrh	r2, [r3, #8]
 800c11a:	8a7b      	ldrh	r3, [r7, #18]
 800c11c:	4413      	add	r3, r2
 800c11e:	b29b      	uxth	r3, r3
 800c120:	8a7a      	ldrh	r2, [r7, #18]
 800c122:	429a      	cmp	r2, r3
 800c124:	d901      	bls.n	800c12a <pbuf_add_header_impl+0x56>
    return 1;
 800c126:	2301      	movs	r3, #1
 800c128:	e032      	b.n	800c190 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	7b1b      	ldrb	r3, [r3, #12]
 800c12e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c130:	8a3b      	ldrh	r3, [r7, #16]
 800c132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c136:	2b00      	cmp	r3, #0
 800c138:	d00c      	beq.n	800c154 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	685a      	ldr	r2, [r3, #4]
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	425b      	negs	r3, r3
 800c142:	4413      	add	r3, r2
 800c144:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	3310      	adds	r3, #16
 800c14a:	697a      	ldr	r2, [r7, #20]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d20d      	bcs.n	800c16c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c150:	2301      	movs	r3, #1
 800c152:	e01d      	b.n	800c190 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c154:	79fb      	ldrb	r3, [r7, #7]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d006      	beq.n	800c168 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	685a      	ldr	r2, [r3, #4]
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	425b      	negs	r3, r3
 800c162:	4413      	add	r3, r2
 800c164:	617b      	str	r3, [r7, #20]
 800c166:	e001      	b.n	800c16c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c168:	2301      	movs	r3, #1
 800c16a:	e011      	b.n	800c190 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	697a      	ldr	r2, [r7, #20]
 800c170:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	895a      	ldrh	r2, [r3, #10]
 800c176:	8a7b      	ldrh	r3, [r7, #18]
 800c178:	4413      	add	r3, r2
 800c17a:	b29a      	uxth	r2, r3
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	891a      	ldrh	r2, [r3, #8]
 800c184:	8a7b      	ldrh	r3, [r7, #18]
 800c186:	4413      	add	r3, r2
 800c188:	b29a      	uxth	r2, r3
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	811a      	strh	r2, [r3, #8]


  return 0;
 800c18e:	2300      	movs	r3, #0
}
 800c190:	4618      	mov	r0, r3
 800c192:	3718      	adds	r7, #24
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}
 800c198:	0801a56c 	.word	0x0801a56c
 800c19c:	0801a6d0 	.word	0x0801a6d0
 800c1a0:	0801a5cc 	.word	0x0801a5cc

0800c1a4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	6839      	ldr	r1, [r7, #0]
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f7ff ff8e 	bl	800c0d4 <pbuf_add_header_impl>
 800c1b8:	4603      	mov	r3, r0
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3708      	adds	r7, #8
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
	...

0800c1c4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d106      	bne.n	800c1e2 <pbuf_remove_header+0x1e>
 800c1d4:	4b20      	ldr	r3, [pc, #128]	; (800c258 <pbuf_remove_header+0x94>)
 800c1d6:	f240 224b 	movw	r2, #587	; 0x24b
 800c1da:	4920      	ldr	r1, [pc, #128]	; (800c25c <pbuf_remove_header+0x98>)
 800c1dc:	4820      	ldr	r0, [pc, #128]	; (800c260 <pbuf_remove_header+0x9c>)
 800c1de:	f00b fdf5 	bl	8017dcc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d003      	beq.n	800c1f0 <pbuf_remove_header+0x2c>
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1ee:	d301      	bcc.n	800c1f4 <pbuf_remove_header+0x30>
    return 1;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	e02c      	b.n	800c24e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d101      	bne.n	800c1fe <pbuf_remove_header+0x3a>
    return 0;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	e027      	b.n	800c24e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	895b      	ldrh	r3, [r3, #10]
 800c206:	89fa      	ldrh	r2, [r7, #14]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d908      	bls.n	800c21e <pbuf_remove_header+0x5a>
 800c20c:	4b12      	ldr	r3, [pc, #72]	; (800c258 <pbuf_remove_header+0x94>)
 800c20e:	f240 2255 	movw	r2, #597	; 0x255
 800c212:	4914      	ldr	r1, [pc, #80]	; (800c264 <pbuf_remove_header+0xa0>)
 800c214:	4812      	ldr	r0, [pc, #72]	; (800c260 <pbuf_remove_header+0x9c>)
 800c216:	f00b fdd9 	bl	8017dcc <iprintf>
 800c21a:	2301      	movs	r3, #1
 800c21c:	e017      	b.n	800c24e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	685a      	ldr	r2, [r3, #4]
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	441a      	add	r2, r3
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	895a      	ldrh	r2, [r3, #10]
 800c234:	89fb      	ldrh	r3, [r7, #14]
 800c236:	1ad3      	subs	r3, r2, r3
 800c238:	b29a      	uxth	r2, r3
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	891a      	ldrh	r2, [r3, #8]
 800c242:	89fb      	ldrh	r3, [r7, #14]
 800c244:	1ad3      	subs	r3, r2, r3
 800c246:	b29a      	uxth	r2, r3
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c24c:	2300      	movs	r3, #0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3710      	adds	r7, #16
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	0801a56c 	.word	0x0801a56c
 800c25c:	0801a6d0 	.word	0x0801a6d0
 800c260:	0801a5cc 	.word	0x0801a5cc
 800c264:	0801a6dc 	.word	0x0801a6dc

0800c268 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	460b      	mov	r3, r1
 800c272:	807b      	strh	r3, [r7, #2]
 800c274:	4613      	mov	r3, r2
 800c276:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c278:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	da08      	bge.n	800c292 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c280:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c284:	425b      	negs	r3, r3
 800c286:	4619      	mov	r1, r3
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f7ff ff9b 	bl	800c1c4 <pbuf_remove_header>
 800c28e:	4603      	mov	r3, r0
 800c290:	e007      	b.n	800c2a2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c292:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c296:	787a      	ldrb	r2, [r7, #1]
 800c298:	4619      	mov	r1, r3
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f7ff ff1a 	bl	800c0d4 <pbuf_add_header_impl>
 800c2a0:	4603      	mov	r3, r0
  }
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3708      	adds	r7, #8
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}

0800c2aa <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c2aa:	b580      	push	{r7, lr}
 800c2ac:	b082      	sub	sp, #8
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	6078      	str	r0, [r7, #4]
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c2b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	4619      	mov	r1, r3
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f7ff ffd2 	bl	800c268 <pbuf_header_impl>
 800c2c4:	4603      	mov	r3, r0
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3708      	adds	r7, #8
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
	...

0800c2d0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b088      	sub	sp, #32
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d10b      	bne.n	800c2f6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d106      	bne.n	800c2f2 <pbuf_free+0x22>
 800c2e4:	4b3b      	ldr	r3, [pc, #236]	; (800c3d4 <pbuf_free+0x104>)
 800c2e6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c2ea:	493b      	ldr	r1, [pc, #236]	; (800c3d8 <pbuf_free+0x108>)
 800c2ec:	483b      	ldr	r0, [pc, #236]	; (800c3dc <pbuf_free+0x10c>)
 800c2ee:	f00b fd6d 	bl	8017dcc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	e069      	b.n	800c3ca <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c2fa:	e062      	b.n	800c3c2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c2fc:	f00b fcc8 	bl	8017c90 <sys_arch_protect>
 800c300:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	7b9b      	ldrb	r3, [r3, #14]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d106      	bne.n	800c318 <pbuf_free+0x48>
 800c30a:	4b32      	ldr	r3, [pc, #200]	; (800c3d4 <pbuf_free+0x104>)
 800c30c:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c310:	4933      	ldr	r1, [pc, #204]	; (800c3e0 <pbuf_free+0x110>)
 800c312:	4832      	ldr	r0, [pc, #200]	; (800c3dc <pbuf_free+0x10c>)
 800c314:	f00b fd5a 	bl	8017dcc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	7b9b      	ldrb	r3, [r3, #14]
 800c31c:	3b01      	subs	r3, #1
 800c31e:	b2da      	uxtb	r2, r3
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	739a      	strb	r2, [r3, #14]
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	7b9b      	ldrb	r3, [r3, #14]
 800c328:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c32a:	69b8      	ldr	r0, [r7, #24]
 800c32c:	f00b fcbe 	bl	8017cac <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c330:	7dfb      	ldrb	r3, [r7, #23]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d143      	bne.n	800c3be <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	7b1b      	ldrb	r3, [r3, #12]
 800c340:	f003 030f 	and.w	r3, r3, #15
 800c344:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	7b5b      	ldrb	r3, [r3, #13]
 800c34a:	f003 0302 	and.w	r3, r3, #2
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d011      	beq.n	800c376 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	691b      	ldr	r3, [r3, #16]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d106      	bne.n	800c36c <pbuf_free+0x9c>
 800c35e:	4b1d      	ldr	r3, [pc, #116]	; (800c3d4 <pbuf_free+0x104>)
 800c360:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c364:	491f      	ldr	r1, [pc, #124]	; (800c3e4 <pbuf_free+0x114>)
 800c366:	481d      	ldr	r0, [pc, #116]	; (800c3dc <pbuf_free+0x10c>)
 800c368:	f00b fd30 	bl	8017dcc <iprintf>
        pc->custom_free_function(p);
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	691b      	ldr	r3, [r3, #16]
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	4798      	blx	r3
 800c374:	e01d      	b.n	800c3b2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c376:	7bfb      	ldrb	r3, [r7, #15]
 800c378:	2b02      	cmp	r3, #2
 800c37a:	d104      	bne.n	800c386 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c37c:	6879      	ldr	r1, [r7, #4]
 800c37e:	200c      	movs	r0, #12
 800c380:	f7ff f8fa 	bl	800b578 <memp_free>
 800c384:	e015      	b.n	800c3b2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c386:	7bfb      	ldrb	r3, [r7, #15]
 800c388:	2b01      	cmp	r3, #1
 800c38a:	d104      	bne.n	800c396 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c38c:	6879      	ldr	r1, [r7, #4]
 800c38e:	200b      	movs	r0, #11
 800c390:	f7ff f8f2 	bl	800b578 <memp_free>
 800c394:	e00d      	b.n	800c3b2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c396:	7bfb      	ldrb	r3, [r7, #15]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d103      	bne.n	800c3a4 <pbuf_free+0xd4>
          mem_free(p);
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f7fe fd7d 	bl	800ae9c <mem_free>
 800c3a2:	e006      	b.n	800c3b2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c3a4:	4b0b      	ldr	r3, [pc, #44]	; (800c3d4 <pbuf_free+0x104>)
 800c3a6:	f240 320f 	movw	r2, #783	; 0x30f
 800c3aa:	490f      	ldr	r1, [pc, #60]	; (800c3e8 <pbuf_free+0x118>)
 800c3ac:	480b      	ldr	r0, [pc, #44]	; (800c3dc <pbuf_free+0x10c>)
 800c3ae:	f00b fd0d 	bl	8017dcc <iprintf>
        }
      }
      count++;
 800c3b2:	7ffb      	ldrb	r3, [r7, #31]
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	607b      	str	r3, [r7, #4]
 800c3bc:	e001      	b.n	800c3c2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d199      	bne.n	800c2fc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c3c8:	7ffb      	ldrb	r3, [r7, #31]
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3720      	adds	r7, #32
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	0801a56c 	.word	0x0801a56c
 800c3d8:	0801a6d0 	.word	0x0801a6d0
 800c3dc:	0801a5cc 	.word	0x0801a5cc
 800c3e0:	0801a6fc 	.word	0x0801a6fc
 800c3e4:	0801a714 	.word	0x0801a714
 800c3e8:	0801a738 	.word	0x0801a738

0800c3ec <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b085      	sub	sp, #20
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c3f8:	e005      	b.n	800c406 <pbuf_clen+0x1a>
    ++len;
 800c3fa:	89fb      	ldrh	r3, [r7, #14]
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d1f6      	bne.n	800c3fa <pbuf_clen+0xe>
  }
  return len;
 800c40c:	89fb      	ldrh	r3, [r7, #14]
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3714      	adds	r7, #20
 800c412:	46bd      	mov	sp, r7
 800c414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c418:	4770      	bx	lr
	...

0800c41c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d016      	beq.n	800c458 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c42a:	f00b fc31 	bl	8017c90 <sys_arch_protect>
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	7b9b      	ldrb	r3, [r3, #14]
 800c434:	3301      	adds	r3, #1
 800c436:	b2da      	uxtb	r2, r3
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	739a      	strb	r2, [r3, #14]
 800c43c:	68f8      	ldr	r0, [r7, #12]
 800c43e:	f00b fc35 	bl	8017cac <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	7b9b      	ldrb	r3, [r3, #14]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d106      	bne.n	800c458 <pbuf_ref+0x3c>
 800c44a:	4b05      	ldr	r3, [pc, #20]	; (800c460 <pbuf_ref+0x44>)
 800c44c:	f240 3242 	movw	r2, #834	; 0x342
 800c450:	4904      	ldr	r1, [pc, #16]	; (800c464 <pbuf_ref+0x48>)
 800c452:	4805      	ldr	r0, [pc, #20]	; (800c468 <pbuf_ref+0x4c>)
 800c454:	f00b fcba 	bl	8017dcc <iprintf>
  }
}
 800c458:	bf00      	nop
 800c45a:	3710      	adds	r7, #16
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}
 800c460:	0801a56c 	.word	0x0801a56c
 800c464:	0801a74c 	.word	0x0801a74c
 800c468:	0801a5cc 	.word	0x0801a5cc

0800c46c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d002      	beq.n	800c482 <pbuf_cat+0x16>
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d107      	bne.n	800c492 <pbuf_cat+0x26>
 800c482:	4b20      	ldr	r3, [pc, #128]	; (800c504 <pbuf_cat+0x98>)
 800c484:	f240 325a 	movw	r2, #858	; 0x35a
 800c488:	491f      	ldr	r1, [pc, #124]	; (800c508 <pbuf_cat+0x9c>)
 800c48a:	4820      	ldr	r0, [pc, #128]	; (800c50c <pbuf_cat+0xa0>)
 800c48c:	f00b fc9e 	bl	8017dcc <iprintf>
 800c490:	e034      	b.n	800c4fc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	60fb      	str	r3, [r7, #12]
 800c496:	e00a      	b.n	800c4ae <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	891a      	ldrh	r2, [r3, #8]
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	891b      	ldrh	r3, [r3, #8]
 800c4a0:	4413      	add	r3, r2
 800c4a2:	b29a      	uxth	r2, r3
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	60fb      	str	r3, [r7, #12]
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d1f0      	bne.n	800c498 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	891a      	ldrh	r2, [r3, #8]
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	895b      	ldrh	r3, [r3, #10]
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	d006      	beq.n	800c4d0 <pbuf_cat+0x64>
 800c4c2:	4b10      	ldr	r3, [pc, #64]	; (800c504 <pbuf_cat+0x98>)
 800c4c4:	f240 3262 	movw	r2, #866	; 0x362
 800c4c8:	4911      	ldr	r1, [pc, #68]	; (800c510 <pbuf_cat+0xa4>)
 800c4ca:	4810      	ldr	r0, [pc, #64]	; (800c50c <pbuf_cat+0xa0>)
 800c4cc:	f00b fc7e 	bl	8017dcc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d006      	beq.n	800c4e6 <pbuf_cat+0x7a>
 800c4d8:	4b0a      	ldr	r3, [pc, #40]	; (800c504 <pbuf_cat+0x98>)
 800c4da:	f240 3263 	movw	r2, #867	; 0x363
 800c4de:	490d      	ldr	r1, [pc, #52]	; (800c514 <pbuf_cat+0xa8>)
 800c4e0:	480a      	ldr	r0, [pc, #40]	; (800c50c <pbuf_cat+0xa0>)
 800c4e2:	f00b fc73 	bl	8017dcc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	891a      	ldrh	r2, [r3, #8]
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	891b      	ldrh	r3, [r3, #8]
 800c4ee:	4413      	add	r3, r2
 800c4f0:	b29a      	uxth	r2, r3
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	683a      	ldr	r2, [r7, #0]
 800c4fa:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c4fc:	3710      	adds	r7, #16
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop
 800c504:	0801a56c 	.word	0x0801a56c
 800c508:	0801a760 	.word	0x0801a760
 800c50c:	0801a5cc 	.word	0x0801a5cc
 800c510:	0801a798 	.word	0x0801a798
 800c514:	0801a7c8 	.word	0x0801a7c8

0800c518 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c522:	6839      	ldr	r1, [r7, #0]
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f7ff ffa1 	bl	800c46c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c52a:	6838      	ldr	r0, [r7, #0]
 800c52c:	f7ff ff76 	bl	800c41c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c530:	bf00      	nop
 800c532:	3708      	adds	r7, #8
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b086      	sub	sp, #24
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c542:	2300      	movs	r3, #0
 800c544:	617b      	str	r3, [r7, #20]
 800c546:	2300      	movs	r3, #0
 800c548:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d008      	beq.n	800c562 <pbuf_copy+0x2a>
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d005      	beq.n	800c562 <pbuf_copy+0x2a>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	891a      	ldrh	r2, [r3, #8]
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	891b      	ldrh	r3, [r3, #8]
 800c55e:	429a      	cmp	r2, r3
 800c560:	d209      	bcs.n	800c576 <pbuf_copy+0x3e>
 800c562:	4b57      	ldr	r3, [pc, #348]	; (800c6c0 <pbuf_copy+0x188>)
 800c564:	f240 32ca 	movw	r2, #970	; 0x3ca
 800c568:	4956      	ldr	r1, [pc, #344]	; (800c6c4 <pbuf_copy+0x18c>)
 800c56a:	4857      	ldr	r0, [pc, #348]	; (800c6c8 <pbuf_copy+0x190>)
 800c56c:	f00b fc2e 	bl	8017dcc <iprintf>
 800c570:	f06f 030f 	mvn.w	r3, #15
 800c574:	e09f      	b.n	800c6b6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	895b      	ldrh	r3, [r3, #10]
 800c57a:	461a      	mov	r2, r3
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	1ad2      	subs	r2, r2, r3
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	895b      	ldrh	r3, [r3, #10]
 800c584:	4619      	mov	r1, r3
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	1acb      	subs	r3, r1, r3
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d306      	bcc.n	800c59c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	895b      	ldrh	r3, [r3, #10]
 800c592:	461a      	mov	r2, r3
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	1ad3      	subs	r3, r2, r3
 800c598:	60fb      	str	r3, [r7, #12]
 800c59a:	e005      	b.n	800c5a8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	895b      	ldrh	r3, [r3, #10]
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	1ad3      	subs	r3, r2, r3
 800c5a6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	685a      	ldr	r2, [r3, #4]
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	18d0      	adds	r0, r2, r3
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	685a      	ldr	r2, [r3, #4]
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	68fa      	ldr	r2, [r7, #12]
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	f00b fbd9 	bl	8017d72 <memcpy>
    offset_to += len;
 800c5c0:	697a      	ldr	r2, [r7, #20]
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	4413      	add	r3, r2
 800c5c6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c5c8:	693a      	ldr	r2, [r7, #16]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	4413      	add	r3, r2
 800c5ce:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	895b      	ldrh	r3, [r3, #10]
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d906      	bls.n	800c5ea <pbuf_copy+0xb2>
 800c5dc:	4b38      	ldr	r3, [pc, #224]	; (800c6c0 <pbuf_copy+0x188>)
 800c5de:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c5e2:	493a      	ldr	r1, [pc, #232]	; (800c6cc <pbuf_copy+0x194>)
 800c5e4:	4838      	ldr	r0, [pc, #224]	; (800c6c8 <pbuf_copy+0x190>)
 800c5e6:	f00b fbf1 	bl	8017dcc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	895b      	ldrh	r3, [r3, #10]
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d906      	bls.n	800c604 <pbuf_copy+0xcc>
 800c5f6:	4b32      	ldr	r3, [pc, #200]	; (800c6c0 <pbuf_copy+0x188>)
 800c5f8:	f240 32da 	movw	r2, #986	; 0x3da
 800c5fc:	4934      	ldr	r1, [pc, #208]	; (800c6d0 <pbuf_copy+0x198>)
 800c5fe:	4832      	ldr	r0, [pc, #200]	; (800c6c8 <pbuf_copy+0x190>)
 800c600:	f00b fbe4 	bl	8017dcc <iprintf>
    if (offset_from >= p_from->len) {
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	895b      	ldrh	r3, [r3, #10]
 800c608:	461a      	mov	r2, r3
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d304      	bcc.n	800c61a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c610:	2300      	movs	r3, #0
 800c612:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	895b      	ldrh	r3, [r3, #10]
 800c61e:	461a      	mov	r2, r3
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	4293      	cmp	r3, r2
 800c624:	d114      	bne.n	800c650 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c626:	2300      	movs	r3, #0
 800c628:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d10c      	bne.n	800c650 <pbuf_copy+0x118>
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d009      	beq.n	800c650 <pbuf_copy+0x118>
 800c63c:	4b20      	ldr	r3, [pc, #128]	; (800c6c0 <pbuf_copy+0x188>)
 800c63e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c642:	4924      	ldr	r1, [pc, #144]	; (800c6d4 <pbuf_copy+0x19c>)
 800c644:	4820      	ldr	r0, [pc, #128]	; (800c6c8 <pbuf_copy+0x190>)
 800c646:	f00b fbc1 	bl	8017dcc <iprintf>
 800c64a:	f06f 030f 	mvn.w	r3, #15
 800c64e:	e032      	b.n	800c6b6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d013      	beq.n	800c67e <pbuf_copy+0x146>
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	895a      	ldrh	r2, [r3, #10]
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	891b      	ldrh	r3, [r3, #8]
 800c65e:	429a      	cmp	r2, r3
 800c660:	d10d      	bne.n	800c67e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d009      	beq.n	800c67e <pbuf_copy+0x146>
 800c66a:	4b15      	ldr	r3, [pc, #84]	; (800c6c0 <pbuf_copy+0x188>)
 800c66c:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800c670:	4919      	ldr	r1, [pc, #100]	; (800c6d8 <pbuf_copy+0x1a0>)
 800c672:	4815      	ldr	r0, [pc, #84]	; (800c6c8 <pbuf_copy+0x190>)
 800c674:	f00b fbaa 	bl	8017dcc <iprintf>
 800c678:	f06f 0305 	mvn.w	r3, #5
 800c67c:	e01b      	b.n	800c6b6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d013      	beq.n	800c6ac <pbuf_copy+0x174>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	895a      	ldrh	r2, [r3, #10]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	891b      	ldrh	r3, [r3, #8]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d10d      	bne.n	800c6ac <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d009      	beq.n	800c6ac <pbuf_copy+0x174>
 800c698:	4b09      	ldr	r3, [pc, #36]	; (800c6c0 <pbuf_copy+0x188>)
 800c69a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800c69e:	490e      	ldr	r1, [pc, #56]	; (800c6d8 <pbuf_copy+0x1a0>)
 800c6a0:	4809      	ldr	r0, [pc, #36]	; (800c6c8 <pbuf_copy+0x190>)
 800c6a2:	f00b fb93 	bl	8017dcc <iprintf>
 800c6a6:	f06f 0305 	mvn.w	r3, #5
 800c6aa:	e004      	b.n	800c6b6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	f47f af61 	bne.w	800c576 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c6b4:	2300      	movs	r3, #0
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3718      	adds	r7, #24
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
 800c6be:	bf00      	nop
 800c6c0:	0801a56c 	.word	0x0801a56c
 800c6c4:	0801a814 	.word	0x0801a814
 800c6c8:	0801a5cc 	.word	0x0801a5cc
 800c6cc:	0801a844 	.word	0x0801a844
 800c6d0:	0801a85c 	.word	0x0801a85c
 800c6d4:	0801a878 	.word	0x0801a878
 800c6d8:	0801a888 	.word	0x0801a888

0800c6dc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b088      	sub	sp, #32
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	60f8      	str	r0, [r7, #12]
 800c6e4:	60b9      	str	r1, [r7, #8]
 800c6e6:	4611      	mov	r1, r2
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	460b      	mov	r3, r1
 800c6ec:	80fb      	strh	r3, [r7, #6]
 800c6ee:	4613      	mov	r3, r2
 800c6f0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d108      	bne.n	800c712 <pbuf_copy_partial+0x36>
 800c700:	4b2b      	ldr	r3, [pc, #172]	; (800c7b0 <pbuf_copy_partial+0xd4>)
 800c702:	f240 420a 	movw	r2, #1034	; 0x40a
 800c706:	492b      	ldr	r1, [pc, #172]	; (800c7b4 <pbuf_copy_partial+0xd8>)
 800c708:	482b      	ldr	r0, [pc, #172]	; (800c7b8 <pbuf_copy_partial+0xdc>)
 800c70a:	f00b fb5f 	bl	8017dcc <iprintf>
 800c70e:	2300      	movs	r3, #0
 800c710:	e04a      	b.n	800c7a8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d108      	bne.n	800c72a <pbuf_copy_partial+0x4e>
 800c718:	4b25      	ldr	r3, [pc, #148]	; (800c7b0 <pbuf_copy_partial+0xd4>)
 800c71a:	f240 420b 	movw	r2, #1035	; 0x40b
 800c71e:	4927      	ldr	r1, [pc, #156]	; (800c7bc <pbuf_copy_partial+0xe0>)
 800c720:	4825      	ldr	r0, [pc, #148]	; (800c7b8 <pbuf_copy_partial+0xdc>)
 800c722:	f00b fb53 	bl	8017dcc <iprintf>
 800c726:	2300      	movs	r3, #0
 800c728:	e03e      	b.n	800c7a8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	61fb      	str	r3, [r7, #28]
 800c72e:	e034      	b.n	800c79a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c730:	88bb      	ldrh	r3, [r7, #4]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d00a      	beq.n	800c74c <pbuf_copy_partial+0x70>
 800c736:	69fb      	ldr	r3, [r7, #28]
 800c738:	895b      	ldrh	r3, [r3, #10]
 800c73a:	88ba      	ldrh	r2, [r7, #4]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d305      	bcc.n	800c74c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c740:	69fb      	ldr	r3, [r7, #28]
 800c742:	895b      	ldrh	r3, [r3, #10]
 800c744:	88ba      	ldrh	r2, [r7, #4]
 800c746:	1ad3      	subs	r3, r2, r3
 800c748:	80bb      	strh	r3, [r7, #4]
 800c74a:	e023      	b.n	800c794 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c74c:	69fb      	ldr	r3, [r7, #28]
 800c74e:	895a      	ldrh	r2, [r3, #10]
 800c750:	88bb      	ldrh	r3, [r7, #4]
 800c752:	1ad3      	subs	r3, r2, r3
 800c754:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c756:	8b3a      	ldrh	r2, [r7, #24]
 800c758:	88fb      	ldrh	r3, [r7, #6]
 800c75a:	429a      	cmp	r2, r3
 800c75c:	d901      	bls.n	800c762 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c75e:	88fb      	ldrh	r3, [r7, #6]
 800c760:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c762:	8b7b      	ldrh	r3, [r7, #26]
 800c764:	68ba      	ldr	r2, [r7, #8]
 800c766:	18d0      	adds	r0, r2, r3
 800c768:	69fb      	ldr	r3, [r7, #28]
 800c76a:	685a      	ldr	r2, [r3, #4]
 800c76c:	88bb      	ldrh	r3, [r7, #4]
 800c76e:	4413      	add	r3, r2
 800c770:	8b3a      	ldrh	r2, [r7, #24]
 800c772:	4619      	mov	r1, r3
 800c774:	f00b fafd 	bl	8017d72 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c778:	8afa      	ldrh	r2, [r7, #22]
 800c77a:	8b3b      	ldrh	r3, [r7, #24]
 800c77c:	4413      	add	r3, r2
 800c77e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c780:	8b7a      	ldrh	r2, [r7, #26]
 800c782:	8b3b      	ldrh	r3, [r7, #24]
 800c784:	4413      	add	r3, r2
 800c786:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c788:	88fa      	ldrh	r2, [r7, #6]
 800c78a:	8b3b      	ldrh	r3, [r7, #24]
 800c78c:	1ad3      	subs	r3, r2, r3
 800c78e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c790:	2300      	movs	r3, #0
 800c792:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c794:	69fb      	ldr	r3, [r7, #28]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	61fb      	str	r3, [r7, #28]
 800c79a:	88fb      	ldrh	r3, [r7, #6]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d002      	beq.n	800c7a6 <pbuf_copy_partial+0xca>
 800c7a0:	69fb      	ldr	r3, [r7, #28]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d1c4      	bne.n	800c730 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c7a6:	8afb      	ldrh	r3, [r7, #22]
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3720      	adds	r7, #32
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	0801a56c 	.word	0x0801a56c
 800c7b4:	0801a8b4 	.word	0x0801a8b4
 800c7b8:	0801a5cc 	.word	0x0801a5cc
 800c7bc:	0801a8d4 	.word	0x0801a8d4

0800c7c0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b084      	sub	sp, #16
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	603a      	str	r2, [r7, #0]
 800c7ca:	71fb      	strb	r3, [r7, #7]
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	8919      	ldrh	r1, [r3, #8]
 800c7d4:	88ba      	ldrh	r2, [r7, #4]
 800c7d6:	79fb      	ldrb	r3, [r7, #7]
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f7ff fa99 	bl	800bd10 <pbuf_alloc>
 800c7de:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d101      	bne.n	800c7ea <pbuf_clone+0x2a>
    return NULL;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	e011      	b.n	800c80e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c7ea:	6839      	ldr	r1, [r7, #0]
 800c7ec:	68f8      	ldr	r0, [r7, #12]
 800c7ee:	f7ff fea3 	bl	800c538 <pbuf_copy>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c7f6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d006      	beq.n	800c80c <pbuf_clone+0x4c>
 800c7fe:	4b06      	ldr	r3, [pc, #24]	; (800c818 <pbuf_clone+0x58>)
 800c800:	f240 5224 	movw	r2, #1316	; 0x524
 800c804:	4905      	ldr	r1, [pc, #20]	; (800c81c <pbuf_clone+0x5c>)
 800c806:	4806      	ldr	r0, [pc, #24]	; (800c820 <pbuf_clone+0x60>)
 800c808:	f00b fae0 	bl	8017dcc <iprintf>
  return q;
 800c80c:	68fb      	ldr	r3, [r7, #12]
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3710      	adds	r7, #16
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	0801a56c 	.word	0x0801a56c
 800c81c:	0801a9e0 	.word	0x0801a9e0
 800c820:	0801a5cc 	.word	0x0801a5cc

0800c824 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c828:	f00b fb4c 	bl	8017ec4 <rand>
 800c82c:	4603      	mov	r3, r0
 800c82e:	b29b      	uxth	r3, r3
 800c830:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c834:	b29b      	uxth	r3, r3
 800c836:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c83a:	b29a      	uxth	r2, r3
 800c83c:	4b01      	ldr	r3, [pc, #4]	; (800c844 <tcp_init+0x20>)
 800c83e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c840:	bf00      	nop
 800c842:	bd80      	pop	{r7, pc}
 800c844:	20000010 	.word	0x20000010

0800c848 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	7d1b      	ldrb	r3, [r3, #20]
 800c854:	2b01      	cmp	r3, #1
 800c856:	d105      	bne.n	800c864 <tcp_free+0x1c>
 800c858:	4b06      	ldr	r3, [pc, #24]	; (800c874 <tcp_free+0x2c>)
 800c85a:	22d4      	movs	r2, #212	; 0xd4
 800c85c:	4906      	ldr	r1, [pc, #24]	; (800c878 <tcp_free+0x30>)
 800c85e:	4807      	ldr	r0, [pc, #28]	; (800c87c <tcp_free+0x34>)
 800c860:	f00b fab4 	bl	8017dcc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c864:	6879      	ldr	r1, [r7, #4]
 800c866:	2001      	movs	r0, #1
 800c868:	f7fe fe86 	bl	800b578 <memp_free>
}
 800c86c:	bf00      	nop
 800c86e:	3708      	adds	r7, #8
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}
 800c874:	0801aa6c 	.word	0x0801aa6c
 800c878:	0801aa9c 	.word	0x0801aa9c
 800c87c:	0801aab0 	.word	0x0801aab0

0800c880 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	7d1b      	ldrb	r3, [r3, #20]
 800c88c:	2b01      	cmp	r3, #1
 800c88e:	d105      	bne.n	800c89c <tcp_free_listen+0x1c>
 800c890:	4b06      	ldr	r3, [pc, #24]	; (800c8ac <tcp_free_listen+0x2c>)
 800c892:	22df      	movs	r2, #223	; 0xdf
 800c894:	4906      	ldr	r1, [pc, #24]	; (800c8b0 <tcp_free_listen+0x30>)
 800c896:	4807      	ldr	r0, [pc, #28]	; (800c8b4 <tcp_free_listen+0x34>)
 800c898:	f00b fa98 	bl	8017dcc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c89c:	6879      	ldr	r1, [r7, #4]
 800c89e:	2002      	movs	r0, #2
 800c8a0:	f7fe fe6a 	bl	800b578 <memp_free>
}
 800c8a4:	bf00      	nop
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}
 800c8ac:	0801aa6c 	.word	0x0801aa6c
 800c8b0:	0801aad8 	.word	0x0801aad8
 800c8b4:	0801aab0 	.word	0x0801aab0

0800c8b8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c8bc:	f001 f8ac 	bl	800da18 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c8c0:	4b07      	ldr	r3, [pc, #28]	; (800c8e0 <tcp_tmr+0x28>)
 800c8c2:	781b      	ldrb	r3, [r3, #0]
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	b2da      	uxtb	r2, r3
 800c8c8:	4b05      	ldr	r3, [pc, #20]	; (800c8e0 <tcp_tmr+0x28>)
 800c8ca:	701a      	strb	r2, [r3, #0]
 800c8cc:	4b04      	ldr	r3, [pc, #16]	; (800c8e0 <tcp_tmr+0x28>)
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	f003 0301 	and.w	r3, r3, #1
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d001      	beq.n	800c8dc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c8d8:	f000 fd60 	bl	800d39c <tcp_slowtmr>
  }
}
 800c8dc:	bf00      	nop
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	20008a8d 	.word	0x20008a8d

0800c8e4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d105      	bne.n	800c900 <tcp_remove_listener+0x1c>
 800c8f4:	4b0d      	ldr	r3, [pc, #52]	; (800c92c <tcp_remove_listener+0x48>)
 800c8f6:	22ff      	movs	r2, #255	; 0xff
 800c8f8:	490d      	ldr	r1, [pc, #52]	; (800c930 <tcp_remove_listener+0x4c>)
 800c8fa:	480e      	ldr	r0, [pc, #56]	; (800c934 <tcp_remove_listener+0x50>)
 800c8fc:	f00b fa66 	bl	8017dcc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	60fb      	str	r3, [r7, #12]
 800c904:	e00a      	b.n	800c91c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c90a:	683a      	ldr	r2, [r7, #0]
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d102      	bne.n	800c916 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2200      	movs	r2, #0
 800c914:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	68db      	ldr	r3, [r3, #12]
 800c91a:	60fb      	str	r3, [r7, #12]
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d1f1      	bne.n	800c906 <tcp_remove_listener+0x22>
    }
  }
}
 800c922:	bf00      	nop
 800c924:	3710      	adds	r7, #16
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}
 800c92a:	bf00      	nop
 800c92c:	0801aa6c 	.word	0x0801aa6c
 800c930:	0801aaf4 	.word	0x0801aaf4
 800c934:	0801aab0 	.word	0x0801aab0

0800c938 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b084      	sub	sp, #16
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d106      	bne.n	800c954 <tcp_listen_closed+0x1c>
 800c946:	4b14      	ldr	r3, [pc, #80]	; (800c998 <tcp_listen_closed+0x60>)
 800c948:	f240 1211 	movw	r2, #273	; 0x111
 800c94c:	4913      	ldr	r1, [pc, #76]	; (800c99c <tcp_listen_closed+0x64>)
 800c94e:	4814      	ldr	r0, [pc, #80]	; (800c9a0 <tcp_listen_closed+0x68>)
 800c950:	f00b fa3c 	bl	8017dcc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	7d1b      	ldrb	r3, [r3, #20]
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d006      	beq.n	800c96a <tcp_listen_closed+0x32>
 800c95c:	4b0e      	ldr	r3, [pc, #56]	; (800c998 <tcp_listen_closed+0x60>)
 800c95e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c962:	4910      	ldr	r1, [pc, #64]	; (800c9a4 <tcp_listen_closed+0x6c>)
 800c964:	480e      	ldr	r0, [pc, #56]	; (800c9a0 <tcp_listen_closed+0x68>)
 800c966:	f00b fa31 	bl	8017dcc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c96a:	2301      	movs	r3, #1
 800c96c:	60fb      	str	r3, [r7, #12]
 800c96e:	e00b      	b.n	800c988 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c970:	4a0d      	ldr	r2, [pc, #52]	; (800c9a8 <tcp_listen_closed+0x70>)
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	6879      	ldr	r1, [r7, #4]
 800c97c:	4618      	mov	r0, r3
 800c97e:	f7ff ffb1 	bl	800c8e4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	3301      	adds	r3, #1
 800c986:	60fb      	str	r3, [r7, #12]
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	2b03      	cmp	r3, #3
 800c98c:	d9f0      	bls.n	800c970 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c98e:	bf00      	nop
 800c990:	3710      	adds	r7, #16
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop
 800c998:	0801aa6c 	.word	0x0801aa6c
 800c99c:	0801ab1c 	.word	0x0801ab1c
 800c9a0:	0801aab0 	.word	0x0801aab0
 800c9a4:	0801ab28 	.word	0x0801ab28
 800c9a8:	08026f5c 	.word	0x08026f5c

0800c9ac <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c9ac:	b5b0      	push	{r4, r5, r7, lr}
 800c9ae:	b088      	sub	sp, #32
 800c9b0:	af04      	add	r7, sp, #16
 800c9b2:	6078      	str	r0, [r7, #4]
 800c9b4:	460b      	mov	r3, r1
 800c9b6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d106      	bne.n	800c9cc <tcp_close_shutdown+0x20>
 800c9be:	4b61      	ldr	r3, [pc, #388]	; (800cb44 <tcp_close_shutdown+0x198>)
 800c9c0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c9c4:	4960      	ldr	r1, [pc, #384]	; (800cb48 <tcp_close_shutdown+0x19c>)
 800c9c6:	4861      	ldr	r0, [pc, #388]	; (800cb4c <tcp_close_shutdown+0x1a0>)
 800c9c8:	f00b fa00 	bl	8017dcc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c9cc:	78fb      	ldrb	r3, [r7, #3]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d066      	beq.n	800caa0 <tcp_close_shutdown+0xf4>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	7d1b      	ldrb	r3, [r3, #20]
 800c9d6:	2b04      	cmp	r3, #4
 800c9d8:	d003      	beq.n	800c9e2 <tcp_close_shutdown+0x36>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	7d1b      	ldrb	r3, [r3, #20]
 800c9de:	2b07      	cmp	r3, #7
 800c9e0:	d15e      	bne.n	800caa0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d104      	bne.n	800c9f4 <tcp_close_shutdown+0x48>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9ee:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c9f2:	d055      	beq.n	800caa0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	8b5b      	ldrh	r3, [r3, #26]
 800c9f8:	f003 0310 	and.w	r3, r3, #16
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d106      	bne.n	800ca0e <tcp_close_shutdown+0x62>
 800ca00:	4b50      	ldr	r3, [pc, #320]	; (800cb44 <tcp_close_shutdown+0x198>)
 800ca02:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ca06:	4952      	ldr	r1, [pc, #328]	; (800cb50 <tcp_close_shutdown+0x1a4>)
 800ca08:	4850      	ldr	r0, [pc, #320]	; (800cb4c <tcp_close_shutdown+0x1a0>)
 800ca0a:	f00b f9df 	bl	8017dcc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ca16:	687d      	ldr	r5, [r7, #4]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	3304      	adds	r3, #4
 800ca1c:	687a      	ldr	r2, [r7, #4]
 800ca1e:	8ad2      	ldrh	r2, [r2, #22]
 800ca20:	6879      	ldr	r1, [r7, #4]
 800ca22:	8b09      	ldrh	r1, [r1, #24]
 800ca24:	9102      	str	r1, [sp, #8]
 800ca26:	9201      	str	r2, [sp, #4]
 800ca28:	9300      	str	r3, [sp, #0]
 800ca2a:	462b      	mov	r3, r5
 800ca2c:	4622      	mov	r2, r4
 800ca2e:	4601      	mov	r1, r0
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f005 fde9 	bl	8012608 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f001 fbba 	bl	800e1b0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ca3c:	4b45      	ldr	r3, [pc, #276]	; (800cb54 <tcp_close_shutdown+0x1a8>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	687a      	ldr	r2, [r7, #4]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d105      	bne.n	800ca52 <tcp_close_shutdown+0xa6>
 800ca46:	4b43      	ldr	r3, [pc, #268]	; (800cb54 <tcp_close_shutdown+0x1a8>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	68db      	ldr	r3, [r3, #12]
 800ca4c:	4a41      	ldr	r2, [pc, #260]	; (800cb54 <tcp_close_shutdown+0x1a8>)
 800ca4e:	6013      	str	r3, [r2, #0]
 800ca50:	e013      	b.n	800ca7a <tcp_close_shutdown+0xce>
 800ca52:	4b40      	ldr	r3, [pc, #256]	; (800cb54 <tcp_close_shutdown+0x1a8>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	60fb      	str	r3, [r7, #12]
 800ca58:	e00c      	b.n	800ca74 <tcp_close_shutdown+0xc8>
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	68db      	ldr	r3, [r3, #12]
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d104      	bne.n	800ca6e <tcp_close_shutdown+0xc2>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	68da      	ldr	r2, [r3, #12]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	60da      	str	r2, [r3, #12]
 800ca6c:	e005      	b.n	800ca7a <tcp_close_shutdown+0xce>
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	68db      	ldr	r3, [r3, #12]
 800ca72:	60fb      	str	r3, [r7, #12]
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d1ef      	bne.n	800ca5a <tcp_close_shutdown+0xae>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	60da      	str	r2, [r3, #12]
 800ca80:	4b35      	ldr	r3, [pc, #212]	; (800cb58 <tcp_close_shutdown+0x1ac>)
 800ca82:	2201      	movs	r2, #1
 800ca84:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ca86:	4b35      	ldr	r3, [pc, #212]	; (800cb5c <tcp_close_shutdown+0x1b0>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	687a      	ldr	r2, [r7, #4]
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	d102      	bne.n	800ca96 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800ca90:	f004 f84c 	bl	8010b2c <tcp_trigger_input_pcb_close>
 800ca94:	e002      	b.n	800ca9c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f7ff fed6 	bl	800c848 <tcp_free>
      }
      return ERR_OK;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	e04d      	b.n	800cb3c <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	7d1b      	ldrb	r3, [r3, #20]
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d02d      	beq.n	800cb04 <tcp_close_shutdown+0x158>
 800caa8:	2b02      	cmp	r3, #2
 800caaa:	d036      	beq.n	800cb1a <tcp_close_shutdown+0x16e>
 800caac:	2b00      	cmp	r3, #0
 800caae:	d13f      	bne.n	800cb30 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	8adb      	ldrh	r3, [r3, #22]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d021      	beq.n	800cafc <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cab8:	4b29      	ldr	r3, [pc, #164]	; (800cb60 <tcp_close_shutdown+0x1b4>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d105      	bne.n	800cace <tcp_close_shutdown+0x122>
 800cac2:	4b27      	ldr	r3, [pc, #156]	; (800cb60 <tcp_close_shutdown+0x1b4>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	68db      	ldr	r3, [r3, #12]
 800cac8:	4a25      	ldr	r2, [pc, #148]	; (800cb60 <tcp_close_shutdown+0x1b4>)
 800caca:	6013      	str	r3, [r2, #0]
 800cacc:	e013      	b.n	800caf6 <tcp_close_shutdown+0x14a>
 800cace:	4b24      	ldr	r3, [pc, #144]	; (800cb60 <tcp_close_shutdown+0x1b4>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	60bb      	str	r3, [r7, #8]
 800cad4:	e00c      	b.n	800caf0 <tcp_close_shutdown+0x144>
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	68db      	ldr	r3, [r3, #12]
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	429a      	cmp	r2, r3
 800cade:	d104      	bne.n	800caea <tcp_close_shutdown+0x13e>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	68da      	ldr	r2, [r3, #12]
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	60da      	str	r2, [r3, #12]
 800cae8:	e005      	b.n	800caf6 <tcp_close_shutdown+0x14a>
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	68db      	ldr	r3, [r3, #12]
 800caee:	60bb      	str	r3, [r7, #8]
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d1ef      	bne.n	800cad6 <tcp_close_shutdown+0x12a>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2200      	movs	r2, #0
 800cafa:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f7ff fea3 	bl	800c848 <tcp_free>
      break;
 800cb02:	e01a      	b.n	800cb3a <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f7ff ff17 	bl	800c938 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800cb0a:	6879      	ldr	r1, [r7, #4]
 800cb0c:	4815      	ldr	r0, [pc, #84]	; (800cb64 <tcp_close_shutdown+0x1b8>)
 800cb0e:	f001 fb9f 	bl	800e250 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f7ff feb4 	bl	800c880 <tcp_free_listen>
      break;
 800cb18:	e00f      	b.n	800cb3a <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cb1a:	6879      	ldr	r1, [r7, #4]
 800cb1c:	480d      	ldr	r0, [pc, #52]	; (800cb54 <tcp_close_shutdown+0x1a8>)
 800cb1e:	f001 fb97 	bl	800e250 <tcp_pcb_remove>
 800cb22:	4b0d      	ldr	r3, [pc, #52]	; (800cb58 <tcp_close_shutdown+0x1ac>)
 800cb24:	2201      	movs	r2, #1
 800cb26:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f7ff fe8d 	bl	800c848 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800cb2e:	e004      	b.n	800cb3a <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f000 f819 	bl	800cb68 <tcp_close_shutdown_fin>
 800cb36:	4603      	mov	r3, r0
 800cb38:	e000      	b.n	800cb3c <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800cb3a:	2300      	movs	r3, #0
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3710      	adds	r7, #16
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bdb0      	pop	{r4, r5, r7, pc}
 800cb44:	0801aa6c 	.word	0x0801aa6c
 800cb48:	0801ab40 	.word	0x0801ab40
 800cb4c:	0801aab0 	.word	0x0801aab0
 800cb50:	0801ab60 	.word	0x0801ab60
 800cb54:	2000f514 	.word	0x2000f514
 800cb58:	2000f510 	.word	0x2000f510
 800cb5c:	2000f528 	.word	0x2000f528
 800cb60:	2000f520 	.word	0x2000f520
 800cb64:	2000f51c 	.word	0x2000f51c

0800cb68 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d106      	bne.n	800cb84 <tcp_close_shutdown_fin+0x1c>
 800cb76:	4b2c      	ldr	r3, [pc, #176]	; (800cc28 <tcp_close_shutdown_fin+0xc0>)
 800cb78:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800cb7c:	492b      	ldr	r1, [pc, #172]	; (800cc2c <tcp_close_shutdown_fin+0xc4>)
 800cb7e:	482c      	ldr	r0, [pc, #176]	; (800cc30 <tcp_close_shutdown_fin+0xc8>)
 800cb80:	f00b f924 	bl	8017dcc <iprintf>

  switch (pcb->state) {
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	7d1b      	ldrb	r3, [r3, #20]
 800cb88:	2b04      	cmp	r3, #4
 800cb8a:	d010      	beq.n	800cbae <tcp_close_shutdown_fin+0x46>
 800cb8c:	2b07      	cmp	r3, #7
 800cb8e:	d01b      	beq.n	800cbc8 <tcp_close_shutdown_fin+0x60>
 800cb90:	2b03      	cmp	r3, #3
 800cb92:	d126      	bne.n	800cbe2 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f004 fe35 	bl	8011804 <tcp_send_fin>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cb9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d11f      	bne.n	800cbe6 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2205      	movs	r2, #5
 800cbaa:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cbac:	e01b      	b.n	800cbe6 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f004 fe28 	bl	8011804 <tcp_send_fin>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cbb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d114      	bne.n	800cbea <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2205      	movs	r2, #5
 800cbc4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cbc6:	e010      	b.n	800cbea <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f004 fe1b 	bl	8011804 <tcp_send_fin>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cbd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d109      	bne.n	800cbee <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2209      	movs	r2, #9
 800cbde:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cbe0:	e005      	b.n	800cbee <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	e01c      	b.n	800cc20 <tcp_close_shutdown_fin+0xb8>
      break;
 800cbe6:	bf00      	nop
 800cbe8:	e002      	b.n	800cbf0 <tcp_close_shutdown_fin+0x88>
      break;
 800cbea:	bf00      	nop
 800cbec:	e000      	b.n	800cbf0 <tcp_close_shutdown_fin+0x88>
      break;
 800cbee:	bf00      	nop
  }

  if (err == ERR_OK) {
 800cbf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d103      	bne.n	800cc00 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f004 ff41 	bl	8011a80 <tcp_output>
 800cbfe:	e00d      	b.n	800cc1c <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800cc00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc08:	d108      	bne.n	800cc1c <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	8b5b      	ldrh	r3, [r3, #26]
 800cc0e:	f043 0308 	orr.w	r3, r3, #8
 800cc12:	b29a      	uxth	r2, r3
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	e001      	b.n	800cc20 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800cc1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3710      	adds	r7, #16
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	0801aa6c 	.word	0x0801aa6c
 800cc2c:	0801ab1c 	.word	0x0801ab1c
 800cc30:	0801aab0 	.word	0x0801aab0

0800cc34 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b082      	sub	sp, #8
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d109      	bne.n	800cc56 <tcp_close+0x22>
 800cc42:	4b0f      	ldr	r3, [pc, #60]	; (800cc80 <tcp_close+0x4c>)
 800cc44:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800cc48:	490e      	ldr	r1, [pc, #56]	; (800cc84 <tcp_close+0x50>)
 800cc4a:	480f      	ldr	r0, [pc, #60]	; (800cc88 <tcp_close+0x54>)
 800cc4c:	f00b f8be 	bl	8017dcc <iprintf>
 800cc50:	f06f 030f 	mvn.w	r3, #15
 800cc54:	e00f      	b.n	800cc76 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	7d1b      	ldrb	r3, [r3, #20]
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d006      	beq.n	800cc6c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	8b5b      	ldrh	r3, [r3, #26]
 800cc62:	f043 0310 	orr.w	r3, r3, #16
 800cc66:	b29a      	uxth	r2, r3
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cc6c:	2101      	movs	r1, #1
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f7ff fe9c 	bl	800c9ac <tcp_close_shutdown>
 800cc74:	4603      	mov	r3, r0
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3708      	adds	r7, #8
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	0801aa6c 	.word	0x0801aa6c
 800cc84:	0801ab7c 	.word	0x0801ab7c
 800cc88:	0801aab0 	.word	0x0801aab0

0800cc8c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b084      	sub	sp, #16
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	60f8      	str	r0, [r7, #12]
 800cc94:	60b9      	str	r1, [r7, #8]
 800cc96:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d109      	bne.n	800ccb2 <tcp_shutdown+0x26>
 800cc9e:	4b25      	ldr	r3, [pc, #148]	; (800cd34 <tcp_shutdown+0xa8>)
 800cca0:	f240 2207 	movw	r2, #519	; 0x207
 800cca4:	4924      	ldr	r1, [pc, #144]	; (800cd38 <tcp_shutdown+0xac>)
 800cca6:	4825      	ldr	r0, [pc, #148]	; (800cd3c <tcp_shutdown+0xb0>)
 800cca8:	f00b f890 	bl	8017dcc <iprintf>
 800ccac:	f06f 030f 	mvn.w	r3, #15
 800ccb0:	e03c      	b.n	800cd2c <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	7d1b      	ldrb	r3, [r3, #20]
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d102      	bne.n	800ccc0 <tcp_shutdown+0x34>
    return ERR_CONN;
 800ccba:	f06f 030a 	mvn.w	r3, #10
 800ccbe:	e035      	b.n	800cd2c <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d01b      	beq.n	800ccfe <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	8b5b      	ldrh	r3, [r3, #26]
 800ccca:	f043 0310 	orr.w	r3, r3, #16
 800ccce:	b29a      	uxth	r2, r3
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d005      	beq.n	800cce6 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800ccda:	2101      	movs	r1, #1
 800ccdc:	68f8      	ldr	r0, [r7, #12]
 800ccde:	f7ff fe65 	bl	800c9ac <tcp_close_shutdown>
 800cce2:	4603      	mov	r3, r0
 800cce4:	e022      	b.n	800cd2c <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d007      	beq.n	800ccfe <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7ff faec 	bl	800c2d0 <pbuf_free>
      pcb->refused_data = NULL;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d012      	beq.n	800cd2a <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	7d1b      	ldrb	r3, [r3, #20]
 800cd08:	2b03      	cmp	r3, #3
 800cd0a:	db0b      	blt.n	800cd24 <tcp_shutdown+0x98>
 800cd0c:	2b04      	cmp	r3, #4
 800cd0e:	dd01      	ble.n	800cd14 <tcp_shutdown+0x88>
 800cd10:	2b07      	cmp	r3, #7
 800cd12:	d107      	bne.n	800cd24 <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	b2db      	uxtb	r3, r3
 800cd18:	4619      	mov	r1, r3
 800cd1a:	68f8      	ldr	r0, [r7, #12]
 800cd1c:	f7ff fe46 	bl	800c9ac <tcp_close_shutdown>
 800cd20:	4603      	mov	r3, r0
 800cd22:	e003      	b.n	800cd2c <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800cd24:	f06f 030a 	mvn.w	r3, #10
 800cd28:	e000      	b.n	800cd2c <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 800cd2a:	2300      	movs	r3, #0
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3710      	adds	r7, #16
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}
 800cd34:	0801aa6c 	.word	0x0801aa6c
 800cd38:	0801ab94 	.word	0x0801ab94
 800cd3c:	0801aab0 	.word	0x0801aab0

0800cd40 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b08e      	sub	sp, #56	; 0x38
 800cd44:	af04      	add	r7, sp, #16
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d107      	bne.n	800cd60 <tcp_abandon+0x20>
 800cd50:	4b52      	ldr	r3, [pc, #328]	; (800ce9c <tcp_abandon+0x15c>)
 800cd52:	f240 223d 	movw	r2, #573	; 0x23d
 800cd56:	4952      	ldr	r1, [pc, #328]	; (800cea0 <tcp_abandon+0x160>)
 800cd58:	4852      	ldr	r0, [pc, #328]	; (800cea4 <tcp_abandon+0x164>)
 800cd5a:	f00b f837 	bl	8017dcc <iprintf>
 800cd5e:	e099      	b.n	800ce94 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	7d1b      	ldrb	r3, [r3, #20]
 800cd64:	2b01      	cmp	r3, #1
 800cd66:	d106      	bne.n	800cd76 <tcp_abandon+0x36>
 800cd68:	4b4c      	ldr	r3, [pc, #304]	; (800ce9c <tcp_abandon+0x15c>)
 800cd6a:	f240 2241 	movw	r2, #577	; 0x241
 800cd6e:	494e      	ldr	r1, [pc, #312]	; (800cea8 <tcp_abandon+0x168>)
 800cd70:	484c      	ldr	r0, [pc, #304]	; (800cea4 <tcp_abandon+0x164>)
 800cd72:	f00b f82b 	bl	8017dcc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	7d1b      	ldrb	r3, [r3, #20]
 800cd7a:	2b0a      	cmp	r3, #10
 800cd7c:	d107      	bne.n	800cd8e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cd7e:	6879      	ldr	r1, [r7, #4]
 800cd80:	484a      	ldr	r0, [pc, #296]	; (800ceac <tcp_abandon+0x16c>)
 800cd82:	f001 fa65 	bl	800e250 <tcp_pcb_remove>
    tcp_free(pcb);
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f7ff fd5e 	bl	800c848 <tcp_free>
 800cd8c:	e082      	b.n	800ce94 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800cd92:	2300      	movs	r3, #0
 800cd94:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd9a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cda8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	691b      	ldr	r3, [r3, #16]
 800cdae:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	7d1b      	ldrb	r3, [r3, #20]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d126      	bne.n	800ce06 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	8adb      	ldrh	r3, [r3, #22]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d02e      	beq.n	800ce1e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cdc0:	4b3b      	ldr	r3, [pc, #236]	; (800ceb0 <tcp_abandon+0x170>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	687a      	ldr	r2, [r7, #4]
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d105      	bne.n	800cdd6 <tcp_abandon+0x96>
 800cdca:	4b39      	ldr	r3, [pc, #228]	; (800ceb0 <tcp_abandon+0x170>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	68db      	ldr	r3, [r3, #12]
 800cdd0:	4a37      	ldr	r2, [pc, #220]	; (800ceb0 <tcp_abandon+0x170>)
 800cdd2:	6013      	str	r3, [r2, #0]
 800cdd4:	e013      	b.n	800cdfe <tcp_abandon+0xbe>
 800cdd6:	4b36      	ldr	r3, [pc, #216]	; (800ceb0 <tcp_abandon+0x170>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	61fb      	str	r3, [r7, #28]
 800cddc:	e00c      	b.n	800cdf8 <tcp_abandon+0xb8>
 800cdde:	69fb      	ldr	r3, [r7, #28]
 800cde0:	68db      	ldr	r3, [r3, #12]
 800cde2:	687a      	ldr	r2, [r7, #4]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d104      	bne.n	800cdf2 <tcp_abandon+0xb2>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	68da      	ldr	r2, [r3, #12]
 800cdec:	69fb      	ldr	r3, [r7, #28]
 800cdee:	60da      	str	r2, [r3, #12]
 800cdf0:	e005      	b.n	800cdfe <tcp_abandon+0xbe>
 800cdf2:	69fb      	ldr	r3, [r7, #28]
 800cdf4:	68db      	ldr	r3, [r3, #12]
 800cdf6:	61fb      	str	r3, [r7, #28]
 800cdf8:	69fb      	ldr	r3, [r7, #28]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d1ef      	bne.n	800cdde <tcp_abandon+0x9e>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2200      	movs	r2, #0
 800ce02:	60da      	str	r2, [r3, #12]
 800ce04:	e00b      	b.n	800ce1e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	8adb      	ldrh	r3, [r3, #22]
 800ce0e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ce10:	6879      	ldr	r1, [r7, #4]
 800ce12:	4828      	ldr	r0, [pc, #160]	; (800ceb4 <tcp_abandon+0x174>)
 800ce14:	f001 fa1c 	bl	800e250 <tcp_pcb_remove>
 800ce18:	4b27      	ldr	r3, [pc, #156]	; (800ceb8 <tcp_abandon+0x178>)
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d004      	beq.n	800ce30 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f000 fed4 	bl	800dbd8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d004      	beq.n	800ce42 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f000 fecb 	bl	800dbd8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d004      	beq.n	800ce54 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f000 fec2 	bl	800dbd8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ce54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d00e      	beq.n	800ce78 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ce5a:	6879      	ldr	r1, [r7, #4]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	3304      	adds	r3, #4
 800ce60:	687a      	ldr	r2, [r7, #4]
 800ce62:	8b12      	ldrh	r2, [r2, #24]
 800ce64:	9202      	str	r2, [sp, #8]
 800ce66:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ce68:	9201      	str	r2, [sp, #4]
 800ce6a:	9300      	str	r3, [sp, #0]
 800ce6c:	460b      	mov	r3, r1
 800ce6e:	697a      	ldr	r2, [r7, #20]
 800ce70:	69b9      	ldr	r1, [r7, #24]
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f005 fbc8 	bl	8012608 <tcp_rst>
    }
    last_state = pcb->state;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	7d1b      	ldrb	r3, [r3, #20]
 800ce7c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f7ff fce2 	bl	800c848 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ce84:	693b      	ldr	r3, [r7, #16]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d004      	beq.n	800ce94 <tcp_abandon+0x154>
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	f06f 010c 	mvn.w	r1, #12
 800ce90:	68f8      	ldr	r0, [r7, #12]
 800ce92:	4798      	blx	r3
  }
}
 800ce94:	3728      	adds	r7, #40	; 0x28
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	0801aa6c 	.word	0x0801aa6c
 800cea0:	0801abb0 	.word	0x0801abb0
 800cea4:	0801aab0 	.word	0x0801aab0
 800cea8:	0801abcc 	.word	0x0801abcc
 800ceac:	2000f524 	.word	0x2000f524
 800ceb0:	2000f520 	.word	0x2000f520
 800ceb4:	2000f514 	.word	0x2000f514
 800ceb8:	2000f510 	.word	0x2000f510

0800cebc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b082      	sub	sp, #8
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cec4:	2101      	movs	r1, #1
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f7ff ff3a 	bl	800cd40 <tcp_abandon>
}
 800cecc:	bf00      	nop
 800cece:	3708      	adds	r7, #8
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b088      	sub	sp, #32
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	60b9      	str	r1, [r7, #8]
 800cede:	4613      	mov	r3, r2
 800cee0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800cee2:	2304      	movs	r3, #4
 800cee4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d101      	bne.n	800cef0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800ceec:	4b3e      	ldr	r3, [pc, #248]	; (800cfe8 <tcp_bind+0x114>)
 800ceee:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d109      	bne.n	800cf0a <tcp_bind+0x36>
 800cef6:	4b3d      	ldr	r3, [pc, #244]	; (800cfec <tcp_bind+0x118>)
 800cef8:	f240 22a9 	movw	r2, #681	; 0x2a9
 800cefc:	493c      	ldr	r1, [pc, #240]	; (800cff0 <tcp_bind+0x11c>)
 800cefe:	483d      	ldr	r0, [pc, #244]	; (800cff4 <tcp_bind+0x120>)
 800cf00:	f00a ff64 	bl	8017dcc <iprintf>
 800cf04:	f06f 030f 	mvn.w	r3, #15
 800cf08:	e06a      	b.n	800cfe0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	7d1b      	ldrb	r3, [r3, #20]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d009      	beq.n	800cf26 <tcp_bind+0x52>
 800cf12:	4b36      	ldr	r3, [pc, #216]	; (800cfec <tcp_bind+0x118>)
 800cf14:	f240 22ab 	movw	r2, #683	; 0x2ab
 800cf18:	4937      	ldr	r1, [pc, #220]	; (800cff8 <tcp_bind+0x124>)
 800cf1a:	4836      	ldr	r0, [pc, #216]	; (800cff4 <tcp_bind+0x120>)
 800cf1c:	f00a ff56 	bl	8017dcc <iprintf>
 800cf20:	f06f 0305 	mvn.w	r3, #5
 800cf24:	e05c      	b.n	800cfe0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800cf26:	88fb      	ldrh	r3, [r7, #6]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d109      	bne.n	800cf40 <tcp_bind+0x6c>
    port = tcp_new_port();
 800cf2c:	f000 f9f0 	bl	800d310 <tcp_new_port>
 800cf30:	4603      	mov	r3, r0
 800cf32:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800cf34:	88fb      	ldrh	r3, [r7, #6]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d135      	bne.n	800cfa6 <tcp_bind+0xd2>
      return ERR_BUF;
 800cf3a:	f06f 0301 	mvn.w	r3, #1
 800cf3e:	e04f      	b.n	800cfe0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800cf40:	2300      	movs	r3, #0
 800cf42:	61fb      	str	r3, [r7, #28]
 800cf44:	e02b      	b.n	800cf9e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800cf46:	4a2d      	ldr	r2, [pc, #180]	; (800cffc <tcp_bind+0x128>)
 800cf48:	69fb      	ldr	r3, [r7, #28]
 800cf4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	61bb      	str	r3, [r7, #24]
 800cf52:	e01e      	b.n	800cf92 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800cf54:	69bb      	ldr	r3, [r7, #24]
 800cf56:	8adb      	ldrh	r3, [r3, #22]
 800cf58:	88fa      	ldrh	r2, [r7, #6]
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d116      	bne.n	800cf8c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800cf5e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d010      	beq.n	800cf86 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800cf64:	69bb      	ldr	r3, [r7, #24]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d00c      	beq.n	800cf86 <tcp_bind+0xb2>
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d009      	beq.n	800cf86 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d005      	beq.n	800cf86 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800cf7a:	69bb      	ldr	r3, [r7, #24]
 800cf7c:	681a      	ldr	r2, [r3, #0]
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d102      	bne.n	800cf8c <tcp_bind+0xb8>
              return ERR_USE;
 800cf86:	f06f 0307 	mvn.w	r3, #7
 800cf8a:	e029      	b.n	800cfe0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800cf8c:	69bb      	ldr	r3, [r7, #24]
 800cf8e:	68db      	ldr	r3, [r3, #12]
 800cf90:	61bb      	str	r3, [r7, #24]
 800cf92:	69bb      	ldr	r3, [r7, #24]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d1dd      	bne.n	800cf54 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800cf98:	69fb      	ldr	r3, [r7, #28]
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	61fb      	str	r3, [r7, #28]
 800cf9e:	69fa      	ldr	r2, [r7, #28]
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	dbcf      	blt.n	800cf46 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d00c      	beq.n	800cfc6 <tcp_bind+0xf2>
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d008      	beq.n	800cfc6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d002      	beq.n	800cfc0 <tcp_bind+0xec>
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	e000      	b.n	800cfc2 <tcp_bind+0xee>
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	68fa      	ldr	r2, [r7, #12]
 800cfc4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	88fa      	ldrh	r2, [r7, #6]
 800cfca:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800cfcc:	4b0c      	ldr	r3, [pc, #48]	; (800d000 <tcp_bind+0x12c>)
 800cfce:	681a      	ldr	r2, [r3, #0]
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	60da      	str	r2, [r3, #12]
 800cfd4:	4a0a      	ldr	r2, [pc, #40]	; (800d000 <tcp_bind+0x12c>)
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	6013      	str	r3, [r2, #0]
 800cfda:	f005 fcd7 	bl	801298c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800cfde:	2300      	movs	r3, #0
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3720      	adds	r7, #32
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}
 800cfe8:	08026f94 	.word	0x08026f94
 800cfec:	0801aa6c 	.word	0x0801aa6c
 800cff0:	0801ac00 	.word	0x0801ac00
 800cff4:	0801aab0 	.word	0x0801aab0
 800cff8:	0801ac18 	.word	0x0801ac18
 800cffc:	08026f5c 	.word	0x08026f5c
 800d000:	2000f520 	.word	0x2000f520

0800d004 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b084      	sub	sp, #16
 800d008:	af00      	add	r7, sp, #0
 800d00a:	60f8      	str	r0, [r7, #12]
 800d00c:	60b9      	str	r1, [r7, #8]
 800d00e:	4613      	mov	r3, r2
 800d010:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d106      	bne.n	800d026 <tcp_accept_null+0x22>
 800d018:	4b07      	ldr	r3, [pc, #28]	; (800d038 <tcp_accept_null+0x34>)
 800d01a:	f240 320f 	movw	r2, #783	; 0x30f
 800d01e:	4907      	ldr	r1, [pc, #28]	; (800d03c <tcp_accept_null+0x38>)
 800d020:	4807      	ldr	r0, [pc, #28]	; (800d040 <tcp_accept_null+0x3c>)
 800d022:	f00a fed3 	bl	8017dcc <iprintf>

  tcp_abort(pcb);
 800d026:	68b8      	ldr	r0, [r7, #8]
 800d028:	f7ff ff48 	bl	800cebc <tcp_abort>

  return ERR_ABRT;
 800d02c:	f06f 030c 	mvn.w	r3, #12
}
 800d030:	4618      	mov	r0, r3
 800d032:	3710      	adds	r7, #16
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}
 800d038:	0801aa6c 	.word	0x0801aa6c
 800d03c:	0801ac40 	.word	0x0801ac40
 800d040:	0801aab0 	.word	0x0801aab0

0800d044 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b082      	sub	sp, #8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	460b      	mov	r3, r1
 800d04e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800d050:	78fb      	ldrb	r3, [r7, #3]
 800d052:	2200      	movs	r2, #0
 800d054:	4619      	mov	r1, r3
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f000 f806 	bl	800d068 <tcp_listen_with_backlog_and_err>
 800d05c:	4603      	mov	r3, r0
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3708      	adds	r7, #8
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}
	...

0800d068 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b088      	sub	sp, #32
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	60f8      	str	r0, [r7, #12]
 800d070:	460b      	mov	r3, r1
 800d072:	607a      	str	r2, [r7, #4]
 800d074:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800d076:	2300      	movs	r3, #0
 800d078:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d109      	bne.n	800d094 <tcp_listen_with_backlog_and_err+0x2c>
 800d080:	4b47      	ldr	r3, [pc, #284]	; (800d1a0 <tcp_listen_with_backlog_and_err+0x138>)
 800d082:	f240 3259 	movw	r2, #857	; 0x359
 800d086:	4947      	ldr	r1, [pc, #284]	; (800d1a4 <tcp_listen_with_backlog_and_err+0x13c>)
 800d088:	4847      	ldr	r0, [pc, #284]	; (800d1a8 <tcp_listen_with_backlog_and_err+0x140>)
 800d08a:	f00a fe9f 	bl	8017dcc <iprintf>
 800d08e:	23f0      	movs	r3, #240	; 0xf0
 800d090:	76fb      	strb	r3, [r7, #27]
 800d092:	e079      	b.n	800d188 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	7d1b      	ldrb	r3, [r3, #20]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d009      	beq.n	800d0b0 <tcp_listen_with_backlog_and_err+0x48>
 800d09c:	4b40      	ldr	r3, [pc, #256]	; (800d1a0 <tcp_listen_with_backlog_and_err+0x138>)
 800d09e:	f240 325a 	movw	r2, #858	; 0x35a
 800d0a2:	4942      	ldr	r1, [pc, #264]	; (800d1ac <tcp_listen_with_backlog_and_err+0x144>)
 800d0a4:	4840      	ldr	r0, [pc, #256]	; (800d1a8 <tcp_listen_with_backlog_and_err+0x140>)
 800d0a6:	f00a fe91 	bl	8017dcc <iprintf>
 800d0aa:	23f1      	movs	r3, #241	; 0xf1
 800d0ac:	76fb      	strb	r3, [r7, #27]
 800d0ae:	e06b      	b.n	800d188 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	7d1b      	ldrb	r3, [r3, #20]
 800d0b4:	2b01      	cmp	r3, #1
 800d0b6:	d104      	bne.n	800d0c2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800d0bc:	23f7      	movs	r3, #247	; 0xf7
 800d0be:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d0c0:	e062      	b.n	800d188 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800d0c2:	2002      	movs	r0, #2
 800d0c4:	f7fe fa06 	bl	800b4d4 <memp_malloc>
 800d0c8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800d0ca:	69fb      	ldr	r3, [r7, #28]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d102      	bne.n	800d0d6 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800d0d0:	23ff      	movs	r3, #255	; 0xff
 800d0d2:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d0d4:	e058      	b.n	800d188 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	691a      	ldr	r2, [r3, #16]
 800d0da:	69fb      	ldr	r3, [r7, #28]
 800d0dc:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	8ada      	ldrh	r2, [r3, #22]
 800d0e2:	69fb      	ldr	r3, [r7, #28]
 800d0e4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800d0e6:	69fb      	ldr	r3, [r7, #28]
 800d0e8:	2201      	movs	r2, #1
 800d0ea:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	7d5a      	ldrb	r2, [r3, #21]
 800d0f0:	69fb      	ldr	r3, [r7, #28]
 800d0f2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	7a5a      	ldrb	r2, [r3, #9]
 800d0f8:	69fb      	ldr	r3, [r7, #28]
 800d0fa:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800d0fc:	69fb      	ldr	r3, [r7, #28]
 800d0fe:	2200      	movs	r2, #0
 800d100:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	7ada      	ldrb	r2, [r3, #11]
 800d106:	69fb      	ldr	r3, [r7, #28]
 800d108:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	7a9a      	ldrb	r2, [r3, #10]
 800d10e:	69fb      	ldr	r3, [r7, #28]
 800d110:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	69fb      	ldr	r3, [r7, #28]
 800d118:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	8adb      	ldrh	r3, [r3, #22]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d021      	beq.n	800d166 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800d122:	4b23      	ldr	r3, [pc, #140]	; (800d1b0 <tcp_listen_with_backlog_and_err+0x148>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	68fa      	ldr	r2, [r7, #12]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d105      	bne.n	800d138 <tcp_listen_with_backlog_and_err+0xd0>
 800d12c:	4b20      	ldr	r3, [pc, #128]	; (800d1b0 <tcp_listen_with_backlog_and_err+0x148>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	68db      	ldr	r3, [r3, #12]
 800d132:	4a1f      	ldr	r2, [pc, #124]	; (800d1b0 <tcp_listen_with_backlog_and_err+0x148>)
 800d134:	6013      	str	r3, [r2, #0]
 800d136:	e013      	b.n	800d160 <tcp_listen_with_backlog_and_err+0xf8>
 800d138:	4b1d      	ldr	r3, [pc, #116]	; (800d1b0 <tcp_listen_with_backlog_and_err+0x148>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	617b      	str	r3, [r7, #20]
 800d13e:	e00c      	b.n	800d15a <tcp_listen_with_backlog_and_err+0xf2>
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	68db      	ldr	r3, [r3, #12]
 800d144:	68fa      	ldr	r2, [r7, #12]
 800d146:	429a      	cmp	r2, r3
 800d148:	d104      	bne.n	800d154 <tcp_listen_with_backlog_and_err+0xec>
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	68da      	ldr	r2, [r3, #12]
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	60da      	str	r2, [r3, #12]
 800d152:	e005      	b.n	800d160 <tcp_listen_with_backlog_and_err+0xf8>
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	617b      	str	r3, [r7, #20]
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d1ef      	bne.n	800d140 <tcp_listen_with_backlog_and_err+0xd8>
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2200      	movs	r2, #0
 800d164:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800d166:	68f8      	ldr	r0, [r7, #12]
 800d168:	f7ff fb6e 	bl	800c848 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800d16c:	69fb      	ldr	r3, [r7, #28]
 800d16e:	4a11      	ldr	r2, [pc, #68]	; (800d1b4 <tcp_listen_with_backlog_and_err+0x14c>)
 800d170:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800d172:	4b11      	ldr	r3, [pc, #68]	; (800d1b8 <tcp_listen_with_backlog_and_err+0x150>)
 800d174:	681a      	ldr	r2, [r3, #0]
 800d176:	69fb      	ldr	r3, [r7, #28]
 800d178:	60da      	str	r2, [r3, #12]
 800d17a:	4a0f      	ldr	r2, [pc, #60]	; (800d1b8 <tcp_listen_with_backlog_and_err+0x150>)
 800d17c:	69fb      	ldr	r3, [r7, #28]
 800d17e:	6013      	str	r3, [r2, #0]
 800d180:	f005 fc04 	bl	801298c <tcp_timer_needed>
  res = ERR_OK;
 800d184:	2300      	movs	r3, #0
 800d186:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d002      	beq.n	800d194 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	7efa      	ldrb	r2, [r7, #27]
 800d192:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800d194:	69fb      	ldr	r3, [r7, #28]
}
 800d196:	4618      	mov	r0, r3
 800d198:	3720      	adds	r7, #32
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
 800d19e:	bf00      	nop
 800d1a0:	0801aa6c 	.word	0x0801aa6c
 800d1a4:	0801ac60 	.word	0x0801ac60
 800d1a8:	0801aab0 	.word	0x0801aab0
 800d1ac:	0801ac90 	.word	0x0801ac90
 800d1b0:	2000f520 	.word	0x2000f520
 800d1b4:	0800d005 	.word	0x0800d005
 800d1b8:	2000f51c 	.word	0x2000f51c

0800d1bc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b084      	sub	sp, #16
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d106      	bne.n	800d1d8 <tcp_update_rcv_ann_wnd+0x1c>
 800d1ca:	4b25      	ldr	r3, [pc, #148]	; (800d260 <tcp_update_rcv_ann_wnd+0xa4>)
 800d1cc:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d1d0:	4924      	ldr	r1, [pc, #144]	; (800d264 <tcp_update_rcv_ann_wnd+0xa8>)
 800d1d2:	4825      	ldr	r0, [pc, #148]	; (800d268 <tcp_update_rcv_ann_wnd+0xac>)
 800d1d4:	f00a fdfa 	bl	8017dcc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1dc:	687a      	ldr	r2, [r7, #4]
 800d1de:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d1e0:	4413      	add	r3, r2
 800d1e2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e8:	687a      	ldr	r2, [r7, #4]
 800d1ea:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d1ec:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d1f0:	bf28      	it	cs
 800d1f2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800d1f6:	b292      	uxth	r2, r2
 800d1f8:	4413      	add	r3, r2
 800d1fa:	68fa      	ldr	r2, [r7, #12]
 800d1fc:	1ad3      	subs	r3, r2, r3
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	db08      	blt.n	800d214 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d20e:	68fa      	ldr	r2, [r7, #12]
 800d210:	1ad3      	subs	r3, r2, r3
 800d212:	e020      	b.n	800d256 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d21c:	1ad3      	subs	r3, r2, r3
 800d21e:	2b00      	cmp	r3, #0
 800d220:	dd03      	ble.n	800d22a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2200      	movs	r2, #0
 800d226:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d228:	e014      	b.n	800d254 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d232:	1ad3      	subs	r3, r2, r3
 800d234:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d23c:	d306      	bcc.n	800d24c <tcp_update_rcv_ann_wnd+0x90>
 800d23e:	4b08      	ldr	r3, [pc, #32]	; (800d260 <tcp_update_rcv_ann_wnd+0xa4>)
 800d240:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d244:	4909      	ldr	r1, [pc, #36]	; (800d26c <tcp_update_rcv_ann_wnd+0xb0>)
 800d246:	4808      	ldr	r0, [pc, #32]	; (800d268 <tcp_update_rcv_ann_wnd+0xac>)
 800d248:	f00a fdc0 	bl	8017dcc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	b29a      	uxth	r2, r3
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d254:	2300      	movs	r3, #0
  }
}
 800d256:	4618      	mov	r0, r3
 800d258:	3710      	adds	r7, #16
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	0801aa6c 	.word	0x0801aa6c
 800d264:	0801acc8 	.word	0x0801acc8
 800d268:	0801aab0 	.word	0x0801aab0
 800d26c:	0801acec 	.word	0x0801acec

0800d270 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b084      	sub	sp, #16
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	460b      	mov	r3, r1
 800d27a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d107      	bne.n	800d292 <tcp_recved+0x22>
 800d282:	4b1f      	ldr	r3, [pc, #124]	; (800d300 <tcp_recved+0x90>)
 800d284:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d288:	491e      	ldr	r1, [pc, #120]	; (800d304 <tcp_recved+0x94>)
 800d28a:	481f      	ldr	r0, [pc, #124]	; (800d308 <tcp_recved+0x98>)
 800d28c:	f00a fd9e 	bl	8017dcc <iprintf>
 800d290:	e032      	b.n	800d2f8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	7d1b      	ldrb	r3, [r3, #20]
 800d296:	2b01      	cmp	r3, #1
 800d298:	d106      	bne.n	800d2a8 <tcp_recved+0x38>
 800d29a:	4b19      	ldr	r3, [pc, #100]	; (800d300 <tcp_recved+0x90>)
 800d29c:	f240 32d3 	movw	r2, #979	; 0x3d3
 800d2a0:	491a      	ldr	r1, [pc, #104]	; (800d30c <tcp_recved+0x9c>)
 800d2a2:	4819      	ldr	r0, [pc, #100]	; (800d308 <tcp_recved+0x98>)
 800d2a4:	f00a fd92 	bl	8017dcc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d2ac:	887b      	ldrh	r3, [r7, #2]
 800d2ae:	4413      	add	r3, r2
 800d2b0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d2b2:	89fb      	ldrh	r3, [r7, #14]
 800d2b4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d2b8:	d804      	bhi.n	800d2c4 <tcp_recved+0x54>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2be:	89fa      	ldrh	r2, [r7, #14]
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	d204      	bcs.n	800d2ce <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d2ca:	851a      	strh	r2, [r3, #40]	; 0x28
 800d2cc:	e002      	b.n	800d2d4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	89fa      	ldrh	r2, [r7, #14]
 800d2d2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f7ff ff71 	bl	800d1bc <tcp_update_rcv_ann_wnd>
 800d2da:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d2e2:	d309      	bcc.n	800d2f8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	8b5b      	ldrh	r3, [r3, #26]
 800d2e8:	f043 0302 	orr.w	r3, r3, #2
 800d2ec:	b29a      	uxth	r2, r3
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f004 fbc4 	bl	8011a80 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d2f8:	3710      	adds	r7, #16
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}
 800d2fe:	bf00      	nop
 800d300:	0801aa6c 	.word	0x0801aa6c
 800d304:	0801ad08 	.word	0x0801ad08
 800d308:	0801aab0 	.word	0x0801aab0
 800d30c:	0801ad20 	.word	0x0801ad20

0800d310 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d310:	b480      	push	{r7}
 800d312:	b083      	sub	sp, #12
 800d314:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d316:	2300      	movs	r3, #0
 800d318:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800d31a:	4b1e      	ldr	r3, [pc, #120]	; (800d394 <tcp_new_port+0x84>)
 800d31c:	881b      	ldrh	r3, [r3, #0]
 800d31e:	3301      	adds	r3, #1
 800d320:	b29a      	uxth	r2, r3
 800d322:	4b1c      	ldr	r3, [pc, #112]	; (800d394 <tcp_new_port+0x84>)
 800d324:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800d326:	4b1b      	ldr	r3, [pc, #108]	; (800d394 <tcp_new_port+0x84>)
 800d328:	881b      	ldrh	r3, [r3, #0]
 800d32a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d32e:	4293      	cmp	r3, r2
 800d330:	d103      	bne.n	800d33a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d332:	4b18      	ldr	r3, [pc, #96]	; (800d394 <tcp_new_port+0x84>)
 800d334:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d338:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d33a:	2300      	movs	r3, #0
 800d33c:	71fb      	strb	r3, [r7, #7]
 800d33e:	e01e      	b.n	800d37e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d340:	79fb      	ldrb	r3, [r7, #7]
 800d342:	4a15      	ldr	r2, [pc, #84]	; (800d398 <tcp_new_port+0x88>)
 800d344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	603b      	str	r3, [r7, #0]
 800d34c:	e011      	b.n	800d372 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	8ada      	ldrh	r2, [r3, #22]
 800d352:	4b10      	ldr	r3, [pc, #64]	; (800d394 <tcp_new_port+0x84>)
 800d354:	881b      	ldrh	r3, [r3, #0]
 800d356:	429a      	cmp	r2, r3
 800d358:	d108      	bne.n	800d36c <tcp_new_port+0x5c>
        n++;
 800d35a:	88bb      	ldrh	r3, [r7, #4]
 800d35c:	3301      	adds	r3, #1
 800d35e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d360:	88bb      	ldrh	r3, [r7, #4]
 800d362:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d366:	d3d8      	bcc.n	800d31a <tcp_new_port+0xa>
          return 0;
 800d368:	2300      	movs	r3, #0
 800d36a:	e00d      	b.n	800d388 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	68db      	ldr	r3, [r3, #12]
 800d370:	603b      	str	r3, [r7, #0]
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d1ea      	bne.n	800d34e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d378:	79fb      	ldrb	r3, [r7, #7]
 800d37a:	3301      	adds	r3, #1
 800d37c:	71fb      	strb	r3, [r7, #7]
 800d37e:	79fb      	ldrb	r3, [r7, #7]
 800d380:	2b03      	cmp	r3, #3
 800d382:	d9dd      	bls.n	800d340 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d384:	4b03      	ldr	r3, [pc, #12]	; (800d394 <tcp_new_port+0x84>)
 800d386:	881b      	ldrh	r3, [r3, #0]
}
 800d388:	4618      	mov	r0, r3
 800d38a:	370c      	adds	r7, #12
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr
 800d394:	20000010 	.word	0x20000010
 800d398:	08026f5c 	.word	0x08026f5c

0800d39c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d39c:	b5b0      	push	{r4, r5, r7, lr}
 800d39e:	b090      	sub	sp, #64	; 0x40
 800d3a0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d3a8:	4b94      	ldr	r3, [pc, #592]	; (800d5fc <tcp_slowtmr+0x260>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	3301      	adds	r3, #1
 800d3ae:	4a93      	ldr	r2, [pc, #588]	; (800d5fc <tcp_slowtmr+0x260>)
 800d3b0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d3b2:	4b93      	ldr	r3, [pc, #588]	; (800d600 <tcp_slowtmr+0x264>)
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	b2da      	uxtb	r2, r3
 800d3ba:	4b91      	ldr	r3, [pc, #580]	; (800d600 <tcp_slowtmr+0x264>)
 800d3bc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d3c2:	4b90      	ldr	r3, [pc, #576]	; (800d604 <tcp_slowtmr+0x268>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d3c8:	e29f      	b.n	800d90a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3cc:	7d1b      	ldrb	r3, [r3, #20]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d106      	bne.n	800d3e0 <tcp_slowtmr+0x44>
 800d3d2:	4b8d      	ldr	r3, [pc, #564]	; (800d608 <tcp_slowtmr+0x26c>)
 800d3d4:	f240 42be 	movw	r2, #1214	; 0x4be
 800d3d8:	498c      	ldr	r1, [pc, #560]	; (800d60c <tcp_slowtmr+0x270>)
 800d3da:	488d      	ldr	r0, [pc, #564]	; (800d610 <tcp_slowtmr+0x274>)
 800d3dc:	f00a fcf6 	bl	8017dcc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e2:	7d1b      	ldrb	r3, [r3, #20]
 800d3e4:	2b01      	cmp	r3, #1
 800d3e6:	d106      	bne.n	800d3f6 <tcp_slowtmr+0x5a>
 800d3e8:	4b87      	ldr	r3, [pc, #540]	; (800d608 <tcp_slowtmr+0x26c>)
 800d3ea:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d3ee:	4989      	ldr	r1, [pc, #548]	; (800d614 <tcp_slowtmr+0x278>)
 800d3f0:	4887      	ldr	r0, [pc, #540]	; (800d610 <tcp_slowtmr+0x274>)
 800d3f2:	f00a fceb 	bl	8017dcc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f8:	7d1b      	ldrb	r3, [r3, #20]
 800d3fa:	2b0a      	cmp	r3, #10
 800d3fc:	d106      	bne.n	800d40c <tcp_slowtmr+0x70>
 800d3fe:	4b82      	ldr	r3, [pc, #520]	; (800d608 <tcp_slowtmr+0x26c>)
 800d400:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d404:	4984      	ldr	r1, [pc, #528]	; (800d618 <tcp_slowtmr+0x27c>)
 800d406:	4882      	ldr	r0, [pc, #520]	; (800d610 <tcp_slowtmr+0x274>)
 800d408:	f00a fce0 	bl	8017dcc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40e:	7f9a      	ldrb	r2, [r3, #30]
 800d410:	4b7b      	ldr	r3, [pc, #492]	; (800d600 <tcp_slowtmr+0x264>)
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	429a      	cmp	r2, r3
 800d416:	d105      	bne.n	800d424 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41e:	68db      	ldr	r3, [r3, #12]
 800d420:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d422:	e272      	b.n	800d90a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d424:	4b76      	ldr	r3, [pc, #472]	; (800d600 <tcp_slowtmr+0x264>)
 800d426:	781a      	ldrb	r2, [r3, #0]
 800d428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d42a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d42c:	2300      	movs	r3, #0
 800d42e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d432:	2300      	movs	r3, #0
 800d434:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43a:	7d1b      	ldrb	r3, [r3, #20]
 800d43c:	2b02      	cmp	r3, #2
 800d43e:	d10a      	bne.n	800d456 <tcp_slowtmr+0xba>
 800d440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d442:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d446:	2b05      	cmp	r3, #5
 800d448:	d905      	bls.n	800d456 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800d44a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d44e:	3301      	adds	r3, #1
 800d450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d454:	e11e      	b.n	800d694 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d458:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d45c:	2b0b      	cmp	r3, #11
 800d45e:	d905      	bls.n	800d46c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800d460:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d464:	3301      	adds	r3, #1
 800d466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d46a:	e113      	b.n	800d694 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d46e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d472:	2b00      	cmp	r3, #0
 800d474:	d075      	beq.n	800d562 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d006      	beq.n	800d48c <tcp_slowtmr+0xf0>
 800d47e:	4b62      	ldr	r3, [pc, #392]	; (800d608 <tcp_slowtmr+0x26c>)
 800d480:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d484:	4965      	ldr	r1, [pc, #404]	; (800d61c <tcp_slowtmr+0x280>)
 800d486:	4862      	ldr	r0, [pc, #392]	; (800d610 <tcp_slowtmr+0x274>)
 800d488:	f00a fca0 	bl	8017dcc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d490:	2b00      	cmp	r3, #0
 800d492:	d106      	bne.n	800d4a2 <tcp_slowtmr+0x106>
 800d494:	4b5c      	ldr	r3, [pc, #368]	; (800d608 <tcp_slowtmr+0x26c>)
 800d496:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d49a:	4961      	ldr	r1, [pc, #388]	; (800d620 <tcp_slowtmr+0x284>)
 800d49c:	485c      	ldr	r0, [pc, #368]	; (800d610 <tcp_slowtmr+0x274>)
 800d49e:	f00a fc95 	bl	8017dcc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d4a8:	2b0b      	cmp	r3, #11
 800d4aa:	d905      	bls.n	800d4b8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d4ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d4b6:	e0ed      	b.n	800d694 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d4be:	3b01      	subs	r3, #1
 800d4c0:	4a58      	ldr	r2, [pc, #352]	; (800d624 <tcp_slowtmr+0x288>)
 800d4c2:	5cd3      	ldrb	r3, [r2, r3]
 800d4c4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d4cc:	7c7a      	ldrb	r2, [r7, #17]
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	d907      	bls.n	800d4e2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d4d8:	3301      	adds	r3, #1
 800d4da:	b2da      	uxtb	r2, r3
 800d4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4de:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d4e8:	7c7a      	ldrb	r2, [r7, #17]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	f200 80d2 	bhi.w	800d694 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d108      	bne.n	800d510 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d4fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d500:	f005 f976 	bl	80127f0 <tcp_zero_window_probe>
 800d504:	4603      	mov	r3, r0
 800d506:	2b00      	cmp	r3, #0
 800d508:	d014      	beq.n	800d534 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d50a:	2300      	movs	r3, #0
 800d50c:	623b      	str	r3, [r7, #32]
 800d50e:	e011      	b.n	800d534 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d512:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d516:	4619      	mov	r1, r3
 800d518:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d51a:	f004 f82b 	bl	8011574 <tcp_split_unsent_seg>
 800d51e:	4603      	mov	r3, r0
 800d520:	2b00      	cmp	r3, #0
 800d522:	d107      	bne.n	800d534 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d524:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d526:	f004 faab 	bl	8011a80 <tcp_output>
 800d52a:	4603      	mov	r3, r0
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d101      	bne.n	800d534 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d530:	2300      	movs	r3, #0
 800d532:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d534:	6a3b      	ldr	r3, [r7, #32]
 800d536:	2b00      	cmp	r3, #0
 800d538:	f000 80ac 	beq.w	800d694 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d53e:	2200      	movs	r2, #0
 800d540:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d546:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d54a:	2b06      	cmp	r3, #6
 800d54c:	f200 80a2 	bhi.w	800d694 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d552:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d556:	3301      	adds	r3, #1
 800d558:	b2da      	uxtb	r2, r3
 800d55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d560:	e098      	b.n	800d694 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d564:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d568:	2b00      	cmp	r3, #0
 800d56a:	db0f      	blt.n	800d58c <tcp_slowtmr+0x1f0>
 800d56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d56e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d572:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d576:	4293      	cmp	r3, r2
 800d578:	d008      	beq.n	800d58c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d57c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d580:	b29b      	uxth	r3, r3
 800d582:	3301      	adds	r3, #1
 800d584:	b29b      	uxth	r3, r3
 800d586:	b21a      	sxth	r2, r3
 800d588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d58a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d58e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d594:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d598:	429a      	cmp	r2, r3
 800d59a:	db7b      	blt.n	800d694 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d59c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d59e:	f004 fd67 	bl	8012070 <tcp_rexmit_rto_prepare>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d007      	beq.n	800d5b8 <tcp_slowtmr+0x21c>
 800d5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d171      	bne.n	800d694 <tcp_slowtmr+0x2f8>
 800d5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d06d      	beq.n	800d694 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ba:	7d1b      	ldrb	r3, [r3, #20]
 800d5bc:	2b02      	cmp	r3, #2
 800d5be:	d03a      	beq.n	800d636 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d5c6:	2b0c      	cmp	r3, #12
 800d5c8:	bf28      	it	cs
 800d5ca:	230c      	movcs	r3, #12
 800d5cc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d5d4:	10db      	asrs	r3, r3, #3
 800d5d6:	b21b      	sxth	r3, r3
 800d5d8:	461a      	mov	r2, r3
 800d5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5dc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d5e0:	4413      	add	r3, r2
 800d5e2:	7efa      	ldrb	r2, [r7, #27]
 800d5e4:	4910      	ldr	r1, [pc, #64]	; (800d628 <tcp_slowtmr+0x28c>)
 800d5e6:	5c8a      	ldrb	r2, [r1, r2]
 800d5e8:	4093      	lsls	r3, r2
 800d5ea:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	dc1a      	bgt.n	800d62c <tcp_slowtmr+0x290>
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	b21a      	sxth	r2, r3
 800d5fa:	e019      	b.n	800d630 <tcp_slowtmr+0x294>
 800d5fc:	2000f518 	.word	0x2000f518
 800d600:	20008a8e 	.word	0x20008a8e
 800d604:	2000f514 	.word	0x2000f514
 800d608:	0801aa6c 	.word	0x0801aa6c
 800d60c:	0801adb0 	.word	0x0801adb0
 800d610:	0801aab0 	.word	0x0801aab0
 800d614:	0801addc 	.word	0x0801addc
 800d618:	0801ae08 	.word	0x0801ae08
 800d61c:	0801ae38 	.word	0x0801ae38
 800d620:	0801ae6c 	.word	0x0801ae6c
 800d624:	08026f54 	.word	0x08026f54
 800d628:	08026f44 	.word	0x08026f44
 800d62c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d632:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d638:	2200      	movs	r2, #0
 800d63a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d63e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d644:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d648:	4293      	cmp	r3, r2
 800d64a:	bf28      	it	cs
 800d64c:	4613      	movcs	r3, r2
 800d64e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d650:	8a7b      	ldrh	r3, [r7, #18]
 800d652:	085b      	lsrs	r3, r3, #1
 800d654:	b29a      	uxth	r2, r3
 800d656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d658:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d65e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d664:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d666:	005b      	lsls	r3, r3, #1
 800d668:	b29b      	uxth	r3, r3
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d206      	bcs.n	800d67c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d670:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d672:	005b      	lsls	r3, r3, #1
 800d674:	b29a      	uxth	r2, r3
 800d676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d678:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d682:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d688:	2200      	movs	r2, #0
 800d68a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d68e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d690:	f004 fd5e 	bl	8012150 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d696:	7d1b      	ldrb	r3, [r3, #20]
 800d698:	2b06      	cmp	r3, #6
 800d69a:	d111      	bne.n	800d6c0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d69e:	8b5b      	ldrh	r3, [r3, #26]
 800d6a0:	f003 0310 	and.w	r3, r3, #16
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d00b      	beq.n	800d6c0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d6a8:	4b9d      	ldr	r3, [pc, #628]	; (800d920 <tcp_slowtmr+0x584>)
 800d6aa:	681a      	ldr	r2, [r3, #0]
 800d6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ae:	6a1b      	ldr	r3, [r3, #32]
 800d6b0:	1ad3      	subs	r3, r2, r3
 800d6b2:	2b28      	cmp	r3, #40	; 0x28
 800d6b4:	d904      	bls.n	800d6c0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d6b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c2:	7a5b      	ldrb	r3, [r3, #9]
 800d6c4:	f003 0308 	and.w	r3, r3, #8
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d04c      	beq.n	800d766 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800d6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ce:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d6d0:	2b04      	cmp	r3, #4
 800d6d2:	d003      	beq.n	800d6dc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d6d8:	2b07      	cmp	r3, #7
 800d6da:	d144      	bne.n	800d766 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d6dc:	4b90      	ldr	r3, [pc, #576]	; (800d920 <tcp_slowtmr+0x584>)
 800d6de:	681a      	ldr	r2, [r3, #0]
 800d6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e2:	6a1b      	ldr	r3, [r3, #32]
 800d6e4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d6ec:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800d6f0:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800d6f4:	498b      	ldr	r1, [pc, #556]	; (800d924 <tcp_slowtmr+0x588>)
 800d6f6:	fba1 1303 	umull	r1, r3, r1, r3
 800d6fa:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d90a      	bls.n	800d716 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d704:	3301      	adds	r3, #1
 800d706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d70a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d70e:	3301      	adds	r3, #1
 800d710:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d714:	e027      	b.n	800d766 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d716:	4b82      	ldr	r3, [pc, #520]	; (800d920 <tcp_slowtmr+0x584>)
 800d718:	681a      	ldr	r2, [r3, #0]
 800d71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d71c:	6a1b      	ldr	r3, [r3, #32]
 800d71e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d722:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d728:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d72c:	4618      	mov	r0, r3
 800d72e:	4b7e      	ldr	r3, [pc, #504]	; (800d928 <tcp_slowtmr+0x58c>)
 800d730:	fb03 f300 	mul.w	r3, r3, r0
 800d734:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d736:	497b      	ldr	r1, [pc, #492]	; (800d924 <tcp_slowtmr+0x588>)
 800d738:	fba1 1303 	umull	r1, r3, r1, r3
 800d73c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d73e:	429a      	cmp	r2, r3
 800d740:	d911      	bls.n	800d766 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800d742:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d744:	f005 f814 	bl	8012770 <tcp_keepalive>
 800d748:	4603      	mov	r3, r0
 800d74a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d74e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d752:	2b00      	cmp	r3, #0
 800d754:	d107      	bne.n	800d766 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800d756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d758:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d75c:	3301      	adds	r3, #1
 800d75e:	b2da      	uxtb	r2, r3
 800d760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d762:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d011      	beq.n	800d792 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d76e:	4b6c      	ldr	r3, [pc, #432]	; (800d920 <tcp_slowtmr+0x584>)
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d774:	6a1b      	ldr	r3, [r3, #32]
 800d776:	1ad2      	subs	r2, r2, r3
 800d778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d77a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d77e:	4619      	mov	r1, r3
 800d780:	460b      	mov	r3, r1
 800d782:	005b      	lsls	r3, r3, #1
 800d784:	440b      	add	r3, r1
 800d786:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d788:	429a      	cmp	r2, r3
 800d78a:	d302      	bcc.n	800d792 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d78c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d78e:	f000 fec3 	bl	800e518 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d794:	7d1b      	ldrb	r3, [r3, #20]
 800d796:	2b03      	cmp	r3, #3
 800d798:	d10b      	bne.n	800d7b2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d79a:	4b61      	ldr	r3, [pc, #388]	; (800d920 <tcp_slowtmr+0x584>)
 800d79c:	681a      	ldr	r2, [r3, #0]
 800d79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a0:	6a1b      	ldr	r3, [r3, #32]
 800d7a2:	1ad3      	subs	r3, r2, r3
 800d7a4:	2b28      	cmp	r3, #40	; 0x28
 800d7a6:	d904      	bls.n	800d7b2 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d7a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7ac:	3301      	adds	r3, #1
 800d7ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b4:	7d1b      	ldrb	r3, [r3, #20]
 800d7b6:	2b09      	cmp	r3, #9
 800d7b8:	d10b      	bne.n	800d7d2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d7ba:	4b59      	ldr	r3, [pc, #356]	; (800d920 <tcp_slowtmr+0x584>)
 800d7bc:	681a      	ldr	r2, [r3, #0]
 800d7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c0:	6a1b      	ldr	r3, [r3, #32]
 800d7c2:	1ad3      	subs	r3, r2, r3
 800d7c4:	2bf0      	cmp	r3, #240	; 0xf0
 800d7c6:	d904      	bls.n	800d7d2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800d7c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d7d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d060      	beq.n	800d89c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7e0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d7e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7e4:	f000 fce4 	bl	800e1b0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d010      	beq.n	800d810 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d7ee:	4b4f      	ldr	r3, [pc, #316]	; (800d92c <tcp_slowtmr+0x590>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d106      	bne.n	800d806 <tcp_slowtmr+0x46a>
 800d7f8:	4b4d      	ldr	r3, [pc, #308]	; (800d930 <tcp_slowtmr+0x594>)
 800d7fa:	f240 526d 	movw	r2, #1389	; 0x56d
 800d7fe:	494d      	ldr	r1, [pc, #308]	; (800d934 <tcp_slowtmr+0x598>)
 800d800:	484d      	ldr	r0, [pc, #308]	; (800d938 <tcp_slowtmr+0x59c>)
 800d802:	f00a fae3 	bl	8017dcc <iprintf>
        prev->next = pcb->next;
 800d806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d808:	68da      	ldr	r2, [r3, #12]
 800d80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80c:	60da      	str	r2, [r3, #12]
 800d80e:	e00f      	b.n	800d830 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d810:	4b46      	ldr	r3, [pc, #280]	; (800d92c <tcp_slowtmr+0x590>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d816:	429a      	cmp	r2, r3
 800d818:	d006      	beq.n	800d828 <tcp_slowtmr+0x48c>
 800d81a:	4b45      	ldr	r3, [pc, #276]	; (800d930 <tcp_slowtmr+0x594>)
 800d81c:	f240 5271 	movw	r2, #1393	; 0x571
 800d820:	4946      	ldr	r1, [pc, #280]	; (800d93c <tcp_slowtmr+0x5a0>)
 800d822:	4845      	ldr	r0, [pc, #276]	; (800d938 <tcp_slowtmr+0x59c>)
 800d824:	f00a fad2 	bl	8017dcc <iprintf>
        tcp_active_pcbs = pcb->next;
 800d828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d82a:	68db      	ldr	r3, [r3, #12]
 800d82c:	4a3f      	ldr	r2, [pc, #252]	; (800d92c <tcp_slowtmr+0x590>)
 800d82e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d830:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d834:	2b00      	cmp	r3, #0
 800d836:	d013      	beq.n	800d860 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d83a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d83e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d840:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d844:	3304      	adds	r3, #4
 800d846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d848:	8ad2      	ldrh	r2, [r2, #22]
 800d84a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d84c:	8b09      	ldrh	r1, [r1, #24]
 800d84e:	9102      	str	r1, [sp, #8]
 800d850:	9201      	str	r2, [sp, #4]
 800d852:	9300      	str	r3, [sp, #0]
 800d854:	462b      	mov	r3, r5
 800d856:	4622      	mov	r2, r4
 800d858:	4601      	mov	r1, r0
 800d85a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d85c:	f004 fed4 	bl	8012608 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d862:	691b      	ldr	r3, [r3, #16]
 800d864:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d868:	7d1b      	ldrb	r3, [r3, #20]
 800d86a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d872:	68db      	ldr	r3, [r3, #12]
 800d874:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d876:	6838      	ldr	r0, [r7, #0]
 800d878:	f7fe ffe6 	bl	800c848 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d87c:	4b30      	ldr	r3, [pc, #192]	; (800d940 <tcp_slowtmr+0x5a4>)
 800d87e:	2200      	movs	r2, #0
 800d880:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d004      	beq.n	800d892 <tcp_slowtmr+0x4f6>
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	f06f 010c 	mvn.w	r1, #12
 800d88e:	68b8      	ldr	r0, [r7, #8]
 800d890:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d892:	4b2b      	ldr	r3, [pc, #172]	; (800d940 <tcp_slowtmr+0x5a4>)
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d037      	beq.n	800d90a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800d89a:	e590      	b.n	800d3be <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a2:	68db      	ldr	r3, [r3, #12]
 800d8a4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a8:	7f1b      	ldrb	r3, [r3, #28]
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	b2da      	uxtb	r2, r3
 800d8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b4:	7f1a      	ldrb	r2, [r3, #28]
 800d8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b8:	7f5b      	ldrb	r3, [r3, #29]
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d325      	bcc.n	800d90a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800d8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d8c4:	4b1e      	ldr	r3, [pc, #120]	; (800d940 <tcp_slowtmr+0x5a4>)
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d00b      	beq.n	800d8ec <tcp_slowtmr+0x550>
 800d8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8dc:	6912      	ldr	r2, [r2, #16]
 800d8de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8e0:	4610      	mov	r0, r2
 800d8e2:	4798      	blx	r3
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d8ea:	e002      	b.n	800d8f2 <tcp_slowtmr+0x556>
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d8f2:	4b13      	ldr	r3, [pc, #76]	; (800d940 <tcp_slowtmr+0x5a4>)
 800d8f4:	781b      	ldrb	r3, [r3, #0]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d000      	beq.n	800d8fc <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800d8fa:	e560      	b.n	800d3be <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d8fc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d900:	2b00      	cmp	r3, #0
 800d902:	d102      	bne.n	800d90a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800d904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d906:	f004 f8bb 	bl	8011a80 <tcp_output>
  while (pcb != NULL) {
 800d90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	f47f ad5c 	bne.w	800d3ca <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d912:	2300      	movs	r3, #0
 800d914:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d916:	4b0b      	ldr	r3, [pc, #44]	; (800d944 <tcp_slowtmr+0x5a8>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d91c:	e067      	b.n	800d9ee <tcp_slowtmr+0x652>
 800d91e:	bf00      	nop
 800d920:	2000f518 	.word	0x2000f518
 800d924:	10624dd3 	.word	0x10624dd3
 800d928:	000124f8 	.word	0x000124f8
 800d92c:	2000f514 	.word	0x2000f514
 800d930:	0801aa6c 	.word	0x0801aa6c
 800d934:	0801aea4 	.word	0x0801aea4
 800d938:	0801aab0 	.word	0x0801aab0
 800d93c:	0801aed0 	.word	0x0801aed0
 800d940:	2000f510 	.word	0x2000f510
 800d944:	2000f524 	.word	0x2000f524
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d94a:	7d1b      	ldrb	r3, [r3, #20]
 800d94c:	2b0a      	cmp	r3, #10
 800d94e:	d006      	beq.n	800d95e <tcp_slowtmr+0x5c2>
 800d950:	4b2a      	ldr	r3, [pc, #168]	; (800d9fc <tcp_slowtmr+0x660>)
 800d952:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d956:	492a      	ldr	r1, [pc, #168]	; (800da00 <tcp_slowtmr+0x664>)
 800d958:	482a      	ldr	r0, [pc, #168]	; (800da04 <tcp_slowtmr+0x668>)
 800d95a:	f00a fa37 	bl	8017dcc <iprintf>
    pcb_remove = 0;
 800d95e:	2300      	movs	r3, #0
 800d960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d964:	4b28      	ldr	r3, [pc, #160]	; (800da08 <tcp_slowtmr+0x66c>)
 800d966:	681a      	ldr	r2, [r3, #0]
 800d968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d96a:	6a1b      	ldr	r3, [r3, #32]
 800d96c:	1ad3      	subs	r3, r2, r3
 800d96e:	2bf0      	cmp	r3, #240	; 0xf0
 800d970:	d904      	bls.n	800d97c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d976:	3301      	adds	r3, #1
 800d978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d97c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d980:	2b00      	cmp	r3, #0
 800d982:	d02f      	beq.n	800d9e4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d984:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d986:	f000 fc13 	bl	800e1b0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d010      	beq.n	800d9b2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d990:	4b1e      	ldr	r3, [pc, #120]	; (800da0c <tcp_slowtmr+0x670>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d996:	429a      	cmp	r2, r3
 800d998:	d106      	bne.n	800d9a8 <tcp_slowtmr+0x60c>
 800d99a:	4b18      	ldr	r3, [pc, #96]	; (800d9fc <tcp_slowtmr+0x660>)
 800d99c:	f240 52af 	movw	r2, #1455	; 0x5af
 800d9a0:	491b      	ldr	r1, [pc, #108]	; (800da10 <tcp_slowtmr+0x674>)
 800d9a2:	4818      	ldr	r0, [pc, #96]	; (800da04 <tcp_slowtmr+0x668>)
 800d9a4:	f00a fa12 	bl	8017dcc <iprintf>
        prev->next = pcb->next;
 800d9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9aa:	68da      	ldr	r2, [r3, #12]
 800d9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ae:	60da      	str	r2, [r3, #12]
 800d9b0:	e00f      	b.n	800d9d2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d9b2:	4b16      	ldr	r3, [pc, #88]	; (800da0c <tcp_slowtmr+0x670>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	d006      	beq.n	800d9ca <tcp_slowtmr+0x62e>
 800d9bc:	4b0f      	ldr	r3, [pc, #60]	; (800d9fc <tcp_slowtmr+0x660>)
 800d9be:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d9c2:	4914      	ldr	r1, [pc, #80]	; (800da14 <tcp_slowtmr+0x678>)
 800d9c4:	480f      	ldr	r0, [pc, #60]	; (800da04 <tcp_slowtmr+0x668>)
 800d9c6:	f00a fa01 	bl	8017dcc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9cc:	68db      	ldr	r3, [r3, #12]
 800d9ce:	4a0f      	ldr	r2, [pc, #60]	; (800da0c <tcp_slowtmr+0x670>)
 800d9d0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d8:	68db      	ldr	r3, [r3, #12]
 800d9da:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d9dc:	69f8      	ldr	r0, [r7, #28]
 800d9de:	f7fe ff33 	bl	800c848 <tcp_free>
 800d9e2:	e004      	b.n	800d9ee <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9e6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ea:	68db      	ldr	r3, [r3, #12]
 800d9ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d1a9      	bne.n	800d948 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d9f4:	bf00      	nop
 800d9f6:	3730      	adds	r7, #48	; 0x30
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bdb0      	pop	{r4, r5, r7, pc}
 800d9fc:	0801aa6c 	.word	0x0801aa6c
 800da00:	0801aefc 	.word	0x0801aefc
 800da04:	0801aab0 	.word	0x0801aab0
 800da08:	2000f518 	.word	0x2000f518
 800da0c:	2000f524 	.word	0x2000f524
 800da10:	0801af2c 	.word	0x0801af2c
 800da14:	0801af54 	.word	0x0801af54

0800da18 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b082      	sub	sp, #8
 800da1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800da1e:	4b2d      	ldr	r3, [pc, #180]	; (800dad4 <tcp_fasttmr+0xbc>)
 800da20:	781b      	ldrb	r3, [r3, #0]
 800da22:	3301      	adds	r3, #1
 800da24:	b2da      	uxtb	r2, r3
 800da26:	4b2b      	ldr	r3, [pc, #172]	; (800dad4 <tcp_fasttmr+0xbc>)
 800da28:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800da2a:	4b2b      	ldr	r3, [pc, #172]	; (800dad8 <tcp_fasttmr+0xc0>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800da30:	e048      	b.n	800dac4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	7f9a      	ldrb	r2, [r3, #30]
 800da36:	4b27      	ldr	r3, [pc, #156]	; (800dad4 <tcp_fasttmr+0xbc>)
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d03f      	beq.n	800dabe <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800da3e:	4b25      	ldr	r3, [pc, #148]	; (800dad4 <tcp_fasttmr+0xbc>)
 800da40:	781a      	ldrb	r2, [r3, #0]
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	8b5b      	ldrh	r3, [r3, #26]
 800da4a:	f003 0301 	and.w	r3, r3, #1
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d010      	beq.n	800da74 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	8b5b      	ldrh	r3, [r3, #26]
 800da56:	f043 0302 	orr.w	r3, r3, #2
 800da5a:	b29a      	uxth	r2, r3
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f004 f80d 	bl	8011a80 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	8b5b      	ldrh	r3, [r3, #26]
 800da6a:	f023 0303 	bic.w	r3, r3, #3
 800da6e:	b29a      	uxth	r2, r3
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	8b5b      	ldrh	r3, [r3, #26]
 800da78:	f003 0308 	and.w	r3, r3, #8
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d009      	beq.n	800da94 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	8b5b      	ldrh	r3, [r3, #26]
 800da84:	f023 0308 	bic.w	r3, r3, #8
 800da88:	b29a      	uxth	r2, r3
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f7ff f86a 	bl	800cb68 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	68db      	ldr	r3, [r3, #12]
 800da98:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d00a      	beq.n	800dab8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800daa2:	4b0e      	ldr	r3, [pc, #56]	; (800dadc <tcp_fasttmr+0xc4>)
 800daa4:	2200      	movs	r2, #0
 800daa6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f000 f819 	bl	800dae0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800daae:	4b0b      	ldr	r3, [pc, #44]	; (800dadc <tcp_fasttmr+0xc4>)
 800dab0:	781b      	ldrb	r3, [r3, #0]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d000      	beq.n	800dab8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800dab6:	e7b8      	b.n	800da2a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	607b      	str	r3, [r7, #4]
 800dabc:	e002      	b.n	800dac4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	68db      	ldr	r3, [r3, #12]
 800dac2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d1b3      	bne.n	800da32 <tcp_fasttmr+0x1a>
    }
  }
}
 800daca:	bf00      	nop
 800dacc:	3708      	adds	r7, #8
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
 800dad2:	bf00      	nop
 800dad4:	20008a8e 	.word	0x20008a8e
 800dad8:	2000f514 	.word	0x2000f514
 800dadc:	2000f510 	.word	0x2000f510

0800dae0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800dae0:	b590      	push	{r4, r7, lr}
 800dae2:	b085      	sub	sp, #20
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d109      	bne.n	800db02 <tcp_process_refused_data+0x22>
 800daee:	4b37      	ldr	r3, [pc, #220]	; (800dbcc <tcp_process_refused_data+0xec>)
 800daf0:	f240 6209 	movw	r2, #1545	; 0x609
 800daf4:	4936      	ldr	r1, [pc, #216]	; (800dbd0 <tcp_process_refused_data+0xf0>)
 800daf6:	4837      	ldr	r0, [pc, #220]	; (800dbd4 <tcp_process_refused_data+0xf4>)
 800daf8:	f00a f968 	bl	8017dcc <iprintf>
 800dafc:	f06f 030f 	mvn.w	r3, #15
 800db00:	e060      	b.n	800dbc4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db06:	7b5b      	ldrb	r3, [r3, #13]
 800db08:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db0e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2200      	movs	r2, #0
 800db14:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d00b      	beq.n	800db38 <tcp_process_refused_data+0x58>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6918      	ldr	r0, [r3, #16]
 800db2a:	2300      	movs	r3, #0
 800db2c:	68ba      	ldr	r2, [r7, #8]
 800db2e:	6879      	ldr	r1, [r7, #4]
 800db30:	47a0      	blx	r4
 800db32:	4603      	mov	r3, r0
 800db34:	73fb      	strb	r3, [r7, #15]
 800db36:	e007      	b.n	800db48 <tcp_process_refused_data+0x68>
 800db38:	2300      	movs	r3, #0
 800db3a:	68ba      	ldr	r2, [r7, #8]
 800db3c:	6879      	ldr	r1, [r7, #4]
 800db3e:	2000      	movs	r0, #0
 800db40:	f000 f8c0 	bl	800dcc4 <tcp_recv_null>
 800db44:	4603      	mov	r3, r0
 800db46:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800db48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d12a      	bne.n	800dba6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800db50:	7bbb      	ldrb	r3, [r7, #14]
 800db52:	f003 0320 	and.w	r3, r3, #32
 800db56:	2b00      	cmp	r3, #0
 800db58:	d033      	beq.n	800dbc2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db5e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800db62:	d005      	beq.n	800db70 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db68:	3301      	adds	r3, #1
 800db6a:	b29a      	uxth	r2, r3
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db76:	2b00      	cmp	r3, #0
 800db78:	d00b      	beq.n	800db92 <tcp_process_refused_data+0xb2>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6918      	ldr	r0, [r3, #16]
 800db84:	2300      	movs	r3, #0
 800db86:	2200      	movs	r2, #0
 800db88:	6879      	ldr	r1, [r7, #4]
 800db8a:	47a0      	blx	r4
 800db8c:	4603      	mov	r3, r0
 800db8e:	73fb      	strb	r3, [r7, #15]
 800db90:	e001      	b.n	800db96 <tcp_process_refused_data+0xb6>
 800db92:	2300      	movs	r3, #0
 800db94:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800db96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db9a:	f113 0f0d 	cmn.w	r3, #13
 800db9e:	d110      	bne.n	800dbc2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800dba0:	f06f 030c 	mvn.w	r3, #12
 800dba4:	e00e      	b.n	800dbc4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800dba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbaa:	f113 0f0d 	cmn.w	r3, #13
 800dbae:	d102      	bne.n	800dbb6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800dbb0:	f06f 030c 	mvn.w	r3, #12
 800dbb4:	e006      	b.n	800dbc4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	68ba      	ldr	r2, [r7, #8]
 800dbba:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800dbbc:	f06f 0304 	mvn.w	r3, #4
 800dbc0:	e000      	b.n	800dbc4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800dbc2:	2300      	movs	r3, #0
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3714      	adds	r7, #20
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd90      	pop	{r4, r7, pc}
 800dbcc:	0801aa6c 	.word	0x0801aa6c
 800dbd0:	0801af7c 	.word	0x0801af7c
 800dbd4:	0801aab0 	.word	0x0801aab0

0800dbd8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b084      	sub	sp, #16
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800dbe0:	e007      	b.n	800dbf2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f000 f809 	bl	800dc00 <tcp_seg_free>
    seg = next;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d1f4      	bne.n	800dbe2 <tcp_segs_free+0xa>
  }
}
 800dbf8:	bf00      	nop
 800dbfa:	3710      	adds	r7, #16
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b082      	sub	sp, #8
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d00c      	beq.n	800dc28 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	685b      	ldr	r3, [r3, #4]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d004      	beq.n	800dc20 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	685b      	ldr	r3, [r3, #4]
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f7fe fb58 	bl	800c2d0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800dc20:	6879      	ldr	r1, [r7, #4]
 800dc22:	2003      	movs	r0, #3
 800dc24:	f7fd fca8 	bl	800b578 <memp_free>
  }
}
 800dc28:	bf00      	nop
 800dc2a:	3708      	adds	r7, #8
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b082      	sub	sp, #8
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	460b      	mov	r3, r1
 800dc3a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d107      	bne.n	800dc52 <tcp_setprio+0x22>
 800dc42:	4b07      	ldr	r3, [pc, #28]	; (800dc60 <tcp_setprio+0x30>)
 800dc44:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800dc48:	4906      	ldr	r1, [pc, #24]	; (800dc64 <tcp_setprio+0x34>)
 800dc4a:	4807      	ldr	r0, [pc, #28]	; (800dc68 <tcp_setprio+0x38>)
 800dc4c:	f00a f8be 	bl	8017dcc <iprintf>
 800dc50:	e002      	b.n	800dc58 <tcp_setprio+0x28>

  pcb->prio = prio;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	78fa      	ldrb	r2, [r7, #3]
 800dc56:	755a      	strb	r2, [r3, #21]
}
 800dc58:	3708      	adds	r7, #8
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
 800dc5e:	bf00      	nop
 800dc60:	0801aa6c 	.word	0x0801aa6c
 800dc64:	0801afa4 	.word	0x0801afa4
 800dc68:	0801aab0 	.word	0x0801aab0

0800dc6c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d106      	bne.n	800dc88 <tcp_seg_copy+0x1c>
 800dc7a:	4b0f      	ldr	r3, [pc, #60]	; (800dcb8 <tcp_seg_copy+0x4c>)
 800dc7c:	f240 6282 	movw	r2, #1666	; 0x682
 800dc80:	490e      	ldr	r1, [pc, #56]	; (800dcbc <tcp_seg_copy+0x50>)
 800dc82:	480f      	ldr	r0, [pc, #60]	; (800dcc0 <tcp_seg_copy+0x54>)
 800dc84:	f00a f8a2 	bl	8017dcc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800dc88:	2003      	movs	r0, #3
 800dc8a:	f7fd fc23 	bl	800b4d4 <memp_malloc>
 800dc8e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d101      	bne.n	800dc9a <tcp_seg_copy+0x2e>
    return NULL;
 800dc96:	2300      	movs	r3, #0
 800dc98:	e00a      	b.n	800dcb0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800dc9a:	2210      	movs	r2, #16
 800dc9c:	6879      	ldr	r1, [r7, #4]
 800dc9e:	68f8      	ldr	r0, [r7, #12]
 800dca0:	f00a f867 	bl	8017d72 <memcpy>
  pbuf_ref(cseg->p);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	685b      	ldr	r3, [r3, #4]
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f7fe fbb7 	bl	800c41c <pbuf_ref>
  return cseg;
 800dcae:	68fb      	ldr	r3, [r7, #12]
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3710      	adds	r7, #16
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}
 800dcb8:	0801aa6c 	.word	0x0801aa6c
 800dcbc:	0801afc0 	.word	0x0801afc0
 800dcc0:	0801aab0 	.word	0x0801aab0

0800dcc4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b084      	sub	sp, #16
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	60f8      	str	r0, [r7, #12]
 800dccc:	60b9      	str	r1, [r7, #8]
 800dcce:	607a      	str	r2, [r7, #4]
 800dcd0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d109      	bne.n	800dcec <tcp_recv_null+0x28>
 800dcd8:	4b12      	ldr	r3, [pc, #72]	; (800dd24 <tcp_recv_null+0x60>)
 800dcda:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800dcde:	4912      	ldr	r1, [pc, #72]	; (800dd28 <tcp_recv_null+0x64>)
 800dce0:	4812      	ldr	r0, [pc, #72]	; (800dd2c <tcp_recv_null+0x68>)
 800dce2:	f00a f873 	bl	8017dcc <iprintf>
 800dce6:	f06f 030f 	mvn.w	r3, #15
 800dcea:	e016      	b.n	800dd1a <tcp_recv_null+0x56>

  if (p != NULL) {
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d009      	beq.n	800dd06 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	891b      	ldrh	r3, [r3, #8]
 800dcf6:	4619      	mov	r1, r3
 800dcf8:	68b8      	ldr	r0, [r7, #8]
 800dcfa:	f7ff fab9 	bl	800d270 <tcp_recved>
    pbuf_free(p);
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f7fe fae6 	bl	800c2d0 <pbuf_free>
 800dd04:	e008      	b.n	800dd18 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800dd06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d104      	bne.n	800dd18 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800dd0e:	68b8      	ldr	r0, [r7, #8]
 800dd10:	f7fe ff90 	bl	800cc34 <tcp_close>
 800dd14:	4603      	mov	r3, r0
 800dd16:	e000      	b.n	800dd1a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800dd18:	2300      	movs	r3, #0
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3710      	adds	r7, #16
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
 800dd22:	bf00      	nop
 800dd24:	0801aa6c 	.word	0x0801aa6c
 800dd28:	0801afdc 	.word	0x0801afdc
 800dd2c:	0801aab0 	.word	0x0801aab0

0800dd30 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b086      	sub	sp, #24
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	4603      	mov	r3, r0
 800dd38:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800dd3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	db01      	blt.n	800dd46 <tcp_kill_prio+0x16>
 800dd42:	79fb      	ldrb	r3, [r7, #7]
 800dd44:	e000      	b.n	800dd48 <tcp_kill_prio+0x18>
 800dd46:	237f      	movs	r3, #127	; 0x7f
 800dd48:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800dd4a:	7afb      	ldrb	r3, [r7, #11]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d034      	beq.n	800ddba <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800dd50:	7afb      	ldrb	r3, [r7, #11]
 800dd52:	3b01      	subs	r3, #1
 800dd54:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800dd56:	2300      	movs	r3, #0
 800dd58:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd5e:	4b19      	ldr	r3, [pc, #100]	; (800ddc4 <tcp_kill_prio+0x94>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	617b      	str	r3, [r7, #20]
 800dd64:	e01f      	b.n	800dda6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	7d5b      	ldrb	r3, [r3, #21]
 800dd6a:	7afa      	ldrb	r2, [r7, #11]
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d80c      	bhi.n	800dd8a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800dd74:	7afa      	ldrb	r2, [r7, #11]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d112      	bne.n	800dda0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dd7a:	4b13      	ldr	r3, [pc, #76]	; (800ddc8 <tcp_kill_prio+0x98>)
 800dd7c:	681a      	ldr	r2, [r3, #0]
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	6a1b      	ldr	r3, [r3, #32]
 800dd82:	1ad3      	subs	r3, r2, r3
 800dd84:	68fa      	ldr	r2, [r7, #12]
 800dd86:	429a      	cmp	r2, r3
 800dd88:	d80a      	bhi.n	800dda0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800dd8a:	4b0f      	ldr	r3, [pc, #60]	; (800ddc8 <tcp_kill_prio+0x98>)
 800dd8c:	681a      	ldr	r2, [r3, #0]
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	6a1b      	ldr	r3, [r3, #32]
 800dd92:	1ad3      	subs	r3, r2, r3
 800dd94:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	7d5b      	ldrb	r3, [r3, #21]
 800dd9e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	68db      	ldr	r3, [r3, #12]
 800dda4:	617b      	str	r3, [r7, #20]
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d1dc      	bne.n	800dd66 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d004      	beq.n	800ddbc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ddb2:	6938      	ldr	r0, [r7, #16]
 800ddb4:	f7ff f882 	bl	800cebc <tcp_abort>
 800ddb8:	e000      	b.n	800ddbc <tcp_kill_prio+0x8c>
    return;
 800ddba:	bf00      	nop
  }
}
 800ddbc:	3718      	adds	r7, #24
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
 800ddc2:	bf00      	nop
 800ddc4:	2000f514 	.word	0x2000f514
 800ddc8:	2000f518 	.word	0x2000f518

0800ddcc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b086      	sub	sp, #24
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ddd6:	79fb      	ldrb	r3, [r7, #7]
 800ddd8:	2b08      	cmp	r3, #8
 800ddda:	d009      	beq.n	800ddf0 <tcp_kill_state+0x24>
 800dddc:	79fb      	ldrb	r3, [r7, #7]
 800ddde:	2b09      	cmp	r3, #9
 800dde0:	d006      	beq.n	800ddf0 <tcp_kill_state+0x24>
 800dde2:	4b1a      	ldr	r3, [pc, #104]	; (800de4c <tcp_kill_state+0x80>)
 800dde4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800dde8:	4919      	ldr	r1, [pc, #100]	; (800de50 <tcp_kill_state+0x84>)
 800ddea:	481a      	ldr	r0, [pc, #104]	; (800de54 <tcp_kill_state+0x88>)
 800ddec:	f009 ffee 	bl	8017dcc <iprintf>

  inactivity = 0;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ddf8:	4b17      	ldr	r3, [pc, #92]	; (800de58 <tcp_kill_state+0x8c>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	617b      	str	r3, [r7, #20]
 800ddfe:	e017      	b.n	800de30 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	7d1b      	ldrb	r3, [r3, #20]
 800de04:	79fa      	ldrb	r2, [r7, #7]
 800de06:	429a      	cmp	r2, r3
 800de08:	d10f      	bne.n	800de2a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800de0a:	4b14      	ldr	r3, [pc, #80]	; (800de5c <tcp_kill_state+0x90>)
 800de0c:	681a      	ldr	r2, [r3, #0]
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	6a1b      	ldr	r3, [r3, #32]
 800de12:	1ad3      	subs	r3, r2, r3
 800de14:	68fa      	ldr	r2, [r7, #12]
 800de16:	429a      	cmp	r2, r3
 800de18:	d807      	bhi.n	800de2a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800de1a:	4b10      	ldr	r3, [pc, #64]	; (800de5c <tcp_kill_state+0x90>)
 800de1c:	681a      	ldr	r2, [r3, #0]
 800de1e:	697b      	ldr	r3, [r7, #20]
 800de20:	6a1b      	ldr	r3, [r3, #32]
 800de22:	1ad3      	subs	r3, r2, r3
 800de24:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	68db      	ldr	r3, [r3, #12]
 800de2e:	617b      	str	r3, [r7, #20]
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d1e4      	bne.n	800de00 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d003      	beq.n	800de44 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800de3c:	2100      	movs	r1, #0
 800de3e:	6938      	ldr	r0, [r7, #16]
 800de40:	f7fe ff7e 	bl	800cd40 <tcp_abandon>
  }
}
 800de44:	bf00      	nop
 800de46:	3718      	adds	r7, #24
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}
 800de4c:	0801aa6c 	.word	0x0801aa6c
 800de50:	0801aff8 	.word	0x0801aff8
 800de54:	0801aab0 	.word	0x0801aab0
 800de58:	2000f514 	.word	0x2000f514
 800de5c:	2000f518 	.word	0x2000f518

0800de60 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b084      	sub	sp, #16
 800de64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800de66:	2300      	movs	r3, #0
 800de68:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800de6a:	2300      	movs	r3, #0
 800de6c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800de6e:	4b12      	ldr	r3, [pc, #72]	; (800deb8 <tcp_kill_timewait+0x58>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	60fb      	str	r3, [r7, #12]
 800de74:	e012      	b.n	800de9c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800de76:	4b11      	ldr	r3, [pc, #68]	; (800debc <tcp_kill_timewait+0x5c>)
 800de78:	681a      	ldr	r2, [r3, #0]
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	6a1b      	ldr	r3, [r3, #32]
 800de7e:	1ad3      	subs	r3, r2, r3
 800de80:	687a      	ldr	r2, [r7, #4]
 800de82:	429a      	cmp	r2, r3
 800de84:	d807      	bhi.n	800de96 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800de86:	4b0d      	ldr	r3, [pc, #52]	; (800debc <tcp_kill_timewait+0x5c>)
 800de88:	681a      	ldr	r2, [r3, #0]
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	6a1b      	ldr	r3, [r3, #32]
 800de8e:	1ad3      	subs	r3, r2, r3
 800de90:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	68db      	ldr	r3, [r3, #12]
 800de9a:	60fb      	str	r3, [r7, #12]
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d1e9      	bne.n	800de76 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d002      	beq.n	800deae <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dea8:	68b8      	ldr	r0, [r7, #8]
 800deaa:	f7ff f807 	bl	800cebc <tcp_abort>
  }
}
 800deae:	bf00      	nop
 800deb0:	3710      	adds	r7, #16
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}
 800deb6:	bf00      	nop
 800deb8:	2000f524 	.word	0x2000f524
 800debc:	2000f518 	.word	0x2000f518

0800dec0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b082      	sub	sp, #8
 800dec4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800dec6:	4b10      	ldr	r3, [pc, #64]	; (800df08 <tcp_handle_closepend+0x48>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800decc:	e014      	b.n	800def8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	68db      	ldr	r3, [r3, #12]
 800ded2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	8b5b      	ldrh	r3, [r3, #26]
 800ded8:	f003 0308 	and.w	r3, r3, #8
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d009      	beq.n	800def4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	8b5b      	ldrh	r3, [r3, #26]
 800dee4:	f023 0308 	bic.w	r3, r3, #8
 800dee8:	b29a      	uxth	r2, r3
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f7fe fe3a 	bl	800cb68 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d1e7      	bne.n	800dece <tcp_handle_closepend+0xe>
  }
}
 800defe:	bf00      	nop
 800df00:	3708      	adds	r7, #8
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}
 800df06:	bf00      	nop
 800df08:	2000f514 	.word	0x2000f514

0800df0c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b084      	sub	sp, #16
 800df10:	af00      	add	r7, sp, #0
 800df12:	4603      	mov	r3, r0
 800df14:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800df16:	2001      	movs	r0, #1
 800df18:	f7fd fadc 	bl	800b4d4 <memp_malloc>
 800df1c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d126      	bne.n	800df72 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800df24:	f7ff ffcc 	bl	800dec0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800df28:	f7ff ff9a 	bl	800de60 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800df2c:	2001      	movs	r0, #1
 800df2e:	f7fd fad1 	bl	800b4d4 <memp_malloc>
 800df32:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d11b      	bne.n	800df72 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800df3a:	2009      	movs	r0, #9
 800df3c:	f7ff ff46 	bl	800ddcc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800df40:	2001      	movs	r0, #1
 800df42:	f7fd fac7 	bl	800b4d4 <memp_malloc>
 800df46:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d111      	bne.n	800df72 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800df4e:	2008      	movs	r0, #8
 800df50:	f7ff ff3c 	bl	800ddcc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800df54:	2001      	movs	r0, #1
 800df56:	f7fd fabd 	bl	800b4d4 <memp_malloc>
 800df5a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d107      	bne.n	800df72 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800df62:	79fb      	ldrb	r3, [r7, #7]
 800df64:	4618      	mov	r0, r3
 800df66:	f7ff fee3 	bl	800dd30 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800df6a:	2001      	movs	r0, #1
 800df6c:	f7fd fab2 	bl	800b4d4 <memp_malloc>
 800df70:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d03f      	beq.n	800dff8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800df78:	229c      	movs	r2, #156	; 0x9c
 800df7a:	2100      	movs	r1, #0
 800df7c:	68f8      	ldr	r0, [r7, #12]
 800df7e:	f009 ff1c 	bl	8017dba <memset>
    pcb->prio = prio;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	79fa      	ldrb	r2, [r7, #7]
 800df86:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800df8e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800df98:	855a      	strh	r2, [r3, #42]	; 0x2a
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	22ff      	movs	r2, #255	; 0xff
 800dfa6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	f44f 7206 	mov.w	r2, #536	; 0x218
 800dfae:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	2206      	movs	r2, #6
 800dfb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	2206      	movs	r2, #6
 800dfbc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dfc4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	2201      	movs	r2, #1
 800dfca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800dfce:	4b0d      	ldr	r3, [pc, #52]	; (800e004 <tcp_alloc+0xf8>)
 800dfd0:	681a      	ldr	r2, [r3, #0]
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800dfd6:	4b0c      	ldr	r3, [pc, #48]	; (800e008 <tcp_alloc+0xfc>)
 800dfd8:	781a      	ldrb	r2, [r3, #0]
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800dfe4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	4a08      	ldr	r2, [pc, #32]	; (800e00c <tcp_alloc+0x100>)
 800dfec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	4a07      	ldr	r2, [pc, #28]	; (800e010 <tcp_alloc+0x104>)
 800dff4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800dff8:	68fb      	ldr	r3, [r7, #12]
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3710      	adds	r7, #16
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}
 800e002:	bf00      	nop
 800e004:	2000f518 	.word	0x2000f518
 800e008:	20008a8e 	.word	0x20008a8e
 800e00c:	0800dcc5 	.word	0x0800dcc5
 800e010:	006ddd00 	.word	0x006ddd00

0800e014 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b084      	sub	sp, #16
 800e018:	af00      	add	r7, sp, #0
 800e01a:	4603      	mov	r3, r0
 800e01c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e01e:	2040      	movs	r0, #64	; 0x40
 800e020:	f7ff ff74 	bl	800df0c <tcp_alloc>
 800e024:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800e026:	68fb      	ldr	r3, [r7, #12]
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3710      	adds	r7, #16
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e030:	b480      	push	{r7}
 800e032:	b083      	sub	sp, #12
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d002      	beq.n	800e046 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	683a      	ldr	r2, [r7, #0]
 800e044:	611a      	str	r2, [r3, #16]
  }
}
 800e046:	bf00      	nop
 800e048:	370c      	adds	r7, #12
 800e04a:	46bd      	mov	sp, r7
 800e04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e050:	4770      	bx	lr
	...

0800e054 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b082      	sub	sp, #8
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d00e      	beq.n	800e082 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	7d1b      	ldrb	r3, [r3, #20]
 800e068:	2b01      	cmp	r3, #1
 800e06a:	d106      	bne.n	800e07a <tcp_recv+0x26>
 800e06c:	4b07      	ldr	r3, [pc, #28]	; (800e08c <tcp_recv+0x38>)
 800e06e:	f240 72df 	movw	r2, #2015	; 0x7df
 800e072:	4907      	ldr	r1, [pc, #28]	; (800e090 <tcp_recv+0x3c>)
 800e074:	4807      	ldr	r0, [pc, #28]	; (800e094 <tcp_recv+0x40>)
 800e076:	f009 fea9 	bl	8017dcc <iprintf>
    pcb->recv = recv;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	683a      	ldr	r2, [r7, #0]
 800e07e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800e082:	bf00      	nop
 800e084:	3708      	adds	r7, #8
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}
 800e08a:	bf00      	nop
 800e08c:	0801aa6c 	.word	0x0801aa6c
 800e090:	0801b008 	.word	0x0801b008
 800e094:	0801aab0 	.word	0x0801aab0

0800e098 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b082      	sub	sp, #8
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d00e      	beq.n	800e0c6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	7d1b      	ldrb	r3, [r3, #20]
 800e0ac:	2b01      	cmp	r3, #1
 800e0ae:	d106      	bne.n	800e0be <tcp_sent+0x26>
 800e0b0:	4b07      	ldr	r3, [pc, #28]	; (800e0d0 <tcp_sent+0x38>)
 800e0b2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800e0b6:	4907      	ldr	r1, [pc, #28]	; (800e0d4 <tcp_sent+0x3c>)
 800e0b8:	4807      	ldr	r0, [pc, #28]	; (800e0d8 <tcp_sent+0x40>)
 800e0ba:	f009 fe87 	bl	8017dcc <iprintf>
    pcb->sent = sent;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	683a      	ldr	r2, [r7, #0]
 800e0c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800e0c6:	bf00      	nop
 800e0c8:	3708      	adds	r7, #8
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
 800e0ce:	bf00      	nop
 800e0d0:	0801aa6c 	.word	0x0801aa6c
 800e0d4:	0801b030 	.word	0x0801b030
 800e0d8:	0801aab0 	.word	0x0801aab0

0800e0dc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b082      	sub	sp, #8
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d00e      	beq.n	800e10a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	7d1b      	ldrb	r3, [r3, #20]
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d106      	bne.n	800e102 <tcp_err+0x26>
 800e0f4:	4b07      	ldr	r3, [pc, #28]	; (800e114 <tcp_err+0x38>)
 800e0f6:	f640 020d 	movw	r2, #2061	; 0x80d
 800e0fa:	4907      	ldr	r1, [pc, #28]	; (800e118 <tcp_err+0x3c>)
 800e0fc:	4807      	ldr	r0, [pc, #28]	; (800e11c <tcp_err+0x40>)
 800e0fe:	f009 fe65 	bl	8017dcc <iprintf>
    pcb->errf = err;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	683a      	ldr	r2, [r7, #0]
 800e106:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800e10a:	bf00      	nop
 800e10c:	3708      	adds	r7, #8
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}
 800e112:	bf00      	nop
 800e114:	0801aa6c 	.word	0x0801aa6c
 800e118:	0801b058 	.word	0x0801b058
 800e11c:	0801aab0 	.word	0x0801aab0

0800e120 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800e120:	b480      	push	{r7}
 800e122:	b085      	sub	sp, #20
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
 800e128:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d008      	beq.n	800e142 <tcp_accept+0x22>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	7d1b      	ldrb	r3, [r3, #20]
 800e134:	2b01      	cmp	r3, #1
 800e136:	d104      	bne.n	800e142 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	683a      	ldr	r2, [r7, #0]
 800e140:	619a      	str	r2, [r3, #24]
  }
}
 800e142:	bf00      	nop
 800e144:	3714      	adds	r7, #20
 800e146:	46bd      	mov	sp, r7
 800e148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14c:	4770      	bx	lr
	...

0800e150 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b084      	sub	sp, #16
 800e154:	af00      	add	r7, sp, #0
 800e156:	60f8      	str	r0, [r7, #12]
 800e158:	60b9      	str	r1, [r7, #8]
 800e15a:	4613      	mov	r3, r2
 800e15c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d107      	bne.n	800e174 <tcp_poll+0x24>
 800e164:	4b0e      	ldr	r3, [pc, #56]	; (800e1a0 <tcp_poll+0x50>)
 800e166:	f640 023d 	movw	r2, #2109	; 0x83d
 800e16a:	490e      	ldr	r1, [pc, #56]	; (800e1a4 <tcp_poll+0x54>)
 800e16c:	480e      	ldr	r0, [pc, #56]	; (800e1a8 <tcp_poll+0x58>)
 800e16e:	f009 fe2d 	bl	8017dcc <iprintf>
 800e172:	e011      	b.n	800e198 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	7d1b      	ldrb	r3, [r3, #20]
 800e178:	2b01      	cmp	r3, #1
 800e17a:	d106      	bne.n	800e18a <tcp_poll+0x3a>
 800e17c:	4b08      	ldr	r3, [pc, #32]	; (800e1a0 <tcp_poll+0x50>)
 800e17e:	f640 023e 	movw	r2, #2110	; 0x83e
 800e182:	490a      	ldr	r1, [pc, #40]	; (800e1ac <tcp_poll+0x5c>)
 800e184:	4808      	ldr	r0, [pc, #32]	; (800e1a8 <tcp_poll+0x58>)
 800e186:	f009 fe21 	bl	8017dcc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	68ba      	ldr	r2, [r7, #8]
 800e18e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	79fa      	ldrb	r2, [r7, #7]
 800e196:	775a      	strb	r2, [r3, #29]
}
 800e198:	3710      	adds	r7, #16
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	0801aa6c 	.word	0x0801aa6c
 800e1a4:	0801b080 	.word	0x0801b080
 800e1a8:	0801aab0 	.word	0x0801aab0
 800e1ac:	0801b098 	.word	0x0801b098

0800e1b0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b082      	sub	sp, #8
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d107      	bne.n	800e1ce <tcp_pcb_purge+0x1e>
 800e1be:	4b21      	ldr	r3, [pc, #132]	; (800e244 <tcp_pcb_purge+0x94>)
 800e1c0:	f640 0251 	movw	r2, #2129	; 0x851
 800e1c4:	4920      	ldr	r1, [pc, #128]	; (800e248 <tcp_pcb_purge+0x98>)
 800e1c6:	4821      	ldr	r0, [pc, #132]	; (800e24c <tcp_pcb_purge+0x9c>)
 800e1c8:	f009 fe00 	bl	8017dcc <iprintf>
 800e1cc:	e037      	b.n	800e23e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	7d1b      	ldrb	r3, [r3, #20]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d033      	beq.n	800e23e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e1da:	2b0a      	cmp	r3, #10
 800e1dc:	d02f      	beq.n	800e23e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e1e2:	2b01      	cmp	r3, #1
 800e1e4:	d02b      	beq.n	800e23e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d007      	beq.n	800e1fe <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f7fe f86c 	bl	800c2d0 <pbuf_free>
      pcb->refused_data = NULL;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e202:	2b00      	cmp	r3, #0
 800e204:	d002      	beq.n	800e20c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f000 f986 	bl	800e518 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e212:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e218:	4618      	mov	r0, r3
 800e21a:	f7ff fcdd 	bl	800dbd8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e222:	4618      	mov	r0, r3
 800e224:	f7ff fcd8 	bl	800dbd8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2200      	movs	r2, #0
 800e22c:	66da      	str	r2, [r3, #108]	; 0x6c
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2200      	movs	r2, #0
 800e23a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e23e:	3708      	adds	r7, #8
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}
 800e244:	0801aa6c 	.word	0x0801aa6c
 800e248:	0801b0b8 	.word	0x0801b0b8
 800e24c:	0801aab0 	.word	0x0801aab0

0800e250 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b084      	sub	sp, #16
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
 800e258:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d106      	bne.n	800e26e <tcp_pcb_remove+0x1e>
 800e260:	4b3e      	ldr	r3, [pc, #248]	; (800e35c <tcp_pcb_remove+0x10c>)
 800e262:	f640 0283 	movw	r2, #2179	; 0x883
 800e266:	493e      	ldr	r1, [pc, #248]	; (800e360 <tcp_pcb_remove+0x110>)
 800e268:	483e      	ldr	r0, [pc, #248]	; (800e364 <tcp_pcb_remove+0x114>)
 800e26a:	f009 fdaf 	bl	8017dcc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d106      	bne.n	800e282 <tcp_pcb_remove+0x32>
 800e274:	4b39      	ldr	r3, [pc, #228]	; (800e35c <tcp_pcb_remove+0x10c>)
 800e276:	f640 0284 	movw	r2, #2180	; 0x884
 800e27a:	493b      	ldr	r1, [pc, #236]	; (800e368 <tcp_pcb_remove+0x118>)
 800e27c:	4839      	ldr	r0, [pc, #228]	; (800e364 <tcp_pcb_remove+0x114>)
 800e27e:	f009 fda5 	bl	8017dcc <iprintf>

  TCP_RMV(pcblist, pcb);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	683a      	ldr	r2, [r7, #0]
 800e288:	429a      	cmp	r2, r3
 800e28a:	d105      	bne.n	800e298 <tcp_pcb_remove+0x48>
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	68da      	ldr	r2, [r3, #12]
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	601a      	str	r2, [r3, #0]
 800e296:	e013      	b.n	800e2c0 <tcp_pcb_remove+0x70>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	60fb      	str	r3, [r7, #12]
 800e29e:	e00c      	b.n	800e2ba <tcp_pcb_remove+0x6a>
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	68db      	ldr	r3, [r3, #12]
 800e2a4:	683a      	ldr	r2, [r7, #0]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d104      	bne.n	800e2b4 <tcp_pcb_remove+0x64>
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	68da      	ldr	r2, [r3, #12]
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	60da      	str	r2, [r3, #12]
 800e2b2:	e005      	b.n	800e2c0 <tcp_pcb_remove+0x70>
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	68db      	ldr	r3, [r3, #12]
 800e2b8:	60fb      	str	r3, [r7, #12]
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d1ef      	bne.n	800e2a0 <tcp_pcb_remove+0x50>
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e2c6:	6838      	ldr	r0, [r7, #0]
 800e2c8:	f7ff ff72 	bl	800e1b0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	7d1b      	ldrb	r3, [r3, #20]
 800e2d0:	2b0a      	cmp	r3, #10
 800e2d2:	d013      	beq.n	800e2fc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e2d8:	2b01      	cmp	r3, #1
 800e2da:	d00f      	beq.n	800e2fc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	8b5b      	ldrh	r3, [r3, #26]
 800e2e0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d009      	beq.n	800e2fc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	8b5b      	ldrh	r3, [r3, #26]
 800e2ec:	f043 0302 	orr.w	r3, r3, #2
 800e2f0:	b29a      	uxth	r2, r3
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e2f6:	6838      	ldr	r0, [r7, #0]
 800e2f8:	f003 fbc2 	bl	8011a80 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	7d1b      	ldrb	r3, [r3, #20]
 800e300:	2b01      	cmp	r3, #1
 800e302:	d020      	beq.n	800e346 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d006      	beq.n	800e31a <tcp_pcb_remove+0xca>
 800e30c:	4b13      	ldr	r3, [pc, #76]	; (800e35c <tcp_pcb_remove+0x10c>)
 800e30e:	f640 0293 	movw	r2, #2195	; 0x893
 800e312:	4916      	ldr	r1, [pc, #88]	; (800e36c <tcp_pcb_remove+0x11c>)
 800e314:	4813      	ldr	r0, [pc, #76]	; (800e364 <tcp_pcb_remove+0x114>)
 800e316:	f009 fd59 	bl	8017dcc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d006      	beq.n	800e330 <tcp_pcb_remove+0xe0>
 800e322:	4b0e      	ldr	r3, [pc, #56]	; (800e35c <tcp_pcb_remove+0x10c>)
 800e324:	f640 0294 	movw	r2, #2196	; 0x894
 800e328:	4911      	ldr	r1, [pc, #68]	; (800e370 <tcp_pcb_remove+0x120>)
 800e32a:	480e      	ldr	r0, [pc, #56]	; (800e364 <tcp_pcb_remove+0x114>)
 800e32c:	f009 fd4e 	bl	8017dcc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e334:	2b00      	cmp	r3, #0
 800e336:	d006      	beq.n	800e346 <tcp_pcb_remove+0xf6>
 800e338:	4b08      	ldr	r3, [pc, #32]	; (800e35c <tcp_pcb_remove+0x10c>)
 800e33a:	f640 0296 	movw	r2, #2198	; 0x896
 800e33e:	490d      	ldr	r1, [pc, #52]	; (800e374 <tcp_pcb_remove+0x124>)
 800e340:	4808      	ldr	r0, [pc, #32]	; (800e364 <tcp_pcb_remove+0x114>)
 800e342:	f009 fd43 	bl	8017dcc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	2200      	movs	r2, #0
 800e34a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	2200      	movs	r2, #0
 800e350:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e352:	bf00      	nop
 800e354:	3710      	adds	r7, #16
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}
 800e35a:	bf00      	nop
 800e35c:	0801aa6c 	.word	0x0801aa6c
 800e360:	0801b0d4 	.word	0x0801b0d4
 800e364:	0801aab0 	.word	0x0801aab0
 800e368:	0801b0f0 	.word	0x0801b0f0
 800e36c:	0801b110 	.word	0x0801b110
 800e370:	0801b128 	.word	0x0801b128
 800e374:	0801b144 	.word	0x0801b144

0800e378 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b082      	sub	sp, #8
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d106      	bne.n	800e394 <tcp_next_iss+0x1c>
 800e386:	4b0a      	ldr	r3, [pc, #40]	; (800e3b0 <tcp_next_iss+0x38>)
 800e388:	f640 02af 	movw	r2, #2223	; 0x8af
 800e38c:	4909      	ldr	r1, [pc, #36]	; (800e3b4 <tcp_next_iss+0x3c>)
 800e38e:	480a      	ldr	r0, [pc, #40]	; (800e3b8 <tcp_next_iss+0x40>)
 800e390:	f009 fd1c 	bl	8017dcc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e394:	4b09      	ldr	r3, [pc, #36]	; (800e3bc <tcp_next_iss+0x44>)
 800e396:	681a      	ldr	r2, [r3, #0]
 800e398:	4b09      	ldr	r3, [pc, #36]	; (800e3c0 <tcp_next_iss+0x48>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	4413      	add	r3, r2
 800e39e:	4a07      	ldr	r2, [pc, #28]	; (800e3bc <tcp_next_iss+0x44>)
 800e3a0:	6013      	str	r3, [r2, #0]
  return iss;
 800e3a2:	4b06      	ldr	r3, [pc, #24]	; (800e3bc <tcp_next_iss+0x44>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3708      	adds	r7, #8
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
 800e3ae:	bf00      	nop
 800e3b0:	0801aa6c 	.word	0x0801aa6c
 800e3b4:	0801b15c 	.word	0x0801b15c
 800e3b8:	0801aab0 	.word	0x0801aab0
 800e3bc:	20000014 	.word	0x20000014
 800e3c0:	2000f518 	.word	0x2000f518

0800e3c4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b086      	sub	sp, #24
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	60b9      	str	r1, [r7, #8]
 800e3ce:	607a      	str	r2, [r7, #4]
 800e3d0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d106      	bne.n	800e3e6 <tcp_eff_send_mss_netif+0x22>
 800e3d8:	4b14      	ldr	r3, [pc, #80]	; (800e42c <tcp_eff_send_mss_netif+0x68>)
 800e3da:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e3de:	4914      	ldr	r1, [pc, #80]	; (800e430 <tcp_eff_send_mss_netif+0x6c>)
 800e3e0:	4814      	ldr	r0, [pc, #80]	; (800e434 <tcp_eff_send_mss_netif+0x70>)
 800e3e2:	f009 fcf3 	bl	8017dcc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d101      	bne.n	800e3f0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e3ec:	89fb      	ldrh	r3, [r7, #14]
 800e3ee:	e019      	b.n	800e424 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3f4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e3f6:	8afb      	ldrh	r3, [r7, #22]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d012      	beq.n	800e422 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e3fc:	2328      	movs	r3, #40	; 0x28
 800e3fe:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e400:	8afa      	ldrh	r2, [r7, #22]
 800e402:	8abb      	ldrh	r3, [r7, #20]
 800e404:	429a      	cmp	r2, r3
 800e406:	d904      	bls.n	800e412 <tcp_eff_send_mss_netif+0x4e>
 800e408:	8afa      	ldrh	r2, [r7, #22]
 800e40a:	8abb      	ldrh	r3, [r7, #20]
 800e40c:	1ad3      	subs	r3, r2, r3
 800e40e:	b29b      	uxth	r3, r3
 800e410:	e000      	b.n	800e414 <tcp_eff_send_mss_netif+0x50>
 800e412:	2300      	movs	r3, #0
 800e414:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e416:	8a7a      	ldrh	r2, [r7, #18]
 800e418:	89fb      	ldrh	r3, [r7, #14]
 800e41a:	4293      	cmp	r3, r2
 800e41c:	bf28      	it	cs
 800e41e:	4613      	movcs	r3, r2
 800e420:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e422:	89fb      	ldrh	r3, [r7, #14]
}
 800e424:	4618      	mov	r0, r3
 800e426:	3718      	adds	r7, #24
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}
 800e42c:	0801aa6c 	.word	0x0801aa6c
 800e430:	0801b178 	.word	0x0801b178
 800e434:	0801aab0 	.word	0x0801aab0

0800e438 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b084      	sub	sp, #16
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d119      	bne.n	800e480 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e44c:	4b10      	ldr	r3, [pc, #64]	; (800e490 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e44e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800e452:	4910      	ldr	r1, [pc, #64]	; (800e494 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e454:	4810      	ldr	r0, [pc, #64]	; (800e498 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e456:	f009 fcb9 	bl	8017dcc <iprintf>

  while (pcb != NULL) {
 800e45a:	e011      	b.n	800e480 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	681a      	ldr	r2, [r3, #0]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	429a      	cmp	r2, r3
 800e466:	d108      	bne.n	800e47a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	68db      	ldr	r3, [r3, #12]
 800e46c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e46e:	68f8      	ldr	r0, [r7, #12]
 800e470:	f7fe fd24 	bl	800cebc <tcp_abort>
      pcb = next;
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	60fb      	str	r3, [r7, #12]
 800e478:	e002      	b.n	800e480 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	68db      	ldr	r3, [r3, #12]
 800e47e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d1ea      	bne.n	800e45c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e486:	bf00      	nop
 800e488:	3710      	adds	r7, #16
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
 800e48e:	bf00      	nop
 800e490:	0801aa6c 	.word	0x0801aa6c
 800e494:	0801b1a0 	.word	0x0801b1a0
 800e498:	0801aab0 	.word	0x0801aab0

0800e49c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b084      	sub	sp, #16
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d02a      	beq.n	800e502 <tcp_netif_ip_addr_changed+0x66>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d026      	beq.n	800e502 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e4b4:	4b15      	ldr	r3, [pc, #84]	; (800e50c <tcp_netif_ip_addr_changed+0x70>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f7ff ffbc 	bl	800e438 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e4c0:	4b13      	ldr	r3, [pc, #76]	; (800e510 <tcp_netif_ip_addr_changed+0x74>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	4619      	mov	r1, r3
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f7ff ffb6 	bl	800e438 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d017      	beq.n	800e502 <tcp_netif_ip_addr_changed+0x66>
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d013      	beq.n	800e502 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e4da:	4b0e      	ldr	r3, [pc, #56]	; (800e514 <tcp_netif_ip_addr_changed+0x78>)
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	60fb      	str	r3, [r7, #12]
 800e4e0:	e00c      	b.n	800e4fc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	681a      	ldr	r2, [r3, #0]
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d103      	bne.n	800e4f6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	681a      	ldr	r2, [r3, #0]
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	68db      	ldr	r3, [r3, #12]
 800e4fa:	60fb      	str	r3, [r7, #12]
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d1ef      	bne.n	800e4e2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e502:	bf00      	nop
 800e504:	3710      	adds	r7, #16
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}
 800e50a:	bf00      	nop
 800e50c:	2000f514 	.word	0x2000f514
 800e510:	2000f520 	.word	0x2000f520
 800e514:	2000f51c 	.word	0x2000f51c

0800e518 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b082      	sub	sp, #8
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e524:	2b00      	cmp	r3, #0
 800e526:	d007      	beq.n	800e538 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e52c:	4618      	mov	r0, r3
 800e52e:	f7ff fb53 	bl	800dbd8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2200      	movs	r2, #0
 800e536:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e538:	bf00      	nop
 800e53a:	3708      	adds	r7, #8
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd80      	pop	{r7, pc}

0800e540 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e540:	b590      	push	{r4, r7, lr}
 800e542:	b08d      	sub	sp, #52	; 0x34
 800e544:	af04      	add	r7, sp, #16
 800e546:	6078      	str	r0, [r7, #4]
 800e548:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d105      	bne.n	800e55c <tcp_input+0x1c>
 800e550:	4b9b      	ldr	r3, [pc, #620]	; (800e7c0 <tcp_input+0x280>)
 800e552:	2283      	movs	r2, #131	; 0x83
 800e554:	499b      	ldr	r1, [pc, #620]	; (800e7c4 <tcp_input+0x284>)
 800e556:	489c      	ldr	r0, [pc, #624]	; (800e7c8 <tcp_input+0x288>)
 800e558:	f009 fc38 	bl	8017dcc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	685b      	ldr	r3, [r3, #4]
 800e560:	4a9a      	ldr	r2, [pc, #616]	; (800e7cc <tcp_input+0x28c>)
 800e562:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	895b      	ldrh	r3, [r3, #10]
 800e568:	2b13      	cmp	r3, #19
 800e56a:	f240 83c4 	bls.w	800ecf6 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e56e:	4b98      	ldr	r3, [pc, #608]	; (800e7d0 <tcp_input+0x290>)
 800e570:	695a      	ldr	r2, [r3, #20]
 800e572:	4b97      	ldr	r3, [pc, #604]	; (800e7d0 <tcp_input+0x290>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	4619      	mov	r1, r3
 800e578:	4610      	mov	r0, r2
 800e57a:	f008 fa79 	bl	8016a70 <ip4_addr_isbroadcast_u32>
 800e57e:	4603      	mov	r3, r0
 800e580:	2b00      	cmp	r3, #0
 800e582:	f040 83ba 	bne.w	800ecfa <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e586:	4b92      	ldr	r3, [pc, #584]	; (800e7d0 <tcp_input+0x290>)
 800e588:	695b      	ldr	r3, [r3, #20]
 800e58a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e58e:	2be0      	cmp	r3, #224	; 0xe0
 800e590:	f000 83b3 	beq.w	800ecfa <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e594:	4b8d      	ldr	r3, [pc, #564]	; (800e7cc <tcp_input+0x28c>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	899b      	ldrh	r3, [r3, #12]
 800e59a:	b29b      	uxth	r3, r3
 800e59c:	4618      	mov	r0, r3
 800e59e:	f7fc faad 	bl	800aafc <lwip_htons>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	0b1b      	lsrs	r3, r3, #12
 800e5a6:	b29b      	uxth	r3, r3
 800e5a8:	b2db      	uxtb	r3, r3
 800e5aa:	009b      	lsls	r3, r3, #2
 800e5ac:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e5ae:	7cbb      	ldrb	r3, [r7, #18]
 800e5b0:	2b13      	cmp	r3, #19
 800e5b2:	f240 83a2 	bls.w	800ecfa <tcp_input+0x7ba>
 800e5b6:	7cbb      	ldrb	r3, [r7, #18]
 800e5b8:	b29a      	uxth	r2, r3
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	891b      	ldrh	r3, [r3, #8]
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	f200 839b 	bhi.w	800ecfa <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e5c4:	7cbb      	ldrb	r3, [r7, #18]
 800e5c6:	b29b      	uxth	r3, r3
 800e5c8:	3b14      	subs	r3, #20
 800e5ca:	b29a      	uxth	r2, r3
 800e5cc:	4b81      	ldr	r3, [pc, #516]	; (800e7d4 <tcp_input+0x294>)
 800e5ce:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e5d0:	4b81      	ldr	r3, [pc, #516]	; (800e7d8 <tcp_input+0x298>)
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	895a      	ldrh	r2, [r3, #10]
 800e5da:	7cbb      	ldrb	r3, [r7, #18]
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d309      	bcc.n	800e5f6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e5e2:	4b7c      	ldr	r3, [pc, #496]	; (800e7d4 <tcp_input+0x294>)
 800e5e4:	881a      	ldrh	r2, [r3, #0]
 800e5e6:	4b7d      	ldr	r3, [pc, #500]	; (800e7dc <tcp_input+0x29c>)
 800e5e8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e5ea:	7cbb      	ldrb	r3, [r7, #18]
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f7fd fde8 	bl	800c1c4 <pbuf_remove_header>
 800e5f4:	e04e      	b.n	800e694 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d105      	bne.n	800e60a <tcp_input+0xca>
 800e5fe:	4b70      	ldr	r3, [pc, #448]	; (800e7c0 <tcp_input+0x280>)
 800e600:	22c2      	movs	r2, #194	; 0xc2
 800e602:	4977      	ldr	r1, [pc, #476]	; (800e7e0 <tcp_input+0x2a0>)
 800e604:	4870      	ldr	r0, [pc, #448]	; (800e7c8 <tcp_input+0x288>)
 800e606:	f009 fbe1 	bl	8017dcc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e60a:	2114      	movs	r1, #20
 800e60c:	6878      	ldr	r0, [r7, #4]
 800e60e:	f7fd fdd9 	bl	800c1c4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	895a      	ldrh	r2, [r3, #10]
 800e616:	4b71      	ldr	r3, [pc, #452]	; (800e7dc <tcp_input+0x29c>)
 800e618:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e61a:	4b6e      	ldr	r3, [pc, #440]	; (800e7d4 <tcp_input+0x294>)
 800e61c:	881a      	ldrh	r2, [r3, #0]
 800e61e:	4b6f      	ldr	r3, [pc, #444]	; (800e7dc <tcp_input+0x29c>)
 800e620:	881b      	ldrh	r3, [r3, #0]
 800e622:	1ad3      	subs	r3, r2, r3
 800e624:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e626:	4b6d      	ldr	r3, [pc, #436]	; (800e7dc <tcp_input+0x29c>)
 800e628:	881b      	ldrh	r3, [r3, #0]
 800e62a:	4619      	mov	r1, r3
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f7fd fdc9 	bl	800c1c4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	895b      	ldrh	r3, [r3, #10]
 800e638:	8a3a      	ldrh	r2, [r7, #16]
 800e63a:	429a      	cmp	r2, r3
 800e63c:	f200 835f 	bhi.w	800ecfe <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	685b      	ldr	r3, [r3, #4]
 800e646:	4a64      	ldr	r2, [pc, #400]	; (800e7d8 <tcp_input+0x298>)
 800e648:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	8a3a      	ldrh	r2, [r7, #16]
 800e650:	4611      	mov	r1, r2
 800e652:	4618      	mov	r0, r3
 800e654:	f7fd fdb6 	bl	800c1c4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	891a      	ldrh	r2, [r3, #8]
 800e65c:	8a3b      	ldrh	r3, [r7, #16]
 800e65e:	1ad3      	subs	r3, r2, r3
 800e660:	b29a      	uxth	r2, r3
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	895b      	ldrh	r3, [r3, #10]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d005      	beq.n	800e67a <tcp_input+0x13a>
 800e66e:	4b54      	ldr	r3, [pc, #336]	; (800e7c0 <tcp_input+0x280>)
 800e670:	22df      	movs	r2, #223	; 0xdf
 800e672:	495c      	ldr	r1, [pc, #368]	; (800e7e4 <tcp_input+0x2a4>)
 800e674:	4854      	ldr	r0, [pc, #336]	; (800e7c8 <tcp_input+0x288>)
 800e676:	f009 fba9 	bl	8017dcc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	891a      	ldrh	r2, [r3, #8]
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	891b      	ldrh	r3, [r3, #8]
 800e684:	429a      	cmp	r2, r3
 800e686:	d005      	beq.n	800e694 <tcp_input+0x154>
 800e688:	4b4d      	ldr	r3, [pc, #308]	; (800e7c0 <tcp_input+0x280>)
 800e68a:	22e0      	movs	r2, #224	; 0xe0
 800e68c:	4956      	ldr	r1, [pc, #344]	; (800e7e8 <tcp_input+0x2a8>)
 800e68e:	484e      	ldr	r0, [pc, #312]	; (800e7c8 <tcp_input+0x288>)
 800e690:	f009 fb9c 	bl	8017dcc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e694:	4b4d      	ldr	r3, [pc, #308]	; (800e7cc <tcp_input+0x28c>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	881b      	ldrh	r3, [r3, #0]
 800e69a:	b29a      	uxth	r2, r3
 800e69c:	4b4b      	ldr	r3, [pc, #300]	; (800e7cc <tcp_input+0x28c>)
 800e69e:	681c      	ldr	r4, [r3, #0]
 800e6a0:	4610      	mov	r0, r2
 800e6a2:	f7fc fa2b 	bl	800aafc <lwip_htons>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e6aa:	4b48      	ldr	r3, [pc, #288]	; (800e7cc <tcp_input+0x28c>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	885b      	ldrh	r3, [r3, #2]
 800e6b0:	b29a      	uxth	r2, r3
 800e6b2:	4b46      	ldr	r3, [pc, #280]	; (800e7cc <tcp_input+0x28c>)
 800e6b4:	681c      	ldr	r4, [r3, #0]
 800e6b6:	4610      	mov	r0, r2
 800e6b8:	f7fc fa20 	bl	800aafc <lwip_htons>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e6c0:	4b42      	ldr	r3, [pc, #264]	; (800e7cc <tcp_input+0x28c>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	685a      	ldr	r2, [r3, #4]
 800e6c6:	4b41      	ldr	r3, [pc, #260]	; (800e7cc <tcp_input+0x28c>)
 800e6c8:	681c      	ldr	r4, [r3, #0]
 800e6ca:	4610      	mov	r0, r2
 800e6cc:	f7fc fa2b 	bl	800ab26 <lwip_htonl>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	6063      	str	r3, [r4, #4]
 800e6d4:	6863      	ldr	r3, [r4, #4]
 800e6d6:	4a45      	ldr	r2, [pc, #276]	; (800e7ec <tcp_input+0x2ac>)
 800e6d8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e6da:	4b3c      	ldr	r3, [pc, #240]	; (800e7cc <tcp_input+0x28c>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	689a      	ldr	r2, [r3, #8]
 800e6e0:	4b3a      	ldr	r3, [pc, #232]	; (800e7cc <tcp_input+0x28c>)
 800e6e2:	681c      	ldr	r4, [r3, #0]
 800e6e4:	4610      	mov	r0, r2
 800e6e6:	f7fc fa1e 	bl	800ab26 <lwip_htonl>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	60a3      	str	r3, [r4, #8]
 800e6ee:	68a3      	ldr	r3, [r4, #8]
 800e6f0:	4a3f      	ldr	r2, [pc, #252]	; (800e7f0 <tcp_input+0x2b0>)
 800e6f2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e6f4:	4b35      	ldr	r3, [pc, #212]	; (800e7cc <tcp_input+0x28c>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	89db      	ldrh	r3, [r3, #14]
 800e6fa:	b29a      	uxth	r2, r3
 800e6fc:	4b33      	ldr	r3, [pc, #204]	; (800e7cc <tcp_input+0x28c>)
 800e6fe:	681c      	ldr	r4, [r3, #0]
 800e700:	4610      	mov	r0, r2
 800e702:	f7fc f9fb 	bl	800aafc <lwip_htons>
 800e706:	4603      	mov	r3, r0
 800e708:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e70a:	4b30      	ldr	r3, [pc, #192]	; (800e7cc <tcp_input+0x28c>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	899b      	ldrh	r3, [r3, #12]
 800e710:	b29b      	uxth	r3, r3
 800e712:	4618      	mov	r0, r3
 800e714:	f7fc f9f2 	bl	800aafc <lwip_htons>
 800e718:	4603      	mov	r3, r0
 800e71a:	b2db      	uxtb	r3, r3
 800e71c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e720:	b2da      	uxtb	r2, r3
 800e722:	4b34      	ldr	r3, [pc, #208]	; (800e7f4 <tcp_input+0x2b4>)
 800e724:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	891a      	ldrh	r2, [r3, #8]
 800e72a:	4b33      	ldr	r3, [pc, #204]	; (800e7f8 <tcp_input+0x2b8>)
 800e72c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e72e:	4b31      	ldr	r3, [pc, #196]	; (800e7f4 <tcp_input+0x2b4>)
 800e730:	781b      	ldrb	r3, [r3, #0]
 800e732:	f003 0303 	and.w	r3, r3, #3
 800e736:	2b00      	cmp	r3, #0
 800e738:	d00c      	beq.n	800e754 <tcp_input+0x214>
    tcplen++;
 800e73a:	4b2f      	ldr	r3, [pc, #188]	; (800e7f8 <tcp_input+0x2b8>)
 800e73c:	881b      	ldrh	r3, [r3, #0]
 800e73e:	3301      	adds	r3, #1
 800e740:	b29a      	uxth	r2, r3
 800e742:	4b2d      	ldr	r3, [pc, #180]	; (800e7f8 <tcp_input+0x2b8>)
 800e744:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	891a      	ldrh	r2, [r3, #8]
 800e74a:	4b2b      	ldr	r3, [pc, #172]	; (800e7f8 <tcp_input+0x2b8>)
 800e74c:	881b      	ldrh	r3, [r3, #0]
 800e74e:	429a      	cmp	r2, r3
 800e750:	f200 82d7 	bhi.w	800ed02 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e754:	2300      	movs	r3, #0
 800e756:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e758:	4b28      	ldr	r3, [pc, #160]	; (800e7fc <tcp_input+0x2bc>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	61fb      	str	r3, [r7, #28]
 800e75e:	e09d      	b.n	800e89c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e760:	69fb      	ldr	r3, [r7, #28]
 800e762:	7d1b      	ldrb	r3, [r3, #20]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d105      	bne.n	800e774 <tcp_input+0x234>
 800e768:	4b15      	ldr	r3, [pc, #84]	; (800e7c0 <tcp_input+0x280>)
 800e76a:	22fb      	movs	r2, #251	; 0xfb
 800e76c:	4924      	ldr	r1, [pc, #144]	; (800e800 <tcp_input+0x2c0>)
 800e76e:	4816      	ldr	r0, [pc, #88]	; (800e7c8 <tcp_input+0x288>)
 800e770:	f009 fb2c 	bl	8017dcc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e774:	69fb      	ldr	r3, [r7, #28]
 800e776:	7d1b      	ldrb	r3, [r3, #20]
 800e778:	2b0a      	cmp	r3, #10
 800e77a:	d105      	bne.n	800e788 <tcp_input+0x248>
 800e77c:	4b10      	ldr	r3, [pc, #64]	; (800e7c0 <tcp_input+0x280>)
 800e77e:	22fc      	movs	r2, #252	; 0xfc
 800e780:	4920      	ldr	r1, [pc, #128]	; (800e804 <tcp_input+0x2c4>)
 800e782:	4811      	ldr	r0, [pc, #68]	; (800e7c8 <tcp_input+0x288>)
 800e784:	f009 fb22 	bl	8017dcc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e788:	69fb      	ldr	r3, [r7, #28]
 800e78a:	7d1b      	ldrb	r3, [r3, #20]
 800e78c:	2b01      	cmp	r3, #1
 800e78e:	d105      	bne.n	800e79c <tcp_input+0x25c>
 800e790:	4b0b      	ldr	r3, [pc, #44]	; (800e7c0 <tcp_input+0x280>)
 800e792:	22fd      	movs	r2, #253	; 0xfd
 800e794:	491c      	ldr	r1, [pc, #112]	; (800e808 <tcp_input+0x2c8>)
 800e796:	480c      	ldr	r0, [pc, #48]	; (800e7c8 <tcp_input+0x288>)
 800e798:	f009 fb18 	bl	8017dcc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e79c:	69fb      	ldr	r3, [r7, #28]
 800e79e:	7a1b      	ldrb	r3, [r3, #8]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d033      	beq.n	800e80c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e7a4:	69fb      	ldr	r3, [r7, #28]
 800e7a6:	7a1a      	ldrb	r2, [r3, #8]
 800e7a8:	4b09      	ldr	r3, [pc, #36]	; (800e7d0 <tcp_input+0x290>)
 800e7aa:	685b      	ldr	r3, [r3, #4]
 800e7ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e7b4:	429a      	cmp	r2, r3
 800e7b6:	d029      	beq.n	800e80c <tcp_input+0x2cc>
      prev = pcb;
 800e7b8:	69fb      	ldr	r3, [r7, #28]
 800e7ba:	61bb      	str	r3, [r7, #24]
      continue;
 800e7bc:	e06b      	b.n	800e896 <tcp_input+0x356>
 800e7be:	bf00      	nop
 800e7c0:	0801b1d4 	.word	0x0801b1d4
 800e7c4:	0801b208 	.word	0x0801b208
 800e7c8:	0801b220 	.word	0x0801b220
 800e7cc:	20008aa0 	.word	0x20008aa0
 800e7d0:	2000bde0 	.word	0x2000bde0
 800e7d4:	20008aa4 	.word	0x20008aa4
 800e7d8:	20008aa8 	.word	0x20008aa8
 800e7dc:	20008aa6 	.word	0x20008aa6
 800e7e0:	0801b248 	.word	0x0801b248
 800e7e4:	0801b258 	.word	0x0801b258
 800e7e8:	0801b264 	.word	0x0801b264
 800e7ec:	20008ab0 	.word	0x20008ab0
 800e7f0:	20008ab4 	.word	0x20008ab4
 800e7f4:	20008abc 	.word	0x20008abc
 800e7f8:	20008aba 	.word	0x20008aba
 800e7fc:	2000f514 	.word	0x2000f514
 800e800:	0801b284 	.word	0x0801b284
 800e804:	0801b2ac 	.word	0x0801b2ac
 800e808:	0801b2d8 	.word	0x0801b2d8
    }

    if (pcb->remote_port == tcphdr->src &&
 800e80c:	69fb      	ldr	r3, [r7, #28]
 800e80e:	8b1a      	ldrh	r2, [r3, #24]
 800e810:	4b94      	ldr	r3, [pc, #592]	; (800ea64 <tcp_input+0x524>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	881b      	ldrh	r3, [r3, #0]
 800e816:	b29b      	uxth	r3, r3
 800e818:	429a      	cmp	r2, r3
 800e81a:	d13a      	bne.n	800e892 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e81c:	69fb      	ldr	r3, [r7, #28]
 800e81e:	8ada      	ldrh	r2, [r3, #22]
 800e820:	4b90      	ldr	r3, [pc, #576]	; (800ea64 <tcp_input+0x524>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	885b      	ldrh	r3, [r3, #2]
 800e826:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e828:	429a      	cmp	r2, r3
 800e82a:	d132      	bne.n	800e892 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e82c:	69fb      	ldr	r3, [r7, #28]
 800e82e:	685a      	ldr	r2, [r3, #4]
 800e830:	4b8d      	ldr	r3, [pc, #564]	; (800ea68 <tcp_input+0x528>)
 800e832:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e834:	429a      	cmp	r2, r3
 800e836:	d12c      	bne.n	800e892 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e838:	69fb      	ldr	r3, [r7, #28]
 800e83a:	681a      	ldr	r2, [r3, #0]
 800e83c:	4b8a      	ldr	r3, [pc, #552]	; (800ea68 <tcp_input+0x528>)
 800e83e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e840:	429a      	cmp	r2, r3
 800e842:	d126      	bne.n	800e892 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e844:	69fb      	ldr	r3, [r7, #28]
 800e846:	68db      	ldr	r3, [r3, #12]
 800e848:	69fa      	ldr	r2, [r7, #28]
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d106      	bne.n	800e85c <tcp_input+0x31c>
 800e84e:	4b87      	ldr	r3, [pc, #540]	; (800ea6c <tcp_input+0x52c>)
 800e850:	f240 120d 	movw	r2, #269	; 0x10d
 800e854:	4986      	ldr	r1, [pc, #536]	; (800ea70 <tcp_input+0x530>)
 800e856:	4887      	ldr	r0, [pc, #540]	; (800ea74 <tcp_input+0x534>)
 800e858:	f009 fab8 	bl	8017dcc <iprintf>
      if (prev != NULL) {
 800e85c:	69bb      	ldr	r3, [r7, #24]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d00a      	beq.n	800e878 <tcp_input+0x338>
        prev->next = pcb->next;
 800e862:	69fb      	ldr	r3, [r7, #28]
 800e864:	68da      	ldr	r2, [r3, #12]
 800e866:	69bb      	ldr	r3, [r7, #24]
 800e868:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e86a:	4b83      	ldr	r3, [pc, #524]	; (800ea78 <tcp_input+0x538>)
 800e86c:	681a      	ldr	r2, [r3, #0]
 800e86e:	69fb      	ldr	r3, [r7, #28]
 800e870:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e872:	4a81      	ldr	r2, [pc, #516]	; (800ea78 <tcp_input+0x538>)
 800e874:	69fb      	ldr	r3, [r7, #28]
 800e876:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e878:	69fb      	ldr	r3, [r7, #28]
 800e87a:	68db      	ldr	r3, [r3, #12]
 800e87c:	69fa      	ldr	r2, [r7, #28]
 800e87e:	429a      	cmp	r2, r3
 800e880:	d111      	bne.n	800e8a6 <tcp_input+0x366>
 800e882:	4b7a      	ldr	r3, [pc, #488]	; (800ea6c <tcp_input+0x52c>)
 800e884:	f240 1215 	movw	r2, #277	; 0x115
 800e888:	497c      	ldr	r1, [pc, #496]	; (800ea7c <tcp_input+0x53c>)
 800e88a:	487a      	ldr	r0, [pc, #488]	; (800ea74 <tcp_input+0x534>)
 800e88c:	f009 fa9e 	bl	8017dcc <iprintf>
      break;
 800e890:	e009      	b.n	800e8a6 <tcp_input+0x366>
    }
    prev = pcb;
 800e892:	69fb      	ldr	r3, [r7, #28]
 800e894:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e896:	69fb      	ldr	r3, [r7, #28]
 800e898:	68db      	ldr	r3, [r3, #12]
 800e89a:	61fb      	str	r3, [r7, #28]
 800e89c:	69fb      	ldr	r3, [r7, #28]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	f47f af5e 	bne.w	800e760 <tcp_input+0x220>
 800e8a4:	e000      	b.n	800e8a8 <tcp_input+0x368>
      break;
 800e8a6:	bf00      	nop
  }

  if (pcb == NULL) {
 800e8a8:	69fb      	ldr	r3, [r7, #28]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	f040 8095 	bne.w	800e9da <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e8b0:	4b73      	ldr	r3, [pc, #460]	; (800ea80 <tcp_input+0x540>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	61fb      	str	r3, [r7, #28]
 800e8b6:	e03f      	b.n	800e938 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e8b8:	69fb      	ldr	r3, [r7, #28]
 800e8ba:	7d1b      	ldrb	r3, [r3, #20]
 800e8bc:	2b0a      	cmp	r3, #10
 800e8be:	d006      	beq.n	800e8ce <tcp_input+0x38e>
 800e8c0:	4b6a      	ldr	r3, [pc, #424]	; (800ea6c <tcp_input+0x52c>)
 800e8c2:	f240 121f 	movw	r2, #287	; 0x11f
 800e8c6:	496f      	ldr	r1, [pc, #444]	; (800ea84 <tcp_input+0x544>)
 800e8c8:	486a      	ldr	r0, [pc, #424]	; (800ea74 <tcp_input+0x534>)
 800e8ca:	f009 fa7f 	bl	8017dcc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e8ce:	69fb      	ldr	r3, [r7, #28]
 800e8d0:	7a1b      	ldrb	r3, [r3, #8]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d009      	beq.n	800e8ea <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e8d6:	69fb      	ldr	r3, [r7, #28]
 800e8d8:	7a1a      	ldrb	r2, [r3, #8]
 800e8da:	4b63      	ldr	r3, [pc, #396]	; (800ea68 <tcp_input+0x528>)
 800e8dc:	685b      	ldr	r3, [r3, #4]
 800e8de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	d122      	bne.n	800e930 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e8ea:	69fb      	ldr	r3, [r7, #28]
 800e8ec:	8b1a      	ldrh	r2, [r3, #24]
 800e8ee:	4b5d      	ldr	r3, [pc, #372]	; (800ea64 <tcp_input+0x524>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	881b      	ldrh	r3, [r3, #0]
 800e8f4:	b29b      	uxth	r3, r3
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	d11b      	bne.n	800e932 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e8fa:	69fb      	ldr	r3, [r7, #28]
 800e8fc:	8ada      	ldrh	r2, [r3, #22]
 800e8fe:	4b59      	ldr	r3, [pc, #356]	; (800ea64 <tcp_input+0x524>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	885b      	ldrh	r3, [r3, #2]
 800e904:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e906:	429a      	cmp	r2, r3
 800e908:	d113      	bne.n	800e932 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e90a:	69fb      	ldr	r3, [r7, #28]
 800e90c:	685a      	ldr	r2, [r3, #4]
 800e90e:	4b56      	ldr	r3, [pc, #344]	; (800ea68 <tcp_input+0x528>)
 800e910:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e912:	429a      	cmp	r2, r3
 800e914:	d10d      	bne.n	800e932 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e916:	69fb      	ldr	r3, [r7, #28]
 800e918:	681a      	ldr	r2, [r3, #0]
 800e91a:	4b53      	ldr	r3, [pc, #332]	; (800ea68 <tcp_input+0x528>)
 800e91c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e91e:	429a      	cmp	r2, r3
 800e920:	d107      	bne.n	800e932 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e922:	69f8      	ldr	r0, [r7, #28]
 800e924:	f000 fb52 	bl	800efcc <tcp_timewait_input>
        }
        pbuf_free(p);
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f7fd fcd1 	bl	800c2d0 <pbuf_free>
        return;
 800e92e:	e1ee      	b.n	800ed0e <tcp_input+0x7ce>
        continue;
 800e930:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e932:	69fb      	ldr	r3, [r7, #28]
 800e934:	68db      	ldr	r3, [r3, #12]
 800e936:	61fb      	str	r3, [r7, #28]
 800e938:	69fb      	ldr	r3, [r7, #28]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d1bc      	bne.n	800e8b8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e93e:	2300      	movs	r3, #0
 800e940:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e942:	4b51      	ldr	r3, [pc, #324]	; (800ea88 <tcp_input+0x548>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	617b      	str	r3, [r7, #20]
 800e948:	e02a      	b.n	800e9a0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	7a1b      	ldrb	r3, [r3, #8]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d00c      	beq.n	800e96c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	7a1a      	ldrb	r2, [r3, #8]
 800e956:	4b44      	ldr	r3, [pc, #272]	; (800ea68 <tcp_input+0x528>)
 800e958:	685b      	ldr	r3, [r3, #4]
 800e95a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e95e:	3301      	adds	r3, #1
 800e960:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e962:	429a      	cmp	r2, r3
 800e964:	d002      	beq.n	800e96c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	61bb      	str	r3, [r7, #24]
        continue;
 800e96a:	e016      	b.n	800e99a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	8ada      	ldrh	r2, [r3, #22]
 800e970:	4b3c      	ldr	r3, [pc, #240]	; (800ea64 <tcp_input+0x524>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	885b      	ldrh	r3, [r3, #2]
 800e976:	b29b      	uxth	r3, r3
 800e978:	429a      	cmp	r2, r3
 800e97a:	d10c      	bne.n	800e996 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	681a      	ldr	r2, [r3, #0]
 800e980:	4b39      	ldr	r3, [pc, #228]	; (800ea68 <tcp_input+0x528>)
 800e982:	695b      	ldr	r3, [r3, #20]
 800e984:	429a      	cmp	r2, r3
 800e986:	d00f      	beq.n	800e9a8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d00d      	beq.n	800e9aa <tcp_input+0x46a>
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d009      	beq.n	800e9aa <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e996:	697b      	ldr	r3, [r7, #20]
 800e998:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	68db      	ldr	r3, [r3, #12]
 800e99e:	617b      	str	r3, [r7, #20]
 800e9a0:	697b      	ldr	r3, [r7, #20]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d1d1      	bne.n	800e94a <tcp_input+0x40a>
 800e9a6:	e000      	b.n	800e9aa <tcp_input+0x46a>
            break;
 800e9a8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d014      	beq.n	800e9da <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e9b0:	69bb      	ldr	r3, [r7, #24]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d00a      	beq.n	800e9cc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e9b6:	697b      	ldr	r3, [r7, #20]
 800e9b8:	68da      	ldr	r2, [r3, #12]
 800e9ba:	69bb      	ldr	r3, [r7, #24]
 800e9bc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e9be:	4b32      	ldr	r3, [pc, #200]	; (800ea88 <tcp_input+0x548>)
 800e9c0:	681a      	ldr	r2, [r3, #0]
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e9c6:	4a30      	ldr	r2, [pc, #192]	; (800ea88 <tcp_input+0x548>)
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e9cc:	6978      	ldr	r0, [r7, #20]
 800e9ce:	f000 f9ff 	bl	800edd0 <tcp_listen_input>
      }
      pbuf_free(p);
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f7fd fc7c 	bl	800c2d0 <pbuf_free>
      return;
 800e9d8:	e199      	b.n	800ed0e <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e9da:	69fb      	ldr	r3, [r7, #28]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	f000 8160 	beq.w	800eca2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e9e2:	4b2a      	ldr	r3, [pc, #168]	; (800ea8c <tcp_input+0x54c>)
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	891a      	ldrh	r2, [r3, #8]
 800e9ec:	4b27      	ldr	r3, [pc, #156]	; (800ea8c <tcp_input+0x54c>)
 800e9ee:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e9f0:	4a26      	ldr	r2, [pc, #152]	; (800ea8c <tcp_input+0x54c>)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e9f6:	4b1b      	ldr	r3, [pc, #108]	; (800ea64 <tcp_input+0x524>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	4a24      	ldr	r2, [pc, #144]	; (800ea8c <tcp_input+0x54c>)
 800e9fc:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e9fe:	4b24      	ldr	r3, [pc, #144]	; (800ea90 <tcp_input+0x550>)
 800ea00:	2200      	movs	r2, #0
 800ea02:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ea04:	4b23      	ldr	r3, [pc, #140]	; (800ea94 <tcp_input+0x554>)
 800ea06:	2200      	movs	r2, #0
 800ea08:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ea0a:	4b23      	ldr	r3, [pc, #140]	; (800ea98 <tcp_input+0x558>)
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ea10:	4b22      	ldr	r3, [pc, #136]	; (800ea9c <tcp_input+0x55c>)
 800ea12:	781b      	ldrb	r3, [r3, #0]
 800ea14:	f003 0308 	and.w	r3, r3, #8
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d006      	beq.n	800ea2a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	7b5b      	ldrb	r3, [r3, #13]
 800ea20:	f043 0301 	orr.w	r3, r3, #1
 800ea24:	b2da      	uxtb	r2, r3
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ea2a:	69fb      	ldr	r3, [r7, #28]
 800ea2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d038      	beq.n	800eaa4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ea32:	69f8      	ldr	r0, [r7, #28]
 800ea34:	f7ff f854 	bl	800dae0 <tcp_process_refused_data>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	f113 0f0d 	cmn.w	r3, #13
 800ea3e:	d007      	beq.n	800ea50 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ea40:	69fb      	ldr	r3, [r7, #28]
 800ea42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d02d      	beq.n	800eaa4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ea48:	4b15      	ldr	r3, [pc, #84]	; (800eaa0 <tcp_input+0x560>)
 800ea4a:	881b      	ldrh	r3, [r3, #0]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d029      	beq.n	800eaa4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ea50:	69fb      	ldr	r3, [r7, #28]
 800ea52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	f040 8104 	bne.w	800ec62 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ea5a:	69f8      	ldr	r0, [r7, #28]
 800ea5c:	f003 fe26 	bl	80126ac <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800ea60:	e0ff      	b.n	800ec62 <tcp_input+0x722>
 800ea62:	bf00      	nop
 800ea64:	20008aa0 	.word	0x20008aa0
 800ea68:	2000bde0 	.word	0x2000bde0
 800ea6c:	0801b1d4 	.word	0x0801b1d4
 800ea70:	0801b300 	.word	0x0801b300
 800ea74:	0801b220 	.word	0x0801b220
 800ea78:	2000f514 	.word	0x2000f514
 800ea7c:	0801b32c 	.word	0x0801b32c
 800ea80:	2000f524 	.word	0x2000f524
 800ea84:	0801b358 	.word	0x0801b358
 800ea88:	2000f51c 	.word	0x2000f51c
 800ea8c:	20008a90 	.word	0x20008a90
 800ea90:	20008ac0 	.word	0x20008ac0
 800ea94:	20008abd 	.word	0x20008abd
 800ea98:	20008ab8 	.word	0x20008ab8
 800ea9c:	20008abc 	.word	0x20008abc
 800eaa0:	20008aba 	.word	0x20008aba
      }
    }
    tcp_input_pcb = pcb;
 800eaa4:	4a9b      	ldr	r2, [pc, #620]	; (800ed14 <tcp_input+0x7d4>)
 800eaa6:	69fb      	ldr	r3, [r7, #28]
 800eaa8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800eaaa:	69f8      	ldr	r0, [r7, #28]
 800eaac:	f000 fb0a 	bl	800f0c4 <tcp_process>
 800eab0:	4603      	mov	r3, r0
 800eab2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800eab4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eab8:	f113 0f0d 	cmn.w	r3, #13
 800eabc:	f000 80d3 	beq.w	800ec66 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800eac0:	4b95      	ldr	r3, [pc, #596]	; (800ed18 <tcp_input+0x7d8>)
 800eac2:	781b      	ldrb	r3, [r3, #0]
 800eac4:	f003 0308 	and.w	r3, r3, #8
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d015      	beq.n	800eaf8 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800eacc:	69fb      	ldr	r3, [r7, #28]
 800eace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d008      	beq.n	800eae8 <tcp_input+0x5a8>
 800ead6:	69fb      	ldr	r3, [r7, #28]
 800ead8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eadc:	69fa      	ldr	r2, [r7, #28]
 800eade:	6912      	ldr	r2, [r2, #16]
 800eae0:	f06f 010d 	mvn.w	r1, #13
 800eae4:	4610      	mov	r0, r2
 800eae6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800eae8:	69f9      	ldr	r1, [r7, #28]
 800eaea:	488c      	ldr	r0, [pc, #560]	; (800ed1c <tcp_input+0x7dc>)
 800eaec:	f7ff fbb0 	bl	800e250 <tcp_pcb_remove>
        tcp_free(pcb);
 800eaf0:	69f8      	ldr	r0, [r7, #28]
 800eaf2:	f7fd fea9 	bl	800c848 <tcp_free>
 800eaf6:	e0c1      	b.n	800ec7c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800eafc:	4b88      	ldr	r3, [pc, #544]	; (800ed20 <tcp_input+0x7e0>)
 800eafe:	881b      	ldrh	r3, [r3, #0]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d01d      	beq.n	800eb40 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800eb04:	4b86      	ldr	r3, [pc, #536]	; (800ed20 <tcp_input+0x7e0>)
 800eb06:	881b      	ldrh	r3, [r3, #0]
 800eb08:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800eb0a:	69fb      	ldr	r3, [r7, #28]
 800eb0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d00a      	beq.n	800eb2a <tcp_input+0x5ea>
 800eb14:	69fb      	ldr	r3, [r7, #28]
 800eb16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb1a:	69fa      	ldr	r2, [r7, #28]
 800eb1c:	6910      	ldr	r0, [r2, #16]
 800eb1e:	89fa      	ldrh	r2, [r7, #14]
 800eb20:	69f9      	ldr	r1, [r7, #28]
 800eb22:	4798      	blx	r3
 800eb24:	4603      	mov	r3, r0
 800eb26:	74fb      	strb	r3, [r7, #19]
 800eb28:	e001      	b.n	800eb2e <tcp_input+0x5ee>
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800eb2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eb32:	f113 0f0d 	cmn.w	r3, #13
 800eb36:	f000 8098 	beq.w	800ec6a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800eb3a:	4b79      	ldr	r3, [pc, #484]	; (800ed20 <tcp_input+0x7e0>)
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800eb40:	69f8      	ldr	r0, [r7, #28]
 800eb42:	f000 f905 	bl	800ed50 <tcp_input_delayed_close>
 800eb46:	4603      	mov	r3, r0
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	f040 8090 	bne.w	800ec6e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800eb4e:	4b75      	ldr	r3, [pc, #468]	; (800ed24 <tcp_input+0x7e4>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d041      	beq.n	800ebda <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800eb56:	69fb      	ldr	r3, [r7, #28]
 800eb58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d006      	beq.n	800eb6c <tcp_input+0x62c>
 800eb5e:	4b72      	ldr	r3, [pc, #456]	; (800ed28 <tcp_input+0x7e8>)
 800eb60:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800eb64:	4971      	ldr	r1, [pc, #452]	; (800ed2c <tcp_input+0x7ec>)
 800eb66:	4872      	ldr	r0, [pc, #456]	; (800ed30 <tcp_input+0x7f0>)
 800eb68:	f009 f930 	bl	8017dcc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800eb6c:	69fb      	ldr	r3, [r7, #28]
 800eb6e:	8b5b      	ldrh	r3, [r3, #26]
 800eb70:	f003 0310 	and.w	r3, r3, #16
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d008      	beq.n	800eb8a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800eb78:	4b6a      	ldr	r3, [pc, #424]	; (800ed24 <tcp_input+0x7e4>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f7fd fba7 	bl	800c2d0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800eb82:	69f8      	ldr	r0, [r7, #28]
 800eb84:	f7fe f99a 	bl	800cebc <tcp_abort>
            goto aborted;
 800eb88:	e078      	b.n	800ec7c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800eb8a:	69fb      	ldr	r3, [r7, #28]
 800eb8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d00c      	beq.n	800ebae <tcp_input+0x66e>
 800eb94:	69fb      	ldr	r3, [r7, #28]
 800eb96:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eb9a:	69fb      	ldr	r3, [r7, #28]
 800eb9c:	6918      	ldr	r0, [r3, #16]
 800eb9e:	4b61      	ldr	r3, [pc, #388]	; (800ed24 <tcp_input+0x7e4>)
 800eba0:	681a      	ldr	r2, [r3, #0]
 800eba2:	2300      	movs	r3, #0
 800eba4:	69f9      	ldr	r1, [r7, #28]
 800eba6:	47a0      	blx	r4
 800eba8:	4603      	mov	r3, r0
 800ebaa:	74fb      	strb	r3, [r7, #19]
 800ebac:	e008      	b.n	800ebc0 <tcp_input+0x680>
 800ebae:	4b5d      	ldr	r3, [pc, #372]	; (800ed24 <tcp_input+0x7e4>)
 800ebb0:	681a      	ldr	r2, [r3, #0]
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	69f9      	ldr	r1, [r7, #28]
 800ebb6:	2000      	movs	r0, #0
 800ebb8:	f7ff f884 	bl	800dcc4 <tcp_recv_null>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ebc0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ebc4:	f113 0f0d 	cmn.w	r3, #13
 800ebc8:	d053      	beq.n	800ec72 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ebca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d003      	beq.n	800ebda <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ebd2:	4b54      	ldr	r3, [pc, #336]	; (800ed24 <tcp_input+0x7e4>)
 800ebd4:	681a      	ldr	r2, [r3, #0]
 800ebd6:	69fb      	ldr	r3, [r7, #28]
 800ebd8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ebda:	4b4f      	ldr	r3, [pc, #316]	; (800ed18 <tcp_input+0x7d8>)
 800ebdc:	781b      	ldrb	r3, [r3, #0]
 800ebde:	f003 0320 	and.w	r3, r3, #32
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d030      	beq.n	800ec48 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800ebe6:	69fb      	ldr	r3, [r7, #28]
 800ebe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d009      	beq.n	800ec02 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ebee:	69fb      	ldr	r3, [r7, #28]
 800ebf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ebf2:	7b5a      	ldrb	r2, [r3, #13]
 800ebf4:	69fb      	ldr	r3, [r7, #28]
 800ebf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ebf8:	f042 0220 	orr.w	r2, r2, #32
 800ebfc:	b2d2      	uxtb	r2, r2
 800ebfe:	735a      	strb	r2, [r3, #13]
 800ec00:	e022      	b.n	800ec48 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ec02:	69fb      	ldr	r3, [r7, #28]
 800ec04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec06:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ec0a:	d005      	beq.n	800ec18 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800ec0c:	69fb      	ldr	r3, [r7, #28]
 800ec0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec10:	3301      	adds	r3, #1
 800ec12:	b29a      	uxth	r2, r3
 800ec14:	69fb      	ldr	r3, [r7, #28]
 800ec16:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ec18:	69fb      	ldr	r3, [r7, #28]
 800ec1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d00b      	beq.n	800ec3a <tcp_input+0x6fa>
 800ec22:	69fb      	ldr	r3, [r7, #28]
 800ec24:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ec28:	69fb      	ldr	r3, [r7, #28]
 800ec2a:	6918      	ldr	r0, [r3, #16]
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	2200      	movs	r2, #0
 800ec30:	69f9      	ldr	r1, [r7, #28]
 800ec32:	47a0      	blx	r4
 800ec34:	4603      	mov	r3, r0
 800ec36:	74fb      	strb	r3, [r7, #19]
 800ec38:	e001      	b.n	800ec3e <tcp_input+0x6fe>
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ec3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec42:	f113 0f0d 	cmn.w	r3, #13
 800ec46:	d016      	beq.n	800ec76 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ec48:	4b32      	ldr	r3, [pc, #200]	; (800ed14 <tcp_input+0x7d4>)
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ec4e:	69f8      	ldr	r0, [r7, #28]
 800ec50:	f000 f87e 	bl	800ed50 <tcp_input_delayed_close>
 800ec54:	4603      	mov	r3, r0
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d10f      	bne.n	800ec7a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ec5a:	69f8      	ldr	r0, [r7, #28]
 800ec5c:	f002 ff10 	bl	8011a80 <tcp_output>
 800ec60:	e00c      	b.n	800ec7c <tcp_input+0x73c>
        goto aborted;
 800ec62:	bf00      	nop
 800ec64:	e00a      	b.n	800ec7c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ec66:	bf00      	nop
 800ec68:	e008      	b.n	800ec7c <tcp_input+0x73c>
              goto aborted;
 800ec6a:	bf00      	nop
 800ec6c:	e006      	b.n	800ec7c <tcp_input+0x73c>
          goto aborted;
 800ec6e:	bf00      	nop
 800ec70:	e004      	b.n	800ec7c <tcp_input+0x73c>
            goto aborted;
 800ec72:	bf00      	nop
 800ec74:	e002      	b.n	800ec7c <tcp_input+0x73c>
              goto aborted;
 800ec76:	bf00      	nop
 800ec78:	e000      	b.n	800ec7c <tcp_input+0x73c>
          goto aborted;
 800ec7a:	bf00      	nop
    tcp_input_pcb = NULL;
 800ec7c:	4b25      	ldr	r3, [pc, #148]	; (800ed14 <tcp_input+0x7d4>)
 800ec7e:	2200      	movs	r2, #0
 800ec80:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ec82:	4b28      	ldr	r3, [pc, #160]	; (800ed24 <tcp_input+0x7e4>)
 800ec84:	2200      	movs	r2, #0
 800ec86:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ec88:	4b2a      	ldr	r3, [pc, #168]	; (800ed34 <tcp_input+0x7f4>)
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d03d      	beq.n	800ed0c <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800ec90:	4b28      	ldr	r3, [pc, #160]	; (800ed34 <tcp_input+0x7f4>)
 800ec92:	685b      	ldr	r3, [r3, #4]
 800ec94:	4618      	mov	r0, r3
 800ec96:	f7fd fb1b 	bl	800c2d0 <pbuf_free>
      inseg.p = NULL;
 800ec9a:	4b26      	ldr	r3, [pc, #152]	; (800ed34 <tcp_input+0x7f4>)
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800eca0:	e034      	b.n	800ed0c <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800eca2:	4b25      	ldr	r3, [pc, #148]	; (800ed38 <tcp_input+0x7f8>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	899b      	ldrh	r3, [r3, #12]
 800eca8:	b29b      	uxth	r3, r3
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7fb ff26 	bl	800aafc <lwip_htons>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	b2db      	uxtb	r3, r3
 800ecb4:	f003 0304 	and.w	r3, r3, #4
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d118      	bne.n	800ecee <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecbc:	4b1f      	ldr	r3, [pc, #124]	; (800ed3c <tcp_input+0x7fc>)
 800ecbe:	6819      	ldr	r1, [r3, #0]
 800ecc0:	4b1f      	ldr	r3, [pc, #124]	; (800ed40 <tcp_input+0x800>)
 800ecc2:	881b      	ldrh	r3, [r3, #0]
 800ecc4:	461a      	mov	r2, r3
 800ecc6:	4b1f      	ldr	r3, [pc, #124]	; (800ed44 <tcp_input+0x804>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eccc:	4b1a      	ldr	r3, [pc, #104]	; (800ed38 <tcp_input+0x7f8>)
 800ecce:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecd0:	885b      	ldrh	r3, [r3, #2]
 800ecd2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecd4:	4a18      	ldr	r2, [pc, #96]	; (800ed38 <tcp_input+0x7f8>)
 800ecd6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecd8:	8812      	ldrh	r2, [r2, #0]
 800ecda:	b292      	uxth	r2, r2
 800ecdc:	9202      	str	r2, [sp, #8]
 800ecde:	9301      	str	r3, [sp, #4]
 800ece0:	4b19      	ldr	r3, [pc, #100]	; (800ed48 <tcp_input+0x808>)
 800ece2:	9300      	str	r3, [sp, #0]
 800ece4:	4b19      	ldr	r3, [pc, #100]	; (800ed4c <tcp_input+0x80c>)
 800ece6:	4602      	mov	r2, r0
 800ece8:	2000      	movs	r0, #0
 800ecea:	f003 fc8d 	bl	8012608 <tcp_rst>
    pbuf_free(p);
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f7fd faee 	bl	800c2d0 <pbuf_free>
  return;
 800ecf4:	e00a      	b.n	800ed0c <tcp_input+0x7cc>
    goto dropped;
 800ecf6:	bf00      	nop
 800ecf8:	e004      	b.n	800ed04 <tcp_input+0x7c4>
dropped:
 800ecfa:	bf00      	nop
 800ecfc:	e002      	b.n	800ed04 <tcp_input+0x7c4>
      goto dropped;
 800ecfe:	bf00      	nop
 800ed00:	e000      	b.n	800ed04 <tcp_input+0x7c4>
      goto dropped;
 800ed02:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f7fd fae3 	bl	800c2d0 <pbuf_free>
 800ed0a:	e000      	b.n	800ed0e <tcp_input+0x7ce>
  return;
 800ed0c:	bf00      	nop
}
 800ed0e:	3724      	adds	r7, #36	; 0x24
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd90      	pop	{r4, r7, pc}
 800ed14:	2000f528 	.word	0x2000f528
 800ed18:	20008abd 	.word	0x20008abd
 800ed1c:	2000f514 	.word	0x2000f514
 800ed20:	20008ab8 	.word	0x20008ab8
 800ed24:	20008ac0 	.word	0x20008ac0
 800ed28:	0801b1d4 	.word	0x0801b1d4
 800ed2c:	0801b388 	.word	0x0801b388
 800ed30:	0801b220 	.word	0x0801b220
 800ed34:	20008a90 	.word	0x20008a90
 800ed38:	20008aa0 	.word	0x20008aa0
 800ed3c:	20008ab4 	.word	0x20008ab4
 800ed40:	20008aba 	.word	0x20008aba
 800ed44:	20008ab0 	.word	0x20008ab0
 800ed48:	2000bdf0 	.word	0x2000bdf0
 800ed4c:	2000bdf4 	.word	0x2000bdf4

0800ed50 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b082      	sub	sp, #8
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d106      	bne.n	800ed6c <tcp_input_delayed_close+0x1c>
 800ed5e:	4b17      	ldr	r3, [pc, #92]	; (800edbc <tcp_input_delayed_close+0x6c>)
 800ed60:	f240 225a 	movw	r2, #602	; 0x25a
 800ed64:	4916      	ldr	r1, [pc, #88]	; (800edc0 <tcp_input_delayed_close+0x70>)
 800ed66:	4817      	ldr	r0, [pc, #92]	; (800edc4 <tcp_input_delayed_close+0x74>)
 800ed68:	f009 f830 	bl	8017dcc <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ed6c:	4b16      	ldr	r3, [pc, #88]	; (800edc8 <tcp_input_delayed_close+0x78>)
 800ed6e:	781b      	ldrb	r3, [r3, #0]
 800ed70:	f003 0310 	and.w	r3, r3, #16
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d01c      	beq.n	800edb2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	8b5b      	ldrh	r3, [r3, #26]
 800ed7c:	f003 0310 	and.w	r3, r3, #16
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d10d      	bne.n	800eda0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d008      	beq.n	800eda0 <tcp_input_delayed_close+0x50>
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed94:	687a      	ldr	r2, [r7, #4]
 800ed96:	6912      	ldr	r2, [r2, #16]
 800ed98:	f06f 010e 	mvn.w	r1, #14
 800ed9c:	4610      	mov	r0, r2
 800ed9e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800eda0:	6879      	ldr	r1, [r7, #4]
 800eda2:	480a      	ldr	r0, [pc, #40]	; (800edcc <tcp_input_delayed_close+0x7c>)
 800eda4:	f7ff fa54 	bl	800e250 <tcp_pcb_remove>
    tcp_free(pcb);
 800eda8:	6878      	ldr	r0, [r7, #4]
 800edaa:	f7fd fd4d 	bl	800c848 <tcp_free>
    return 1;
 800edae:	2301      	movs	r3, #1
 800edb0:	e000      	b.n	800edb4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800edb2:	2300      	movs	r3, #0
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3708      	adds	r7, #8
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}
 800edbc:	0801b1d4 	.word	0x0801b1d4
 800edc0:	0801b3a4 	.word	0x0801b3a4
 800edc4:	0801b220 	.word	0x0801b220
 800edc8:	20008abd 	.word	0x20008abd
 800edcc:	2000f514 	.word	0x2000f514

0800edd0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800edd0:	b590      	push	{r4, r7, lr}
 800edd2:	b08b      	sub	sp, #44	; 0x2c
 800edd4:	af04      	add	r7, sp, #16
 800edd6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800edd8:	4b6f      	ldr	r3, [pc, #444]	; (800ef98 <tcp_listen_input+0x1c8>)
 800edda:	781b      	ldrb	r3, [r3, #0]
 800eddc:	f003 0304 	and.w	r3, r3, #4
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	f040 80d3 	bne.w	800ef8c <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d106      	bne.n	800edfa <tcp_listen_input+0x2a>
 800edec:	4b6b      	ldr	r3, [pc, #428]	; (800ef9c <tcp_listen_input+0x1cc>)
 800edee:	f240 2281 	movw	r2, #641	; 0x281
 800edf2:	496b      	ldr	r1, [pc, #428]	; (800efa0 <tcp_listen_input+0x1d0>)
 800edf4:	486b      	ldr	r0, [pc, #428]	; (800efa4 <tcp_listen_input+0x1d4>)
 800edf6:	f008 ffe9 	bl	8017dcc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800edfa:	4b67      	ldr	r3, [pc, #412]	; (800ef98 <tcp_listen_input+0x1c8>)
 800edfc:	781b      	ldrb	r3, [r3, #0]
 800edfe:	f003 0310 	and.w	r3, r3, #16
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d019      	beq.n	800ee3a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee06:	4b68      	ldr	r3, [pc, #416]	; (800efa8 <tcp_listen_input+0x1d8>)
 800ee08:	6819      	ldr	r1, [r3, #0]
 800ee0a:	4b68      	ldr	r3, [pc, #416]	; (800efac <tcp_listen_input+0x1dc>)
 800ee0c:	881b      	ldrh	r3, [r3, #0]
 800ee0e:	461a      	mov	r2, r3
 800ee10:	4b67      	ldr	r3, [pc, #412]	; (800efb0 <tcp_listen_input+0x1e0>)
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee16:	4b67      	ldr	r3, [pc, #412]	; (800efb4 <tcp_listen_input+0x1e4>)
 800ee18:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee1a:	885b      	ldrh	r3, [r3, #2]
 800ee1c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee1e:	4a65      	ldr	r2, [pc, #404]	; (800efb4 <tcp_listen_input+0x1e4>)
 800ee20:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee22:	8812      	ldrh	r2, [r2, #0]
 800ee24:	b292      	uxth	r2, r2
 800ee26:	9202      	str	r2, [sp, #8]
 800ee28:	9301      	str	r3, [sp, #4]
 800ee2a:	4b63      	ldr	r3, [pc, #396]	; (800efb8 <tcp_listen_input+0x1e8>)
 800ee2c:	9300      	str	r3, [sp, #0]
 800ee2e:	4b63      	ldr	r3, [pc, #396]	; (800efbc <tcp_listen_input+0x1ec>)
 800ee30:	4602      	mov	r2, r0
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f003 fbe8 	bl	8012608 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ee38:	e0aa      	b.n	800ef90 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800ee3a:	4b57      	ldr	r3, [pc, #348]	; (800ef98 <tcp_listen_input+0x1c8>)
 800ee3c:	781b      	ldrb	r3, [r3, #0]
 800ee3e:	f003 0302 	and.w	r3, r3, #2
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	f000 80a4 	beq.w	800ef90 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	7d5b      	ldrb	r3, [r3, #21]
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	f7ff f85d 	bl	800df0c <tcp_alloc>
 800ee52:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d111      	bne.n	800ee7e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	699b      	ldr	r3, [r3, #24]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d00a      	beq.n	800ee78 <tcp_listen_input+0xa8>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	699b      	ldr	r3, [r3, #24]
 800ee66:	687a      	ldr	r2, [r7, #4]
 800ee68:	6910      	ldr	r0, [r2, #16]
 800ee6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ee6e:	2100      	movs	r1, #0
 800ee70:	4798      	blx	r3
 800ee72:	4603      	mov	r3, r0
 800ee74:	73bb      	strb	r3, [r7, #14]
      return;
 800ee76:	e08c      	b.n	800ef92 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ee78:	23f0      	movs	r3, #240	; 0xf0
 800ee7a:	73bb      	strb	r3, [r7, #14]
      return;
 800ee7c:	e089      	b.n	800ef92 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ee7e:	4b50      	ldr	r3, [pc, #320]	; (800efc0 <tcp_listen_input+0x1f0>)
 800ee80:	695a      	ldr	r2, [r3, #20]
 800ee82:	697b      	ldr	r3, [r7, #20]
 800ee84:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ee86:	4b4e      	ldr	r3, [pc, #312]	; (800efc0 <tcp_listen_input+0x1f0>)
 800ee88:	691a      	ldr	r2, [r3, #16]
 800ee8a:	697b      	ldr	r3, [r7, #20]
 800ee8c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	8ada      	ldrh	r2, [r3, #22]
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ee96:	4b47      	ldr	r3, [pc, #284]	; (800efb4 <tcp_listen_input+0x1e4>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	881b      	ldrh	r3, [r3, #0]
 800ee9c:	b29a      	uxth	r2, r3
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	2203      	movs	r2, #3
 800eea6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800eea8:	4b41      	ldr	r3, [pc, #260]	; (800efb0 <tcp_listen_input+0x1e0>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	1c5a      	adds	r2, r3, #1
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800eeba:	6978      	ldr	r0, [r7, #20]
 800eebc:	f7ff fa5c 	bl	800e378 <tcp_next_iss>
 800eec0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800eec2:	697b      	ldr	r3, [r7, #20]
 800eec4:	693a      	ldr	r2, [r7, #16]
 800eec6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800eec8:	697b      	ldr	r3, [r7, #20]
 800eeca:	693a      	ldr	r2, [r7, #16]
 800eecc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	693a      	ldr	r2, [r7, #16]
 800eed2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800eed4:	697b      	ldr	r3, [r7, #20]
 800eed6:	693a      	ldr	r2, [r7, #16]
 800eed8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800eeda:	4b35      	ldr	r3, [pc, #212]	; (800efb0 <tcp_listen_input+0x1e0>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	1e5a      	subs	r2, r3, #1
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	691a      	ldr	r2, [r3, #16]
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	687a      	ldr	r2, [r7, #4]
 800eef0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	7a5b      	ldrb	r3, [r3, #9]
 800eef6:	f003 030c 	and.w	r3, r3, #12
 800eefa:	b2da      	uxtb	r2, r3
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	7a1a      	ldrb	r2, [r3, #8]
 800ef04:	697b      	ldr	r3, [r7, #20]
 800ef06:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ef08:	4b2e      	ldr	r3, [pc, #184]	; (800efc4 <tcp_listen_input+0x1f4>)
 800ef0a:	681a      	ldr	r2, [r3, #0]
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	60da      	str	r2, [r3, #12]
 800ef10:	4a2c      	ldr	r2, [pc, #176]	; (800efc4 <tcp_listen_input+0x1f4>)
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	6013      	str	r3, [r2, #0]
 800ef16:	f003 fd39 	bl	801298c <tcp_timer_needed>
 800ef1a:	4b2b      	ldr	r3, [pc, #172]	; (800efc8 <tcp_listen_input+0x1f8>)
 800ef1c:	2201      	movs	r2, #1
 800ef1e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ef20:	6978      	ldr	r0, [r7, #20]
 800ef22:	f001 fd8f 	bl	8010a44 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ef26:	4b23      	ldr	r3, [pc, #140]	; (800efb4 <tcp_listen_input+0x1e4>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	89db      	ldrh	r3, [r3, #14]
 800ef2c:	b29a      	uxth	r2, r3
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ef34:	697b      	ldr	r3, [r7, #20]
 800ef36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ef3a:	697b      	ldr	r3, [r7, #20]
 800ef3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ef40:	697b      	ldr	r3, [r7, #20]
 800ef42:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ef44:	697b      	ldr	r3, [r7, #20]
 800ef46:	3304      	adds	r3, #4
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f007 fadf 	bl	801650c <ip4_route>
 800ef4e:	4601      	mov	r1, r0
 800ef50:	697b      	ldr	r3, [r7, #20]
 800ef52:	3304      	adds	r3, #4
 800ef54:	461a      	mov	r2, r3
 800ef56:	4620      	mov	r0, r4
 800ef58:	f7ff fa34 	bl	800e3c4 <tcp_eff_send_mss_netif>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	461a      	mov	r2, r3
 800ef60:	697b      	ldr	r3, [r7, #20]
 800ef62:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ef64:	2112      	movs	r1, #18
 800ef66:	6978      	ldr	r0, [r7, #20]
 800ef68:	f002 fc9c 	bl	80118a4 <tcp_enqueue_flags>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ef70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d004      	beq.n	800ef82 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ef78:	2100      	movs	r1, #0
 800ef7a:	6978      	ldr	r0, [r7, #20]
 800ef7c:	f7fd fee0 	bl	800cd40 <tcp_abandon>
      return;
 800ef80:	e007      	b.n	800ef92 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800ef82:	6978      	ldr	r0, [r7, #20]
 800ef84:	f002 fd7c 	bl	8011a80 <tcp_output>
  return;
 800ef88:	bf00      	nop
 800ef8a:	e001      	b.n	800ef90 <tcp_listen_input+0x1c0>
    return;
 800ef8c:	bf00      	nop
 800ef8e:	e000      	b.n	800ef92 <tcp_listen_input+0x1c2>
  return;
 800ef90:	bf00      	nop
}
 800ef92:	371c      	adds	r7, #28
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd90      	pop	{r4, r7, pc}
 800ef98:	20008abc 	.word	0x20008abc
 800ef9c:	0801b1d4 	.word	0x0801b1d4
 800efa0:	0801b3cc 	.word	0x0801b3cc
 800efa4:	0801b220 	.word	0x0801b220
 800efa8:	20008ab4 	.word	0x20008ab4
 800efac:	20008aba 	.word	0x20008aba
 800efb0:	20008ab0 	.word	0x20008ab0
 800efb4:	20008aa0 	.word	0x20008aa0
 800efb8:	2000bdf0 	.word	0x2000bdf0
 800efbc:	2000bdf4 	.word	0x2000bdf4
 800efc0:	2000bde0 	.word	0x2000bde0
 800efc4:	2000f514 	.word	0x2000f514
 800efc8:	2000f510 	.word	0x2000f510

0800efcc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b086      	sub	sp, #24
 800efd0:	af04      	add	r7, sp, #16
 800efd2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800efd4:	4b30      	ldr	r3, [pc, #192]	; (800f098 <tcp_timewait_input+0xcc>)
 800efd6:	781b      	ldrb	r3, [r3, #0]
 800efd8:	f003 0304 	and.w	r3, r3, #4
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d154      	bne.n	800f08a <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d106      	bne.n	800eff4 <tcp_timewait_input+0x28>
 800efe6:	4b2d      	ldr	r3, [pc, #180]	; (800f09c <tcp_timewait_input+0xd0>)
 800efe8:	f240 22ee 	movw	r2, #750	; 0x2ee
 800efec:	492c      	ldr	r1, [pc, #176]	; (800f0a0 <tcp_timewait_input+0xd4>)
 800efee:	482d      	ldr	r0, [pc, #180]	; (800f0a4 <tcp_timewait_input+0xd8>)
 800eff0:	f008 feec 	bl	8017dcc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800eff4:	4b28      	ldr	r3, [pc, #160]	; (800f098 <tcp_timewait_input+0xcc>)
 800eff6:	781b      	ldrb	r3, [r3, #0]
 800eff8:	f003 0302 	and.w	r3, r3, #2
 800effc:	2b00      	cmp	r3, #0
 800effe:	d02a      	beq.n	800f056 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f000:	4b29      	ldr	r3, [pc, #164]	; (800f0a8 <tcp_timewait_input+0xdc>)
 800f002:	681a      	ldr	r2, [r3, #0]
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f008:	1ad3      	subs	r3, r2, r3
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	db2d      	blt.n	800f06a <tcp_timewait_input+0x9e>
 800f00e:	4b26      	ldr	r3, [pc, #152]	; (800f0a8 <tcp_timewait_input+0xdc>)
 800f010:	681a      	ldr	r2, [r3, #0]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f016:	6879      	ldr	r1, [r7, #4]
 800f018:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f01a:	440b      	add	r3, r1
 800f01c:	1ad3      	subs	r3, r2, r3
 800f01e:	2b00      	cmp	r3, #0
 800f020:	dc23      	bgt.n	800f06a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f022:	4b22      	ldr	r3, [pc, #136]	; (800f0ac <tcp_timewait_input+0xe0>)
 800f024:	6819      	ldr	r1, [r3, #0]
 800f026:	4b22      	ldr	r3, [pc, #136]	; (800f0b0 <tcp_timewait_input+0xe4>)
 800f028:	881b      	ldrh	r3, [r3, #0]
 800f02a:	461a      	mov	r2, r3
 800f02c:	4b1e      	ldr	r3, [pc, #120]	; (800f0a8 <tcp_timewait_input+0xdc>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f032:	4b20      	ldr	r3, [pc, #128]	; (800f0b4 <tcp_timewait_input+0xe8>)
 800f034:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f036:	885b      	ldrh	r3, [r3, #2]
 800f038:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f03a:	4a1e      	ldr	r2, [pc, #120]	; (800f0b4 <tcp_timewait_input+0xe8>)
 800f03c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f03e:	8812      	ldrh	r2, [r2, #0]
 800f040:	b292      	uxth	r2, r2
 800f042:	9202      	str	r2, [sp, #8]
 800f044:	9301      	str	r3, [sp, #4]
 800f046:	4b1c      	ldr	r3, [pc, #112]	; (800f0b8 <tcp_timewait_input+0xec>)
 800f048:	9300      	str	r3, [sp, #0]
 800f04a:	4b1c      	ldr	r3, [pc, #112]	; (800f0bc <tcp_timewait_input+0xf0>)
 800f04c:	4602      	mov	r2, r0
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f003 fada 	bl	8012608 <tcp_rst>
      return;
 800f054:	e01c      	b.n	800f090 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800f056:	4b10      	ldr	r3, [pc, #64]	; (800f098 <tcp_timewait_input+0xcc>)
 800f058:	781b      	ldrb	r3, [r3, #0]
 800f05a:	f003 0301 	and.w	r3, r3, #1
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d003      	beq.n	800f06a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f062:	4b17      	ldr	r3, [pc, #92]	; (800f0c0 <tcp_timewait_input+0xf4>)
 800f064:	681a      	ldr	r2, [r3, #0]
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f06a:	4b11      	ldr	r3, [pc, #68]	; (800f0b0 <tcp_timewait_input+0xe4>)
 800f06c:	881b      	ldrh	r3, [r3, #0]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d00d      	beq.n	800f08e <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	8b5b      	ldrh	r3, [r3, #26]
 800f076:	f043 0302 	orr.w	r3, r3, #2
 800f07a:	b29a      	uxth	r2, r3
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f002 fcfd 	bl	8011a80 <tcp_output>
  }
  return;
 800f086:	bf00      	nop
 800f088:	e001      	b.n	800f08e <tcp_timewait_input+0xc2>
    return;
 800f08a:	bf00      	nop
 800f08c:	e000      	b.n	800f090 <tcp_timewait_input+0xc4>
  return;
 800f08e:	bf00      	nop
}
 800f090:	3708      	adds	r7, #8
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}
 800f096:	bf00      	nop
 800f098:	20008abc 	.word	0x20008abc
 800f09c:	0801b1d4 	.word	0x0801b1d4
 800f0a0:	0801b3ec 	.word	0x0801b3ec
 800f0a4:	0801b220 	.word	0x0801b220
 800f0a8:	20008ab0 	.word	0x20008ab0
 800f0ac:	20008ab4 	.word	0x20008ab4
 800f0b0:	20008aba 	.word	0x20008aba
 800f0b4:	20008aa0 	.word	0x20008aa0
 800f0b8:	2000bdf0 	.word	0x2000bdf0
 800f0bc:	2000bdf4 	.word	0x2000bdf4
 800f0c0:	2000f518 	.word	0x2000f518

0800f0c4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f0c4:	b590      	push	{r4, r7, lr}
 800f0c6:	b08d      	sub	sp, #52	; 0x34
 800f0c8:	af04      	add	r7, sp, #16
 800f0ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d106      	bne.n	800f0e8 <tcp_process+0x24>
 800f0da:	4ba5      	ldr	r3, [pc, #660]	; (800f370 <tcp_process+0x2ac>)
 800f0dc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f0e0:	49a4      	ldr	r1, [pc, #656]	; (800f374 <tcp_process+0x2b0>)
 800f0e2:	48a5      	ldr	r0, [pc, #660]	; (800f378 <tcp_process+0x2b4>)
 800f0e4:	f008 fe72 	bl	8017dcc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f0e8:	4ba4      	ldr	r3, [pc, #656]	; (800f37c <tcp_process+0x2b8>)
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	f003 0304 	and.w	r3, r3, #4
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d04e      	beq.n	800f192 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	7d1b      	ldrb	r3, [r3, #20]
 800f0f8:	2b02      	cmp	r3, #2
 800f0fa:	d108      	bne.n	800f10e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f100:	4b9f      	ldr	r3, [pc, #636]	; (800f380 <tcp_process+0x2bc>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	429a      	cmp	r2, r3
 800f106:	d123      	bne.n	800f150 <tcp_process+0x8c>
        acceptable = 1;
 800f108:	2301      	movs	r3, #1
 800f10a:	76fb      	strb	r3, [r7, #27]
 800f10c:	e020      	b.n	800f150 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f112:	4b9c      	ldr	r3, [pc, #624]	; (800f384 <tcp_process+0x2c0>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	429a      	cmp	r2, r3
 800f118:	d102      	bne.n	800f120 <tcp_process+0x5c>
        acceptable = 1;
 800f11a:	2301      	movs	r3, #1
 800f11c:	76fb      	strb	r3, [r7, #27]
 800f11e:	e017      	b.n	800f150 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f120:	4b98      	ldr	r3, [pc, #608]	; (800f384 <tcp_process+0x2c0>)
 800f122:	681a      	ldr	r2, [r3, #0]
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f128:	1ad3      	subs	r3, r2, r3
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	db10      	blt.n	800f150 <tcp_process+0x8c>
 800f12e:	4b95      	ldr	r3, [pc, #596]	; (800f384 <tcp_process+0x2c0>)
 800f130:	681a      	ldr	r2, [r3, #0]
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f136:	6879      	ldr	r1, [r7, #4]
 800f138:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f13a:	440b      	add	r3, r1
 800f13c:	1ad3      	subs	r3, r2, r3
 800f13e:	2b00      	cmp	r3, #0
 800f140:	dc06      	bgt.n	800f150 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	8b5b      	ldrh	r3, [r3, #26]
 800f146:	f043 0302 	orr.w	r3, r3, #2
 800f14a:	b29a      	uxth	r2, r3
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f150:	7efb      	ldrb	r3, [r7, #27]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d01b      	beq.n	800f18e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	7d1b      	ldrb	r3, [r3, #20]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d106      	bne.n	800f16c <tcp_process+0xa8>
 800f15e:	4b84      	ldr	r3, [pc, #528]	; (800f370 <tcp_process+0x2ac>)
 800f160:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f164:	4988      	ldr	r1, [pc, #544]	; (800f388 <tcp_process+0x2c4>)
 800f166:	4884      	ldr	r0, [pc, #528]	; (800f378 <tcp_process+0x2b4>)
 800f168:	f008 fe30 	bl	8017dcc <iprintf>
      recv_flags |= TF_RESET;
 800f16c:	4b87      	ldr	r3, [pc, #540]	; (800f38c <tcp_process+0x2c8>)
 800f16e:	781b      	ldrb	r3, [r3, #0]
 800f170:	f043 0308 	orr.w	r3, r3, #8
 800f174:	b2da      	uxtb	r2, r3
 800f176:	4b85      	ldr	r3, [pc, #532]	; (800f38c <tcp_process+0x2c8>)
 800f178:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	8b5b      	ldrh	r3, [r3, #26]
 800f17e:	f023 0301 	bic.w	r3, r3, #1
 800f182:	b29a      	uxth	r2, r3
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f188:	f06f 030d 	mvn.w	r3, #13
 800f18c:	e37a      	b.n	800f884 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f18e:	2300      	movs	r3, #0
 800f190:	e378      	b.n	800f884 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f192:	4b7a      	ldr	r3, [pc, #488]	; (800f37c <tcp_process+0x2b8>)
 800f194:	781b      	ldrb	r3, [r3, #0]
 800f196:	f003 0302 	and.w	r3, r3, #2
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d010      	beq.n	800f1c0 <tcp_process+0xfc>
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	7d1b      	ldrb	r3, [r3, #20]
 800f1a2:	2b02      	cmp	r3, #2
 800f1a4:	d00c      	beq.n	800f1c0 <tcp_process+0xfc>
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	7d1b      	ldrb	r3, [r3, #20]
 800f1aa:	2b03      	cmp	r3, #3
 800f1ac:	d008      	beq.n	800f1c0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	8b5b      	ldrh	r3, [r3, #26]
 800f1b2:	f043 0302 	orr.w	r3, r3, #2
 800f1b6:	b29a      	uxth	r2, r3
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f1bc:	2300      	movs	r3, #0
 800f1be:	e361      	b.n	800f884 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	8b5b      	ldrh	r3, [r3, #26]
 800f1c4:	f003 0310 	and.w	r3, r3, #16
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d103      	bne.n	800f1d4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f1cc:	4b70      	ldr	r3, [pc, #448]	; (800f390 <tcp_process+0x2cc>)
 800f1ce:	681a      	ldr	r2, [r3, #0]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2200      	movs	r2, #0
 800f1e0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	f001 fc2d 	bl	8010a44 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	7d1b      	ldrb	r3, [r3, #20]
 800f1ee:	3b02      	subs	r3, #2
 800f1f0:	2b07      	cmp	r3, #7
 800f1f2:	f200 8337 	bhi.w	800f864 <tcp_process+0x7a0>
 800f1f6:	a201      	add	r2, pc, #4	; (adr r2, 800f1fc <tcp_process+0x138>)
 800f1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1fc:	0800f21d 	.word	0x0800f21d
 800f200:	0800f44d 	.word	0x0800f44d
 800f204:	0800f5c5 	.word	0x0800f5c5
 800f208:	0800f5ef 	.word	0x0800f5ef
 800f20c:	0800f713 	.word	0x0800f713
 800f210:	0800f5c5 	.word	0x0800f5c5
 800f214:	0800f79f 	.word	0x0800f79f
 800f218:	0800f82f 	.word	0x0800f82f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f21c:	4b57      	ldr	r3, [pc, #348]	; (800f37c <tcp_process+0x2b8>)
 800f21e:	781b      	ldrb	r3, [r3, #0]
 800f220:	f003 0310 	and.w	r3, r3, #16
 800f224:	2b00      	cmp	r3, #0
 800f226:	f000 80e4 	beq.w	800f3f2 <tcp_process+0x32e>
 800f22a:	4b54      	ldr	r3, [pc, #336]	; (800f37c <tcp_process+0x2b8>)
 800f22c:	781b      	ldrb	r3, [r3, #0]
 800f22e:	f003 0302 	and.w	r3, r3, #2
 800f232:	2b00      	cmp	r3, #0
 800f234:	f000 80dd 	beq.w	800f3f2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f23c:	1c5a      	adds	r2, r3, #1
 800f23e:	4b50      	ldr	r3, [pc, #320]	; (800f380 <tcp_process+0x2bc>)
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	429a      	cmp	r2, r3
 800f244:	f040 80d5 	bne.w	800f3f2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f248:	4b4e      	ldr	r3, [pc, #312]	; (800f384 <tcp_process+0x2c0>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	1c5a      	adds	r2, r3, #1
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f25a:	4b49      	ldr	r3, [pc, #292]	; (800f380 <tcp_process+0x2bc>)
 800f25c:	681a      	ldr	r2, [r3, #0]
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f262:	4b4c      	ldr	r3, [pc, #304]	; (800f394 <tcp_process+0x2d0>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	89db      	ldrh	r3, [r3, #14]
 800f268:	b29a      	uxth	r2, r3
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f27c:	4b41      	ldr	r3, [pc, #260]	; (800f384 <tcp_process+0x2c0>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	1e5a      	subs	r2, r3, #1
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	2204      	movs	r2, #4
 800f28a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	3304      	adds	r3, #4
 800f294:	4618      	mov	r0, r3
 800f296:	f007 f939 	bl	801650c <ip4_route>
 800f29a:	4601      	mov	r1, r0
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	3304      	adds	r3, #4
 800f2a0:	461a      	mov	r2, r3
 800f2a2:	4620      	mov	r0, r4
 800f2a4:	f7ff f88e 	bl	800e3c4 <tcp_eff_send_mss_netif>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	461a      	mov	r2, r3
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f2b4:	009a      	lsls	r2, r3, #2
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f2ba:	005b      	lsls	r3, r3, #1
 800f2bc:	f241 111c 	movw	r1, #4380	; 0x111c
 800f2c0:	428b      	cmp	r3, r1
 800f2c2:	bf38      	it	cc
 800f2c4:	460b      	movcc	r3, r1
 800f2c6:	429a      	cmp	r2, r3
 800f2c8:	d204      	bcs.n	800f2d4 <tcp_process+0x210>
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f2ce:	009b      	lsls	r3, r3, #2
 800f2d0:	b29b      	uxth	r3, r3
 800f2d2:	e00d      	b.n	800f2f0 <tcp_process+0x22c>
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f2d8:	005b      	lsls	r3, r3, #1
 800f2da:	f241 121c 	movw	r2, #4380	; 0x111c
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	d904      	bls.n	800f2ec <tcp_process+0x228>
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f2e6:	005b      	lsls	r3, r3, #1
 800f2e8:	b29b      	uxth	r3, r3
 800f2ea:	e001      	b.n	800f2f0 <tcp_process+0x22c>
 800f2ec:	f241 131c 	movw	r3, #4380	; 0x111c
 800f2f0:	687a      	ldr	r2, [r7, #4]
 800f2f2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d106      	bne.n	800f30e <tcp_process+0x24a>
 800f300:	4b1b      	ldr	r3, [pc, #108]	; (800f370 <tcp_process+0x2ac>)
 800f302:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f306:	4924      	ldr	r1, [pc, #144]	; (800f398 <tcp_process+0x2d4>)
 800f308:	481b      	ldr	r0, [pc, #108]	; (800f378 <tcp_process+0x2b4>)
 800f30a:	f008 fd5f 	bl	8017dcc <iprintf>
        --pcb->snd_queuelen;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f314:	3b01      	subs	r3, #1
 800f316:	b29a      	uxth	r2, r3
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f322:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f324:	69fb      	ldr	r3, [r7, #28]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d111      	bne.n	800f34e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f32e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f330:	69fb      	ldr	r3, [r7, #28]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d106      	bne.n	800f344 <tcp_process+0x280>
 800f336:	4b0e      	ldr	r3, [pc, #56]	; (800f370 <tcp_process+0x2ac>)
 800f338:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f33c:	4917      	ldr	r1, [pc, #92]	; (800f39c <tcp_process+0x2d8>)
 800f33e:	480e      	ldr	r0, [pc, #56]	; (800f378 <tcp_process+0x2b4>)
 800f340:	f008 fd44 	bl	8017dcc <iprintf>
          pcb->unsent = rseg->next;
 800f344:	69fb      	ldr	r3, [r7, #28]
 800f346:	681a      	ldr	r2, [r3, #0]
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	66da      	str	r2, [r3, #108]	; 0x6c
 800f34c:	e003      	b.n	800f356 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800f34e:	69fb      	ldr	r3, [r7, #28]
 800f350:	681a      	ldr	r2, [r3, #0]
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f356:	69f8      	ldr	r0, [r7, #28]
 800f358:	f7fe fc52 	bl	800dc00 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f360:	2b00      	cmp	r3, #0
 800f362:	d11d      	bne.n	800f3a0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f36a:	861a      	strh	r2, [r3, #48]	; 0x30
 800f36c:	e01f      	b.n	800f3ae <tcp_process+0x2ea>
 800f36e:	bf00      	nop
 800f370:	0801b1d4 	.word	0x0801b1d4
 800f374:	0801b40c 	.word	0x0801b40c
 800f378:	0801b220 	.word	0x0801b220
 800f37c:	20008abc 	.word	0x20008abc
 800f380:	20008ab4 	.word	0x20008ab4
 800f384:	20008ab0 	.word	0x20008ab0
 800f388:	0801b428 	.word	0x0801b428
 800f38c:	20008abd 	.word	0x20008abd
 800f390:	2000f518 	.word	0x2000f518
 800f394:	20008aa0 	.word	0x20008aa0
 800f398:	0801b448 	.word	0x0801b448
 800f39c:	0801b460 	.word	0x0801b460
        } else {
          pcb->rtime = 0;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d00a      	beq.n	800f3ce <tcp_process+0x30a>
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3be:	687a      	ldr	r2, [r7, #4]
 800f3c0:	6910      	ldr	r0, [r2, #16]
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	6879      	ldr	r1, [r7, #4]
 800f3c6:	4798      	blx	r3
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	76bb      	strb	r3, [r7, #26]
 800f3cc:	e001      	b.n	800f3d2 <tcp_process+0x30e>
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f3d2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f3d6:	f113 0f0d 	cmn.w	r3, #13
 800f3da:	d102      	bne.n	800f3e2 <tcp_process+0x31e>
          return ERR_ABRT;
 800f3dc:	f06f 030c 	mvn.w	r3, #12
 800f3e0:	e250      	b.n	800f884 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	8b5b      	ldrh	r3, [r3, #26]
 800f3e6:	f043 0302 	orr.w	r3, r3, #2
 800f3ea:	b29a      	uxth	r2, r3
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f3f0:	e23a      	b.n	800f868 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f3f2:	4b9d      	ldr	r3, [pc, #628]	; (800f668 <tcp_process+0x5a4>)
 800f3f4:	781b      	ldrb	r3, [r3, #0]
 800f3f6:	f003 0310 	and.w	r3, r3, #16
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	f000 8234 	beq.w	800f868 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f400:	4b9a      	ldr	r3, [pc, #616]	; (800f66c <tcp_process+0x5a8>)
 800f402:	6819      	ldr	r1, [r3, #0]
 800f404:	4b9a      	ldr	r3, [pc, #616]	; (800f670 <tcp_process+0x5ac>)
 800f406:	881b      	ldrh	r3, [r3, #0]
 800f408:	461a      	mov	r2, r3
 800f40a:	4b9a      	ldr	r3, [pc, #616]	; (800f674 <tcp_process+0x5b0>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f410:	4b99      	ldr	r3, [pc, #612]	; (800f678 <tcp_process+0x5b4>)
 800f412:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f414:	885b      	ldrh	r3, [r3, #2]
 800f416:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f418:	4a97      	ldr	r2, [pc, #604]	; (800f678 <tcp_process+0x5b4>)
 800f41a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f41c:	8812      	ldrh	r2, [r2, #0]
 800f41e:	b292      	uxth	r2, r2
 800f420:	9202      	str	r2, [sp, #8]
 800f422:	9301      	str	r3, [sp, #4]
 800f424:	4b95      	ldr	r3, [pc, #596]	; (800f67c <tcp_process+0x5b8>)
 800f426:	9300      	str	r3, [sp, #0]
 800f428:	4b95      	ldr	r3, [pc, #596]	; (800f680 <tcp_process+0x5bc>)
 800f42a:	4602      	mov	r2, r0
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f003 f8eb 	bl	8012608 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f438:	2b05      	cmp	r3, #5
 800f43a:	f200 8215 	bhi.w	800f868 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2200      	movs	r2, #0
 800f442:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800f444:	6878      	ldr	r0, [r7, #4]
 800f446:	f002 feab 	bl	80121a0 <tcp_rexmit_rto>
      break;
 800f44a:	e20d      	b.n	800f868 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f44c:	4b86      	ldr	r3, [pc, #536]	; (800f668 <tcp_process+0x5a4>)
 800f44e:	781b      	ldrb	r3, [r3, #0]
 800f450:	f003 0310 	and.w	r3, r3, #16
 800f454:	2b00      	cmp	r3, #0
 800f456:	f000 80a1 	beq.w	800f59c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f45a:	4b84      	ldr	r3, [pc, #528]	; (800f66c <tcp_process+0x5a8>)
 800f45c:	681a      	ldr	r2, [r3, #0]
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f462:	1ad3      	subs	r3, r2, r3
 800f464:	3b01      	subs	r3, #1
 800f466:	2b00      	cmp	r3, #0
 800f468:	db7e      	blt.n	800f568 <tcp_process+0x4a4>
 800f46a:	4b80      	ldr	r3, [pc, #512]	; (800f66c <tcp_process+0x5a8>)
 800f46c:	681a      	ldr	r2, [r3, #0]
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f472:	1ad3      	subs	r3, r2, r3
 800f474:	2b00      	cmp	r3, #0
 800f476:	dc77      	bgt.n	800f568 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2204      	movs	r2, #4
 800f47c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f482:	2b00      	cmp	r3, #0
 800f484:	d102      	bne.n	800f48c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f486:	23fa      	movs	r3, #250	; 0xfa
 800f488:	76bb      	strb	r3, [r7, #26]
 800f48a:	e01d      	b.n	800f4c8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f490:	699b      	ldr	r3, [r3, #24]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d106      	bne.n	800f4a4 <tcp_process+0x3e0>
 800f496:	4b7b      	ldr	r3, [pc, #492]	; (800f684 <tcp_process+0x5c0>)
 800f498:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800f49c:	497a      	ldr	r1, [pc, #488]	; (800f688 <tcp_process+0x5c4>)
 800f49e:	487b      	ldr	r0, [pc, #492]	; (800f68c <tcp_process+0x5c8>)
 800f4a0:	f008 fc94 	bl	8017dcc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4a8:	699b      	ldr	r3, [r3, #24]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d00a      	beq.n	800f4c4 <tcp_process+0x400>
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4b2:	699b      	ldr	r3, [r3, #24]
 800f4b4:	687a      	ldr	r2, [r7, #4]
 800f4b6:	6910      	ldr	r0, [r2, #16]
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	6879      	ldr	r1, [r7, #4]
 800f4bc:	4798      	blx	r3
 800f4be:	4603      	mov	r3, r0
 800f4c0:	76bb      	strb	r3, [r7, #26]
 800f4c2:	e001      	b.n	800f4c8 <tcp_process+0x404>
 800f4c4:	23f0      	movs	r3, #240	; 0xf0
 800f4c6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f4c8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d00a      	beq.n	800f4e6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f4d0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f4d4:	f113 0f0d 	cmn.w	r3, #13
 800f4d8:	d002      	beq.n	800f4e0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f7fd fcee 	bl	800cebc <tcp_abort>
            }
            return ERR_ABRT;
 800f4e0:	f06f 030c 	mvn.w	r3, #12
 800f4e4:	e1ce      	b.n	800f884 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f000 fae0 	bl	800faac <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f4ec:	4b68      	ldr	r3, [pc, #416]	; (800f690 <tcp_process+0x5cc>)
 800f4ee:	881b      	ldrh	r3, [r3, #0]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d005      	beq.n	800f500 <tcp_process+0x43c>
            recv_acked--;
 800f4f4:	4b66      	ldr	r3, [pc, #408]	; (800f690 <tcp_process+0x5cc>)
 800f4f6:	881b      	ldrh	r3, [r3, #0]
 800f4f8:	3b01      	subs	r3, #1
 800f4fa:	b29a      	uxth	r2, r3
 800f4fc:	4b64      	ldr	r3, [pc, #400]	; (800f690 <tcp_process+0x5cc>)
 800f4fe:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f504:	009a      	lsls	r2, r3, #2
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f50a:	005b      	lsls	r3, r3, #1
 800f50c:	f241 111c 	movw	r1, #4380	; 0x111c
 800f510:	428b      	cmp	r3, r1
 800f512:	bf38      	it	cc
 800f514:	460b      	movcc	r3, r1
 800f516:	429a      	cmp	r2, r3
 800f518:	d204      	bcs.n	800f524 <tcp_process+0x460>
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f51e:	009b      	lsls	r3, r3, #2
 800f520:	b29b      	uxth	r3, r3
 800f522:	e00d      	b.n	800f540 <tcp_process+0x47c>
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f528:	005b      	lsls	r3, r3, #1
 800f52a:	f241 121c 	movw	r2, #4380	; 0x111c
 800f52e:	4293      	cmp	r3, r2
 800f530:	d904      	bls.n	800f53c <tcp_process+0x478>
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f536:	005b      	lsls	r3, r3, #1
 800f538:	b29b      	uxth	r3, r3
 800f53a:	e001      	b.n	800f540 <tcp_process+0x47c>
 800f53c:	f241 131c 	movw	r3, #4380	; 0x111c
 800f540:	687a      	ldr	r2, [r7, #4]
 800f542:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f546:	4b53      	ldr	r3, [pc, #332]	; (800f694 <tcp_process+0x5d0>)
 800f548:	781b      	ldrb	r3, [r3, #0]
 800f54a:	f003 0320 	and.w	r3, r3, #32
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d037      	beq.n	800f5c2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	8b5b      	ldrh	r3, [r3, #26]
 800f556:	f043 0302 	orr.w	r3, r3, #2
 800f55a:	b29a      	uxth	r2, r3
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2207      	movs	r2, #7
 800f564:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f566:	e02c      	b.n	800f5c2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f568:	4b40      	ldr	r3, [pc, #256]	; (800f66c <tcp_process+0x5a8>)
 800f56a:	6819      	ldr	r1, [r3, #0]
 800f56c:	4b40      	ldr	r3, [pc, #256]	; (800f670 <tcp_process+0x5ac>)
 800f56e:	881b      	ldrh	r3, [r3, #0]
 800f570:	461a      	mov	r2, r3
 800f572:	4b40      	ldr	r3, [pc, #256]	; (800f674 <tcp_process+0x5b0>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f578:	4b3f      	ldr	r3, [pc, #252]	; (800f678 <tcp_process+0x5b4>)
 800f57a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f57c:	885b      	ldrh	r3, [r3, #2]
 800f57e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f580:	4a3d      	ldr	r2, [pc, #244]	; (800f678 <tcp_process+0x5b4>)
 800f582:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f584:	8812      	ldrh	r2, [r2, #0]
 800f586:	b292      	uxth	r2, r2
 800f588:	9202      	str	r2, [sp, #8]
 800f58a:	9301      	str	r3, [sp, #4]
 800f58c:	4b3b      	ldr	r3, [pc, #236]	; (800f67c <tcp_process+0x5b8>)
 800f58e:	9300      	str	r3, [sp, #0]
 800f590:	4b3b      	ldr	r3, [pc, #236]	; (800f680 <tcp_process+0x5bc>)
 800f592:	4602      	mov	r2, r0
 800f594:	6878      	ldr	r0, [r7, #4]
 800f596:	f003 f837 	bl	8012608 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f59a:	e167      	b.n	800f86c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f59c:	4b32      	ldr	r3, [pc, #200]	; (800f668 <tcp_process+0x5a4>)
 800f59e:	781b      	ldrb	r3, [r3, #0]
 800f5a0:	f003 0302 	and.w	r3, r3, #2
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	f000 8161 	beq.w	800f86c <tcp_process+0x7a8>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5ae:	1e5a      	subs	r2, r3, #1
 800f5b0:	4b30      	ldr	r3, [pc, #192]	; (800f674 <tcp_process+0x5b0>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	f040 8159 	bne.w	800f86c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f5ba:	6878      	ldr	r0, [r7, #4]
 800f5bc:	f002 fe12 	bl	80121e4 <tcp_rexmit>
      break;
 800f5c0:	e154      	b.n	800f86c <tcp_process+0x7a8>
 800f5c2:	e153      	b.n	800f86c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	f000 fa71 	bl	800faac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f5ca:	4b32      	ldr	r3, [pc, #200]	; (800f694 <tcp_process+0x5d0>)
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	f003 0320 	and.w	r3, r3, #32
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	f000 814c 	beq.w	800f870 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	8b5b      	ldrh	r3, [r3, #26]
 800f5dc:	f043 0302 	orr.w	r3, r3, #2
 800f5e0:	b29a      	uxth	r2, r3
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2207      	movs	r2, #7
 800f5ea:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f5ec:	e140      	b.n	800f870 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	f000 fa5c 	bl	800faac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f5f4:	4b27      	ldr	r3, [pc, #156]	; (800f694 <tcp_process+0x5d0>)
 800f5f6:	781b      	ldrb	r3, [r3, #0]
 800f5f8:	f003 0320 	and.w	r3, r3, #32
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d071      	beq.n	800f6e4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f600:	4b19      	ldr	r3, [pc, #100]	; (800f668 <tcp_process+0x5a4>)
 800f602:	781b      	ldrb	r3, [r3, #0]
 800f604:	f003 0310 	and.w	r3, r3, #16
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d060      	beq.n	800f6ce <tcp_process+0x60a>
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f610:	4b16      	ldr	r3, [pc, #88]	; (800f66c <tcp_process+0x5a8>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	429a      	cmp	r2, r3
 800f616:	d15a      	bne.n	800f6ce <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d156      	bne.n	800f6ce <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	8b5b      	ldrh	r3, [r3, #26]
 800f624:	f043 0302 	orr.w	r3, r3, #2
 800f628:	b29a      	uxth	r2, r3
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f7fe fdbe 	bl	800e1b0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f634:	4b18      	ldr	r3, [pc, #96]	; (800f698 <tcp_process+0x5d4>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	687a      	ldr	r2, [r7, #4]
 800f63a:	429a      	cmp	r2, r3
 800f63c:	d105      	bne.n	800f64a <tcp_process+0x586>
 800f63e:	4b16      	ldr	r3, [pc, #88]	; (800f698 <tcp_process+0x5d4>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	68db      	ldr	r3, [r3, #12]
 800f644:	4a14      	ldr	r2, [pc, #80]	; (800f698 <tcp_process+0x5d4>)
 800f646:	6013      	str	r3, [r2, #0]
 800f648:	e02e      	b.n	800f6a8 <tcp_process+0x5e4>
 800f64a:	4b13      	ldr	r3, [pc, #76]	; (800f698 <tcp_process+0x5d4>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	617b      	str	r3, [r7, #20]
 800f650:	e027      	b.n	800f6a2 <tcp_process+0x5de>
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	68db      	ldr	r3, [r3, #12]
 800f656:	687a      	ldr	r2, [r7, #4]
 800f658:	429a      	cmp	r2, r3
 800f65a:	d11f      	bne.n	800f69c <tcp_process+0x5d8>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	68da      	ldr	r2, [r3, #12]
 800f660:	697b      	ldr	r3, [r7, #20]
 800f662:	60da      	str	r2, [r3, #12]
 800f664:	e020      	b.n	800f6a8 <tcp_process+0x5e4>
 800f666:	bf00      	nop
 800f668:	20008abc 	.word	0x20008abc
 800f66c:	20008ab4 	.word	0x20008ab4
 800f670:	20008aba 	.word	0x20008aba
 800f674:	20008ab0 	.word	0x20008ab0
 800f678:	20008aa0 	.word	0x20008aa0
 800f67c:	2000bdf0 	.word	0x2000bdf0
 800f680:	2000bdf4 	.word	0x2000bdf4
 800f684:	0801b1d4 	.word	0x0801b1d4
 800f688:	0801b474 	.word	0x0801b474
 800f68c:	0801b220 	.word	0x0801b220
 800f690:	20008ab8 	.word	0x20008ab8
 800f694:	20008abd 	.word	0x20008abd
 800f698:	2000f514 	.word	0x2000f514
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	68db      	ldr	r3, [r3, #12]
 800f6a0:	617b      	str	r3, [r7, #20]
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d1d4      	bne.n	800f652 <tcp_process+0x58e>
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	60da      	str	r2, [r3, #12]
 800f6ae:	4b77      	ldr	r3, [pc, #476]	; (800f88c <tcp_process+0x7c8>)
 800f6b0:	2201      	movs	r2, #1
 800f6b2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	220a      	movs	r2, #10
 800f6b8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f6ba:	4b75      	ldr	r3, [pc, #468]	; (800f890 <tcp_process+0x7cc>)
 800f6bc:	681a      	ldr	r2, [r3, #0]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	60da      	str	r2, [r3, #12]
 800f6c2:	4a73      	ldr	r2, [pc, #460]	; (800f890 <tcp_process+0x7cc>)
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	6013      	str	r3, [r2, #0]
 800f6c8:	f003 f960 	bl	801298c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f6cc:	e0d2      	b.n	800f874 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	8b5b      	ldrh	r3, [r3, #26]
 800f6d2:	f043 0302 	orr.w	r3, r3, #2
 800f6d6:	b29a      	uxth	r2, r3
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2208      	movs	r2, #8
 800f6e0:	751a      	strb	r2, [r3, #20]
      break;
 800f6e2:	e0c7      	b.n	800f874 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f6e4:	4b6b      	ldr	r3, [pc, #428]	; (800f894 <tcp_process+0x7d0>)
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	f003 0310 	and.w	r3, r3, #16
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	f000 80c1 	beq.w	800f874 <tcp_process+0x7b0>
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f6f6:	4b68      	ldr	r3, [pc, #416]	; (800f898 <tcp_process+0x7d4>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	429a      	cmp	r2, r3
 800f6fc:	f040 80ba 	bne.w	800f874 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f704:	2b00      	cmp	r3, #0
 800f706:	f040 80b5 	bne.w	800f874 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2206      	movs	r2, #6
 800f70e:	751a      	strb	r2, [r3, #20]
      break;
 800f710:	e0b0      	b.n	800f874 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f000 f9ca 	bl	800faac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f718:	4b60      	ldr	r3, [pc, #384]	; (800f89c <tcp_process+0x7d8>)
 800f71a:	781b      	ldrb	r3, [r3, #0]
 800f71c:	f003 0320 	and.w	r3, r3, #32
 800f720:	2b00      	cmp	r3, #0
 800f722:	f000 80a9 	beq.w	800f878 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	8b5b      	ldrh	r3, [r3, #26]
 800f72a:	f043 0302 	orr.w	r3, r3, #2
 800f72e:	b29a      	uxth	r2, r3
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f734:	6878      	ldr	r0, [r7, #4]
 800f736:	f7fe fd3b 	bl	800e1b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f73a:	4b59      	ldr	r3, [pc, #356]	; (800f8a0 <tcp_process+0x7dc>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	687a      	ldr	r2, [r7, #4]
 800f740:	429a      	cmp	r2, r3
 800f742:	d105      	bne.n	800f750 <tcp_process+0x68c>
 800f744:	4b56      	ldr	r3, [pc, #344]	; (800f8a0 <tcp_process+0x7dc>)
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	68db      	ldr	r3, [r3, #12]
 800f74a:	4a55      	ldr	r2, [pc, #340]	; (800f8a0 <tcp_process+0x7dc>)
 800f74c:	6013      	str	r3, [r2, #0]
 800f74e:	e013      	b.n	800f778 <tcp_process+0x6b4>
 800f750:	4b53      	ldr	r3, [pc, #332]	; (800f8a0 <tcp_process+0x7dc>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	613b      	str	r3, [r7, #16]
 800f756:	e00c      	b.n	800f772 <tcp_process+0x6ae>
 800f758:	693b      	ldr	r3, [r7, #16]
 800f75a:	68db      	ldr	r3, [r3, #12]
 800f75c:	687a      	ldr	r2, [r7, #4]
 800f75e:	429a      	cmp	r2, r3
 800f760:	d104      	bne.n	800f76c <tcp_process+0x6a8>
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	68da      	ldr	r2, [r3, #12]
 800f766:	693b      	ldr	r3, [r7, #16]
 800f768:	60da      	str	r2, [r3, #12]
 800f76a:	e005      	b.n	800f778 <tcp_process+0x6b4>
 800f76c:	693b      	ldr	r3, [r7, #16]
 800f76e:	68db      	ldr	r3, [r3, #12]
 800f770:	613b      	str	r3, [r7, #16]
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d1ef      	bne.n	800f758 <tcp_process+0x694>
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2200      	movs	r2, #0
 800f77c:	60da      	str	r2, [r3, #12]
 800f77e:	4b43      	ldr	r3, [pc, #268]	; (800f88c <tcp_process+0x7c8>)
 800f780:	2201      	movs	r2, #1
 800f782:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	220a      	movs	r2, #10
 800f788:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f78a:	4b41      	ldr	r3, [pc, #260]	; (800f890 <tcp_process+0x7cc>)
 800f78c:	681a      	ldr	r2, [r3, #0]
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	60da      	str	r2, [r3, #12]
 800f792:	4a3f      	ldr	r2, [pc, #252]	; (800f890 <tcp_process+0x7cc>)
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	6013      	str	r3, [r2, #0]
 800f798:	f003 f8f8 	bl	801298c <tcp_timer_needed>
      }
      break;
 800f79c:	e06c      	b.n	800f878 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f000 f984 	bl	800faac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f7a4:	4b3b      	ldr	r3, [pc, #236]	; (800f894 <tcp_process+0x7d0>)
 800f7a6:	781b      	ldrb	r3, [r3, #0]
 800f7a8:	f003 0310 	and.w	r3, r3, #16
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d065      	beq.n	800f87c <tcp_process+0x7b8>
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f7b4:	4b38      	ldr	r3, [pc, #224]	; (800f898 <tcp_process+0x7d4>)
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d15f      	bne.n	800f87c <tcp_process+0x7b8>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d15b      	bne.n	800f87c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f7c4:	6878      	ldr	r0, [r7, #4]
 800f7c6:	f7fe fcf3 	bl	800e1b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f7ca:	4b35      	ldr	r3, [pc, #212]	; (800f8a0 <tcp_process+0x7dc>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	687a      	ldr	r2, [r7, #4]
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	d105      	bne.n	800f7e0 <tcp_process+0x71c>
 800f7d4:	4b32      	ldr	r3, [pc, #200]	; (800f8a0 <tcp_process+0x7dc>)
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	68db      	ldr	r3, [r3, #12]
 800f7da:	4a31      	ldr	r2, [pc, #196]	; (800f8a0 <tcp_process+0x7dc>)
 800f7dc:	6013      	str	r3, [r2, #0]
 800f7de:	e013      	b.n	800f808 <tcp_process+0x744>
 800f7e0:	4b2f      	ldr	r3, [pc, #188]	; (800f8a0 <tcp_process+0x7dc>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	60fb      	str	r3, [r7, #12]
 800f7e6:	e00c      	b.n	800f802 <tcp_process+0x73e>
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	68db      	ldr	r3, [r3, #12]
 800f7ec:	687a      	ldr	r2, [r7, #4]
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	d104      	bne.n	800f7fc <tcp_process+0x738>
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	68da      	ldr	r2, [r3, #12]
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	60da      	str	r2, [r3, #12]
 800f7fa:	e005      	b.n	800f808 <tcp_process+0x744>
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	68db      	ldr	r3, [r3, #12]
 800f800:	60fb      	str	r3, [r7, #12]
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d1ef      	bne.n	800f7e8 <tcp_process+0x724>
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2200      	movs	r2, #0
 800f80c:	60da      	str	r2, [r3, #12]
 800f80e:	4b1f      	ldr	r3, [pc, #124]	; (800f88c <tcp_process+0x7c8>)
 800f810:	2201      	movs	r2, #1
 800f812:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	220a      	movs	r2, #10
 800f818:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f81a:	4b1d      	ldr	r3, [pc, #116]	; (800f890 <tcp_process+0x7cc>)
 800f81c:	681a      	ldr	r2, [r3, #0]
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	60da      	str	r2, [r3, #12]
 800f822:	4a1b      	ldr	r2, [pc, #108]	; (800f890 <tcp_process+0x7cc>)
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	6013      	str	r3, [r2, #0]
 800f828:	f003 f8b0 	bl	801298c <tcp_timer_needed>
      }
      break;
 800f82c:	e026      	b.n	800f87c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f82e:	6878      	ldr	r0, [r7, #4]
 800f830:	f000 f93c 	bl	800faac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f834:	4b17      	ldr	r3, [pc, #92]	; (800f894 <tcp_process+0x7d0>)
 800f836:	781b      	ldrb	r3, [r3, #0]
 800f838:	f003 0310 	and.w	r3, r3, #16
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d01f      	beq.n	800f880 <tcp_process+0x7bc>
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f844:	4b14      	ldr	r3, [pc, #80]	; (800f898 <tcp_process+0x7d4>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	429a      	cmp	r2, r3
 800f84a:	d119      	bne.n	800f880 <tcp_process+0x7bc>
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f850:	2b00      	cmp	r3, #0
 800f852:	d115      	bne.n	800f880 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f854:	4b11      	ldr	r3, [pc, #68]	; (800f89c <tcp_process+0x7d8>)
 800f856:	781b      	ldrb	r3, [r3, #0]
 800f858:	f043 0310 	orr.w	r3, r3, #16
 800f85c:	b2da      	uxtb	r2, r3
 800f85e:	4b0f      	ldr	r3, [pc, #60]	; (800f89c <tcp_process+0x7d8>)
 800f860:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f862:	e00d      	b.n	800f880 <tcp_process+0x7bc>
    default:
      break;
 800f864:	bf00      	nop
 800f866:	e00c      	b.n	800f882 <tcp_process+0x7be>
      break;
 800f868:	bf00      	nop
 800f86a:	e00a      	b.n	800f882 <tcp_process+0x7be>
      break;
 800f86c:	bf00      	nop
 800f86e:	e008      	b.n	800f882 <tcp_process+0x7be>
      break;
 800f870:	bf00      	nop
 800f872:	e006      	b.n	800f882 <tcp_process+0x7be>
      break;
 800f874:	bf00      	nop
 800f876:	e004      	b.n	800f882 <tcp_process+0x7be>
      break;
 800f878:	bf00      	nop
 800f87a:	e002      	b.n	800f882 <tcp_process+0x7be>
      break;
 800f87c:	bf00      	nop
 800f87e:	e000      	b.n	800f882 <tcp_process+0x7be>
      break;
 800f880:	bf00      	nop
  }
  return ERR_OK;
 800f882:	2300      	movs	r3, #0
}
 800f884:	4618      	mov	r0, r3
 800f886:	3724      	adds	r7, #36	; 0x24
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd90      	pop	{r4, r7, pc}
 800f88c:	2000f510 	.word	0x2000f510
 800f890:	2000f524 	.word	0x2000f524
 800f894:	20008abc 	.word	0x20008abc
 800f898:	20008ab4 	.word	0x20008ab4
 800f89c:	20008abd 	.word	0x20008abd
 800f8a0:	2000f514 	.word	0x2000f514

0800f8a4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f8a4:	b590      	push	{r4, r7, lr}
 800f8a6:	b085      	sub	sp, #20
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d106      	bne.n	800f8c2 <tcp_oos_insert_segment+0x1e>
 800f8b4:	4b3b      	ldr	r3, [pc, #236]	; (800f9a4 <tcp_oos_insert_segment+0x100>)
 800f8b6:	f240 421f 	movw	r2, #1055	; 0x41f
 800f8ba:	493b      	ldr	r1, [pc, #236]	; (800f9a8 <tcp_oos_insert_segment+0x104>)
 800f8bc:	483b      	ldr	r0, [pc, #236]	; (800f9ac <tcp_oos_insert_segment+0x108>)
 800f8be:	f008 fa85 	bl	8017dcc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	68db      	ldr	r3, [r3, #12]
 800f8c6:	899b      	ldrh	r3, [r3, #12]
 800f8c8:	b29b      	uxth	r3, r3
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f7fb f916 	bl	800aafc <lwip_htons>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	b2db      	uxtb	r3, r3
 800f8d4:	f003 0301 	and.w	r3, r3, #1
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d028      	beq.n	800f92e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f8dc:	6838      	ldr	r0, [r7, #0]
 800f8de:	f7fe f97b 	bl	800dbd8 <tcp_segs_free>
    next = NULL;
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	603b      	str	r3, [r7, #0]
 800f8e6:	e056      	b.n	800f996 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	68db      	ldr	r3, [r3, #12]
 800f8ec:	899b      	ldrh	r3, [r3, #12]
 800f8ee:	b29b      	uxth	r3, r3
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f7fb f903 	bl	800aafc <lwip_htons>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	b2db      	uxtb	r3, r3
 800f8fa:	f003 0301 	and.w	r3, r3, #1
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d00d      	beq.n	800f91e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	68db      	ldr	r3, [r3, #12]
 800f906:	899b      	ldrh	r3, [r3, #12]
 800f908:	b29c      	uxth	r4, r3
 800f90a:	2001      	movs	r0, #1
 800f90c:	f7fb f8f6 	bl	800aafc <lwip_htons>
 800f910:	4603      	mov	r3, r0
 800f912:	461a      	mov	r2, r3
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	68db      	ldr	r3, [r3, #12]
 800f918:	4322      	orrs	r2, r4
 800f91a:	b292      	uxth	r2, r2
 800f91c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f928:	68f8      	ldr	r0, [r7, #12]
 800f92a:	f7fe f969 	bl	800dc00 <tcp_seg_free>
    while (next &&
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d00e      	beq.n	800f952 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	891b      	ldrh	r3, [r3, #8]
 800f938:	461a      	mov	r2, r3
 800f93a:	4b1d      	ldr	r3, [pc, #116]	; (800f9b0 <tcp_oos_insert_segment+0x10c>)
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	441a      	add	r2, r3
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	68db      	ldr	r3, [r3, #12]
 800f944:	685b      	ldr	r3, [r3, #4]
 800f946:	6839      	ldr	r1, [r7, #0]
 800f948:	8909      	ldrh	r1, [r1, #8]
 800f94a:	440b      	add	r3, r1
 800f94c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f94e:	2b00      	cmp	r3, #0
 800f950:	daca      	bge.n	800f8e8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d01e      	beq.n	800f996 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	891b      	ldrh	r3, [r3, #8]
 800f95c:	461a      	mov	r2, r3
 800f95e:	4b14      	ldr	r3, [pc, #80]	; (800f9b0 <tcp_oos_insert_segment+0x10c>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	441a      	add	r2, r3
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	68db      	ldr	r3, [r3, #12]
 800f968:	685b      	ldr	r3, [r3, #4]
 800f96a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	dd12      	ble.n	800f996 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	68db      	ldr	r3, [r3, #12]
 800f974:	685b      	ldr	r3, [r3, #4]
 800f976:	b29a      	uxth	r2, r3
 800f978:	4b0d      	ldr	r3, [pc, #52]	; (800f9b0 <tcp_oos_insert_segment+0x10c>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	b29b      	uxth	r3, r3
 800f97e:	1ad3      	subs	r3, r2, r3
 800f980:	b29a      	uxth	r2, r3
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	685a      	ldr	r2, [r3, #4]
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	891b      	ldrh	r3, [r3, #8]
 800f98e:	4619      	mov	r1, r3
 800f990:	4610      	mov	r0, r2
 800f992:	f7fc fb17 	bl	800bfc4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	683a      	ldr	r2, [r7, #0]
 800f99a:	601a      	str	r2, [r3, #0]
}
 800f99c:	bf00      	nop
 800f99e:	3714      	adds	r7, #20
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd90      	pop	{r4, r7, pc}
 800f9a4:	0801b1d4 	.word	0x0801b1d4
 800f9a8:	0801b494 	.word	0x0801b494
 800f9ac:	0801b220 	.word	0x0801b220
 800f9b0:	20008ab0 	.word	0x20008ab0

0800f9b4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f9b4:	b5b0      	push	{r4, r5, r7, lr}
 800f9b6:	b086      	sub	sp, #24
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	60f8      	str	r0, [r7, #12]
 800f9bc:	60b9      	str	r1, [r7, #8]
 800f9be:	607a      	str	r2, [r7, #4]
 800f9c0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f9c2:	e03e      	b.n	800fa42 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	685b      	ldr	r3, [r3, #4]
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	f7fc fd0a 	bl	800c3ec <pbuf_clen>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f9e2:	8a7a      	ldrh	r2, [r7, #18]
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	d906      	bls.n	800f9f6 <tcp_free_acked_segments+0x42>
 800f9e8:	4b2a      	ldr	r3, [pc, #168]	; (800fa94 <tcp_free_acked_segments+0xe0>)
 800f9ea:	f240 4257 	movw	r2, #1111	; 0x457
 800f9ee:	492a      	ldr	r1, [pc, #168]	; (800fa98 <tcp_free_acked_segments+0xe4>)
 800f9f0:	482a      	ldr	r0, [pc, #168]	; (800fa9c <tcp_free_acked_segments+0xe8>)
 800f9f2:	f008 f9eb 	bl	8017dcc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f9fc:	8a7b      	ldrh	r3, [r7, #18]
 800f9fe:	1ad3      	subs	r3, r2, r3
 800fa00:	b29a      	uxth	r2, r3
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	891a      	ldrh	r2, [r3, #8]
 800fa0c:	4b24      	ldr	r3, [pc, #144]	; (800faa0 <tcp_free_acked_segments+0xec>)
 800fa0e:	881b      	ldrh	r3, [r3, #0]
 800fa10:	4413      	add	r3, r2
 800fa12:	b29a      	uxth	r2, r3
 800fa14:	4b22      	ldr	r3, [pc, #136]	; (800faa0 <tcp_free_acked_segments+0xec>)
 800fa16:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800fa18:	6978      	ldr	r0, [r7, #20]
 800fa1a:	f7fe f8f1 	bl	800dc00 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d00c      	beq.n	800fa42 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d109      	bne.n	800fa42 <tcp_free_acked_segments+0x8e>
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d106      	bne.n	800fa42 <tcp_free_acked_segments+0x8e>
 800fa34:	4b17      	ldr	r3, [pc, #92]	; (800fa94 <tcp_free_acked_segments+0xe0>)
 800fa36:	f240 4262 	movw	r2, #1122	; 0x462
 800fa3a:	491a      	ldr	r1, [pc, #104]	; (800faa4 <tcp_free_acked_segments+0xf0>)
 800fa3c:	4817      	ldr	r0, [pc, #92]	; (800fa9c <tcp_free_acked_segments+0xe8>)
 800fa3e:	f008 f9c5 	bl	8017dcc <iprintf>
  while (seg_list != NULL &&
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d020      	beq.n	800fa8a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	68db      	ldr	r3, [r3, #12]
 800fa4c:	685b      	ldr	r3, [r3, #4]
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f7fb f869 	bl	800ab26 <lwip_htonl>
 800fa54:	4604      	mov	r4, r0
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	891b      	ldrh	r3, [r3, #8]
 800fa5a:	461d      	mov	r5, r3
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	68db      	ldr	r3, [r3, #12]
 800fa60:	899b      	ldrh	r3, [r3, #12]
 800fa62:	b29b      	uxth	r3, r3
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7fb f849 	bl	800aafc <lwip_htons>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	b2db      	uxtb	r3, r3
 800fa6e:	f003 0303 	and.w	r3, r3, #3
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d001      	beq.n	800fa7a <tcp_free_acked_segments+0xc6>
 800fa76:	2301      	movs	r3, #1
 800fa78:	e000      	b.n	800fa7c <tcp_free_acked_segments+0xc8>
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	442b      	add	r3, r5
 800fa7e:	18e2      	adds	r2, r4, r3
 800fa80:	4b09      	ldr	r3, [pc, #36]	; (800faa8 <tcp_free_acked_segments+0xf4>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	dd9c      	ble.n	800f9c4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800fa8a:	68bb      	ldr	r3, [r7, #8]
}
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	3718      	adds	r7, #24
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bdb0      	pop	{r4, r5, r7, pc}
 800fa94:	0801b1d4 	.word	0x0801b1d4
 800fa98:	0801b4bc 	.word	0x0801b4bc
 800fa9c:	0801b220 	.word	0x0801b220
 800faa0:	20008ab8 	.word	0x20008ab8
 800faa4:	0801b4e4 	.word	0x0801b4e4
 800faa8:	20008ab4 	.word	0x20008ab4

0800faac <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800faac:	b5b0      	push	{r4, r5, r7, lr}
 800faae:	b094      	sub	sp, #80	; 0x50
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800fab4:	2300      	movs	r3, #0
 800fab6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d106      	bne.n	800facc <tcp_receive+0x20>
 800fabe:	4ba6      	ldr	r3, [pc, #664]	; (800fd58 <tcp_receive+0x2ac>)
 800fac0:	f240 427b 	movw	r2, #1147	; 0x47b
 800fac4:	49a5      	ldr	r1, [pc, #660]	; (800fd5c <tcp_receive+0x2b0>)
 800fac6:	48a6      	ldr	r0, [pc, #664]	; (800fd60 <tcp_receive+0x2b4>)
 800fac8:	f008 f980 	bl	8017dcc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	7d1b      	ldrb	r3, [r3, #20]
 800fad0:	2b03      	cmp	r3, #3
 800fad2:	d806      	bhi.n	800fae2 <tcp_receive+0x36>
 800fad4:	4ba0      	ldr	r3, [pc, #640]	; (800fd58 <tcp_receive+0x2ac>)
 800fad6:	f240 427c 	movw	r2, #1148	; 0x47c
 800fada:	49a2      	ldr	r1, [pc, #648]	; (800fd64 <tcp_receive+0x2b8>)
 800fadc:	48a0      	ldr	r0, [pc, #640]	; (800fd60 <tcp_receive+0x2b4>)
 800fade:	f008 f975 	bl	8017dcc <iprintf>

  if (flags & TCP_ACK) {
 800fae2:	4ba1      	ldr	r3, [pc, #644]	; (800fd68 <tcp_receive+0x2bc>)
 800fae4:	781b      	ldrb	r3, [r3, #0]
 800fae6:	f003 0310 	and.w	r3, r3, #16
 800faea:	2b00      	cmp	r3, #0
 800faec:	f000 8263 	beq.w	800ffb6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800faf6:	461a      	mov	r2, r3
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fafc:	4413      	add	r3, r2
 800fafe:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fb04:	4b99      	ldr	r3, [pc, #612]	; (800fd6c <tcp_receive+0x2c0>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	1ad3      	subs	r3, r2, r3
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	db1b      	blt.n	800fb46 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fb12:	4b96      	ldr	r3, [pc, #600]	; (800fd6c <tcp_receive+0x2c0>)
 800fb14:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800fb16:	429a      	cmp	r2, r3
 800fb18:	d106      	bne.n	800fb28 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fb1e:	4b94      	ldr	r3, [pc, #592]	; (800fd70 <tcp_receive+0x2c4>)
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	1ad3      	subs	r3, r2, r3
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	db0e      	blt.n	800fb46 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fb2c:	4b90      	ldr	r3, [pc, #576]	; (800fd70 <tcp_receive+0x2c4>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d125      	bne.n	800fb80 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800fb34:	4b8f      	ldr	r3, [pc, #572]	; (800fd74 <tcp_receive+0x2c8>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	89db      	ldrh	r3, [r3, #14]
 800fb3a:	b29a      	uxth	r2, r3
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fb42:	429a      	cmp	r2, r3
 800fb44:	d91c      	bls.n	800fb80 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800fb46:	4b8b      	ldr	r3, [pc, #556]	; (800fd74 <tcp_receive+0x2c8>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	89db      	ldrh	r3, [r3, #14]
 800fb4c:	b29a      	uxth	r2, r3
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d205      	bcs.n	800fb70 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800fb70:	4b7e      	ldr	r3, [pc, #504]	; (800fd6c <tcp_receive+0x2c0>)
 800fb72:	681a      	ldr	r2, [r3, #0]
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800fb78:	4b7d      	ldr	r3, [pc, #500]	; (800fd70 <tcp_receive+0x2c4>)
 800fb7a:	681a      	ldr	r2, [r3, #0]
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800fb80:	4b7b      	ldr	r3, [pc, #492]	; (800fd70 <tcp_receive+0x2c4>)
 800fb82:	681a      	ldr	r2, [r3, #0]
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb88:	1ad3      	subs	r3, r2, r3
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	dc58      	bgt.n	800fc40 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800fb8e:	4b7a      	ldr	r3, [pc, #488]	; (800fd78 <tcp_receive+0x2cc>)
 800fb90:	881b      	ldrh	r3, [r3, #0]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d14b      	bne.n	800fc2e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb9a:	687a      	ldr	r2, [r7, #4]
 800fb9c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800fba0:	4413      	add	r3, r2
 800fba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fba4:	429a      	cmp	r2, r3
 800fba6:	d142      	bne.n	800fc2e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	db3d      	blt.n	800fc2e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fbb6:	4b6e      	ldr	r3, [pc, #440]	; (800fd70 <tcp_receive+0x2c4>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	429a      	cmp	r2, r3
 800fbbc:	d137      	bne.n	800fc2e <tcp_receive+0x182>
              found_dupack = 1;
 800fbbe:	2301      	movs	r3, #1
 800fbc0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fbc8:	2bff      	cmp	r3, #255	; 0xff
 800fbca:	d007      	beq.n	800fbdc <tcp_receive+0x130>
                ++pcb->dupacks;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fbd2:	3301      	adds	r3, #1
 800fbd4:	b2da      	uxtb	r2, r3
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fbe2:	2b03      	cmp	r3, #3
 800fbe4:	d91b      	bls.n	800fc1e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbf0:	4413      	add	r3, r2
 800fbf2:	b29a      	uxth	r2, r3
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d30a      	bcc.n	800fc14 <tcp_receive+0x168>
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc08:	4413      	add	r3, r2
 800fc0a:	b29a      	uxth	r2, r3
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fc12:	e004      	b.n	800fc1e <tcp_receive+0x172>
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fc24:	2b02      	cmp	r3, #2
 800fc26:	d902      	bls.n	800fc2e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f002 fb47 	bl	80122bc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800fc2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	f040 8160 	bne.w	800fef6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	2200      	movs	r2, #0
 800fc3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fc3e:	e15a      	b.n	800fef6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fc40:	4b4b      	ldr	r3, [pc, #300]	; (800fd70 <tcp_receive+0x2c4>)
 800fc42:	681a      	ldr	r2, [r3, #0]
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc48:	1ad3      	subs	r3, r2, r3
 800fc4a:	3b01      	subs	r3, #1
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	f2c0 814d 	blt.w	800feec <tcp_receive+0x440>
 800fc52:	4b47      	ldr	r3, [pc, #284]	; (800fd70 <tcp_receive+0x2c4>)
 800fc54:	681a      	ldr	r2, [r3, #0]
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc5a:	1ad3      	subs	r3, r2, r3
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	f300 8145 	bgt.w	800feec <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	8b5b      	ldrh	r3, [r3, #26]
 800fc66:	f003 0304 	and.w	r3, r3, #4
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d010      	beq.n	800fc90 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	8b5b      	ldrh	r3, [r3, #26]
 800fc72:	f023 0304 	bic.w	r3, r3, #4
 800fc76:	b29a      	uxth	r2, r3
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2200      	movs	r2, #0
 800fc94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fc9e:	10db      	asrs	r3, r3, #3
 800fca0:	b21b      	sxth	r3, r3
 800fca2:	b29a      	uxth	r2, r3
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fcaa:	b29b      	uxth	r3, r3
 800fcac:	4413      	add	r3, r2
 800fcae:	b29b      	uxth	r3, r3
 800fcb0:	b21a      	sxth	r2, r3
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800fcb8:	4b2d      	ldr	r3, [pc, #180]	; (800fd70 <tcp_receive+0x2c4>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	b29a      	uxth	r2, r3
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcc2:	b29b      	uxth	r3, r3
 800fcc4:	1ad3      	subs	r3, r2, r3
 800fcc6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2200      	movs	r2, #0
 800fccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800fcd0:	4b27      	ldr	r3, [pc, #156]	; (800fd70 <tcp_receive+0x2c4>)
 800fcd2:	681a      	ldr	r2, [r3, #0]
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	7d1b      	ldrb	r3, [r3, #20]
 800fcdc:	2b03      	cmp	r3, #3
 800fcde:	f240 8096 	bls.w	800fe0e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d244      	bcs.n	800fd7c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	8b5b      	ldrh	r3, [r3, #26]
 800fcf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d001      	beq.n	800fd02 <tcp_receive+0x256>
 800fcfe:	2301      	movs	r3, #1
 800fd00:	e000      	b.n	800fd04 <tcp_receive+0x258>
 800fd02:	2302      	movs	r3, #2
 800fd04:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800fd08:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fd0c:	b29a      	uxth	r2, r3
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fd12:	fb12 f303 	smulbb	r3, r2, r3
 800fd16:	b29b      	uxth	r3, r3
 800fd18:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fd1a:	4293      	cmp	r3, r2
 800fd1c:	bf28      	it	cs
 800fd1e:	4613      	movcs	r3, r2
 800fd20:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fd28:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fd2a:	4413      	add	r3, r2
 800fd2c:	b29a      	uxth	r2, r3
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fd34:	429a      	cmp	r2, r3
 800fd36:	d309      	bcc.n	800fd4c <tcp_receive+0x2a0>
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fd3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fd40:	4413      	add	r3, r2
 800fd42:	b29a      	uxth	r2, r3
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fd4a:	e060      	b.n	800fe0e <tcp_receive+0x362>
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fd56:	e05a      	b.n	800fe0e <tcp_receive+0x362>
 800fd58:	0801b1d4 	.word	0x0801b1d4
 800fd5c:	0801b504 	.word	0x0801b504
 800fd60:	0801b220 	.word	0x0801b220
 800fd64:	0801b520 	.word	0x0801b520
 800fd68:	20008abc 	.word	0x20008abc
 800fd6c:	20008ab0 	.word	0x20008ab0
 800fd70:	20008ab4 	.word	0x20008ab4
 800fd74:	20008aa0 	.word	0x20008aa0
 800fd78:	20008aba 	.word	0x20008aba
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fd82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fd84:	4413      	add	r3, r2
 800fd86:	b29a      	uxth	r2, r3
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	d309      	bcc.n	800fda6 <tcp_receive+0x2fa>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fd98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fd9a:	4413      	add	r3, r2
 800fd9c:	b29a      	uxth	r2, r3
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fda4:	e004      	b.n	800fdb0 <tcp_receive+0x304>
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fdac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fdbc:	429a      	cmp	r2, r3
 800fdbe:	d326      	bcc.n	800fe0e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fdcc:	1ad3      	subs	r3, r2, r3
 800fdce:	b29a      	uxth	r2, r3
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fde0:	4413      	add	r3, r2
 800fde2:	b29a      	uxth	r2, r3
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fdea:	429a      	cmp	r2, r3
 800fdec:	d30a      	bcc.n	800fe04 <tcp_receive+0x358>
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fdf8:	4413      	add	r3, r2
 800fdfa:	b29a      	uxth	r2, r3
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fe02:	e004      	b.n	800fe0e <tcp_receive+0x362>
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe16:	4a98      	ldr	r2, [pc, #608]	; (8010078 <tcp_receive+0x5cc>)
 800fe18:	6878      	ldr	r0, [r7, #4]
 800fe1a:	f7ff fdcb 	bl	800f9b4 <tcp_free_acked_segments>
 800fe1e:	4602      	mov	r2, r0
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe2c:	4a93      	ldr	r2, [pc, #588]	; (801007c <tcp_receive+0x5d0>)
 800fe2e:	6878      	ldr	r0, [r7, #4]
 800fe30:	f7ff fdc0 	bl	800f9b4 <tcp_free_acked_segments>
 800fe34:	4602      	mov	r2, r0
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d104      	bne.n	800fe4c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe48:	861a      	strh	r2, [r3, #48]	; 0x30
 800fe4a:	e002      	b.n	800fe52 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2200      	movs	r2, #0
 800fe50:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2200      	movs	r2, #0
 800fe56:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d103      	bne.n	800fe68 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2200      	movs	r2, #0
 800fe64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800fe6e:	4b84      	ldr	r3, [pc, #528]	; (8010080 <tcp_receive+0x5d4>)
 800fe70:	881b      	ldrh	r3, [r3, #0]
 800fe72:	4413      	add	r3, r2
 800fe74:	b29a      	uxth	r2, r3
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	8b5b      	ldrh	r3, [r3, #26]
 800fe80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d035      	beq.n	800fef4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d118      	bne.n	800fec2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d00c      	beq.n	800feb2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fea0:	68db      	ldr	r3, [r3, #12]
 800fea2:	685b      	ldr	r3, [r3, #4]
 800fea4:	4618      	mov	r0, r3
 800fea6:	f7fa fe3e 	bl	800ab26 <lwip_htonl>
 800feaa:	4603      	mov	r3, r0
 800feac:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800feae:	2b00      	cmp	r3, #0
 800feb0:	dc20      	bgt.n	800fef4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	8b5b      	ldrh	r3, [r3, #26]
 800feb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800feba:	b29a      	uxth	r2, r3
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fec0:	e018      	b.n	800fef4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800feca:	68db      	ldr	r3, [r3, #12]
 800fecc:	685b      	ldr	r3, [r3, #4]
 800fece:	4618      	mov	r0, r3
 800fed0:	f7fa fe29 	bl	800ab26 <lwip_htonl>
 800fed4:	4603      	mov	r3, r0
 800fed6:	1ae3      	subs	r3, r4, r3
 800fed8:	2b00      	cmp	r3, #0
 800feda:	dc0b      	bgt.n	800fef4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	8b5b      	ldrh	r3, [r3, #26]
 800fee0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fee4:	b29a      	uxth	r2, r3
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800feea:	e003      	b.n	800fef4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	f002 fbdd 	bl	80126ac <tcp_send_empty_ack>
 800fef2:	e000      	b.n	800fef6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fef4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d05b      	beq.n	800ffb6 <tcp_receive+0x50a>
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff02:	4b60      	ldr	r3, [pc, #384]	; (8010084 <tcp_receive+0x5d8>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	1ad3      	subs	r3, r2, r3
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	da54      	bge.n	800ffb6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ff0c:	4b5e      	ldr	r3, [pc, #376]	; (8010088 <tcp_receive+0x5dc>)
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	b29a      	uxth	r2, r3
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff16:	b29b      	uxth	r3, r3
 800ff18:	1ad3      	subs	r3, r2, r3
 800ff1a:	b29b      	uxth	r3, r3
 800ff1c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800ff20:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ff2a:	10db      	asrs	r3, r3, #3
 800ff2c:	b21b      	sxth	r3, r3
 800ff2e:	b29b      	uxth	r3, r3
 800ff30:	1ad3      	subs	r3, r2, r3
 800ff32:	b29b      	uxth	r3, r3
 800ff34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ff3e:	b29a      	uxth	r2, r3
 800ff40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ff44:	4413      	add	r3, r2
 800ff46:	b29b      	uxth	r3, r3
 800ff48:	b21a      	sxth	r2, r3
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800ff4e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	da05      	bge.n	800ff62 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800ff56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ff5a:	425b      	negs	r3, r3
 800ff5c:	b29b      	uxth	r3, r3
 800ff5e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ff62:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ff6c:	109b      	asrs	r3, r3, #2
 800ff6e:	b21b      	sxth	r3, r3
 800ff70:	b29b      	uxth	r3, r3
 800ff72:	1ad3      	subs	r3, r2, r3
 800ff74:	b29b      	uxth	r3, r3
 800ff76:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ff80:	b29a      	uxth	r2, r3
 800ff82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ff86:	4413      	add	r3, r2
 800ff88:	b29b      	uxth	r3, r3
 800ff8a:	b21a      	sxth	r2, r3
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ff96:	10db      	asrs	r3, r3, #3
 800ff98:	b21b      	sxth	r3, r3
 800ff9a:	b29a      	uxth	r2, r3
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ffa2:	b29b      	uxth	r3, r3
 800ffa4:	4413      	add	r3, r2
 800ffa6:	b29b      	uxth	r3, r3
 800ffa8:	b21a      	sxth	r2, r3
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ffb6:	4b35      	ldr	r3, [pc, #212]	; (801008c <tcp_receive+0x5e0>)
 800ffb8:	881b      	ldrh	r3, [r3, #0]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	f000 84e1 	beq.w	8010982 <tcp_receive+0xed6>
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	7d1b      	ldrb	r3, [r3, #20]
 800ffc4:	2b06      	cmp	r3, #6
 800ffc6:	f200 84dc 	bhi.w	8010982 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ffce:	4b30      	ldr	r3, [pc, #192]	; (8010090 <tcp_receive+0x5e4>)
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	1ad3      	subs	r3, r2, r3
 800ffd4:	3b01      	subs	r3, #1
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	f2c0 808e 	blt.w	80100f8 <tcp_receive+0x64c>
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ffe0:	4b2a      	ldr	r3, [pc, #168]	; (801008c <tcp_receive+0x5e0>)
 800ffe2:	881b      	ldrh	r3, [r3, #0]
 800ffe4:	4619      	mov	r1, r3
 800ffe6:	4b2a      	ldr	r3, [pc, #168]	; (8010090 <tcp_receive+0x5e4>)
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	440b      	add	r3, r1
 800ffec:	1ad3      	subs	r3, r2, r3
 800ffee:	3301      	adds	r3, #1
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	f300 8081 	bgt.w	80100f8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800fff6:	4b27      	ldr	r3, [pc, #156]	; (8010094 <tcp_receive+0x5e8>)
 800fff8:	685b      	ldr	r3, [r3, #4]
 800fffa:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010000:	4b23      	ldr	r3, [pc, #140]	; (8010090 <tcp_receive+0x5e4>)
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	1ad3      	subs	r3, r2, r3
 8010006:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010008:	4b22      	ldr	r3, [pc, #136]	; (8010094 <tcp_receive+0x5e8>)
 801000a:	685b      	ldr	r3, [r3, #4]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d106      	bne.n	801001e <tcp_receive+0x572>
 8010010:	4b21      	ldr	r3, [pc, #132]	; (8010098 <tcp_receive+0x5ec>)
 8010012:	f240 5294 	movw	r2, #1428	; 0x594
 8010016:	4921      	ldr	r1, [pc, #132]	; (801009c <tcp_receive+0x5f0>)
 8010018:	4821      	ldr	r0, [pc, #132]	; (80100a0 <tcp_receive+0x5f4>)
 801001a:	f007 fed7 	bl	8017dcc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801001e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010020:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010024:	4293      	cmp	r3, r2
 8010026:	d906      	bls.n	8010036 <tcp_receive+0x58a>
 8010028:	4b1b      	ldr	r3, [pc, #108]	; (8010098 <tcp_receive+0x5ec>)
 801002a:	f240 5295 	movw	r2, #1429	; 0x595
 801002e:	491d      	ldr	r1, [pc, #116]	; (80100a4 <tcp_receive+0x5f8>)
 8010030:	481b      	ldr	r0, [pc, #108]	; (80100a0 <tcp_receive+0x5f4>)
 8010032:	f007 fecb 	bl	8017dcc <iprintf>
      off = (u16_t)off32;
 8010036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010038:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801003c:	4b15      	ldr	r3, [pc, #84]	; (8010094 <tcp_receive+0x5e8>)
 801003e:	685b      	ldr	r3, [r3, #4]
 8010040:	891b      	ldrh	r3, [r3, #8]
 8010042:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010046:	429a      	cmp	r2, r3
 8010048:	d906      	bls.n	8010058 <tcp_receive+0x5ac>
 801004a:	4b13      	ldr	r3, [pc, #76]	; (8010098 <tcp_receive+0x5ec>)
 801004c:	f240 5297 	movw	r2, #1431	; 0x597
 8010050:	4915      	ldr	r1, [pc, #84]	; (80100a8 <tcp_receive+0x5fc>)
 8010052:	4813      	ldr	r0, [pc, #76]	; (80100a0 <tcp_receive+0x5f4>)
 8010054:	f007 feba 	bl	8017dcc <iprintf>
      inseg.len -= off;
 8010058:	4b0e      	ldr	r3, [pc, #56]	; (8010094 <tcp_receive+0x5e8>)
 801005a:	891a      	ldrh	r2, [r3, #8]
 801005c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010060:	1ad3      	subs	r3, r2, r3
 8010062:	b29a      	uxth	r2, r3
 8010064:	4b0b      	ldr	r3, [pc, #44]	; (8010094 <tcp_receive+0x5e8>)
 8010066:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010068:	4b0a      	ldr	r3, [pc, #40]	; (8010094 <tcp_receive+0x5e8>)
 801006a:	685b      	ldr	r3, [r3, #4]
 801006c:	891a      	ldrh	r2, [r3, #8]
 801006e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010072:	1ad3      	subs	r3, r2, r3
 8010074:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010076:	e029      	b.n	80100cc <tcp_receive+0x620>
 8010078:	0801b53c 	.word	0x0801b53c
 801007c:	0801b544 	.word	0x0801b544
 8010080:	20008ab8 	.word	0x20008ab8
 8010084:	20008ab4 	.word	0x20008ab4
 8010088:	2000f518 	.word	0x2000f518
 801008c:	20008aba 	.word	0x20008aba
 8010090:	20008ab0 	.word	0x20008ab0
 8010094:	20008a90 	.word	0x20008a90
 8010098:	0801b1d4 	.word	0x0801b1d4
 801009c:	0801b54c 	.word	0x0801b54c
 80100a0:	0801b220 	.word	0x0801b220
 80100a4:	0801b55c 	.word	0x0801b55c
 80100a8:	0801b56c 	.word	0x0801b56c
        off -= p->len;
 80100ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100ae:	895b      	ldrh	r3, [r3, #10]
 80100b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80100b4:	1ad3      	subs	r3, r2, r3
 80100b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80100ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100bc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80100be:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80100c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100c2:	2200      	movs	r2, #0
 80100c4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80100c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80100cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100ce:	895b      	ldrh	r3, [r3, #10]
 80100d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80100d4:	429a      	cmp	r2, r3
 80100d6:	d8e9      	bhi.n	80100ac <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80100d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80100dc:	4619      	mov	r1, r3
 80100de:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80100e0:	f7fc f870 	bl	800c1c4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100e8:	4a91      	ldr	r2, [pc, #580]	; (8010330 <tcp_receive+0x884>)
 80100ea:	6013      	str	r3, [r2, #0]
 80100ec:	4b91      	ldr	r3, [pc, #580]	; (8010334 <tcp_receive+0x888>)
 80100ee:	68db      	ldr	r3, [r3, #12]
 80100f0:	4a8f      	ldr	r2, [pc, #572]	; (8010330 <tcp_receive+0x884>)
 80100f2:	6812      	ldr	r2, [r2, #0]
 80100f4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80100f6:	e00d      	b.n	8010114 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80100f8:	4b8d      	ldr	r3, [pc, #564]	; (8010330 <tcp_receive+0x884>)
 80100fa:	681a      	ldr	r2, [r3, #0]
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010100:	1ad3      	subs	r3, r2, r3
 8010102:	2b00      	cmp	r3, #0
 8010104:	da06      	bge.n	8010114 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	8b5b      	ldrh	r3, [r3, #26]
 801010a:	f043 0302 	orr.w	r3, r3, #2
 801010e:	b29a      	uxth	r2, r3
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010114:	4b86      	ldr	r3, [pc, #536]	; (8010330 <tcp_receive+0x884>)
 8010116:	681a      	ldr	r2, [r3, #0]
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801011c:	1ad3      	subs	r3, r2, r3
 801011e:	2b00      	cmp	r3, #0
 8010120:	f2c0 842a 	blt.w	8010978 <tcp_receive+0xecc>
 8010124:	4b82      	ldr	r3, [pc, #520]	; (8010330 <tcp_receive+0x884>)
 8010126:	681a      	ldr	r2, [r3, #0]
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801012c:	6879      	ldr	r1, [r7, #4]
 801012e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010130:	440b      	add	r3, r1
 8010132:	1ad3      	subs	r3, r2, r3
 8010134:	3301      	adds	r3, #1
 8010136:	2b00      	cmp	r3, #0
 8010138:	f300 841e 	bgt.w	8010978 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010140:	4b7b      	ldr	r3, [pc, #492]	; (8010330 <tcp_receive+0x884>)
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	429a      	cmp	r2, r3
 8010146:	f040 829a 	bne.w	801067e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801014a:	4b7a      	ldr	r3, [pc, #488]	; (8010334 <tcp_receive+0x888>)
 801014c:	891c      	ldrh	r4, [r3, #8]
 801014e:	4b79      	ldr	r3, [pc, #484]	; (8010334 <tcp_receive+0x888>)
 8010150:	68db      	ldr	r3, [r3, #12]
 8010152:	899b      	ldrh	r3, [r3, #12]
 8010154:	b29b      	uxth	r3, r3
 8010156:	4618      	mov	r0, r3
 8010158:	f7fa fcd0 	bl	800aafc <lwip_htons>
 801015c:	4603      	mov	r3, r0
 801015e:	b2db      	uxtb	r3, r3
 8010160:	f003 0303 	and.w	r3, r3, #3
 8010164:	2b00      	cmp	r3, #0
 8010166:	d001      	beq.n	801016c <tcp_receive+0x6c0>
 8010168:	2301      	movs	r3, #1
 801016a:	e000      	b.n	801016e <tcp_receive+0x6c2>
 801016c:	2300      	movs	r3, #0
 801016e:	4423      	add	r3, r4
 8010170:	b29a      	uxth	r2, r3
 8010172:	4b71      	ldr	r3, [pc, #452]	; (8010338 <tcp_receive+0x88c>)
 8010174:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801017a:	4b6f      	ldr	r3, [pc, #444]	; (8010338 <tcp_receive+0x88c>)
 801017c:	881b      	ldrh	r3, [r3, #0]
 801017e:	429a      	cmp	r2, r3
 8010180:	d275      	bcs.n	801026e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010182:	4b6c      	ldr	r3, [pc, #432]	; (8010334 <tcp_receive+0x888>)
 8010184:	68db      	ldr	r3, [r3, #12]
 8010186:	899b      	ldrh	r3, [r3, #12]
 8010188:	b29b      	uxth	r3, r3
 801018a:	4618      	mov	r0, r3
 801018c:	f7fa fcb6 	bl	800aafc <lwip_htons>
 8010190:	4603      	mov	r3, r0
 8010192:	b2db      	uxtb	r3, r3
 8010194:	f003 0301 	and.w	r3, r3, #1
 8010198:	2b00      	cmp	r3, #0
 801019a:	d01f      	beq.n	80101dc <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801019c:	4b65      	ldr	r3, [pc, #404]	; (8010334 <tcp_receive+0x888>)
 801019e:	68db      	ldr	r3, [r3, #12]
 80101a0:	899b      	ldrh	r3, [r3, #12]
 80101a2:	b29b      	uxth	r3, r3
 80101a4:	b21b      	sxth	r3, r3
 80101a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80101aa:	b21c      	sxth	r4, r3
 80101ac:	4b61      	ldr	r3, [pc, #388]	; (8010334 <tcp_receive+0x888>)
 80101ae:	68db      	ldr	r3, [r3, #12]
 80101b0:	899b      	ldrh	r3, [r3, #12]
 80101b2:	b29b      	uxth	r3, r3
 80101b4:	4618      	mov	r0, r3
 80101b6:	f7fa fca1 	bl	800aafc <lwip_htons>
 80101ba:	4603      	mov	r3, r0
 80101bc:	b2db      	uxtb	r3, r3
 80101be:	b29b      	uxth	r3, r3
 80101c0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80101c4:	b29b      	uxth	r3, r3
 80101c6:	4618      	mov	r0, r3
 80101c8:	f7fa fc98 	bl	800aafc <lwip_htons>
 80101cc:	4603      	mov	r3, r0
 80101ce:	b21b      	sxth	r3, r3
 80101d0:	4323      	orrs	r3, r4
 80101d2:	b21a      	sxth	r2, r3
 80101d4:	4b57      	ldr	r3, [pc, #348]	; (8010334 <tcp_receive+0x888>)
 80101d6:	68db      	ldr	r3, [r3, #12]
 80101d8:	b292      	uxth	r2, r2
 80101da:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80101e0:	4b54      	ldr	r3, [pc, #336]	; (8010334 <tcp_receive+0x888>)
 80101e2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80101e4:	4b53      	ldr	r3, [pc, #332]	; (8010334 <tcp_receive+0x888>)
 80101e6:	68db      	ldr	r3, [r3, #12]
 80101e8:	899b      	ldrh	r3, [r3, #12]
 80101ea:	b29b      	uxth	r3, r3
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7fa fc85 	bl	800aafc <lwip_htons>
 80101f2:	4603      	mov	r3, r0
 80101f4:	b2db      	uxtb	r3, r3
 80101f6:	f003 0302 	and.w	r3, r3, #2
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d005      	beq.n	801020a <tcp_receive+0x75e>
            inseg.len -= 1;
 80101fe:	4b4d      	ldr	r3, [pc, #308]	; (8010334 <tcp_receive+0x888>)
 8010200:	891b      	ldrh	r3, [r3, #8]
 8010202:	3b01      	subs	r3, #1
 8010204:	b29a      	uxth	r2, r3
 8010206:	4b4b      	ldr	r3, [pc, #300]	; (8010334 <tcp_receive+0x888>)
 8010208:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801020a:	4b4a      	ldr	r3, [pc, #296]	; (8010334 <tcp_receive+0x888>)
 801020c:	685a      	ldr	r2, [r3, #4]
 801020e:	4b49      	ldr	r3, [pc, #292]	; (8010334 <tcp_receive+0x888>)
 8010210:	891b      	ldrh	r3, [r3, #8]
 8010212:	4619      	mov	r1, r3
 8010214:	4610      	mov	r0, r2
 8010216:	f7fb fed5 	bl	800bfc4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801021a:	4b46      	ldr	r3, [pc, #280]	; (8010334 <tcp_receive+0x888>)
 801021c:	891c      	ldrh	r4, [r3, #8]
 801021e:	4b45      	ldr	r3, [pc, #276]	; (8010334 <tcp_receive+0x888>)
 8010220:	68db      	ldr	r3, [r3, #12]
 8010222:	899b      	ldrh	r3, [r3, #12]
 8010224:	b29b      	uxth	r3, r3
 8010226:	4618      	mov	r0, r3
 8010228:	f7fa fc68 	bl	800aafc <lwip_htons>
 801022c:	4603      	mov	r3, r0
 801022e:	b2db      	uxtb	r3, r3
 8010230:	f003 0303 	and.w	r3, r3, #3
 8010234:	2b00      	cmp	r3, #0
 8010236:	d001      	beq.n	801023c <tcp_receive+0x790>
 8010238:	2301      	movs	r3, #1
 801023a:	e000      	b.n	801023e <tcp_receive+0x792>
 801023c:	2300      	movs	r3, #0
 801023e:	4423      	add	r3, r4
 8010240:	b29a      	uxth	r2, r3
 8010242:	4b3d      	ldr	r3, [pc, #244]	; (8010338 <tcp_receive+0x88c>)
 8010244:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010246:	4b3c      	ldr	r3, [pc, #240]	; (8010338 <tcp_receive+0x88c>)
 8010248:	881b      	ldrh	r3, [r3, #0]
 801024a:	461a      	mov	r2, r3
 801024c:	4b38      	ldr	r3, [pc, #224]	; (8010330 <tcp_receive+0x884>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	441a      	add	r2, r3
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010256:	6879      	ldr	r1, [r7, #4]
 8010258:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801025a:	440b      	add	r3, r1
 801025c:	429a      	cmp	r2, r3
 801025e:	d006      	beq.n	801026e <tcp_receive+0x7c2>
 8010260:	4b36      	ldr	r3, [pc, #216]	; (801033c <tcp_receive+0x890>)
 8010262:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8010266:	4936      	ldr	r1, [pc, #216]	; (8010340 <tcp_receive+0x894>)
 8010268:	4836      	ldr	r0, [pc, #216]	; (8010344 <tcp_receive+0x898>)
 801026a:	f007 fdaf 	bl	8017dcc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010272:	2b00      	cmp	r3, #0
 8010274:	f000 80e7 	beq.w	8010446 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010278:	4b2e      	ldr	r3, [pc, #184]	; (8010334 <tcp_receive+0x888>)
 801027a:	68db      	ldr	r3, [r3, #12]
 801027c:	899b      	ldrh	r3, [r3, #12]
 801027e:	b29b      	uxth	r3, r3
 8010280:	4618      	mov	r0, r3
 8010282:	f7fa fc3b 	bl	800aafc <lwip_htons>
 8010286:	4603      	mov	r3, r0
 8010288:	b2db      	uxtb	r3, r3
 801028a:	f003 0301 	and.w	r3, r3, #1
 801028e:	2b00      	cmp	r3, #0
 8010290:	d010      	beq.n	80102b4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010292:	e00a      	b.n	80102aa <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010298:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801029e:	681a      	ldr	r2, [r3, #0]
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80102a4:	68f8      	ldr	r0, [r7, #12]
 80102a6:	f7fd fcab 	bl	800dc00 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d1f0      	bne.n	8010294 <tcp_receive+0x7e8>
 80102b2:	e0c8      	b.n	8010446 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102b8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80102ba:	e052      	b.n	8010362 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80102bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102be:	68db      	ldr	r3, [r3, #12]
 80102c0:	899b      	ldrh	r3, [r3, #12]
 80102c2:	b29b      	uxth	r3, r3
 80102c4:	4618      	mov	r0, r3
 80102c6:	f7fa fc19 	bl	800aafc <lwip_htons>
 80102ca:	4603      	mov	r3, r0
 80102cc:	b2db      	uxtb	r3, r3
 80102ce:	f003 0301 	and.w	r3, r3, #1
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d03d      	beq.n	8010352 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80102d6:	4b17      	ldr	r3, [pc, #92]	; (8010334 <tcp_receive+0x888>)
 80102d8:	68db      	ldr	r3, [r3, #12]
 80102da:	899b      	ldrh	r3, [r3, #12]
 80102dc:	b29b      	uxth	r3, r3
 80102de:	4618      	mov	r0, r3
 80102e0:	f7fa fc0c 	bl	800aafc <lwip_htons>
 80102e4:	4603      	mov	r3, r0
 80102e6:	b2db      	uxtb	r3, r3
 80102e8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d130      	bne.n	8010352 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80102f0:	4b10      	ldr	r3, [pc, #64]	; (8010334 <tcp_receive+0x888>)
 80102f2:	68db      	ldr	r3, [r3, #12]
 80102f4:	899b      	ldrh	r3, [r3, #12]
 80102f6:	b29c      	uxth	r4, r3
 80102f8:	2001      	movs	r0, #1
 80102fa:	f7fa fbff 	bl	800aafc <lwip_htons>
 80102fe:	4603      	mov	r3, r0
 8010300:	461a      	mov	r2, r3
 8010302:	4b0c      	ldr	r3, [pc, #48]	; (8010334 <tcp_receive+0x888>)
 8010304:	68db      	ldr	r3, [r3, #12]
 8010306:	4322      	orrs	r2, r4
 8010308:	b292      	uxth	r2, r2
 801030a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801030c:	4b09      	ldr	r3, [pc, #36]	; (8010334 <tcp_receive+0x888>)
 801030e:	891c      	ldrh	r4, [r3, #8]
 8010310:	4b08      	ldr	r3, [pc, #32]	; (8010334 <tcp_receive+0x888>)
 8010312:	68db      	ldr	r3, [r3, #12]
 8010314:	899b      	ldrh	r3, [r3, #12]
 8010316:	b29b      	uxth	r3, r3
 8010318:	4618      	mov	r0, r3
 801031a:	f7fa fbef 	bl	800aafc <lwip_htons>
 801031e:	4603      	mov	r3, r0
 8010320:	b2db      	uxtb	r3, r3
 8010322:	f003 0303 	and.w	r3, r3, #3
 8010326:	2b00      	cmp	r3, #0
 8010328:	d00e      	beq.n	8010348 <tcp_receive+0x89c>
 801032a:	2301      	movs	r3, #1
 801032c:	e00d      	b.n	801034a <tcp_receive+0x89e>
 801032e:	bf00      	nop
 8010330:	20008ab0 	.word	0x20008ab0
 8010334:	20008a90 	.word	0x20008a90
 8010338:	20008aba 	.word	0x20008aba
 801033c:	0801b1d4 	.word	0x0801b1d4
 8010340:	0801b57c 	.word	0x0801b57c
 8010344:	0801b220 	.word	0x0801b220
 8010348:	2300      	movs	r3, #0
 801034a:	4423      	add	r3, r4
 801034c:	b29a      	uxth	r2, r3
 801034e:	4b98      	ldr	r3, [pc, #608]	; (80105b0 <tcp_receive+0xb04>)
 8010350:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010354:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801035c:	6938      	ldr	r0, [r7, #16]
 801035e:	f7fd fc4f 	bl	800dc00 <tcp_seg_free>
            while (next &&
 8010362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010364:	2b00      	cmp	r3, #0
 8010366:	d00e      	beq.n	8010386 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010368:	4b91      	ldr	r3, [pc, #580]	; (80105b0 <tcp_receive+0xb04>)
 801036a:	881b      	ldrh	r3, [r3, #0]
 801036c:	461a      	mov	r2, r3
 801036e:	4b91      	ldr	r3, [pc, #580]	; (80105b4 <tcp_receive+0xb08>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	441a      	add	r2, r3
 8010374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010376:	68db      	ldr	r3, [r3, #12]
 8010378:	685b      	ldr	r3, [r3, #4]
 801037a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801037c:	8909      	ldrh	r1, [r1, #8]
 801037e:	440b      	add	r3, r1
 8010380:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010382:	2b00      	cmp	r3, #0
 8010384:	da9a      	bge.n	80102bc <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010388:	2b00      	cmp	r3, #0
 801038a:	d059      	beq.n	8010440 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801038c:	4b88      	ldr	r3, [pc, #544]	; (80105b0 <tcp_receive+0xb04>)
 801038e:	881b      	ldrh	r3, [r3, #0]
 8010390:	461a      	mov	r2, r3
 8010392:	4b88      	ldr	r3, [pc, #544]	; (80105b4 <tcp_receive+0xb08>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	441a      	add	r2, r3
 8010398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801039a:	68db      	ldr	r3, [r3, #12]
 801039c:	685b      	ldr	r3, [r3, #4]
 801039e:	1ad3      	subs	r3, r2, r3
            if (next &&
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	dd4d      	ble.n	8010440 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80103a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103a6:	68db      	ldr	r3, [r3, #12]
 80103a8:	685b      	ldr	r3, [r3, #4]
 80103aa:	b29a      	uxth	r2, r3
 80103ac:	4b81      	ldr	r3, [pc, #516]	; (80105b4 <tcp_receive+0xb08>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	b29b      	uxth	r3, r3
 80103b2:	1ad3      	subs	r3, r2, r3
 80103b4:	b29a      	uxth	r2, r3
 80103b6:	4b80      	ldr	r3, [pc, #512]	; (80105b8 <tcp_receive+0xb0c>)
 80103b8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80103ba:	4b7f      	ldr	r3, [pc, #508]	; (80105b8 <tcp_receive+0xb0c>)
 80103bc:	68db      	ldr	r3, [r3, #12]
 80103be:	899b      	ldrh	r3, [r3, #12]
 80103c0:	b29b      	uxth	r3, r3
 80103c2:	4618      	mov	r0, r3
 80103c4:	f7fa fb9a 	bl	800aafc <lwip_htons>
 80103c8:	4603      	mov	r3, r0
 80103ca:	b2db      	uxtb	r3, r3
 80103cc:	f003 0302 	and.w	r3, r3, #2
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d005      	beq.n	80103e0 <tcp_receive+0x934>
                inseg.len -= 1;
 80103d4:	4b78      	ldr	r3, [pc, #480]	; (80105b8 <tcp_receive+0xb0c>)
 80103d6:	891b      	ldrh	r3, [r3, #8]
 80103d8:	3b01      	subs	r3, #1
 80103da:	b29a      	uxth	r2, r3
 80103dc:	4b76      	ldr	r3, [pc, #472]	; (80105b8 <tcp_receive+0xb0c>)
 80103de:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80103e0:	4b75      	ldr	r3, [pc, #468]	; (80105b8 <tcp_receive+0xb0c>)
 80103e2:	685a      	ldr	r2, [r3, #4]
 80103e4:	4b74      	ldr	r3, [pc, #464]	; (80105b8 <tcp_receive+0xb0c>)
 80103e6:	891b      	ldrh	r3, [r3, #8]
 80103e8:	4619      	mov	r1, r3
 80103ea:	4610      	mov	r0, r2
 80103ec:	f7fb fdea 	bl	800bfc4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80103f0:	4b71      	ldr	r3, [pc, #452]	; (80105b8 <tcp_receive+0xb0c>)
 80103f2:	891c      	ldrh	r4, [r3, #8]
 80103f4:	4b70      	ldr	r3, [pc, #448]	; (80105b8 <tcp_receive+0xb0c>)
 80103f6:	68db      	ldr	r3, [r3, #12]
 80103f8:	899b      	ldrh	r3, [r3, #12]
 80103fa:	b29b      	uxth	r3, r3
 80103fc:	4618      	mov	r0, r3
 80103fe:	f7fa fb7d 	bl	800aafc <lwip_htons>
 8010402:	4603      	mov	r3, r0
 8010404:	b2db      	uxtb	r3, r3
 8010406:	f003 0303 	and.w	r3, r3, #3
 801040a:	2b00      	cmp	r3, #0
 801040c:	d001      	beq.n	8010412 <tcp_receive+0x966>
 801040e:	2301      	movs	r3, #1
 8010410:	e000      	b.n	8010414 <tcp_receive+0x968>
 8010412:	2300      	movs	r3, #0
 8010414:	4423      	add	r3, r4
 8010416:	b29a      	uxth	r2, r3
 8010418:	4b65      	ldr	r3, [pc, #404]	; (80105b0 <tcp_receive+0xb04>)
 801041a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801041c:	4b64      	ldr	r3, [pc, #400]	; (80105b0 <tcp_receive+0xb04>)
 801041e:	881b      	ldrh	r3, [r3, #0]
 8010420:	461a      	mov	r2, r3
 8010422:	4b64      	ldr	r3, [pc, #400]	; (80105b4 <tcp_receive+0xb08>)
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	441a      	add	r2, r3
 8010428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801042a:	68db      	ldr	r3, [r3, #12]
 801042c:	685b      	ldr	r3, [r3, #4]
 801042e:	429a      	cmp	r2, r3
 8010430:	d006      	beq.n	8010440 <tcp_receive+0x994>
 8010432:	4b62      	ldr	r3, [pc, #392]	; (80105bc <tcp_receive+0xb10>)
 8010434:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8010438:	4961      	ldr	r1, [pc, #388]	; (80105c0 <tcp_receive+0xb14>)
 801043a:	4862      	ldr	r0, [pc, #392]	; (80105c4 <tcp_receive+0xb18>)
 801043c:	f007 fcc6 	bl	8017dcc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010444:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010446:	4b5a      	ldr	r3, [pc, #360]	; (80105b0 <tcp_receive+0xb04>)
 8010448:	881b      	ldrh	r3, [r3, #0]
 801044a:	461a      	mov	r2, r3
 801044c:	4b59      	ldr	r3, [pc, #356]	; (80105b4 <tcp_receive+0xb08>)
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	441a      	add	r2, r3
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801045a:	4b55      	ldr	r3, [pc, #340]	; (80105b0 <tcp_receive+0xb04>)
 801045c:	881b      	ldrh	r3, [r3, #0]
 801045e:	429a      	cmp	r2, r3
 8010460:	d206      	bcs.n	8010470 <tcp_receive+0x9c4>
 8010462:	4b56      	ldr	r3, [pc, #344]	; (80105bc <tcp_receive+0xb10>)
 8010464:	f240 6207 	movw	r2, #1543	; 0x607
 8010468:	4957      	ldr	r1, [pc, #348]	; (80105c8 <tcp_receive+0xb1c>)
 801046a:	4856      	ldr	r0, [pc, #344]	; (80105c4 <tcp_receive+0xb18>)
 801046c:	f007 fcae 	bl	8017dcc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010474:	4b4e      	ldr	r3, [pc, #312]	; (80105b0 <tcp_receive+0xb04>)
 8010476:	881b      	ldrh	r3, [r3, #0]
 8010478:	1ad3      	subs	r3, r2, r3
 801047a:	b29a      	uxth	r2, r3
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010480:	6878      	ldr	r0, [r7, #4]
 8010482:	f7fc fe9b 	bl	800d1bc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010486:	4b4c      	ldr	r3, [pc, #304]	; (80105b8 <tcp_receive+0xb0c>)
 8010488:	685b      	ldr	r3, [r3, #4]
 801048a:	891b      	ldrh	r3, [r3, #8]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d006      	beq.n	801049e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8010490:	4b49      	ldr	r3, [pc, #292]	; (80105b8 <tcp_receive+0xb0c>)
 8010492:	685b      	ldr	r3, [r3, #4]
 8010494:	4a4d      	ldr	r2, [pc, #308]	; (80105cc <tcp_receive+0xb20>)
 8010496:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010498:	4b47      	ldr	r3, [pc, #284]	; (80105b8 <tcp_receive+0xb0c>)
 801049a:	2200      	movs	r2, #0
 801049c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801049e:	4b46      	ldr	r3, [pc, #280]	; (80105b8 <tcp_receive+0xb0c>)
 80104a0:	68db      	ldr	r3, [r3, #12]
 80104a2:	899b      	ldrh	r3, [r3, #12]
 80104a4:	b29b      	uxth	r3, r3
 80104a6:	4618      	mov	r0, r3
 80104a8:	f7fa fb28 	bl	800aafc <lwip_htons>
 80104ac:	4603      	mov	r3, r0
 80104ae:	b2db      	uxtb	r3, r3
 80104b0:	f003 0301 	and.w	r3, r3, #1
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	f000 80b8 	beq.w	801062a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80104ba:	4b45      	ldr	r3, [pc, #276]	; (80105d0 <tcp_receive+0xb24>)
 80104bc:	781b      	ldrb	r3, [r3, #0]
 80104be:	f043 0320 	orr.w	r3, r3, #32
 80104c2:	b2da      	uxtb	r2, r3
 80104c4:	4b42      	ldr	r3, [pc, #264]	; (80105d0 <tcp_receive+0xb24>)
 80104c6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80104c8:	e0af      	b.n	801062a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104ce:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104d4:	68db      	ldr	r3, [r3, #12]
 80104d6:	685b      	ldr	r3, [r3, #4]
 80104d8:	4a36      	ldr	r2, [pc, #216]	; (80105b4 <tcp_receive+0xb08>)
 80104da:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	891b      	ldrh	r3, [r3, #8]
 80104e0:	461c      	mov	r4, r3
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	68db      	ldr	r3, [r3, #12]
 80104e6:	899b      	ldrh	r3, [r3, #12]
 80104e8:	b29b      	uxth	r3, r3
 80104ea:	4618      	mov	r0, r3
 80104ec:	f7fa fb06 	bl	800aafc <lwip_htons>
 80104f0:	4603      	mov	r3, r0
 80104f2:	b2db      	uxtb	r3, r3
 80104f4:	f003 0303 	and.w	r3, r3, #3
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d001      	beq.n	8010500 <tcp_receive+0xa54>
 80104fc:	2301      	movs	r3, #1
 80104fe:	e000      	b.n	8010502 <tcp_receive+0xa56>
 8010500:	2300      	movs	r3, #0
 8010502:	191a      	adds	r2, r3, r4
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010508:	441a      	add	r2, r3
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010512:	461c      	mov	r4, r3
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	891b      	ldrh	r3, [r3, #8]
 8010518:	461d      	mov	r5, r3
 801051a:	68bb      	ldr	r3, [r7, #8]
 801051c:	68db      	ldr	r3, [r3, #12]
 801051e:	899b      	ldrh	r3, [r3, #12]
 8010520:	b29b      	uxth	r3, r3
 8010522:	4618      	mov	r0, r3
 8010524:	f7fa faea 	bl	800aafc <lwip_htons>
 8010528:	4603      	mov	r3, r0
 801052a:	b2db      	uxtb	r3, r3
 801052c:	f003 0303 	and.w	r3, r3, #3
 8010530:	2b00      	cmp	r3, #0
 8010532:	d001      	beq.n	8010538 <tcp_receive+0xa8c>
 8010534:	2301      	movs	r3, #1
 8010536:	e000      	b.n	801053a <tcp_receive+0xa8e>
 8010538:	2300      	movs	r3, #0
 801053a:	442b      	add	r3, r5
 801053c:	429c      	cmp	r4, r3
 801053e:	d206      	bcs.n	801054e <tcp_receive+0xaa2>
 8010540:	4b1e      	ldr	r3, [pc, #120]	; (80105bc <tcp_receive+0xb10>)
 8010542:	f240 622c 	movw	r2, #1580	; 0x62c
 8010546:	4923      	ldr	r1, [pc, #140]	; (80105d4 <tcp_receive+0xb28>)
 8010548:	481e      	ldr	r0, [pc, #120]	; (80105c4 <tcp_receive+0xb18>)
 801054a:	f007 fc3f 	bl	8017dcc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801054e:	68bb      	ldr	r3, [r7, #8]
 8010550:	891b      	ldrh	r3, [r3, #8]
 8010552:	461c      	mov	r4, r3
 8010554:	68bb      	ldr	r3, [r7, #8]
 8010556:	68db      	ldr	r3, [r3, #12]
 8010558:	899b      	ldrh	r3, [r3, #12]
 801055a:	b29b      	uxth	r3, r3
 801055c:	4618      	mov	r0, r3
 801055e:	f7fa facd 	bl	800aafc <lwip_htons>
 8010562:	4603      	mov	r3, r0
 8010564:	b2db      	uxtb	r3, r3
 8010566:	f003 0303 	and.w	r3, r3, #3
 801056a:	2b00      	cmp	r3, #0
 801056c:	d001      	beq.n	8010572 <tcp_receive+0xac6>
 801056e:	2301      	movs	r3, #1
 8010570:	e000      	b.n	8010574 <tcp_receive+0xac8>
 8010572:	2300      	movs	r3, #0
 8010574:	1919      	adds	r1, r3, r4
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801057a:	b28b      	uxth	r3, r1
 801057c:	1ad3      	subs	r3, r2, r3
 801057e:	b29a      	uxth	r2, r3
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010584:	6878      	ldr	r0, [r7, #4]
 8010586:	f7fc fe19 	bl	800d1bc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801058a:	68bb      	ldr	r3, [r7, #8]
 801058c:	685b      	ldr	r3, [r3, #4]
 801058e:	891b      	ldrh	r3, [r3, #8]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d028      	beq.n	80105e6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010594:	4b0d      	ldr	r3, [pc, #52]	; (80105cc <tcp_receive+0xb20>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d01d      	beq.n	80105d8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801059c:	4b0b      	ldr	r3, [pc, #44]	; (80105cc <tcp_receive+0xb20>)
 801059e:	681a      	ldr	r2, [r3, #0]
 80105a0:	68bb      	ldr	r3, [r7, #8]
 80105a2:	685b      	ldr	r3, [r3, #4]
 80105a4:	4619      	mov	r1, r3
 80105a6:	4610      	mov	r0, r2
 80105a8:	f7fb ff60 	bl	800c46c <pbuf_cat>
 80105ac:	e018      	b.n	80105e0 <tcp_receive+0xb34>
 80105ae:	bf00      	nop
 80105b0:	20008aba 	.word	0x20008aba
 80105b4:	20008ab0 	.word	0x20008ab0
 80105b8:	20008a90 	.word	0x20008a90
 80105bc:	0801b1d4 	.word	0x0801b1d4
 80105c0:	0801b5b4 	.word	0x0801b5b4
 80105c4:	0801b220 	.word	0x0801b220
 80105c8:	0801b5f0 	.word	0x0801b5f0
 80105cc:	20008ac0 	.word	0x20008ac0
 80105d0:	20008abd 	.word	0x20008abd
 80105d4:	0801b610 	.word	0x0801b610
            } else {
              recv_data = cseg->p;
 80105d8:	68bb      	ldr	r3, [r7, #8]
 80105da:	685b      	ldr	r3, [r3, #4]
 80105dc:	4a70      	ldr	r2, [pc, #448]	; (80107a0 <tcp_receive+0xcf4>)
 80105de:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80105e0:	68bb      	ldr	r3, [r7, #8]
 80105e2:	2200      	movs	r2, #0
 80105e4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80105e6:	68bb      	ldr	r3, [r7, #8]
 80105e8:	68db      	ldr	r3, [r3, #12]
 80105ea:	899b      	ldrh	r3, [r3, #12]
 80105ec:	b29b      	uxth	r3, r3
 80105ee:	4618      	mov	r0, r3
 80105f0:	f7fa fa84 	bl	800aafc <lwip_htons>
 80105f4:	4603      	mov	r3, r0
 80105f6:	b2db      	uxtb	r3, r3
 80105f8:	f003 0301 	and.w	r3, r3, #1
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d00d      	beq.n	801061c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010600:	4b68      	ldr	r3, [pc, #416]	; (80107a4 <tcp_receive+0xcf8>)
 8010602:	781b      	ldrb	r3, [r3, #0]
 8010604:	f043 0320 	orr.w	r3, r3, #32
 8010608:	b2da      	uxtb	r2, r3
 801060a:	4b66      	ldr	r3, [pc, #408]	; (80107a4 <tcp_receive+0xcf8>)
 801060c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	7d1b      	ldrb	r3, [r3, #20]
 8010612:	2b04      	cmp	r3, #4
 8010614:	d102      	bne.n	801061c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	2207      	movs	r2, #7
 801061a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801061c:	68bb      	ldr	r3, [r7, #8]
 801061e:	681a      	ldr	r2, [r3, #0]
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010624:	68b8      	ldr	r0, [r7, #8]
 8010626:	f7fd faeb 	bl	800dc00 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801062e:	2b00      	cmp	r3, #0
 8010630:	d008      	beq.n	8010644 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010636:	68db      	ldr	r3, [r3, #12]
 8010638:	685a      	ldr	r2, [r3, #4]
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801063e:	429a      	cmp	r2, r3
 8010640:	f43f af43 	beq.w	80104ca <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	8b5b      	ldrh	r3, [r3, #26]
 8010648:	f003 0301 	and.w	r3, r3, #1
 801064c:	2b00      	cmp	r3, #0
 801064e:	d00e      	beq.n	801066e <tcp_receive+0xbc2>
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	8b5b      	ldrh	r3, [r3, #26]
 8010654:	f023 0301 	bic.w	r3, r3, #1
 8010658:	b29a      	uxth	r2, r3
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	835a      	strh	r2, [r3, #26]
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	8b5b      	ldrh	r3, [r3, #26]
 8010662:	f043 0302 	orr.w	r3, r3, #2
 8010666:	b29a      	uxth	r2, r3
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801066c:	e188      	b.n	8010980 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	8b5b      	ldrh	r3, [r3, #26]
 8010672:	f043 0301 	orr.w	r3, r3, #1
 8010676:	b29a      	uxth	r2, r3
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801067c:	e180      	b.n	8010980 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010682:	2b00      	cmp	r3, #0
 8010684:	d106      	bne.n	8010694 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010686:	4848      	ldr	r0, [pc, #288]	; (80107a8 <tcp_receive+0xcfc>)
 8010688:	f7fd faf0 	bl	800dc6c <tcp_seg_copy>
 801068c:	4602      	mov	r2, r0
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	675a      	str	r2, [r3, #116]	; 0x74
 8010692:	e16d      	b.n	8010970 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010694:	2300      	movs	r3, #0
 8010696:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801069c:	63bb      	str	r3, [r7, #56]	; 0x38
 801069e:	e157      	b.n	8010950 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80106a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106a2:	68db      	ldr	r3, [r3, #12]
 80106a4:	685a      	ldr	r2, [r3, #4]
 80106a6:	4b41      	ldr	r3, [pc, #260]	; (80107ac <tcp_receive+0xd00>)
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	429a      	cmp	r2, r3
 80106ac:	d11d      	bne.n	80106ea <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80106ae:	4b3e      	ldr	r3, [pc, #248]	; (80107a8 <tcp_receive+0xcfc>)
 80106b0:	891a      	ldrh	r2, [r3, #8]
 80106b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106b4:	891b      	ldrh	r3, [r3, #8]
 80106b6:	429a      	cmp	r2, r3
 80106b8:	f240 814f 	bls.w	801095a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80106bc:	483a      	ldr	r0, [pc, #232]	; (80107a8 <tcp_receive+0xcfc>)
 80106be:	f7fd fad5 	bl	800dc6c <tcp_seg_copy>
 80106c2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80106c4:	697b      	ldr	r3, [r7, #20]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	f000 8149 	beq.w	801095e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80106cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d003      	beq.n	80106da <tcp_receive+0xc2e>
                    prev->next = cseg;
 80106d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106d4:	697a      	ldr	r2, [r7, #20]
 80106d6:	601a      	str	r2, [r3, #0]
 80106d8:	e002      	b.n	80106e0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	697a      	ldr	r2, [r7, #20]
 80106de:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80106e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80106e2:	6978      	ldr	r0, [r7, #20]
 80106e4:	f7ff f8de 	bl	800f8a4 <tcp_oos_insert_segment>
                }
                break;
 80106e8:	e139      	b.n	801095e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80106ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d117      	bne.n	8010720 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80106f0:	4b2e      	ldr	r3, [pc, #184]	; (80107ac <tcp_receive+0xd00>)
 80106f2:	681a      	ldr	r2, [r3, #0]
 80106f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106f6:	68db      	ldr	r3, [r3, #12]
 80106f8:	685b      	ldr	r3, [r3, #4]
 80106fa:	1ad3      	subs	r3, r2, r3
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	da57      	bge.n	80107b0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010700:	4829      	ldr	r0, [pc, #164]	; (80107a8 <tcp_receive+0xcfc>)
 8010702:	f7fd fab3 	bl	800dc6c <tcp_seg_copy>
 8010706:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010708:	69bb      	ldr	r3, [r7, #24]
 801070a:	2b00      	cmp	r3, #0
 801070c:	f000 8129 	beq.w	8010962 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	69ba      	ldr	r2, [r7, #24]
 8010714:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010716:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010718:	69b8      	ldr	r0, [r7, #24]
 801071a:	f7ff f8c3 	bl	800f8a4 <tcp_oos_insert_segment>
                  }
                  break;
 801071e:	e120      	b.n	8010962 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010720:	4b22      	ldr	r3, [pc, #136]	; (80107ac <tcp_receive+0xd00>)
 8010722:	681a      	ldr	r2, [r3, #0]
 8010724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010726:	68db      	ldr	r3, [r3, #12]
 8010728:	685b      	ldr	r3, [r3, #4]
 801072a:	1ad3      	subs	r3, r2, r3
 801072c:	3b01      	subs	r3, #1
 801072e:	2b00      	cmp	r3, #0
 8010730:	db3e      	blt.n	80107b0 <tcp_receive+0xd04>
 8010732:	4b1e      	ldr	r3, [pc, #120]	; (80107ac <tcp_receive+0xd00>)
 8010734:	681a      	ldr	r2, [r3, #0]
 8010736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010738:	68db      	ldr	r3, [r3, #12]
 801073a:	685b      	ldr	r3, [r3, #4]
 801073c:	1ad3      	subs	r3, r2, r3
 801073e:	3301      	adds	r3, #1
 8010740:	2b00      	cmp	r3, #0
 8010742:	dc35      	bgt.n	80107b0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010744:	4818      	ldr	r0, [pc, #96]	; (80107a8 <tcp_receive+0xcfc>)
 8010746:	f7fd fa91 	bl	800dc6c <tcp_seg_copy>
 801074a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801074c:	69fb      	ldr	r3, [r7, #28]
 801074e:	2b00      	cmp	r3, #0
 8010750:	f000 8109 	beq.w	8010966 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010756:	68db      	ldr	r3, [r3, #12]
 8010758:	685b      	ldr	r3, [r3, #4]
 801075a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801075c:	8912      	ldrh	r2, [r2, #8]
 801075e:	441a      	add	r2, r3
 8010760:	4b12      	ldr	r3, [pc, #72]	; (80107ac <tcp_receive+0xd00>)
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	1ad3      	subs	r3, r2, r3
 8010766:	2b00      	cmp	r3, #0
 8010768:	dd12      	ble.n	8010790 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801076a:	4b10      	ldr	r3, [pc, #64]	; (80107ac <tcp_receive+0xd00>)
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	b29a      	uxth	r2, r3
 8010770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010772:	68db      	ldr	r3, [r3, #12]
 8010774:	685b      	ldr	r3, [r3, #4]
 8010776:	b29b      	uxth	r3, r3
 8010778:	1ad3      	subs	r3, r2, r3
 801077a:	b29a      	uxth	r2, r3
 801077c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801077e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010782:	685a      	ldr	r2, [r3, #4]
 8010784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010786:	891b      	ldrh	r3, [r3, #8]
 8010788:	4619      	mov	r1, r3
 801078a:	4610      	mov	r0, r2
 801078c:	f7fb fc1a 	bl	800bfc4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010792:	69fa      	ldr	r2, [r7, #28]
 8010794:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010796:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010798:	69f8      	ldr	r0, [r7, #28]
 801079a:	f7ff f883 	bl	800f8a4 <tcp_oos_insert_segment>
                  }
                  break;
 801079e:	e0e2      	b.n	8010966 <tcp_receive+0xeba>
 80107a0:	20008ac0 	.word	0x20008ac0
 80107a4:	20008abd 	.word	0x20008abd
 80107a8:	20008a90 	.word	0x20008a90
 80107ac:	20008ab0 	.word	0x20008ab0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80107b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107b2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80107b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	f040 80c6 	bne.w	801094a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80107be:	4b80      	ldr	r3, [pc, #512]	; (80109c0 <tcp_receive+0xf14>)
 80107c0:	681a      	ldr	r2, [r3, #0]
 80107c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107c4:	68db      	ldr	r3, [r3, #12]
 80107c6:	685b      	ldr	r3, [r3, #4]
 80107c8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	f340 80bd 	ble.w	801094a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80107d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107d2:	68db      	ldr	r3, [r3, #12]
 80107d4:	899b      	ldrh	r3, [r3, #12]
 80107d6:	b29b      	uxth	r3, r3
 80107d8:	4618      	mov	r0, r3
 80107da:	f7fa f98f 	bl	800aafc <lwip_htons>
 80107de:	4603      	mov	r3, r0
 80107e0:	b2db      	uxtb	r3, r3
 80107e2:	f003 0301 	and.w	r3, r3, #1
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	f040 80bf 	bne.w	801096a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80107ec:	4875      	ldr	r0, [pc, #468]	; (80109c4 <tcp_receive+0xf18>)
 80107ee:	f7fd fa3d 	bl	800dc6c <tcp_seg_copy>
 80107f2:	4602      	mov	r2, r0
 80107f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107f6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80107f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	f000 80b6 	beq.w	801096e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010804:	68db      	ldr	r3, [r3, #12]
 8010806:	685b      	ldr	r3, [r3, #4]
 8010808:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801080a:	8912      	ldrh	r2, [r2, #8]
 801080c:	441a      	add	r2, r3
 801080e:	4b6c      	ldr	r3, [pc, #432]	; (80109c0 <tcp_receive+0xf14>)
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	1ad3      	subs	r3, r2, r3
 8010814:	2b00      	cmp	r3, #0
 8010816:	dd12      	ble.n	801083e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010818:	4b69      	ldr	r3, [pc, #420]	; (80109c0 <tcp_receive+0xf14>)
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	b29a      	uxth	r2, r3
 801081e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010820:	68db      	ldr	r3, [r3, #12]
 8010822:	685b      	ldr	r3, [r3, #4]
 8010824:	b29b      	uxth	r3, r3
 8010826:	1ad3      	subs	r3, r2, r3
 8010828:	b29a      	uxth	r2, r3
 801082a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801082c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801082e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010830:	685a      	ldr	r2, [r3, #4]
 8010832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010834:	891b      	ldrh	r3, [r3, #8]
 8010836:	4619      	mov	r1, r3
 8010838:	4610      	mov	r0, r2
 801083a:	f7fb fbc3 	bl	800bfc4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801083e:	4b62      	ldr	r3, [pc, #392]	; (80109c8 <tcp_receive+0xf1c>)
 8010840:	881b      	ldrh	r3, [r3, #0]
 8010842:	461a      	mov	r2, r3
 8010844:	4b5e      	ldr	r3, [pc, #376]	; (80109c0 <tcp_receive+0xf14>)
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	441a      	add	r2, r3
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801084e:	6879      	ldr	r1, [r7, #4]
 8010850:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010852:	440b      	add	r3, r1
 8010854:	1ad3      	subs	r3, r2, r3
 8010856:	2b00      	cmp	r3, #0
 8010858:	f340 8089 	ble.w	801096e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801085c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	68db      	ldr	r3, [r3, #12]
 8010862:	899b      	ldrh	r3, [r3, #12]
 8010864:	b29b      	uxth	r3, r3
 8010866:	4618      	mov	r0, r3
 8010868:	f7fa f948 	bl	800aafc <lwip_htons>
 801086c:	4603      	mov	r3, r0
 801086e:	b2db      	uxtb	r3, r3
 8010870:	f003 0301 	and.w	r3, r3, #1
 8010874:	2b00      	cmp	r3, #0
 8010876:	d022      	beq.n	80108be <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	68db      	ldr	r3, [r3, #12]
 801087e:	899b      	ldrh	r3, [r3, #12]
 8010880:	b29b      	uxth	r3, r3
 8010882:	b21b      	sxth	r3, r3
 8010884:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010888:	b21c      	sxth	r4, r3
 801088a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	68db      	ldr	r3, [r3, #12]
 8010890:	899b      	ldrh	r3, [r3, #12]
 8010892:	b29b      	uxth	r3, r3
 8010894:	4618      	mov	r0, r3
 8010896:	f7fa f931 	bl	800aafc <lwip_htons>
 801089a:	4603      	mov	r3, r0
 801089c:	b2db      	uxtb	r3, r3
 801089e:	b29b      	uxth	r3, r3
 80108a0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80108a4:	b29b      	uxth	r3, r3
 80108a6:	4618      	mov	r0, r3
 80108a8:	f7fa f928 	bl	800aafc <lwip_htons>
 80108ac:	4603      	mov	r3, r0
 80108ae:	b21b      	sxth	r3, r3
 80108b0:	4323      	orrs	r3, r4
 80108b2:	b21a      	sxth	r2, r3
 80108b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	68db      	ldr	r3, [r3, #12]
 80108ba:	b292      	uxth	r2, r2
 80108bc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108c2:	b29a      	uxth	r2, r3
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80108c8:	4413      	add	r3, r2
 80108ca:	b299      	uxth	r1, r3
 80108cc:	4b3c      	ldr	r3, [pc, #240]	; (80109c0 <tcp_receive+0xf14>)
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	b29a      	uxth	r2, r3
 80108d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	1a8a      	subs	r2, r1, r2
 80108d8:	b292      	uxth	r2, r2
 80108da:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80108dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	685a      	ldr	r2, [r3, #4]
 80108e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	891b      	ldrh	r3, [r3, #8]
 80108e8:	4619      	mov	r1, r3
 80108ea:	4610      	mov	r0, r2
 80108ec:	f7fb fb6a 	bl	800bfc4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80108f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	891c      	ldrh	r4, [r3, #8]
 80108f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	68db      	ldr	r3, [r3, #12]
 80108fc:	899b      	ldrh	r3, [r3, #12]
 80108fe:	b29b      	uxth	r3, r3
 8010900:	4618      	mov	r0, r3
 8010902:	f7fa f8fb 	bl	800aafc <lwip_htons>
 8010906:	4603      	mov	r3, r0
 8010908:	b2db      	uxtb	r3, r3
 801090a:	f003 0303 	and.w	r3, r3, #3
 801090e:	2b00      	cmp	r3, #0
 8010910:	d001      	beq.n	8010916 <tcp_receive+0xe6a>
 8010912:	2301      	movs	r3, #1
 8010914:	e000      	b.n	8010918 <tcp_receive+0xe6c>
 8010916:	2300      	movs	r3, #0
 8010918:	4423      	add	r3, r4
 801091a:	b29a      	uxth	r2, r3
 801091c:	4b2a      	ldr	r3, [pc, #168]	; (80109c8 <tcp_receive+0xf1c>)
 801091e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010920:	4b29      	ldr	r3, [pc, #164]	; (80109c8 <tcp_receive+0xf1c>)
 8010922:	881b      	ldrh	r3, [r3, #0]
 8010924:	461a      	mov	r2, r3
 8010926:	4b26      	ldr	r3, [pc, #152]	; (80109c0 <tcp_receive+0xf14>)
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	441a      	add	r2, r3
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010930:	6879      	ldr	r1, [r7, #4]
 8010932:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010934:	440b      	add	r3, r1
 8010936:	429a      	cmp	r2, r3
 8010938:	d019      	beq.n	801096e <tcp_receive+0xec2>
 801093a:	4b24      	ldr	r3, [pc, #144]	; (80109cc <tcp_receive+0xf20>)
 801093c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010940:	4923      	ldr	r1, [pc, #140]	; (80109d0 <tcp_receive+0xf24>)
 8010942:	4824      	ldr	r0, [pc, #144]	; (80109d4 <tcp_receive+0xf28>)
 8010944:	f007 fa42 	bl	8017dcc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010948:	e011      	b.n	801096e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801094a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010952:	2b00      	cmp	r3, #0
 8010954:	f47f aea4 	bne.w	80106a0 <tcp_receive+0xbf4>
 8010958:	e00a      	b.n	8010970 <tcp_receive+0xec4>
                break;
 801095a:	bf00      	nop
 801095c:	e008      	b.n	8010970 <tcp_receive+0xec4>
                break;
 801095e:	bf00      	nop
 8010960:	e006      	b.n	8010970 <tcp_receive+0xec4>
                  break;
 8010962:	bf00      	nop
 8010964:	e004      	b.n	8010970 <tcp_receive+0xec4>
                  break;
 8010966:	bf00      	nop
 8010968:	e002      	b.n	8010970 <tcp_receive+0xec4>
                  break;
 801096a:	bf00      	nop
 801096c:	e000      	b.n	8010970 <tcp_receive+0xec4>
                break;
 801096e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010970:	6878      	ldr	r0, [r7, #4]
 8010972:	f001 fe9b 	bl	80126ac <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010976:	e003      	b.n	8010980 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010978:	6878      	ldr	r0, [r7, #4]
 801097a:	f001 fe97 	bl	80126ac <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801097e:	e01a      	b.n	80109b6 <tcp_receive+0xf0a>
 8010980:	e019      	b.n	80109b6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010982:	4b0f      	ldr	r3, [pc, #60]	; (80109c0 <tcp_receive+0xf14>)
 8010984:	681a      	ldr	r2, [r3, #0]
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801098a:	1ad3      	subs	r3, r2, r3
 801098c:	2b00      	cmp	r3, #0
 801098e:	db0a      	blt.n	80109a6 <tcp_receive+0xefa>
 8010990:	4b0b      	ldr	r3, [pc, #44]	; (80109c0 <tcp_receive+0xf14>)
 8010992:	681a      	ldr	r2, [r3, #0]
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010998:	6879      	ldr	r1, [r7, #4]
 801099a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801099c:	440b      	add	r3, r1
 801099e:	1ad3      	subs	r3, r2, r3
 80109a0:	3301      	adds	r3, #1
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	dd07      	ble.n	80109b6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	8b5b      	ldrh	r3, [r3, #26]
 80109aa:	f043 0302 	orr.w	r3, r3, #2
 80109ae:	b29a      	uxth	r2, r3
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80109b4:	e7ff      	b.n	80109b6 <tcp_receive+0xf0a>
 80109b6:	bf00      	nop
 80109b8:	3750      	adds	r7, #80	; 0x50
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bdb0      	pop	{r4, r5, r7, pc}
 80109be:	bf00      	nop
 80109c0:	20008ab0 	.word	0x20008ab0
 80109c4:	20008a90 	.word	0x20008a90
 80109c8:	20008aba 	.word	0x20008aba
 80109cc:	0801b1d4 	.word	0x0801b1d4
 80109d0:	0801b57c 	.word	0x0801b57c
 80109d4:	0801b220 	.word	0x0801b220

080109d8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80109d8:	b480      	push	{r7}
 80109da:	b083      	sub	sp, #12
 80109dc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80109de:	4b15      	ldr	r3, [pc, #84]	; (8010a34 <tcp_get_next_optbyte+0x5c>)
 80109e0:	881b      	ldrh	r3, [r3, #0]
 80109e2:	1c5a      	adds	r2, r3, #1
 80109e4:	b291      	uxth	r1, r2
 80109e6:	4a13      	ldr	r2, [pc, #76]	; (8010a34 <tcp_get_next_optbyte+0x5c>)
 80109e8:	8011      	strh	r1, [r2, #0]
 80109ea:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80109ec:	4b12      	ldr	r3, [pc, #72]	; (8010a38 <tcp_get_next_optbyte+0x60>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d004      	beq.n	80109fe <tcp_get_next_optbyte+0x26>
 80109f4:	4b11      	ldr	r3, [pc, #68]	; (8010a3c <tcp_get_next_optbyte+0x64>)
 80109f6:	881b      	ldrh	r3, [r3, #0]
 80109f8:	88fa      	ldrh	r2, [r7, #6]
 80109fa:	429a      	cmp	r2, r3
 80109fc:	d208      	bcs.n	8010a10 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80109fe:	4b10      	ldr	r3, [pc, #64]	; (8010a40 <tcp_get_next_optbyte+0x68>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	3314      	adds	r3, #20
 8010a04:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010a06:	88fb      	ldrh	r3, [r7, #6]
 8010a08:	683a      	ldr	r2, [r7, #0]
 8010a0a:	4413      	add	r3, r2
 8010a0c:	781b      	ldrb	r3, [r3, #0]
 8010a0e:	e00b      	b.n	8010a28 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010a10:	88fb      	ldrh	r3, [r7, #6]
 8010a12:	b2da      	uxtb	r2, r3
 8010a14:	4b09      	ldr	r3, [pc, #36]	; (8010a3c <tcp_get_next_optbyte+0x64>)
 8010a16:	881b      	ldrh	r3, [r3, #0]
 8010a18:	b2db      	uxtb	r3, r3
 8010a1a:	1ad3      	subs	r3, r2, r3
 8010a1c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010a1e:	4b06      	ldr	r3, [pc, #24]	; (8010a38 <tcp_get_next_optbyte+0x60>)
 8010a20:	681a      	ldr	r2, [r3, #0]
 8010a22:	797b      	ldrb	r3, [r7, #5]
 8010a24:	4413      	add	r3, r2
 8010a26:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010a28:	4618      	mov	r0, r3
 8010a2a:	370c      	adds	r7, #12
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a32:	4770      	bx	lr
 8010a34:	20008aac 	.word	0x20008aac
 8010a38:	20008aa8 	.word	0x20008aa8
 8010a3c:	20008aa6 	.word	0x20008aa6
 8010a40:	20008aa0 	.word	0x20008aa0

08010a44 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b084      	sub	sp, #16
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d106      	bne.n	8010a60 <tcp_parseopt+0x1c>
 8010a52:	4b31      	ldr	r3, [pc, #196]	; (8010b18 <tcp_parseopt+0xd4>)
 8010a54:	f240 727d 	movw	r2, #1917	; 0x77d
 8010a58:	4930      	ldr	r1, [pc, #192]	; (8010b1c <tcp_parseopt+0xd8>)
 8010a5a:	4831      	ldr	r0, [pc, #196]	; (8010b20 <tcp_parseopt+0xdc>)
 8010a5c:	f007 f9b6 	bl	8017dcc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010a60:	4b30      	ldr	r3, [pc, #192]	; (8010b24 <tcp_parseopt+0xe0>)
 8010a62:	881b      	ldrh	r3, [r3, #0]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d053      	beq.n	8010b10 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010a68:	4b2f      	ldr	r3, [pc, #188]	; (8010b28 <tcp_parseopt+0xe4>)
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	801a      	strh	r2, [r3, #0]
 8010a6e:	e043      	b.n	8010af8 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8010a70:	f7ff ffb2 	bl	80109d8 <tcp_get_next_optbyte>
 8010a74:	4603      	mov	r3, r0
 8010a76:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010a78:	7bfb      	ldrb	r3, [r7, #15]
 8010a7a:	2b01      	cmp	r3, #1
 8010a7c:	d03c      	beq.n	8010af8 <tcp_parseopt+0xb4>
 8010a7e:	2b02      	cmp	r3, #2
 8010a80:	d002      	beq.n	8010a88 <tcp_parseopt+0x44>
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d03f      	beq.n	8010b06 <tcp_parseopt+0xc2>
 8010a86:	e026      	b.n	8010ad6 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010a88:	f7ff ffa6 	bl	80109d8 <tcp_get_next_optbyte>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	2b04      	cmp	r3, #4
 8010a90:	d13b      	bne.n	8010b0a <tcp_parseopt+0xc6>
 8010a92:	4b25      	ldr	r3, [pc, #148]	; (8010b28 <tcp_parseopt+0xe4>)
 8010a94:	881b      	ldrh	r3, [r3, #0]
 8010a96:	3302      	adds	r3, #2
 8010a98:	4a22      	ldr	r2, [pc, #136]	; (8010b24 <tcp_parseopt+0xe0>)
 8010a9a:	8812      	ldrh	r2, [r2, #0]
 8010a9c:	4293      	cmp	r3, r2
 8010a9e:	dc34      	bgt.n	8010b0a <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010aa0:	f7ff ff9a 	bl	80109d8 <tcp_get_next_optbyte>
 8010aa4:	4603      	mov	r3, r0
 8010aa6:	b29b      	uxth	r3, r3
 8010aa8:	021b      	lsls	r3, r3, #8
 8010aaa:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010aac:	f7ff ff94 	bl	80109d8 <tcp_get_next_optbyte>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	b29a      	uxth	r2, r3
 8010ab4:	89bb      	ldrh	r3, [r7, #12]
 8010ab6:	4313      	orrs	r3, r2
 8010ab8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010aba:	89bb      	ldrh	r3, [r7, #12]
 8010abc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010ac0:	d804      	bhi.n	8010acc <tcp_parseopt+0x88>
 8010ac2:	89bb      	ldrh	r3, [r7, #12]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d001      	beq.n	8010acc <tcp_parseopt+0x88>
 8010ac8:	89ba      	ldrh	r2, [r7, #12]
 8010aca:	e001      	b.n	8010ad0 <tcp_parseopt+0x8c>
 8010acc:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010ad4:	e010      	b.n	8010af8 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010ad6:	f7ff ff7f 	bl	80109d8 <tcp_get_next_optbyte>
 8010ada:	4603      	mov	r3, r0
 8010adc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010ade:	7afb      	ldrb	r3, [r7, #11]
 8010ae0:	2b01      	cmp	r3, #1
 8010ae2:	d914      	bls.n	8010b0e <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010ae4:	7afb      	ldrb	r3, [r7, #11]
 8010ae6:	b29a      	uxth	r2, r3
 8010ae8:	4b0f      	ldr	r3, [pc, #60]	; (8010b28 <tcp_parseopt+0xe4>)
 8010aea:	881b      	ldrh	r3, [r3, #0]
 8010aec:	4413      	add	r3, r2
 8010aee:	b29b      	uxth	r3, r3
 8010af0:	3b02      	subs	r3, #2
 8010af2:	b29a      	uxth	r2, r3
 8010af4:	4b0c      	ldr	r3, [pc, #48]	; (8010b28 <tcp_parseopt+0xe4>)
 8010af6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010af8:	4b0b      	ldr	r3, [pc, #44]	; (8010b28 <tcp_parseopt+0xe4>)
 8010afa:	881a      	ldrh	r2, [r3, #0]
 8010afc:	4b09      	ldr	r3, [pc, #36]	; (8010b24 <tcp_parseopt+0xe0>)
 8010afe:	881b      	ldrh	r3, [r3, #0]
 8010b00:	429a      	cmp	r2, r3
 8010b02:	d3b5      	bcc.n	8010a70 <tcp_parseopt+0x2c>
 8010b04:	e004      	b.n	8010b10 <tcp_parseopt+0xcc>
          return;
 8010b06:	bf00      	nop
 8010b08:	e002      	b.n	8010b10 <tcp_parseopt+0xcc>
            return;
 8010b0a:	bf00      	nop
 8010b0c:	e000      	b.n	8010b10 <tcp_parseopt+0xcc>
            return;
 8010b0e:	bf00      	nop
      }
    }
  }
}
 8010b10:	3710      	adds	r7, #16
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}
 8010b16:	bf00      	nop
 8010b18:	0801b1d4 	.word	0x0801b1d4
 8010b1c:	0801b638 	.word	0x0801b638
 8010b20:	0801b220 	.word	0x0801b220
 8010b24:	20008aa4 	.word	0x20008aa4
 8010b28:	20008aac 	.word	0x20008aac

08010b2c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010b2c:	b480      	push	{r7}
 8010b2e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010b30:	4b05      	ldr	r3, [pc, #20]	; (8010b48 <tcp_trigger_input_pcb_close+0x1c>)
 8010b32:	781b      	ldrb	r3, [r3, #0]
 8010b34:	f043 0310 	orr.w	r3, r3, #16
 8010b38:	b2da      	uxtb	r2, r3
 8010b3a:	4b03      	ldr	r3, [pc, #12]	; (8010b48 <tcp_trigger_input_pcb_close+0x1c>)
 8010b3c:	701a      	strb	r2, [r3, #0]
}
 8010b3e:	bf00      	nop
 8010b40:	46bd      	mov	sp, r7
 8010b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b46:	4770      	bx	lr
 8010b48:	20008abd 	.word	0x20008abd

08010b4c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b084      	sub	sp, #16
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	60f8      	str	r0, [r7, #12]
 8010b54:	60b9      	str	r1, [r7, #8]
 8010b56:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d00a      	beq.n	8010b74 <tcp_route+0x28>
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	7a1b      	ldrb	r3, [r3, #8]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d006      	beq.n	8010b74 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	7a1b      	ldrb	r3, [r3, #8]
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7fb f826 	bl	800bbbc <netif_get_by_index>
 8010b70:	4603      	mov	r3, r0
 8010b72:	e003      	b.n	8010b7c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010b74:	6878      	ldr	r0, [r7, #4]
 8010b76:	f005 fcc9 	bl	801650c <ip4_route>
 8010b7a:	4603      	mov	r3, r0
  }
}
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	3710      	adds	r7, #16
 8010b80:	46bd      	mov	sp, r7
 8010b82:	bd80      	pop	{r7, pc}

08010b84 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010b84:	b590      	push	{r4, r7, lr}
 8010b86:	b087      	sub	sp, #28
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	60f8      	str	r0, [r7, #12]
 8010b8c:	60b9      	str	r1, [r7, #8]
 8010b8e:	603b      	str	r3, [r7, #0]
 8010b90:	4613      	mov	r3, r2
 8010b92:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d105      	bne.n	8010ba6 <tcp_create_segment+0x22>
 8010b9a:	4b44      	ldr	r3, [pc, #272]	; (8010cac <tcp_create_segment+0x128>)
 8010b9c:	22a3      	movs	r2, #163	; 0xa3
 8010b9e:	4944      	ldr	r1, [pc, #272]	; (8010cb0 <tcp_create_segment+0x12c>)
 8010ba0:	4844      	ldr	r0, [pc, #272]	; (8010cb4 <tcp_create_segment+0x130>)
 8010ba2:	f007 f913 	bl	8017dcc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010ba6:	68bb      	ldr	r3, [r7, #8]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d105      	bne.n	8010bb8 <tcp_create_segment+0x34>
 8010bac:	4b3f      	ldr	r3, [pc, #252]	; (8010cac <tcp_create_segment+0x128>)
 8010bae:	22a4      	movs	r2, #164	; 0xa4
 8010bb0:	4941      	ldr	r1, [pc, #260]	; (8010cb8 <tcp_create_segment+0x134>)
 8010bb2:	4840      	ldr	r0, [pc, #256]	; (8010cb4 <tcp_create_segment+0x130>)
 8010bb4:	f007 f90a 	bl	8017dcc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010bb8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010bbc:	009b      	lsls	r3, r3, #2
 8010bbe:	b2db      	uxtb	r3, r3
 8010bc0:	f003 0304 	and.w	r3, r3, #4
 8010bc4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010bc6:	2003      	movs	r0, #3
 8010bc8:	f7fa fc84 	bl	800b4d4 <memp_malloc>
 8010bcc:	6138      	str	r0, [r7, #16]
 8010bce:	693b      	ldr	r3, [r7, #16]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d104      	bne.n	8010bde <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010bd4:	68b8      	ldr	r0, [r7, #8]
 8010bd6:	f7fb fb7b 	bl	800c2d0 <pbuf_free>
    return NULL;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	e061      	b.n	8010ca2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010bde:	693b      	ldr	r3, [r7, #16]
 8010be0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010be4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010be6:	693b      	ldr	r3, [r7, #16]
 8010be8:	2200      	movs	r2, #0
 8010bea:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010bec:	693b      	ldr	r3, [r7, #16]
 8010bee:	68ba      	ldr	r2, [r7, #8]
 8010bf0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010bf2:	68bb      	ldr	r3, [r7, #8]
 8010bf4:	891a      	ldrh	r2, [r3, #8]
 8010bf6:	7dfb      	ldrb	r3, [r7, #23]
 8010bf8:	b29b      	uxth	r3, r3
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	d205      	bcs.n	8010c0a <tcp_create_segment+0x86>
 8010bfe:	4b2b      	ldr	r3, [pc, #172]	; (8010cac <tcp_create_segment+0x128>)
 8010c00:	22b0      	movs	r2, #176	; 0xb0
 8010c02:	492e      	ldr	r1, [pc, #184]	; (8010cbc <tcp_create_segment+0x138>)
 8010c04:	482b      	ldr	r0, [pc, #172]	; (8010cb4 <tcp_create_segment+0x130>)
 8010c06:	f007 f8e1 	bl	8017dcc <iprintf>
  seg->len = p->tot_len - optlen;
 8010c0a:	68bb      	ldr	r3, [r7, #8]
 8010c0c:	891a      	ldrh	r2, [r3, #8]
 8010c0e:	7dfb      	ldrb	r3, [r7, #23]
 8010c10:	b29b      	uxth	r3, r3
 8010c12:	1ad3      	subs	r3, r2, r3
 8010c14:	b29a      	uxth	r2, r3
 8010c16:	693b      	ldr	r3, [r7, #16]
 8010c18:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010c1a:	2114      	movs	r1, #20
 8010c1c:	68b8      	ldr	r0, [r7, #8]
 8010c1e:	f7fb fac1 	bl	800c1a4 <pbuf_add_header>
 8010c22:	4603      	mov	r3, r0
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d004      	beq.n	8010c32 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010c28:	6938      	ldr	r0, [r7, #16]
 8010c2a:	f7fc ffe9 	bl	800dc00 <tcp_seg_free>
    return NULL;
 8010c2e:	2300      	movs	r3, #0
 8010c30:	e037      	b.n	8010ca2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010c32:	693b      	ldr	r3, [r7, #16]
 8010c34:	685b      	ldr	r3, [r3, #4]
 8010c36:	685a      	ldr	r2, [r3, #4]
 8010c38:	693b      	ldr	r3, [r7, #16]
 8010c3a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	8ada      	ldrh	r2, [r3, #22]
 8010c40:	693b      	ldr	r3, [r7, #16]
 8010c42:	68dc      	ldr	r4, [r3, #12]
 8010c44:	4610      	mov	r0, r2
 8010c46:	f7f9 ff59 	bl	800aafc <lwip_htons>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	8b1a      	ldrh	r2, [r3, #24]
 8010c52:	693b      	ldr	r3, [r7, #16]
 8010c54:	68dc      	ldr	r4, [r3, #12]
 8010c56:	4610      	mov	r0, r2
 8010c58:	f7f9 ff50 	bl	800aafc <lwip_htons>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	68dc      	ldr	r4, [r3, #12]
 8010c64:	6838      	ldr	r0, [r7, #0]
 8010c66:	f7f9 ff5e 	bl	800ab26 <lwip_htonl>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010c6e:	7dfb      	ldrb	r3, [r7, #23]
 8010c70:	089b      	lsrs	r3, r3, #2
 8010c72:	b2db      	uxtb	r3, r3
 8010c74:	b29b      	uxth	r3, r3
 8010c76:	3305      	adds	r3, #5
 8010c78:	b29b      	uxth	r3, r3
 8010c7a:	031b      	lsls	r3, r3, #12
 8010c7c:	b29a      	uxth	r2, r3
 8010c7e:	79fb      	ldrb	r3, [r7, #7]
 8010c80:	b29b      	uxth	r3, r3
 8010c82:	4313      	orrs	r3, r2
 8010c84:	b29a      	uxth	r2, r3
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	68dc      	ldr	r4, [r3, #12]
 8010c8a:	4610      	mov	r0, r2
 8010c8c:	f7f9 ff36 	bl	800aafc <lwip_htons>
 8010c90:	4603      	mov	r3, r0
 8010c92:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010c94:	693b      	ldr	r3, [r7, #16]
 8010c96:	68db      	ldr	r3, [r3, #12]
 8010c98:	2200      	movs	r2, #0
 8010c9a:	749a      	strb	r2, [r3, #18]
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	74da      	strb	r2, [r3, #19]
  return seg;
 8010ca0:	693b      	ldr	r3, [r7, #16]
}
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	371c      	adds	r7, #28
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	bd90      	pop	{r4, r7, pc}
 8010caa:	bf00      	nop
 8010cac:	0801b654 	.word	0x0801b654
 8010cb0:	0801b688 	.word	0x0801b688
 8010cb4:	0801b6a8 	.word	0x0801b6a8
 8010cb8:	0801b6d0 	.word	0x0801b6d0
 8010cbc:	0801b6f4 	.word	0x0801b6f4

08010cc0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b086      	sub	sp, #24
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	607b      	str	r3, [r7, #4]
 8010cc8:	4603      	mov	r3, r0
 8010cca:	73fb      	strb	r3, [r7, #15]
 8010ccc:	460b      	mov	r3, r1
 8010cce:	81bb      	strh	r3, [r7, #12]
 8010cd0:	4613      	mov	r3, r2
 8010cd2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010cd4:	89bb      	ldrh	r3, [r7, #12]
 8010cd6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d105      	bne.n	8010cea <tcp_pbuf_prealloc+0x2a>
 8010cde:	4b30      	ldr	r3, [pc, #192]	; (8010da0 <tcp_pbuf_prealloc+0xe0>)
 8010ce0:	22e8      	movs	r2, #232	; 0xe8
 8010ce2:	4930      	ldr	r1, [pc, #192]	; (8010da4 <tcp_pbuf_prealloc+0xe4>)
 8010ce4:	4830      	ldr	r0, [pc, #192]	; (8010da8 <tcp_pbuf_prealloc+0xe8>)
 8010ce6:	f007 f871 	bl	8017dcc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8010cea:	6a3b      	ldr	r3, [r7, #32]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d105      	bne.n	8010cfc <tcp_pbuf_prealloc+0x3c>
 8010cf0:	4b2b      	ldr	r3, [pc, #172]	; (8010da0 <tcp_pbuf_prealloc+0xe0>)
 8010cf2:	22e9      	movs	r2, #233	; 0xe9
 8010cf4:	492d      	ldr	r1, [pc, #180]	; (8010dac <tcp_pbuf_prealloc+0xec>)
 8010cf6:	482c      	ldr	r0, [pc, #176]	; (8010da8 <tcp_pbuf_prealloc+0xe8>)
 8010cf8:	f007 f868 	bl	8017dcc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010cfc:	89ba      	ldrh	r2, [r7, #12]
 8010cfe:	897b      	ldrh	r3, [r7, #10]
 8010d00:	429a      	cmp	r2, r3
 8010d02:	d221      	bcs.n	8010d48 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010d04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010d08:	f003 0302 	and.w	r3, r3, #2
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d111      	bne.n	8010d34 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010d10:	6a3b      	ldr	r3, [r7, #32]
 8010d12:	8b5b      	ldrh	r3, [r3, #26]
 8010d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d115      	bne.n	8010d48 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8010d1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d007      	beq.n	8010d34 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010d24:	6a3b      	ldr	r3, [r7, #32]
 8010d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d103      	bne.n	8010d34 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8010d2c:	6a3b      	ldr	r3, [r7, #32]
 8010d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d009      	beq.n	8010d48 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010d34:	89bb      	ldrh	r3, [r7, #12]
 8010d36:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8010d3a:	f023 0203 	bic.w	r2, r3, #3
 8010d3e:	897b      	ldrh	r3, [r7, #10]
 8010d40:	4293      	cmp	r3, r2
 8010d42:	bf28      	it	cs
 8010d44:	4613      	movcs	r3, r2
 8010d46:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010d48:	8af9      	ldrh	r1, [r7, #22]
 8010d4a:	7bfb      	ldrb	r3, [r7, #15]
 8010d4c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010d50:	4618      	mov	r0, r3
 8010d52:	f7fa ffdd 	bl	800bd10 <pbuf_alloc>
 8010d56:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010d58:	693b      	ldr	r3, [r7, #16]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d101      	bne.n	8010d62 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8010d5e:	2300      	movs	r3, #0
 8010d60:	e019      	b.n	8010d96 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010d62:	693b      	ldr	r3, [r7, #16]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d006      	beq.n	8010d78 <tcp_pbuf_prealloc+0xb8>
 8010d6a:	4b0d      	ldr	r3, [pc, #52]	; (8010da0 <tcp_pbuf_prealloc+0xe0>)
 8010d6c:	f240 120b 	movw	r2, #267	; 0x10b
 8010d70:	490f      	ldr	r1, [pc, #60]	; (8010db0 <tcp_pbuf_prealloc+0xf0>)
 8010d72:	480d      	ldr	r0, [pc, #52]	; (8010da8 <tcp_pbuf_prealloc+0xe8>)
 8010d74:	f007 f82a 	bl	8017dcc <iprintf>
  *oversize = p->len - length;
 8010d78:	693b      	ldr	r3, [r7, #16]
 8010d7a:	895a      	ldrh	r2, [r3, #10]
 8010d7c:	89bb      	ldrh	r3, [r7, #12]
 8010d7e:	1ad3      	subs	r3, r2, r3
 8010d80:	b29a      	uxth	r2, r3
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010d86:	693b      	ldr	r3, [r7, #16]
 8010d88:	89ba      	ldrh	r2, [r7, #12]
 8010d8a:	811a      	strh	r2, [r3, #8]
 8010d8c:	693b      	ldr	r3, [r7, #16]
 8010d8e:	891a      	ldrh	r2, [r3, #8]
 8010d90:	693b      	ldr	r3, [r7, #16]
 8010d92:	815a      	strh	r2, [r3, #10]
  return p;
 8010d94:	693b      	ldr	r3, [r7, #16]
}
 8010d96:	4618      	mov	r0, r3
 8010d98:	3718      	adds	r7, #24
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}
 8010d9e:	bf00      	nop
 8010da0:	0801b654 	.word	0x0801b654
 8010da4:	0801b70c 	.word	0x0801b70c
 8010da8:	0801b6a8 	.word	0x0801b6a8
 8010dac:	0801b730 	.word	0x0801b730
 8010db0:	0801b750 	.word	0x0801b750

08010db4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b082      	sub	sp, #8
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
 8010dbc:	460b      	mov	r3, r1
 8010dbe:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d106      	bne.n	8010dd4 <tcp_write_checks+0x20>
 8010dc6:	4b33      	ldr	r3, [pc, #204]	; (8010e94 <tcp_write_checks+0xe0>)
 8010dc8:	f240 1233 	movw	r2, #307	; 0x133
 8010dcc:	4932      	ldr	r1, [pc, #200]	; (8010e98 <tcp_write_checks+0xe4>)
 8010dce:	4833      	ldr	r0, [pc, #204]	; (8010e9c <tcp_write_checks+0xe8>)
 8010dd0:	f006 fffc 	bl	8017dcc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	7d1b      	ldrb	r3, [r3, #20]
 8010dd8:	2b04      	cmp	r3, #4
 8010dda:	d00e      	beq.n	8010dfa <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010de0:	2b07      	cmp	r3, #7
 8010de2:	d00a      	beq.n	8010dfa <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010de8:	2b02      	cmp	r3, #2
 8010dea:	d006      	beq.n	8010dfa <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010df0:	2b03      	cmp	r3, #3
 8010df2:	d002      	beq.n	8010dfa <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010df4:	f06f 030a 	mvn.w	r3, #10
 8010df8:	e048      	b.n	8010e8c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8010dfa:	887b      	ldrh	r3, [r7, #2]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d101      	bne.n	8010e04 <tcp_write_checks+0x50>
    return ERR_OK;
 8010e00:	2300      	movs	r3, #0
 8010e02:	e043      	b.n	8010e8c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010e0a:	887a      	ldrh	r2, [r7, #2]
 8010e0c:	429a      	cmp	r2, r3
 8010e0e:	d909      	bls.n	8010e24 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	8b5b      	ldrh	r3, [r3, #26]
 8010e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e18:	b29a      	uxth	r2, r3
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8010e22:	e033      	b.n	8010e8c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e2a:	2b08      	cmp	r3, #8
 8010e2c:	d909      	bls.n	8010e42 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	8b5b      	ldrh	r3, [r3, #26]
 8010e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e36:	b29a      	uxth	r2, r3
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8010e40:	e024      	b.n	8010e8c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d00f      	beq.n	8010e6c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d11a      	bne.n	8010e8a <tcp_write_checks+0xd6>
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d116      	bne.n	8010e8a <tcp_write_checks+0xd6>
 8010e5c:	4b0d      	ldr	r3, [pc, #52]	; (8010e94 <tcp_write_checks+0xe0>)
 8010e5e:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8010e62:	490f      	ldr	r1, [pc, #60]	; (8010ea0 <tcp_write_checks+0xec>)
 8010e64:	480d      	ldr	r0, [pc, #52]	; (8010e9c <tcp_write_checks+0xe8>)
 8010e66:	f006 ffb1 	bl	8017dcc <iprintf>
 8010e6a:	e00e      	b.n	8010e8a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d103      	bne.n	8010e7c <tcp_write_checks+0xc8>
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d006      	beq.n	8010e8a <tcp_write_checks+0xd6>
 8010e7c:	4b05      	ldr	r3, [pc, #20]	; (8010e94 <tcp_write_checks+0xe0>)
 8010e7e:	f240 1259 	movw	r2, #345	; 0x159
 8010e82:	4908      	ldr	r1, [pc, #32]	; (8010ea4 <tcp_write_checks+0xf0>)
 8010e84:	4805      	ldr	r0, [pc, #20]	; (8010e9c <tcp_write_checks+0xe8>)
 8010e86:	f006 ffa1 	bl	8017dcc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010e8a:	2300      	movs	r3, #0
}
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	3708      	adds	r7, #8
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}
 8010e94:	0801b654 	.word	0x0801b654
 8010e98:	0801b764 	.word	0x0801b764
 8010e9c:	0801b6a8 	.word	0x0801b6a8
 8010ea0:	0801b784 	.word	0x0801b784
 8010ea4:	0801b7c0 	.word	0x0801b7c0

08010ea8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010ea8:	b590      	push	{r4, r7, lr}
 8010eaa:	b09b      	sub	sp, #108	; 0x6c
 8010eac:	af04      	add	r7, sp, #16
 8010eae:	60f8      	str	r0, [r7, #12]
 8010eb0:	60b9      	str	r1, [r7, #8]
 8010eb2:	4611      	mov	r1, r2
 8010eb4:	461a      	mov	r2, r3
 8010eb6:	460b      	mov	r3, r1
 8010eb8:	80fb      	strh	r3, [r7, #6]
 8010eba:	4613      	mov	r3, r2
 8010ebc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	653b      	str	r3, [r7, #80]	; 0x50
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010eca:	2300      	movs	r3, #0
 8010ecc:	64bb      	str	r3, [r7, #72]	; 0x48
 8010ece:	2300      	movs	r3, #0
 8010ed0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010ed8:	2300      	movs	r3, #0
 8010eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010ede:	2300      	movs	r3, #0
 8010ee0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d109      	bne.n	8010f04 <tcp_write+0x5c>
 8010ef0:	4ba5      	ldr	r3, [pc, #660]	; (8011188 <tcp_write+0x2e0>)
 8010ef2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8010ef6:	49a5      	ldr	r1, [pc, #660]	; (801118c <tcp_write+0x2e4>)
 8010ef8:	48a5      	ldr	r0, [pc, #660]	; (8011190 <tcp_write+0x2e8>)
 8010efa:	f006 ff67 	bl	8017dcc <iprintf>
 8010efe:	f06f 030f 	mvn.w	r3, #15
 8010f02:	e32c      	b.n	801155e <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010f0a:	085b      	lsrs	r3, r3, #1
 8010f0c:	b29a      	uxth	r2, r3
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f12:	4293      	cmp	r3, r2
 8010f14:	bf28      	it	cs
 8010f16:	4613      	movcs	r3, r2
 8010f18:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010f1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d102      	bne.n	8010f26 <tcp_write+0x7e>
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f24:	e000      	b.n	8010f28 <tcp_write+0x80>
 8010f26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010f28:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010f2a:	68bb      	ldr	r3, [r7, #8]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d109      	bne.n	8010f44 <tcp_write+0x9c>
 8010f30:	4b95      	ldr	r3, [pc, #596]	; (8011188 <tcp_write+0x2e0>)
 8010f32:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8010f36:	4997      	ldr	r1, [pc, #604]	; (8011194 <tcp_write+0x2ec>)
 8010f38:	4895      	ldr	r0, [pc, #596]	; (8011190 <tcp_write+0x2e8>)
 8010f3a:	f006 ff47 	bl	8017dcc <iprintf>
 8010f3e:	f06f 030f 	mvn.w	r3, #15
 8010f42:	e30c      	b.n	801155e <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010f44:	88fb      	ldrh	r3, [r7, #6]
 8010f46:	4619      	mov	r1, r3
 8010f48:	68f8      	ldr	r0, [r7, #12]
 8010f4a:	f7ff ff33 	bl	8010db4 <tcp_write_checks>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010f54:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d002      	beq.n	8010f62 <tcp_write+0xba>
    return err;
 8010f5c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010f60:	e2fd      	b.n	801155e <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f68:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	f000 80f7 	beq.w	801116a <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f80:	653b      	str	r3, [r7, #80]	; 0x50
 8010f82:	e002      	b.n	8010f8a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8010f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d1f8      	bne.n	8010f84 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f94:	7a9b      	ldrb	r3, [r3, #10]
 8010f96:	009b      	lsls	r3, r3, #2
 8010f98:	b29b      	uxth	r3, r3
 8010f9a:	f003 0304 	and.w	r3, r3, #4
 8010f9e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010fa0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fa4:	891b      	ldrh	r3, [r3, #8]
 8010fa6:	4619      	mov	r1, r3
 8010fa8:	8c3b      	ldrh	r3, [r7, #32]
 8010faa:	440b      	add	r3, r1
 8010fac:	429a      	cmp	r2, r3
 8010fae:	da06      	bge.n	8010fbe <tcp_write+0x116>
 8010fb0:	4b75      	ldr	r3, [pc, #468]	; (8011188 <tcp_write+0x2e0>)
 8010fb2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010fb6:	4978      	ldr	r1, [pc, #480]	; (8011198 <tcp_write+0x2f0>)
 8010fb8:	4875      	ldr	r0, [pc, #468]	; (8011190 <tcp_write+0x2e8>)
 8010fba:	f006 ff07 	bl	8017dcc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fc0:	891a      	ldrh	r2, [r3, #8]
 8010fc2:	8c3b      	ldrh	r3, [r7, #32]
 8010fc4:	4413      	add	r3, r2
 8010fc6:	b29b      	uxth	r3, r3
 8010fc8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010fca:	1ad3      	subs	r3, r2, r3
 8010fcc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010fd4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010fd6:	8a7b      	ldrh	r3, [r7, #18]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d027      	beq.n	801102c <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010fdc:	8a7b      	ldrh	r3, [r7, #18]
 8010fde:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	d206      	bcs.n	8010ff2 <tcp_write+0x14a>
 8010fe4:	4b68      	ldr	r3, [pc, #416]	; (8011188 <tcp_write+0x2e0>)
 8010fe6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8010fea:	496c      	ldr	r1, [pc, #432]	; (801119c <tcp_write+0x2f4>)
 8010fec:	4868      	ldr	r0, [pc, #416]	; (8011190 <tcp_write+0x2e8>)
 8010fee:	f006 feed 	bl	8017dcc <iprintf>
      seg = last_unsent;
 8010ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010ff6:	8a7b      	ldrh	r3, [r7, #18]
 8010ff8:	88fa      	ldrh	r2, [r7, #6]
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	d901      	bls.n	8011002 <tcp_write+0x15a>
 8010ffe:	8a7b      	ldrh	r3, [r7, #18]
 8011000:	e000      	b.n	8011004 <tcp_write+0x15c>
 8011002:	88fb      	ldrh	r3, [r7, #6]
 8011004:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011006:	4293      	cmp	r3, r2
 8011008:	bfa8      	it	ge
 801100a:	4613      	movge	r3, r2
 801100c:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801100e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011012:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011014:	4413      	add	r3, r2
 8011016:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801101a:	8a7a      	ldrh	r2, [r7, #18]
 801101c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801101e:	1ad3      	subs	r3, r2, r3
 8011020:	b29b      	uxth	r3, r3
 8011022:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011024:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011026:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011028:	1ad3      	subs	r3, r2, r3
 801102a:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801102c:	8a7b      	ldrh	r3, [r7, #18]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d00b      	beq.n	801104a <tcp_write+0x1a2>
 8011032:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011036:	88fb      	ldrh	r3, [r7, #6]
 8011038:	429a      	cmp	r2, r3
 801103a:	d006      	beq.n	801104a <tcp_write+0x1a2>
 801103c:	4b52      	ldr	r3, [pc, #328]	; (8011188 <tcp_write+0x2e0>)
 801103e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011042:	4957      	ldr	r1, [pc, #348]	; (80111a0 <tcp_write+0x2f8>)
 8011044:	4852      	ldr	r0, [pc, #328]	; (8011190 <tcp_write+0x2e8>)
 8011046:	f006 fec1 	bl	8017dcc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801104a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801104e:	88fb      	ldrh	r3, [r7, #6]
 8011050:	429a      	cmp	r2, r3
 8011052:	f080 8168 	bcs.w	8011326 <tcp_write+0x47e>
 8011056:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011058:	2b00      	cmp	r3, #0
 801105a:	f000 8164 	beq.w	8011326 <tcp_write+0x47e>
 801105e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011060:	891b      	ldrh	r3, [r3, #8]
 8011062:	2b00      	cmp	r3, #0
 8011064:	f000 815f 	beq.w	8011326 <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011068:	88fa      	ldrh	r2, [r7, #6]
 801106a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801106e:	1ad2      	subs	r2, r2, r3
 8011070:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011072:	4293      	cmp	r3, r2
 8011074:	bfa8      	it	ge
 8011076:	4613      	movge	r3, r2
 8011078:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801107a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801107c:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801107e:	797b      	ldrb	r3, [r7, #5]
 8011080:	f003 0301 	and.w	r3, r3, #1
 8011084:	2b00      	cmp	r3, #0
 8011086:	d027      	beq.n	80110d8 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011088:	f107 0012 	add.w	r0, r7, #18
 801108c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801108e:	8bf9      	ldrh	r1, [r7, #30]
 8011090:	2301      	movs	r3, #1
 8011092:	9302      	str	r3, [sp, #8]
 8011094:	797b      	ldrb	r3, [r7, #5]
 8011096:	9301      	str	r3, [sp, #4]
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	9300      	str	r3, [sp, #0]
 801109c:	4603      	mov	r3, r0
 801109e:	2000      	movs	r0, #0
 80110a0:	f7ff fe0e 	bl	8010cc0 <tcp_pbuf_prealloc>
 80110a4:	6578      	str	r0, [r7, #84]	; 0x54
 80110a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	f000 8226 	beq.w	80114fa <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80110ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110b0:	6858      	ldr	r0, [r3, #4]
 80110b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80110b6:	68ba      	ldr	r2, [r7, #8]
 80110b8:	4413      	add	r3, r2
 80110ba:	8bfa      	ldrh	r2, [r7, #30]
 80110bc:	4619      	mov	r1, r3
 80110be:	f006 fe58 	bl	8017d72 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80110c2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80110c4:	f7fb f992 	bl	800c3ec <pbuf_clen>
 80110c8:	4603      	mov	r3, r0
 80110ca:	461a      	mov	r2, r3
 80110cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80110d0:	4413      	add	r3, r2
 80110d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80110d6:	e041      	b.n	801115c <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80110d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110da:	685b      	ldr	r3, [r3, #4]
 80110dc:	637b      	str	r3, [r7, #52]	; 0x34
 80110de:	e002      	b.n	80110e6 <tcp_write+0x23e>
 80110e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	637b      	str	r3, [r7, #52]	; 0x34
 80110e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d1f8      	bne.n	80110e0 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80110ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110f0:	7b1b      	ldrb	r3, [r3, #12]
 80110f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d115      	bne.n	8011126 <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80110fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110fc:	685b      	ldr	r3, [r3, #4]
 80110fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011100:	8952      	ldrh	r2, [r2, #10]
 8011102:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011104:	68ba      	ldr	r2, [r7, #8]
 8011106:	429a      	cmp	r2, r3
 8011108:	d10d      	bne.n	8011126 <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801110a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801110e:	2b00      	cmp	r3, #0
 8011110:	d006      	beq.n	8011120 <tcp_write+0x278>
 8011112:	4b1d      	ldr	r3, [pc, #116]	; (8011188 <tcp_write+0x2e0>)
 8011114:	f240 2231 	movw	r2, #561	; 0x231
 8011118:	4922      	ldr	r1, [pc, #136]	; (80111a4 <tcp_write+0x2fc>)
 801111a:	481d      	ldr	r0, [pc, #116]	; (8011190 <tcp_write+0x2e8>)
 801111c:	f006 fe56 	bl	8017dcc <iprintf>
          extendlen = seglen;
 8011120:	8bfb      	ldrh	r3, [r7, #30]
 8011122:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011124:	e01a      	b.n	801115c <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011126:	8bfb      	ldrh	r3, [r7, #30]
 8011128:	2201      	movs	r2, #1
 801112a:	4619      	mov	r1, r3
 801112c:	2000      	movs	r0, #0
 801112e:	f7fa fdef 	bl	800bd10 <pbuf_alloc>
 8011132:	6578      	str	r0, [r7, #84]	; 0x54
 8011134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011136:	2b00      	cmp	r3, #0
 8011138:	f000 81e1 	beq.w	80114fe <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801113c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011140:	68ba      	ldr	r2, [r7, #8]
 8011142:	441a      	add	r2, r3
 8011144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011146:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011148:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801114a:	f7fb f94f 	bl	800c3ec <pbuf_clen>
 801114e:	4603      	mov	r3, r0
 8011150:	461a      	mov	r2, r3
 8011152:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011156:	4413      	add	r3, r2
 8011158:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801115c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011160:	8bfb      	ldrh	r3, [r7, #30]
 8011162:	4413      	add	r3, r2
 8011164:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011168:	e0dd      	b.n	8011326 <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011170:	2b00      	cmp	r3, #0
 8011172:	f000 80d8 	beq.w	8011326 <tcp_write+0x47e>
 8011176:	4b04      	ldr	r3, [pc, #16]	; (8011188 <tcp_write+0x2e0>)
 8011178:	f240 224b 	movw	r2, #587	; 0x24b
 801117c:	490a      	ldr	r1, [pc, #40]	; (80111a8 <tcp_write+0x300>)
 801117e:	4804      	ldr	r0, [pc, #16]	; (8011190 <tcp_write+0x2e8>)
 8011180:	f006 fe24 	bl	8017dcc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011184:	e0cf      	b.n	8011326 <tcp_write+0x47e>
 8011186:	bf00      	nop
 8011188:	0801b654 	.word	0x0801b654
 801118c:	0801b7f4 	.word	0x0801b7f4
 8011190:	0801b6a8 	.word	0x0801b6a8
 8011194:	0801b80c 	.word	0x0801b80c
 8011198:	0801b840 	.word	0x0801b840
 801119c:	0801b858 	.word	0x0801b858
 80111a0:	0801b878 	.word	0x0801b878
 80111a4:	0801b898 	.word	0x0801b898
 80111a8:	0801b8c4 	.word	0x0801b8c4
    struct pbuf *p;
    u16_t left = len - pos;
 80111ac:	88fa      	ldrh	r2, [r7, #6]
 80111ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80111b2:	1ad3      	subs	r3, r2, r3
 80111b4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80111b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80111ba:	b29b      	uxth	r3, r3
 80111bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80111be:	1ad3      	subs	r3, r2, r3
 80111c0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80111c2:	8b7a      	ldrh	r2, [r7, #26]
 80111c4:	8bbb      	ldrh	r3, [r7, #28]
 80111c6:	4293      	cmp	r3, r2
 80111c8:	bf28      	it	cs
 80111ca:	4613      	movcs	r3, r2
 80111cc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80111ce:	797b      	ldrb	r3, [r7, #5]
 80111d0:	f003 0301 	and.w	r3, r3, #1
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d036      	beq.n	8011246 <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80111d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80111dc:	b29a      	uxth	r2, r3
 80111de:	8b3b      	ldrh	r3, [r7, #24]
 80111e0:	4413      	add	r3, r2
 80111e2:	b299      	uxth	r1, r3
 80111e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	bf0c      	ite	eq
 80111ea:	2301      	moveq	r3, #1
 80111ec:	2300      	movne	r3, #0
 80111ee:	b2db      	uxtb	r3, r3
 80111f0:	f107 0012 	add.w	r0, r7, #18
 80111f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80111f6:	9302      	str	r3, [sp, #8]
 80111f8:	797b      	ldrb	r3, [r7, #5]
 80111fa:	9301      	str	r3, [sp, #4]
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	9300      	str	r3, [sp, #0]
 8011200:	4603      	mov	r3, r0
 8011202:	2036      	movs	r0, #54	; 0x36
 8011204:	f7ff fd5c 	bl	8010cc0 <tcp_pbuf_prealloc>
 8011208:	6338      	str	r0, [r7, #48]	; 0x30
 801120a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801120c:	2b00      	cmp	r3, #0
 801120e:	f000 8178 	beq.w	8011502 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011214:	895b      	ldrh	r3, [r3, #10]
 8011216:	8b3a      	ldrh	r2, [r7, #24]
 8011218:	429a      	cmp	r2, r3
 801121a:	d906      	bls.n	801122a <tcp_write+0x382>
 801121c:	4b8c      	ldr	r3, [pc, #560]	; (8011450 <tcp_write+0x5a8>)
 801121e:	f240 2267 	movw	r2, #615	; 0x267
 8011222:	498c      	ldr	r1, [pc, #560]	; (8011454 <tcp_write+0x5ac>)
 8011224:	488c      	ldr	r0, [pc, #560]	; (8011458 <tcp_write+0x5b0>)
 8011226:	f006 fdd1 	bl	8017dcc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801122a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801122c:	685a      	ldr	r2, [r3, #4]
 801122e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011232:	18d0      	adds	r0, r2, r3
 8011234:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011238:	68ba      	ldr	r2, [r7, #8]
 801123a:	4413      	add	r3, r2
 801123c:	8b3a      	ldrh	r2, [r7, #24]
 801123e:	4619      	mov	r1, r3
 8011240:	f006 fd97 	bl	8017d72 <memcpy>
 8011244:	e02f      	b.n	80112a6 <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011246:	8a7b      	ldrh	r3, [r7, #18]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d006      	beq.n	801125a <tcp_write+0x3b2>
 801124c:	4b80      	ldr	r3, [pc, #512]	; (8011450 <tcp_write+0x5a8>)
 801124e:	f240 2271 	movw	r2, #625	; 0x271
 8011252:	4982      	ldr	r1, [pc, #520]	; (801145c <tcp_write+0x5b4>)
 8011254:	4880      	ldr	r0, [pc, #512]	; (8011458 <tcp_write+0x5b0>)
 8011256:	f006 fdb9 	bl	8017dcc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801125a:	8b3b      	ldrh	r3, [r7, #24]
 801125c:	2201      	movs	r2, #1
 801125e:	4619      	mov	r1, r3
 8011260:	2036      	movs	r0, #54	; 0x36
 8011262:	f7fa fd55 	bl	800bd10 <pbuf_alloc>
 8011266:	6178      	str	r0, [r7, #20]
 8011268:	697b      	ldr	r3, [r7, #20]
 801126a:	2b00      	cmp	r3, #0
 801126c:	f000 814b 	beq.w	8011506 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011270:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011274:	68ba      	ldr	r2, [r7, #8]
 8011276:	441a      	add	r2, r3
 8011278:	697b      	ldr	r3, [r7, #20]
 801127a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801127c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011280:	b29b      	uxth	r3, r3
 8011282:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011286:	4619      	mov	r1, r3
 8011288:	2036      	movs	r0, #54	; 0x36
 801128a:	f7fa fd41 	bl	800bd10 <pbuf_alloc>
 801128e:	6338      	str	r0, [r7, #48]	; 0x30
 8011290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011292:	2b00      	cmp	r3, #0
 8011294:	d103      	bne.n	801129e <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011296:	6978      	ldr	r0, [r7, #20]
 8011298:	f7fb f81a 	bl	800c2d0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801129c:	e136      	b.n	801150c <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801129e:	6979      	ldr	r1, [r7, #20]
 80112a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112a2:	f7fb f8e3 	bl	800c46c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80112a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112a8:	f7fb f8a0 	bl	800c3ec <pbuf_clen>
 80112ac:	4603      	mov	r3, r0
 80112ae:	461a      	mov	r2, r3
 80112b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80112b4:	4413      	add	r3, r2
 80112b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80112ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80112be:	2b09      	cmp	r3, #9
 80112c0:	d903      	bls.n	80112ca <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80112c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112c4:	f7fb f804 	bl	800c2d0 <pbuf_free>
      goto memerr;
 80112c8:	e120      	b.n	801150c <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80112ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80112d2:	441a      	add	r2, r3
 80112d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80112d8:	9300      	str	r3, [sp, #0]
 80112da:	4613      	mov	r3, r2
 80112dc:	2200      	movs	r2, #0
 80112de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80112e0:	68f8      	ldr	r0, [r7, #12]
 80112e2:	f7ff fc4f 	bl	8010b84 <tcp_create_segment>
 80112e6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80112e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	f000 810d 	beq.w	801150a <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80112f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d102      	bne.n	80112fc <tcp_write+0x454>
      queue = seg;
 80112f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112f8:	647b      	str	r3, [r7, #68]	; 0x44
 80112fa:	e00c      	b.n	8011316 <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80112fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d106      	bne.n	8011310 <tcp_write+0x468>
 8011302:	4b53      	ldr	r3, [pc, #332]	; (8011450 <tcp_write+0x5a8>)
 8011304:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011308:	4955      	ldr	r1, [pc, #340]	; (8011460 <tcp_write+0x5b8>)
 801130a:	4853      	ldr	r0, [pc, #332]	; (8011458 <tcp_write+0x5b0>)
 801130c:	f006 fd5e 	bl	8017dcc <iprintf>
      prev_seg->next = seg;
 8011310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011312:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011314:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011318:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801131a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801131e:	8b3b      	ldrh	r3, [r7, #24]
 8011320:	4413      	add	r3, r2
 8011322:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8011326:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801132a:	88fb      	ldrh	r3, [r7, #6]
 801132c:	429a      	cmp	r2, r3
 801132e:	f4ff af3d 	bcc.w	80111ac <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011332:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011334:	2b00      	cmp	r3, #0
 8011336:	d02c      	beq.n	8011392 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801133a:	685b      	ldr	r3, [r3, #4]
 801133c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801133e:	e01e      	b.n	801137e <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 8011340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011342:	891a      	ldrh	r2, [r3, #8]
 8011344:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011346:	4413      	add	r3, r2
 8011348:	b29a      	uxth	r2, r3
 801134a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801134c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801134e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d110      	bne.n	8011378 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011358:	685b      	ldr	r3, [r3, #4]
 801135a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801135c:	8952      	ldrh	r2, [r2, #10]
 801135e:	4413      	add	r3, r2
 8011360:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011362:	68b9      	ldr	r1, [r7, #8]
 8011364:	4618      	mov	r0, r3
 8011366:	f006 fd04 	bl	8017d72 <memcpy>
        p->len += oversize_used;
 801136a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801136c:	895a      	ldrh	r2, [r3, #10]
 801136e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011370:	4413      	add	r3, r2
 8011372:	b29a      	uxth	r2, r3
 8011374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011376:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8011378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801137e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011380:	2b00      	cmp	r3, #0
 8011382:	d1dd      	bne.n	8011340 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 8011384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011386:	891a      	ldrh	r2, [r3, #8]
 8011388:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801138a:	4413      	add	r3, r2
 801138c:	b29a      	uxth	r2, r3
 801138e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011390:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8011392:	8a7a      	ldrh	r2, [r7, #18]
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801139a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801139c:	2b00      	cmp	r3, #0
 801139e:	d018      	beq.n	80113d2 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80113a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d106      	bne.n	80113b4 <tcp_write+0x50c>
 80113a6:	4b2a      	ldr	r3, [pc, #168]	; (8011450 <tcp_write+0x5a8>)
 80113a8:	f240 22e1 	movw	r2, #737	; 0x2e1
 80113ac:	492d      	ldr	r1, [pc, #180]	; (8011464 <tcp_write+0x5bc>)
 80113ae:	482a      	ldr	r0, [pc, #168]	; (8011458 <tcp_write+0x5b0>)
 80113b0:	f006 fd0c 	bl	8017dcc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80113b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113b6:	685b      	ldr	r3, [r3, #4]
 80113b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80113ba:	4618      	mov	r0, r3
 80113bc:	f7fb f856 	bl	800c46c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80113c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113c2:	891a      	ldrh	r2, [r3, #8]
 80113c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113c6:	891b      	ldrh	r3, [r3, #8]
 80113c8:	4413      	add	r3, r2
 80113ca:	b29a      	uxth	r2, r3
 80113cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113ce:	811a      	strh	r2, [r3, #8]
 80113d0:	e037      	b.n	8011442 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 80113d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d034      	beq.n	8011442 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80113d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d003      	beq.n	80113e6 <tcp_write+0x53e>
 80113de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113e0:	685b      	ldr	r3, [r3, #4]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d106      	bne.n	80113f4 <tcp_write+0x54c>
 80113e6:	4b1a      	ldr	r3, [pc, #104]	; (8011450 <tcp_write+0x5a8>)
 80113e8:	f240 22e7 	movw	r2, #743	; 0x2e7
 80113ec:	491e      	ldr	r1, [pc, #120]	; (8011468 <tcp_write+0x5c0>)
 80113ee:	481a      	ldr	r0, [pc, #104]	; (8011458 <tcp_write+0x5b0>)
 80113f0:	f006 fcec 	bl	8017dcc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80113f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113f6:	685b      	ldr	r3, [r3, #4]
 80113f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80113fa:	e009      	b.n	8011410 <tcp_write+0x568>
      p->tot_len += extendlen;
 80113fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113fe:	891a      	ldrh	r2, [r3, #8]
 8011400:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011402:	4413      	add	r3, r2
 8011404:	b29a      	uxth	r2, r3
 8011406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011408:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801140a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d1f1      	bne.n	80113fc <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8011418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801141a:	891a      	ldrh	r2, [r3, #8]
 801141c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801141e:	4413      	add	r3, r2
 8011420:	b29a      	uxth	r2, r3
 8011422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011424:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011428:	895a      	ldrh	r2, [r3, #10]
 801142a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801142c:	4413      	add	r3, r2
 801142e:	b29a      	uxth	r2, r3
 8011430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011432:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011436:	891a      	ldrh	r2, [r3, #8]
 8011438:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801143a:	4413      	add	r3, r2
 801143c:	b29a      	uxth	r2, r3
 801143e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011440:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011444:	2b00      	cmp	r3, #0
 8011446:	d111      	bne.n	801146c <tcp_write+0x5c4>
    pcb->unsent = queue;
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801144c:	66da      	str	r2, [r3, #108]	; 0x6c
 801144e:	e010      	b.n	8011472 <tcp_write+0x5ca>
 8011450:	0801b654 	.word	0x0801b654
 8011454:	0801b8f4 	.word	0x0801b8f4
 8011458:	0801b6a8 	.word	0x0801b6a8
 801145c:	0801b934 	.word	0x0801b934
 8011460:	0801b944 	.word	0x0801b944
 8011464:	0801b958 	.word	0x0801b958
 8011468:	0801b990 	.word	0x0801b990
  } else {
    last_unsent->next = queue;
 801146c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801146e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011470:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011476:	88fb      	ldrh	r3, [r7, #6]
 8011478:	441a      	add	r2, r3
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011484:	88fb      	ldrh	r3, [r7, #6]
 8011486:	1ad3      	subs	r3, r2, r3
 8011488:	b29a      	uxth	r2, r3
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011496:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d00e      	beq.n	80114c2 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d10a      	bne.n	80114c2 <tcp_write+0x61a>
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d106      	bne.n	80114c2 <tcp_write+0x61a>
 80114b4:	4b2c      	ldr	r3, [pc, #176]	; (8011568 <tcp_write+0x6c0>)
 80114b6:	f240 3213 	movw	r2, #787	; 0x313
 80114ba:	492c      	ldr	r1, [pc, #176]	; (801156c <tcp_write+0x6c4>)
 80114bc:	482c      	ldr	r0, [pc, #176]	; (8011570 <tcp_write+0x6c8>)
 80114be:	f006 fc85 	bl	8017dcc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80114c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d016      	beq.n	80114f6 <tcp_write+0x64e>
 80114c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114ca:	68db      	ldr	r3, [r3, #12]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d012      	beq.n	80114f6 <tcp_write+0x64e>
 80114d0:	797b      	ldrb	r3, [r7, #5]
 80114d2:	f003 0302 	and.w	r3, r3, #2
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d10d      	bne.n	80114f6 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80114da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114dc:	68db      	ldr	r3, [r3, #12]
 80114de:	899b      	ldrh	r3, [r3, #12]
 80114e0:	b29c      	uxth	r4, r3
 80114e2:	2008      	movs	r0, #8
 80114e4:	f7f9 fb0a 	bl	800aafc <lwip_htons>
 80114e8:	4603      	mov	r3, r0
 80114ea:	461a      	mov	r2, r3
 80114ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114ee:	68db      	ldr	r3, [r3, #12]
 80114f0:	4322      	orrs	r2, r4
 80114f2:	b292      	uxth	r2, r2
 80114f4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80114f6:	2300      	movs	r3, #0
 80114f8:	e031      	b.n	801155e <tcp_write+0x6b6>
          goto memerr;
 80114fa:	bf00      	nop
 80114fc:	e006      	b.n	801150c <tcp_write+0x664>
            goto memerr;
 80114fe:	bf00      	nop
 8011500:	e004      	b.n	801150c <tcp_write+0x664>
        goto memerr;
 8011502:	bf00      	nop
 8011504:	e002      	b.n	801150c <tcp_write+0x664>
        goto memerr;
 8011506:	bf00      	nop
 8011508:	e000      	b.n	801150c <tcp_write+0x664>
      goto memerr;
 801150a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	8b5b      	ldrh	r3, [r3, #26]
 8011510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011514:	b29a      	uxth	r2, r3
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801151a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801151c:	2b00      	cmp	r3, #0
 801151e:	d002      	beq.n	8011526 <tcp_write+0x67e>
    pbuf_free(concat_p);
 8011520:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011522:	f7fa fed5 	bl	800c2d0 <pbuf_free>
  }
  if (queue != NULL) {
 8011526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011528:	2b00      	cmp	r3, #0
 801152a:	d002      	beq.n	8011532 <tcp_write+0x68a>
    tcp_segs_free(queue);
 801152c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801152e:	f7fc fb53 	bl	800dbd8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011538:	2b00      	cmp	r3, #0
 801153a:	d00e      	beq.n	801155a <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011540:	2b00      	cmp	r3, #0
 8011542:	d10a      	bne.n	801155a <tcp_write+0x6b2>
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011548:	2b00      	cmp	r3, #0
 801154a:	d106      	bne.n	801155a <tcp_write+0x6b2>
 801154c:	4b06      	ldr	r3, [pc, #24]	; (8011568 <tcp_write+0x6c0>)
 801154e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8011552:	4906      	ldr	r1, [pc, #24]	; (801156c <tcp_write+0x6c4>)
 8011554:	4806      	ldr	r0, [pc, #24]	; (8011570 <tcp_write+0x6c8>)
 8011556:	f006 fc39 	bl	8017dcc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801155a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801155e:	4618      	mov	r0, r3
 8011560:	375c      	adds	r7, #92	; 0x5c
 8011562:	46bd      	mov	sp, r7
 8011564:	bd90      	pop	{r4, r7, pc}
 8011566:	bf00      	nop
 8011568:	0801b654 	.word	0x0801b654
 801156c:	0801b9c8 	.word	0x0801b9c8
 8011570:	0801b6a8 	.word	0x0801b6a8

08011574 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011574:	b590      	push	{r4, r7, lr}
 8011576:	b08b      	sub	sp, #44	; 0x2c
 8011578:	af02      	add	r7, sp, #8
 801157a:	6078      	str	r0, [r7, #4]
 801157c:	460b      	mov	r3, r1
 801157e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011580:	2300      	movs	r3, #0
 8011582:	61fb      	str	r3, [r7, #28]
 8011584:	2300      	movs	r3, #0
 8011586:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011588:	2300      	movs	r3, #0
 801158a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d106      	bne.n	80115a0 <tcp_split_unsent_seg+0x2c>
 8011592:	4b95      	ldr	r3, [pc, #596]	; (80117e8 <tcp_split_unsent_seg+0x274>)
 8011594:	f240 324b 	movw	r2, #843	; 0x34b
 8011598:	4994      	ldr	r1, [pc, #592]	; (80117ec <tcp_split_unsent_seg+0x278>)
 801159a:	4895      	ldr	r0, [pc, #596]	; (80117f0 <tcp_split_unsent_seg+0x27c>)
 801159c:	f006 fc16 	bl	8017dcc <iprintf>

  useg = pcb->unsent;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115a4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80115a6:	697b      	ldr	r3, [r7, #20]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d102      	bne.n	80115b2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80115ac:	f04f 33ff 	mov.w	r3, #4294967295
 80115b0:	e116      	b.n	80117e0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80115b2:	887b      	ldrh	r3, [r7, #2]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d109      	bne.n	80115cc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80115b8:	4b8b      	ldr	r3, [pc, #556]	; (80117e8 <tcp_split_unsent_seg+0x274>)
 80115ba:	f240 3253 	movw	r2, #851	; 0x353
 80115be:	498d      	ldr	r1, [pc, #564]	; (80117f4 <tcp_split_unsent_seg+0x280>)
 80115c0:	488b      	ldr	r0, [pc, #556]	; (80117f0 <tcp_split_unsent_seg+0x27c>)
 80115c2:	f006 fc03 	bl	8017dcc <iprintf>
    return ERR_VAL;
 80115c6:	f06f 0305 	mvn.w	r3, #5
 80115ca:	e109      	b.n	80117e0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80115cc:	697b      	ldr	r3, [r7, #20]
 80115ce:	891b      	ldrh	r3, [r3, #8]
 80115d0:	887a      	ldrh	r2, [r7, #2]
 80115d2:	429a      	cmp	r2, r3
 80115d4:	d301      	bcc.n	80115da <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80115d6:	2300      	movs	r3, #0
 80115d8:	e102      	b.n	80117e0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115de:	887a      	ldrh	r2, [r7, #2]
 80115e0:	429a      	cmp	r2, r3
 80115e2:	d906      	bls.n	80115f2 <tcp_split_unsent_seg+0x7e>
 80115e4:	4b80      	ldr	r3, [pc, #512]	; (80117e8 <tcp_split_unsent_seg+0x274>)
 80115e6:	f240 325b 	movw	r2, #859	; 0x35b
 80115ea:	4983      	ldr	r1, [pc, #524]	; (80117f8 <tcp_split_unsent_seg+0x284>)
 80115ec:	4880      	ldr	r0, [pc, #512]	; (80117f0 <tcp_split_unsent_seg+0x27c>)
 80115ee:	f006 fbed 	bl	8017dcc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80115f2:	697b      	ldr	r3, [r7, #20]
 80115f4:	891b      	ldrh	r3, [r3, #8]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d106      	bne.n	8011608 <tcp_split_unsent_seg+0x94>
 80115fa:	4b7b      	ldr	r3, [pc, #492]	; (80117e8 <tcp_split_unsent_seg+0x274>)
 80115fc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011600:	497e      	ldr	r1, [pc, #504]	; (80117fc <tcp_split_unsent_seg+0x288>)
 8011602:	487b      	ldr	r0, [pc, #492]	; (80117f0 <tcp_split_unsent_seg+0x27c>)
 8011604:	f006 fbe2 	bl	8017dcc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011608:	697b      	ldr	r3, [r7, #20]
 801160a:	7a9b      	ldrb	r3, [r3, #10]
 801160c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801160e:	7bfb      	ldrb	r3, [r7, #15]
 8011610:	009b      	lsls	r3, r3, #2
 8011612:	b2db      	uxtb	r3, r3
 8011614:	f003 0304 	and.w	r3, r3, #4
 8011618:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	891a      	ldrh	r2, [r3, #8]
 801161e:	887b      	ldrh	r3, [r7, #2]
 8011620:	1ad3      	subs	r3, r2, r3
 8011622:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011624:	7bbb      	ldrb	r3, [r7, #14]
 8011626:	b29a      	uxth	r2, r3
 8011628:	89bb      	ldrh	r3, [r7, #12]
 801162a:	4413      	add	r3, r2
 801162c:	b29b      	uxth	r3, r3
 801162e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011632:	4619      	mov	r1, r3
 8011634:	2036      	movs	r0, #54	; 0x36
 8011636:	f7fa fb6b 	bl	800bd10 <pbuf_alloc>
 801163a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801163c:	693b      	ldr	r3, [r7, #16]
 801163e:	2b00      	cmp	r3, #0
 8011640:	f000 80b7 	beq.w	80117b2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011644:	697b      	ldr	r3, [r7, #20]
 8011646:	685b      	ldr	r3, [r3, #4]
 8011648:	891a      	ldrh	r2, [r3, #8]
 801164a:	697b      	ldr	r3, [r7, #20]
 801164c:	891b      	ldrh	r3, [r3, #8]
 801164e:	1ad3      	subs	r3, r2, r3
 8011650:	b29a      	uxth	r2, r3
 8011652:	887b      	ldrh	r3, [r7, #2]
 8011654:	4413      	add	r3, r2
 8011656:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011658:	697b      	ldr	r3, [r7, #20]
 801165a:	6858      	ldr	r0, [r3, #4]
 801165c:	693b      	ldr	r3, [r7, #16]
 801165e:	685a      	ldr	r2, [r3, #4]
 8011660:	7bbb      	ldrb	r3, [r7, #14]
 8011662:	18d1      	adds	r1, r2, r3
 8011664:	897b      	ldrh	r3, [r7, #10]
 8011666:	89ba      	ldrh	r2, [r7, #12]
 8011668:	f7fb f838 	bl	800c6dc <pbuf_copy_partial>
 801166c:	4603      	mov	r3, r0
 801166e:	461a      	mov	r2, r3
 8011670:	89bb      	ldrh	r3, [r7, #12]
 8011672:	4293      	cmp	r3, r2
 8011674:	f040 809f 	bne.w	80117b6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011678:	697b      	ldr	r3, [r7, #20]
 801167a:	68db      	ldr	r3, [r3, #12]
 801167c:	899b      	ldrh	r3, [r3, #12]
 801167e:	b29b      	uxth	r3, r3
 8011680:	4618      	mov	r0, r3
 8011682:	f7f9 fa3b 	bl	800aafc <lwip_htons>
 8011686:	4603      	mov	r3, r0
 8011688:	b2db      	uxtb	r3, r3
 801168a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801168e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011690:	2300      	movs	r3, #0
 8011692:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011694:	7efb      	ldrb	r3, [r7, #27]
 8011696:	f003 0308 	and.w	r3, r3, #8
 801169a:	2b00      	cmp	r3, #0
 801169c:	d007      	beq.n	80116ae <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801169e:	7efb      	ldrb	r3, [r7, #27]
 80116a0:	f023 0308 	bic.w	r3, r3, #8
 80116a4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80116a6:	7ebb      	ldrb	r3, [r7, #26]
 80116a8:	f043 0308 	orr.w	r3, r3, #8
 80116ac:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80116ae:	7efb      	ldrb	r3, [r7, #27]
 80116b0:	f003 0301 	and.w	r3, r3, #1
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d007      	beq.n	80116c8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80116b8:	7efb      	ldrb	r3, [r7, #27]
 80116ba:	f023 0301 	bic.w	r3, r3, #1
 80116be:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80116c0:	7ebb      	ldrb	r3, [r7, #26]
 80116c2:	f043 0301 	orr.w	r3, r3, #1
 80116c6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80116c8:	697b      	ldr	r3, [r7, #20]
 80116ca:	68db      	ldr	r3, [r3, #12]
 80116cc:	685b      	ldr	r3, [r3, #4]
 80116ce:	4618      	mov	r0, r3
 80116d0:	f7f9 fa29 	bl	800ab26 <lwip_htonl>
 80116d4:	4602      	mov	r2, r0
 80116d6:	887b      	ldrh	r3, [r7, #2]
 80116d8:	18d1      	adds	r1, r2, r3
 80116da:	7eba      	ldrb	r2, [r7, #26]
 80116dc:	7bfb      	ldrb	r3, [r7, #15]
 80116de:	9300      	str	r3, [sp, #0]
 80116e0:	460b      	mov	r3, r1
 80116e2:	6939      	ldr	r1, [r7, #16]
 80116e4:	6878      	ldr	r0, [r7, #4]
 80116e6:	f7ff fa4d 	bl	8010b84 <tcp_create_segment>
 80116ea:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80116ec:	69fb      	ldr	r3, [r7, #28]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d063      	beq.n	80117ba <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80116f2:	697b      	ldr	r3, [r7, #20]
 80116f4:	685b      	ldr	r3, [r3, #4]
 80116f6:	4618      	mov	r0, r3
 80116f8:	f7fa fe78 	bl	800c3ec <pbuf_clen>
 80116fc:	4603      	mov	r3, r0
 80116fe:	461a      	mov	r2, r3
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011706:	1a9b      	subs	r3, r3, r2
 8011708:	b29a      	uxth	r2, r3
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011710:	697b      	ldr	r3, [r7, #20]
 8011712:	6858      	ldr	r0, [r3, #4]
 8011714:	697b      	ldr	r3, [r7, #20]
 8011716:	685b      	ldr	r3, [r3, #4]
 8011718:	891a      	ldrh	r2, [r3, #8]
 801171a:	89bb      	ldrh	r3, [r7, #12]
 801171c:	1ad3      	subs	r3, r2, r3
 801171e:	b29b      	uxth	r3, r3
 8011720:	4619      	mov	r1, r3
 8011722:	f7fa fc4f 	bl	800bfc4 <pbuf_realloc>
  useg->len -= remainder;
 8011726:	697b      	ldr	r3, [r7, #20]
 8011728:	891a      	ldrh	r2, [r3, #8]
 801172a:	89bb      	ldrh	r3, [r7, #12]
 801172c:	1ad3      	subs	r3, r2, r3
 801172e:	b29a      	uxth	r2, r3
 8011730:	697b      	ldr	r3, [r7, #20]
 8011732:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011734:	697b      	ldr	r3, [r7, #20]
 8011736:	68db      	ldr	r3, [r3, #12]
 8011738:	899b      	ldrh	r3, [r3, #12]
 801173a:	b29c      	uxth	r4, r3
 801173c:	7efb      	ldrb	r3, [r7, #27]
 801173e:	b29b      	uxth	r3, r3
 8011740:	4618      	mov	r0, r3
 8011742:	f7f9 f9db 	bl	800aafc <lwip_htons>
 8011746:	4603      	mov	r3, r0
 8011748:	461a      	mov	r2, r3
 801174a:	697b      	ldr	r3, [r7, #20]
 801174c:	68db      	ldr	r3, [r3, #12]
 801174e:	4322      	orrs	r2, r4
 8011750:	b292      	uxth	r2, r2
 8011752:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011754:	697b      	ldr	r3, [r7, #20]
 8011756:	685b      	ldr	r3, [r3, #4]
 8011758:	4618      	mov	r0, r3
 801175a:	f7fa fe47 	bl	800c3ec <pbuf_clen>
 801175e:	4603      	mov	r3, r0
 8011760:	461a      	mov	r2, r3
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011768:	4413      	add	r3, r2
 801176a:	b29a      	uxth	r2, r3
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011772:	69fb      	ldr	r3, [r7, #28]
 8011774:	685b      	ldr	r3, [r3, #4]
 8011776:	4618      	mov	r0, r3
 8011778:	f7fa fe38 	bl	800c3ec <pbuf_clen>
 801177c:	4603      	mov	r3, r0
 801177e:	461a      	mov	r2, r3
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011786:	4413      	add	r3, r2
 8011788:	b29a      	uxth	r2, r3
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011790:	697b      	ldr	r3, [r7, #20]
 8011792:	681a      	ldr	r2, [r3, #0]
 8011794:	69fb      	ldr	r3, [r7, #28]
 8011796:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011798:	697b      	ldr	r3, [r7, #20]
 801179a:	69fa      	ldr	r2, [r7, #28]
 801179c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801179e:	69fb      	ldr	r3, [r7, #28]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d103      	bne.n	80117ae <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	2200      	movs	r2, #0
 80117aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80117ae:	2300      	movs	r3, #0
 80117b0:	e016      	b.n	80117e0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80117b2:	bf00      	nop
 80117b4:	e002      	b.n	80117bc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80117b6:	bf00      	nop
 80117b8:	e000      	b.n	80117bc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80117ba:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80117bc:	69fb      	ldr	r3, [r7, #28]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d006      	beq.n	80117d0 <tcp_split_unsent_seg+0x25c>
 80117c2:	4b09      	ldr	r3, [pc, #36]	; (80117e8 <tcp_split_unsent_seg+0x274>)
 80117c4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80117c8:	490d      	ldr	r1, [pc, #52]	; (8011800 <tcp_split_unsent_seg+0x28c>)
 80117ca:	4809      	ldr	r0, [pc, #36]	; (80117f0 <tcp_split_unsent_seg+0x27c>)
 80117cc:	f006 fafe 	bl	8017dcc <iprintf>
  if (p != NULL) {
 80117d0:	693b      	ldr	r3, [r7, #16]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d002      	beq.n	80117dc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80117d6:	6938      	ldr	r0, [r7, #16]
 80117d8:	f7fa fd7a 	bl	800c2d0 <pbuf_free>
  }

  return ERR_MEM;
 80117dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80117e0:	4618      	mov	r0, r3
 80117e2:	3724      	adds	r7, #36	; 0x24
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd90      	pop	{r4, r7, pc}
 80117e8:	0801b654 	.word	0x0801b654
 80117ec:	0801b9e8 	.word	0x0801b9e8
 80117f0:	0801b6a8 	.word	0x0801b6a8
 80117f4:	0801ba0c 	.word	0x0801ba0c
 80117f8:	0801ba30 	.word	0x0801ba30
 80117fc:	0801ba40 	.word	0x0801ba40
 8011800:	0801ba50 	.word	0x0801ba50

08011804 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011804:	b590      	push	{r4, r7, lr}
 8011806:	b085      	sub	sp, #20
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d106      	bne.n	8011820 <tcp_send_fin+0x1c>
 8011812:	4b21      	ldr	r3, [pc, #132]	; (8011898 <tcp_send_fin+0x94>)
 8011814:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011818:	4920      	ldr	r1, [pc, #128]	; (801189c <tcp_send_fin+0x98>)
 801181a:	4821      	ldr	r0, [pc, #132]	; (80118a0 <tcp_send_fin+0x9c>)
 801181c:	f006 fad6 	bl	8017dcc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011824:	2b00      	cmp	r3, #0
 8011826:	d02e      	beq.n	8011886 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801182c:	60fb      	str	r3, [r7, #12]
 801182e:	e002      	b.n	8011836 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d1f8      	bne.n	8011830 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	68db      	ldr	r3, [r3, #12]
 8011842:	899b      	ldrh	r3, [r3, #12]
 8011844:	b29b      	uxth	r3, r3
 8011846:	4618      	mov	r0, r3
 8011848:	f7f9 f958 	bl	800aafc <lwip_htons>
 801184c:	4603      	mov	r3, r0
 801184e:	b2db      	uxtb	r3, r3
 8011850:	f003 0307 	and.w	r3, r3, #7
 8011854:	2b00      	cmp	r3, #0
 8011856:	d116      	bne.n	8011886 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	68db      	ldr	r3, [r3, #12]
 801185c:	899b      	ldrh	r3, [r3, #12]
 801185e:	b29c      	uxth	r4, r3
 8011860:	2001      	movs	r0, #1
 8011862:	f7f9 f94b 	bl	800aafc <lwip_htons>
 8011866:	4603      	mov	r3, r0
 8011868:	461a      	mov	r2, r3
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	68db      	ldr	r3, [r3, #12]
 801186e:	4322      	orrs	r2, r4
 8011870:	b292      	uxth	r2, r2
 8011872:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	8b5b      	ldrh	r3, [r3, #26]
 8011878:	f043 0320 	orr.w	r3, r3, #32
 801187c:	b29a      	uxth	r2, r3
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011882:	2300      	movs	r3, #0
 8011884:	e004      	b.n	8011890 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011886:	2101      	movs	r1, #1
 8011888:	6878      	ldr	r0, [r7, #4]
 801188a:	f000 f80b 	bl	80118a4 <tcp_enqueue_flags>
 801188e:	4603      	mov	r3, r0
}
 8011890:	4618      	mov	r0, r3
 8011892:	3714      	adds	r7, #20
 8011894:	46bd      	mov	sp, r7
 8011896:	bd90      	pop	{r4, r7, pc}
 8011898:	0801b654 	.word	0x0801b654
 801189c:	0801ba5c 	.word	0x0801ba5c
 80118a0:	0801b6a8 	.word	0x0801b6a8

080118a4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	b08a      	sub	sp, #40	; 0x28
 80118a8:	af02      	add	r7, sp, #8
 80118aa:	6078      	str	r0, [r7, #4]
 80118ac:	460b      	mov	r3, r1
 80118ae:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80118b0:	2300      	movs	r3, #0
 80118b2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80118b4:	2300      	movs	r3, #0
 80118b6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80118b8:	78fb      	ldrb	r3, [r7, #3]
 80118ba:	f003 0303 	and.w	r3, r3, #3
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d106      	bne.n	80118d0 <tcp_enqueue_flags+0x2c>
 80118c2:	4b67      	ldr	r3, [pc, #412]	; (8011a60 <tcp_enqueue_flags+0x1bc>)
 80118c4:	f240 4212 	movw	r2, #1042	; 0x412
 80118c8:	4966      	ldr	r1, [pc, #408]	; (8011a64 <tcp_enqueue_flags+0x1c0>)
 80118ca:	4867      	ldr	r0, [pc, #412]	; (8011a68 <tcp_enqueue_flags+0x1c4>)
 80118cc:	f006 fa7e 	bl	8017dcc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d106      	bne.n	80118e4 <tcp_enqueue_flags+0x40>
 80118d6:	4b62      	ldr	r3, [pc, #392]	; (8011a60 <tcp_enqueue_flags+0x1bc>)
 80118d8:	f240 4213 	movw	r2, #1043	; 0x413
 80118dc:	4963      	ldr	r1, [pc, #396]	; (8011a6c <tcp_enqueue_flags+0x1c8>)
 80118de:	4862      	ldr	r0, [pc, #392]	; (8011a68 <tcp_enqueue_flags+0x1c4>)
 80118e0:	f006 fa74 	bl	8017dcc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80118e4:	78fb      	ldrb	r3, [r7, #3]
 80118e6:	f003 0302 	and.w	r3, r3, #2
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d001      	beq.n	80118f2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80118ee:	2301      	movs	r3, #1
 80118f0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80118f2:	7ffb      	ldrb	r3, [r7, #31]
 80118f4:	009b      	lsls	r3, r3, #2
 80118f6:	b2db      	uxtb	r3, r3
 80118f8:	f003 0304 	and.w	r3, r3, #4
 80118fc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80118fe:	7dfb      	ldrb	r3, [r7, #23]
 8011900:	b29b      	uxth	r3, r3
 8011902:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011906:	4619      	mov	r1, r3
 8011908:	2036      	movs	r0, #54	; 0x36
 801190a:	f7fa fa01 	bl	800bd10 <pbuf_alloc>
 801190e:	6138      	str	r0, [r7, #16]
 8011910:	693b      	ldr	r3, [r7, #16]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d109      	bne.n	801192a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	8b5b      	ldrh	r3, [r3, #26]
 801191a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801191e:	b29a      	uxth	r2, r3
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011924:	f04f 33ff 	mov.w	r3, #4294967295
 8011928:	e095      	b.n	8011a56 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801192a:	693b      	ldr	r3, [r7, #16]
 801192c:	895a      	ldrh	r2, [r3, #10]
 801192e:	7dfb      	ldrb	r3, [r7, #23]
 8011930:	b29b      	uxth	r3, r3
 8011932:	429a      	cmp	r2, r3
 8011934:	d206      	bcs.n	8011944 <tcp_enqueue_flags+0xa0>
 8011936:	4b4a      	ldr	r3, [pc, #296]	; (8011a60 <tcp_enqueue_flags+0x1bc>)
 8011938:	f240 423a 	movw	r2, #1082	; 0x43a
 801193c:	494c      	ldr	r1, [pc, #304]	; (8011a70 <tcp_enqueue_flags+0x1cc>)
 801193e:	484a      	ldr	r0, [pc, #296]	; (8011a68 <tcp_enqueue_flags+0x1c4>)
 8011940:	f006 fa44 	bl	8017dcc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011948:	78fa      	ldrb	r2, [r7, #3]
 801194a:	7ffb      	ldrb	r3, [r7, #31]
 801194c:	9300      	str	r3, [sp, #0]
 801194e:	460b      	mov	r3, r1
 8011950:	6939      	ldr	r1, [r7, #16]
 8011952:	6878      	ldr	r0, [r7, #4]
 8011954:	f7ff f916 	bl	8010b84 <tcp_create_segment>
 8011958:	60f8      	str	r0, [r7, #12]
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d109      	bne.n	8011974 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	8b5b      	ldrh	r3, [r3, #26]
 8011964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011968:	b29a      	uxth	r2, r3
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801196e:	f04f 33ff 	mov.w	r3, #4294967295
 8011972:	e070      	b.n	8011a56 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	68db      	ldr	r3, [r3, #12]
 8011978:	f003 0303 	and.w	r3, r3, #3
 801197c:	2b00      	cmp	r3, #0
 801197e:	d006      	beq.n	801198e <tcp_enqueue_flags+0xea>
 8011980:	4b37      	ldr	r3, [pc, #220]	; (8011a60 <tcp_enqueue_flags+0x1bc>)
 8011982:	f240 4242 	movw	r2, #1090	; 0x442
 8011986:	493b      	ldr	r1, [pc, #236]	; (8011a74 <tcp_enqueue_flags+0x1d0>)
 8011988:	4837      	ldr	r0, [pc, #220]	; (8011a68 <tcp_enqueue_flags+0x1c4>)
 801198a:	f006 fa1f 	bl	8017dcc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	891b      	ldrh	r3, [r3, #8]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d006      	beq.n	80119a4 <tcp_enqueue_flags+0x100>
 8011996:	4b32      	ldr	r3, [pc, #200]	; (8011a60 <tcp_enqueue_flags+0x1bc>)
 8011998:	f240 4243 	movw	r2, #1091	; 0x443
 801199c:	4936      	ldr	r1, [pc, #216]	; (8011a78 <tcp_enqueue_flags+0x1d4>)
 801199e:	4832      	ldr	r0, [pc, #200]	; (8011a68 <tcp_enqueue_flags+0x1c4>)
 80119a0:	f006 fa14 	bl	8017dcc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d103      	bne.n	80119b4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	68fa      	ldr	r2, [r7, #12]
 80119b0:	66da      	str	r2, [r3, #108]	; 0x6c
 80119b2:	e00d      	b.n	80119d0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119b8:	61bb      	str	r3, [r7, #24]
 80119ba:	e002      	b.n	80119c2 <tcp_enqueue_flags+0x11e>
 80119bc:	69bb      	ldr	r3, [r7, #24]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	61bb      	str	r3, [r7, #24]
 80119c2:	69bb      	ldr	r3, [r7, #24]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d1f8      	bne.n	80119bc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80119ca:	69bb      	ldr	r3, [r7, #24]
 80119cc:	68fa      	ldr	r2, [r7, #12]
 80119ce:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2200      	movs	r2, #0
 80119d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80119d8:	78fb      	ldrb	r3, [r7, #3]
 80119da:	f003 0302 	and.w	r3, r3, #2
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d104      	bne.n	80119ec <tcp_enqueue_flags+0x148>
 80119e2:	78fb      	ldrb	r3, [r7, #3]
 80119e4:	f003 0301 	and.w	r3, r3, #1
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d004      	beq.n	80119f6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80119f0:	1c5a      	adds	r2, r3, #1
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80119f6:	78fb      	ldrb	r3, [r7, #3]
 80119f8:	f003 0301 	and.w	r3, r3, #1
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d006      	beq.n	8011a0e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	8b5b      	ldrh	r3, [r3, #26]
 8011a04:	f043 0320 	orr.w	r3, r3, #32
 8011a08:	b29a      	uxth	r2, r3
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	685b      	ldr	r3, [r3, #4]
 8011a12:	4618      	mov	r0, r3
 8011a14:	f7fa fcea 	bl	800c3ec <pbuf_clen>
 8011a18:	4603      	mov	r3, r0
 8011a1a:	461a      	mov	r2, r3
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011a22:	4413      	add	r3, r2
 8011a24:	b29a      	uxth	r2, r3
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d00e      	beq.n	8011a54 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d10a      	bne.n	8011a54 <tcp_enqueue_flags+0x1b0>
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d106      	bne.n	8011a54 <tcp_enqueue_flags+0x1b0>
 8011a46:	4b06      	ldr	r3, [pc, #24]	; (8011a60 <tcp_enqueue_flags+0x1bc>)
 8011a48:	f240 4266 	movw	r2, #1126	; 0x466
 8011a4c:	490b      	ldr	r1, [pc, #44]	; (8011a7c <tcp_enqueue_flags+0x1d8>)
 8011a4e:	4806      	ldr	r0, [pc, #24]	; (8011a68 <tcp_enqueue_flags+0x1c4>)
 8011a50:	f006 f9bc 	bl	8017dcc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011a54:	2300      	movs	r3, #0
}
 8011a56:	4618      	mov	r0, r3
 8011a58:	3720      	adds	r7, #32
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	bd80      	pop	{r7, pc}
 8011a5e:	bf00      	nop
 8011a60:	0801b654 	.word	0x0801b654
 8011a64:	0801ba78 	.word	0x0801ba78
 8011a68:	0801b6a8 	.word	0x0801b6a8
 8011a6c:	0801bad0 	.word	0x0801bad0
 8011a70:	0801baf0 	.word	0x0801baf0
 8011a74:	0801bb2c 	.word	0x0801bb2c
 8011a78:	0801bb44 	.word	0x0801bb44
 8011a7c:	0801bb70 	.word	0x0801bb70

08011a80 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011a80:	b5b0      	push	{r4, r5, r7, lr}
 8011a82:	b08a      	sub	sp, #40	; 0x28
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d106      	bne.n	8011a9c <tcp_output+0x1c>
 8011a8e:	4ba0      	ldr	r3, [pc, #640]	; (8011d10 <tcp_output+0x290>)
 8011a90:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011a94:	499f      	ldr	r1, [pc, #636]	; (8011d14 <tcp_output+0x294>)
 8011a96:	48a0      	ldr	r0, [pc, #640]	; (8011d18 <tcp_output+0x298>)
 8011a98:	f006 f998 	bl	8017dcc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	7d1b      	ldrb	r3, [r3, #20]
 8011aa0:	2b01      	cmp	r3, #1
 8011aa2:	d106      	bne.n	8011ab2 <tcp_output+0x32>
 8011aa4:	4b9a      	ldr	r3, [pc, #616]	; (8011d10 <tcp_output+0x290>)
 8011aa6:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8011aaa:	499c      	ldr	r1, [pc, #624]	; (8011d1c <tcp_output+0x29c>)
 8011aac:	489a      	ldr	r0, [pc, #616]	; (8011d18 <tcp_output+0x298>)
 8011aae:	f006 f98d 	bl	8017dcc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011ab2:	4b9b      	ldr	r3, [pc, #620]	; (8011d20 <tcp_output+0x2a0>)
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	687a      	ldr	r2, [r7, #4]
 8011ab8:	429a      	cmp	r2, r3
 8011aba:	d101      	bne.n	8011ac0 <tcp_output+0x40>
    return ERR_OK;
 8011abc:	2300      	movs	r3, #0
 8011abe:	e1d2      	b.n	8011e66 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011acc:	429a      	cmp	r2, r3
 8011ace:	d203      	bcs.n	8011ad8 <tcp_output+0x58>
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011ad6:	e002      	b.n	8011ade <tcp_output+0x5e>
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011ade:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ae4:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d10b      	bne.n	8011b04 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	8b5b      	ldrh	r3, [r3, #26]
 8011af0:	f003 0302 	and.w	r3, r3, #2
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	f000 81a9 	beq.w	8011e4c <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8011afa:	6878      	ldr	r0, [r7, #4]
 8011afc:	f000 fdd6 	bl	80126ac <tcp_send_empty_ack>
 8011b00:	4603      	mov	r3, r0
 8011b02:	e1b0      	b.n	8011e66 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011b04:	6879      	ldr	r1, [r7, #4]
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	3304      	adds	r3, #4
 8011b0a:	461a      	mov	r2, r3
 8011b0c:	6878      	ldr	r0, [r7, #4]
 8011b0e:	f7ff f81d 	bl	8010b4c <tcp_route>
 8011b12:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011b14:	697b      	ldr	r3, [r7, #20]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d102      	bne.n	8011b20 <tcp_output+0xa0>
    return ERR_RTE;
 8011b1a:	f06f 0303 	mvn.w	r3, #3
 8011b1e:	e1a2      	b.n	8011e66 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d003      	beq.n	8011b2e <tcp_output+0xae>
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d111      	bne.n	8011b52 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011b2e:	697b      	ldr	r3, [r7, #20]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d002      	beq.n	8011b3a <tcp_output+0xba>
 8011b34:	697b      	ldr	r3, [r7, #20]
 8011b36:	3304      	adds	r3, #4
 8011b38:	e000      	b.n	8011b3c <tcp_output+0xbc>
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011b3e:	693b      	ldr	r3, [r7, #16]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d102      	bne.n	8011b4a <tcp_output+0xca>
      return ERR_RTE;
 8011b44:	f06f 0303 	mvn.w	r3, #3
 8011b48:	e18d      	b.n	8011e66 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011b4a:	693b      	ldr	r3, [r7, #16]
 8011b4c:	681a      	ldr	r2, [r3, #0]
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b54:	68db      	ldr	r3, [r3, #12]
 8011b56:	685b      	ldr	r3, [r3, #4]
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f7f8 ffe4 	bl	800ab26 <lwip_htonl>
 8011b5e:	4602      	mov	r2, r0
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b64:	1ad3      	subs	r3, r2, r3
 8011b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b68:	8912      	ldrh	r2, [r2, #8]
 8011b6a:	4413      	add	r3, r2
 8011b6c:	69ba      	ldr	r2, [r7, #24]
 8011b6e:	429a      	cmp	r2, r3
 8011b70:	d227      	bcs.n	8011bc2 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011b78:	461a      	mov	r2, r3
 8011b7a:	69bb      	ldr	r3, [r7, #24]
 8011b7c:	4293      	cmp	r3, r2
 8011b7e:	d114      	bne.n	8011baa <tcp_output+0x12a>
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d110      	bne.n	8011baa <tcp_output+0x12a>
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d10b      	bne.n	8011baa <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	2200      	movs	r2, #0
 8011b96:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	2201      	movs	r2, #1
 8011b9e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	8b5b      	ldrh	r3, [r3, #26]
 8011bae:	f003 0302 	and.w	r3, r3, #2
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	f000 814c 	beq.w	8011e50 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	f000 fd77 	bl	80126ac <tcp_send_empty_ack>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	e151      	b.n	8011e66 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bce:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011bd0:	6a3b      	ldr	r3, [r7, #32]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	f000 811b 	beq.w	8011e0e <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8011bd8:	e002      	b.n	8011be0 <tcp_output+0x160>
 8011bda:	6a3b      	ldr	r3, [r7, #32]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	623b      	str	r3, [r7, #32]
 8011be0:	6a3b      	ldr	r3, [r7, #32]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d1f8      	bne.n	8011bda <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011be8:	e111      	b.n	8011e0e <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bec:	68db      	ldr	r3, [r3, #12]
 8011bee:	899b      	ldrh	r3, [r3, #12]
 8011bf0:	b29b      	uxth	r3, r3
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f7f8 ff82 	bl	800aafc <lwip_htons>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	b2db      	uxtb	r3, r3
 8011bfc:	f003 0304 	and.w	r3, r3, #4
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d006      	beq.n	8011c12 <tcp_output+0x192>
 8011c04:	4b42      	ldr	r3, [pc, #264]	; (8011d10 <tcp_output+0x290>)
 8011c06:	f240 5237 	movw	r2, #1335	; 0x537
 8011c0a:	4946      	ldr	r1, [pc, #280]	; (8011d24 <tcp_output+0x2a4>)
 8011c0c:	4842      	ldr	r0, [pc, #264]	; (8011d18 <tcp_output+0x298>)
 8011c0e:	f006 f8dd 	bl	8017dcc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d01f      	beq.n	8011c5a <tcp_output+0x1da>
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	8b5b      	ldrh	r3, [r3, #26]
 8011c1e:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d119      	bne.n	8011c5a <tcp_output+0x1da>
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d00b      	beq.n	8011c46 <tcp_output+0x1c6>
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d110      	bne.n	8011c5a <tcp_output+0x1da>
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c3c:	891a      	ldrh	r2, [r3, #8]
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c42:	429a      	cmp	r2, r3
 8011c44:	d209      	bcs.n	8011c5a <tcp_output+0x1da>
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d004      	beq.n	8011c5a <tcp_output+0x1da>
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011c56:	2b08      	cmp	r3, #8
 8011c58:	d901      	bls.n	8011c5e <tcp_output+0x1de>
 8011c5a:	2301      	movs	r3, #1
 8011c5c:	e000      	b.n	8011c60 <tcp_output+0x1e0>
 8011c5e:	2300      	movs	r3, #0
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d106      	bne.n	8011c72 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	8b5b      	ldrh	r3, [r3, #26]
 8011c68:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	f000 80e3 	beq.w	8011e38 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	7d1b      	ldrb	r3, [r3, #20]
 8011c76:	2b02      	cmp	r3, #2
 8011c78:	d00d      	beq.n	8011c96 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c7c:	68db      	ldr	r3, [r3, #12]
 8011c7e:	899b      	ldrh	r3, [r3, #12]
 8011c80:	b29c      	uxth	r4, r3
 8011c82:	2010      	movs	r0, #16
 8011c84:	f7f8 ff3a 	bl	800aafc <lwip_htons>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	461a      	mov	r2, r3
 8011c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c8e:	68db      	ldr	r3, [r3, #12]
 8011c90:	4322      	orrs	r2, r4
 8011c92:	b292      	uxth	r2, r2
 8011c94:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011c96:	697a      	ldr	r2, [r7, #20]
 8011c98:	6879      	ldr	r1, [r7, #4]
 8011c9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c9c:	f000 f908 	bl	8011eb0 <tcp_output_segment>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011ca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d009      	beq.n	8011cc0 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	8b5b      	ldrh	r3, [r3, #26]
 8011cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011cb4:	b29a      	uxth	r2, r3
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	835a      	strh	r2, [r3, #26]
      return err;
 8011cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011cbe:	e0d2      	b.n	8011e66 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cc2:	681a      	ldr	r2, [r3, #0]
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	7d1b      	ldrb	r3, [r3, #20]
 8011ccc:	2b02      	cmp	r3, #2
 8011cce:	d006      	beq.n	8011cde <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	8b5b      	ldrh	r3, [r3, #26]
 8011cd4:	f023 0303 	bic.w	r3, r3, #3
 8011cd8:	b29a      	uxth	r2, r3
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ce0:	68db      	ldr	r3, [r3, #12]
 8011ce2:	685b      	ldr	r3, [r3, #4]
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f7f8 ff1e 	bl	800ab26 <lwip_htonl>
 8011cea:	4604      	mov	r4, r0
 8011cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cee:	891b      	ldrh	r3, [r3, #8]
 8011cf0:	461d      	mov	r5, r3
 8011cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf4:	68db      	ldr	r3, [r3, #12]
 8011cf6:	899b      	ldrh	r3, [r3, #12]
 8011cf8:	b29b      	uxth	r3, r3
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	f7f8 fefe 	bl	800aafc <lwip_htons>
 8011d00:	4603      	mov	r3, r0
 8011d02:	b2db      	uxtb	r3, r3
 8011d04:	f003 0303 	and.w	r3, r3, #3
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d00d      	beq.n	8011d28 <tcp_output+0x2a8>
 8011d0c:	2301      	movs	r3, #1
 8011d0e:	e00c      	b.n	8011d2a <tcp_output+0x2aa>
 8011d10:	0801b654 	.word	0x0801b654
 8011d14:	0801bb98 	.word	0x0801bb98
 8011d18:	0801b6a8 	.word	0x0801b6a8
 8011d1c:	0801bbb0 	.word	0x0801bbb0
 8011d20:	2000f528 	.word	0x2000f528
 8011d24:	0801bbd8 	.word	0x0801bbd8
 8011d28:	2300      	movs	r3, #0
 8011d2a:	442b      	add	r3, r5
 8011d2c:	4423      	add	r3, r4
 8011d2e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011d34:	68bb      	ldr	r3, [r7, #8]
 8011d36:	1ad3      	subs	r3, r2, r3
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	da02      	bge.n	8011d42 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	68ba      	ldr	r2, [r7, #8]
 8011d40:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d44:	891b      	ldrh	r3, [r3, #8]
 8011d46:	461c      	mov	r4, r3
 8011d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d4a:	68db      	ldr	r3, [r3, #12]
 8011d4c:	899b      	ldrh	r3, [r3, #12]
 8011d4e:	b29b      	uxth	r3, r3
 8011d50:	4618      	mov	r0, r3
 8011d52:	f7f8 fed3 	bl	800aafc <lwip_htons>
 8011d56:	4603      	mov	r3, r0
 8011d58:	b2db      	uxtb	r3, r3
 8011d5a:	f003 0303 	and.w	r3, r3, #3
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d001      	beq.n	8011d66 <tcp_output+0x2e6>
 8011d62:	2301      	movs	r3, #1
 8011d64:	e000      	b.n	8011d68 <tcp_output+0x2e8>
 8011d66:	2300      	movs	r3, #0
 8011d68:	4423      	add	r3, r4
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d049      	beq.n	8011e02 <tcp_output+0x382>
      seg->next = NULL;
 8011d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d70:	2200      	movs	r2, #0
 8011d72:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d105      	bne.n	8011d88 <tcp_output+0x308>
        pcb->unacked = seg;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d80:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d84:	623b      	str	r3, [r7, #32]
 8011d86:	e03f      	b.n	8011e08 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d8a:	68db      	ldr	r3, [r3, #12]
 8011d8c:	685b      	ldr	r3, [r3, #4]
 8011d8e:	4618      	mov	r0, r3
 8011d90:	f7f8 fec9 	bl	800ab26 <lwip_htonl>
 8011d94:	4604      	mov	r4, r0
 8011d96:	6a3b      	ldr	r3, [r7, #32]
 8011d98:	68db      	ldr	r3, [r3, #12]
 8011d9a:	685b      	ldr	r3, [r3, #4]
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f7f8 fec2 	bl	800ab26 <lwip_htonl>
 8011da2:	4603      	mov	r3, r0
 8011da4:	1ae3      	subs	r3, r4, r3
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	da24      	bge.n	8011df4 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	3370      	adds	r3, #112	; 0x70
 8011dae:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011db0:	e002      	b.n	8011db8 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011db2:	69fb      	ldr	r3, [r7, #28]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011db8:	69fb      	ldr	r3, [r7, #28]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d011      	beq.n	8011de4 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011dc0:	69fb      	ldr	r3, [r7, #28]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	68db      	ldr	r3, [r3, #12]
 8011dc6:	685b      	ldr	r3, [r3, #4]
 8011dc8:	4618      	mov	r0, r3
 8011dca:	f7f8 feac 	bl	800ab26 <lwip_htonl>
 8011dce:	4604      	mov	r4, r0
 8011dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dd2:	68db      	ldr	r3, [r3, #12]
 8011dd4:	685b      	ldr	r3, [r3, #4]
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f7f8 fea5 	bl	800ab26 <lwip_htonl>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	dbe6      	blt.n	8011db2 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8011de4:	69fb      	ldr	r3, [r7, #28]
 8011de6:	681a      	ldr	r2, [r3, #0]
 8011de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dea:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011dec:	69fb      	ldr	r3, [r7, #28]
 8011dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011df0:	601a      	str	r2, [r3, #0]
 8011df2:	e009      	b.n	8011e08 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011df4:	6a3b      	ldr	r3, [r7, #32]
 8011df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011df8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011dfa:	6a3b      	ldr	r3, [r7, #32]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	623b      	str	r3, [r7, #32]
 8011e00:	e002      	b.n	8011e08 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011e02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e04:	f7fb fefc 	bl	800dc00 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e0c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d012      	beq.n	8011e3a <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e16:	68db      	ldr	r3, [r3, #12]
 8011e18:	685b      	ldr	r3, [r3, #4]
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	f7f8 fe83 	bl	800ab26 <lwip_htonl>
 8011e20:	4602      	mov	r2, r0
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e26:	1ad3      	subs	r3, r2, r3
 8011e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e2a:	8912      	ldrh	r2, [r2, #8]
 8011e2c:	4413      	add	r3, r2
  while (seg != NULL &&
 8011e2e:	69ba      	ldr	r2, [r7, #24]
 8011e30:	429a      	cmp	r2, r3
 8011e32:	f4bf aeda 	bcs.w	8011bea <tcp_output+0x16a>
 8011e36:	e000      	b.n	8011e3a <tcp_output+0x3ba>
      break;
 8011e38:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d108      	bne.n	8011e54 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	2200      	movs	r2, #0
 8011e46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011e4a:	e004      	b.n	8011e56 <tcp_output+0x3d6>
    goto output_done;
 8011e4c:	bf00      	nop
 8011e4e:	e002      	b.n	8011e56 <tcp_output+0x3d6>
    goto output_done;
 8011e50:	bf00      	nop
 8011e52:	e000      	b.n	8011e56 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011e54:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	8b5b      	ldrh	r3, [r3, #26]
 8011e5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011e5e:	b29a      	uxth	r2, r3
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011e64:	2300      	movs	r3, #0
}
 8011e66:	4618      	mov	r0, r3
 8011e68:	3728      	adds	r7, #40	; 0x28
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8011e6e:	bf00      	nop

08011e70 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b082      	sub	sp, #8
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d106      	bne.n	8011e8c <tcp_output_segment_busy+0x1c>
 8011e7e:	4b09      	ldr	r3, [pc, #36]	; (8011ea4 <tcp_output_segment_busy+0x34>)
 8011e80:	f240 529a 	movw	r2, #1434	; 0x59a
 8011e84:	4908      	ldr	r1, [pc, #32]	; (8011ea8 <tcp_output_segment_busy+0x38>)
 8011e86:	4809      	ldr	r0, [pc, #36]	; (8011eac <tcp_output_segment_busy+0x3c>)
 8011e88:	f005 ffa0 	bl	8017dcc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	685b      	ldr	r3, [r3, #4]
 8011e90:	7b9b      	ldrb	r3, [r3, #14]
 8011e92:	2b01      	cmp	r3, #1
 8011e94:	d001      	beq.n	8011e9a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011e96:	2301      	movs	r3, #1
 8011e98:	e000      	b.n	8011e9c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011e9a:	2300      	movs	r3, #0
}
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	3708      	adds	r7, #8
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd80      	pop	{r7, pc}
 8011ea4:	0801b654 	.word	0x0801b654
 8011ea8:	0801bbf0 	.word	0x0801bbf0
 8011eac:	0801b6a8 	.word	0x0801b6a8

08011eb0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011eb0:	b5b0      	push	{r4, r5, r7, lr}
 8011eb2:	b08c      	sub	sp, #48	; 0x30
 8011eb4:	af04      	add	r7, sp, #16
 8011eb6:	60f8      	str	r0, [r7, #12]
 8011eb8:	60b9      	str	r1, [r7, #8]
 8011eba:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d106      	bne.n	8011ed0 <tcp_output_segment+0x20>
 8011ec2:	4b64      	ldr	r3, [pc, #400]	; (8012054 <tcp_output_segment+0x1a4>)
 8011ec4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011ec8:	4963      	ldr	r1, [pc, #396]	; (8012058 <tcp_output_segment+0x1a8>)
 8011eca:	4864      	ldr	r0, [pc, #400]	; (801205c <tcp_output_segment+0x1ac>)
 8011ecc:	f005 ff7e 	bl	8017dcc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011ed0:	68bb      	ldr	r3, [r7, #8]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d106      	bne.n	8011ee4 <tcp_output_segment+0x34>
 8011ed6:	4b5f      	ldr	r3, [pc, #380]	; (8012054 <tcp_output_segment+0x1a4>)
 8011ed8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011edc:	4960      	ldr	r1, [pc, #384]	; (8012060 <tcp_output_segment+0x1b0>)
 8011ede:	485f      	ldr	r0, [pc, #380]	; (801205c <tcp_output_segment+0x1ac>)
 8011ee0:	f005 ff74 	bl	8017dcc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d106      	bne.n	8011ef8 <tcp_output_segment+0x48>
 8011eea:	4b5a      	ldr	r3, [pc, #360]	; (8012054 <tcp_output_segment+0x1a4>)
 8011eec:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011ef0:	495c      	ldr	r1, [pc, #368]	; (8012064 <tcp_output_segment+0x1b4>)
 8011ef2:	485a      	ldr	r0, [pc, #360]	; (801205c <tcp_output_segment+0x1ac>)
 8011ef4:	f005 ff6a 	bl	8017dcc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011ef8:	68f8      	ldr	r0, [r7, #12]
 8011efa:	f7ff ffb9 	bl	8011e70 <tcp_output_segment_busy>
 8011efe:	4603      	mov	r3, r0
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d001      	beq.n	8011f08 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011f04:	2300      	movs	r3, #0
 8011f06:	e0a0      	b.n	801204a <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011f08:	68bb      	ldr	r3, [r7, #8]
 8011f0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	68dc      	ldr	r4, [r3, #12]
 8011f10:	4610      	mov	r0, r2
 8011f12:	f7f8 fe08 	bl	800ab26 <lwip_htonl>
 8011f16:	4603      	mov	r3, r0
 8011f18:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011f1a:	68bb      	ldr	r3, [r7, #8]
 8011f1c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	68dc      	ldr	r4, [r3, #12]
 8011f22:	4610      	mov	r0, r2
 8011f24:	f7f8 fdea 	bl	800aafc <lwip_htons>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011f2c:	68bb      	ldr	r3, [r7, #8]
 8011f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f30:	68ba      	ldr	r2, [r7, #8]
 8011f32:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011f34:	441a      	add	r2, r3
 8011f36:	68bb      	ldr	r3, [r7, #8]
 8011f38:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	68db      	ldr	r3, [r3, #12]
 8011f3e:	3314      	adds	r3, #20
 8011f40:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	7a9b      	ldrb	r3, [r3, #10]
 8011f46:	f003 0301 	and.w	r3, r3, #1
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d015      	beq.n	8011f7a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011f4e:	68bb      	ldr	r3, [r7, #8]
 8011f50:	3304      	adds	r3, #4
 8011f52:	461a      	mov	r2, r3
 8011f54:	6879      	ldr	r1, [r7, #4]
 8011f56:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011f5a:	f7fc fa33 	bl	800e3c4 <tcp_eff_send_mss_netif>
 8011f5e:	4603      	mov	r3, r0
 8011f60:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011f62:	8b7b      	ldrh	r3, [r7, #26]
 8011f64:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011f68:	4618      	mov	r0, r3
 8011f6a:	f7f8 fddc 	bl	800ab26 <lwip_htonl>
 8011f6e:	4602      	mov	r2, r0
 8011f70:	69fb      	ldr	r3, [r7, #28]
 8011f72:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011f74:	69fb      	ldr	r3, [r7, #28]
 8011f76:	3304      	adds	r3, #4
 8011f78:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011f7a:	68bb      	ldr	r3, [r7, #8]
 8011f7c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	da02      	bge.n	8011f8a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011f84:	68bb      	ldr	r3, [r7, #8]
 8011f86:	2200      	movs	r2, #0
 8011f88:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011f8a:	68bb      	ldr	r3, [r7, #8]
 8011f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d10c      	bne.n	8011fac <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011f92:	4b35      	ldr	r3, [pc, #212]	; (8012068 <tcp_output_segment+0x1b8>)
 8011f94:	681a      	ldr	r2, [r3, #0]
 8011f96:	68bb      	ldr	r3, [r7, #8]
 8011f98:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	68db      	ldr	r3, [r3, #12]
 8011f9e:	685b      	ldr	r3, [r3, #4]
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	f7f8 fdc0 	bl	800ab26 <lwip_htonl>
 8011fa6:	4602      	mov	r2, r0
 8011fa8:	68bb      	ldr	r3, [r7, #8]
 8011faa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	68db      	ldr	r3, [r3, #12]
 8011fb0:	461a      	mov	r2, r3
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	685b      	ldr	r3, [r3, #4]
 8011fb6:	685b      	ldr	r3, [r3, #4]
 8011fb8:	1ad3      	subs	r3, r2, r3
 8011fba:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	685b      	ldr	r3, [r3, #4]
 8011fc0:	8959      	ldrh	r1, [r3, #10]
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	685b      	ldr	r3, [r3, #4]
 8011fc6:	8b3a      	ldrh	r2, [r7, #24]
 8011fc8:	1a8a      	subs	r2, r1, r2
 8011fca:	b292      	uxth	r2, r2
 8011fcc:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	685b      	ldr	r3, [r3, #4]
 8011fd2:	8919      	ldrh	r1, [r3, #8]
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	685b      	ldr	r3, [r3, #4]
 8011fd8:	8b3a      	ldrh	r2, [r7, #24]
 8011fda:	1a8a      	subs	r2, r1, r2
 8011fdc:	b292      	uxth	r2, r2
 8011fde:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	685b      	ldr	r3, [r3, #4]
 8011fe4:	68fa      	ldr	r2, [r7, #12]
 8011fe6:	68d2      	ldr	r2, [r2, #12]
 8011fe8:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	68db      	ldr	r3, [r3, #12]
 8011fee:	2200      	movs	r2, #0
 8011ff0:	741a      	strb	r2, [r3, #16]
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	68db      	ldr	r3, [r3, #12]
 8011ffa:	f103 0214 	add.w	r2, r3, #20
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	7a9b      	ldrb	r3, [r3, #10]
 8012002:	009b      	lsls	r3, r3, #2
 8012004:	f003 0304 	and.w	r3, r3, #4
 8012008:	4413      	add	r3, r2
 801200a:	69fa      	ldr	r2, [r7, #28]
 801200c:	429a      	cmp	r2, r3
 801200e:	d006      	beq.n	801201e <tcp_output_segment+0x16e>
 8012010:	4b10      	ldr	r3, [pc, #64]	; (8012054 <tcp_output_segment+0x1a4>)
 8012012:	f240 621c 	movw	r2, #1564	; 0x61c
 8012016:	4915      	ldr	r1, [pc, #84]	; (801206c <tcp_output_segment+0x1bc>)
 8012018:	4810      	ldr	r0, [pc, #64]	; (801205c <tcp_output_segment+0x1ac>)
 801201a:	f005 fed7 	bl	8017dcc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	6858      	ldr	r0, [r3, #4]
 8012022:	68b9      	ldr	r1, [r7, #8]
 8012024:	68bb      	ldr	r3, [r7, #8]
 8012026:	1d1c      	adds	r4, r3, #4
 8012028:	68bb      	ldr	r3, [r7, #8]
 801202a:	7add      	ldrb	r5, [r3, #11]
 801202c:	68bb      	ldr	r3, [r7, #8]
 801202e:	7a9b      	ldrb	r3, [r3, #10]
 8012030:	687a      	ldr	r2, [r7, #4]
 8012032:	9202      	str	r2, [sp, #8]
 8012034:	2206      	movs	r2, #6
 8012036:	9201      	str	r2, [sp, #4]
 8012038:	9300      	str	r3, [sp, #0]
 801203a:	462b      	mov	r3, r5
 801203c:	4622      	mov	r2, r4
 801203e:	f004 fc3f 	bl	80168c0 <ip4_output_if>
 8012042:	4603      	mov	r3, r0
 8012044:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012046:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801204a:	4618      	mov	r0, r3
 801204c:	3720      	adds	r7, #32
 801204e:	46bd      	mov	sp, r7
 8012050:	bdb0      	pop	{r4, r5, r7, pc}
 8012052:	bf00      	nop
 8012054:	0801b654 	.word	0x0801b654
 8012058:	0801bc18 	.word	0x0801bc18
 801205c:	0801b6a8 	.word	0x0801b6a8
 8012060:	0801bc38 	.word	0x0801bc38
 8012064:	0801bc58 	.word	0x0801bc58
 8012068:	2000f518 	.word	0x2000f518
 801206c:	0801bc7c 	.word	0x0801bc7c

08012070 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012070:	b5b0      	push	{r4, r5, r7, lr}
 8012072:	b084      	sub	sp, #16
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d106      	bne.n	801208c <tcp_rexmit_rto_prepare+0x1c>
 801207e:	4b31      	ldr	r3, [pc, #196]	; (8012144 <tcp_rexmit_rto_prepare+0xd4>)
 8012080:	f240 6263 	movw	r2, #1635	; 0x663
 8012084:	4930      	ldr	r1, [pc, #192]	; (8012148 <tcp_rexmit_rto_prepare+0xd8>)
 8012086:	4831      	ldr	r0, [pc, #196]	; (801214c <tcp_rexmit_rto_prepare+0xdc>)
 8012088:	f005 fea0 	bl	8017dcc <iprintf>

  if (pcb->unacked == NULL) {
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012090:	2b00      	cmp	r3, #0
 8012092:	d102      	bne.n	801209a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012094:	f06f 0305 	mvn.w	r3, #5
 8012098:	e050      	b.n	801213c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801209e:	60fb      	str	r3, [r7, #12]
 80120a0:	e00b      	b.n	80120ba <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80120a2:	68f8      	ldr	r0, [r7, #12]
 80120a4:	f7ff fee4 	bl	8011e70 <tcp_output_segment_busy>
 80120a8:	4603      	mov	r3, r0
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d002      	beq.n	80120b4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80120ae:	f06f 0305 	mvn.w	r3, #5
 80120b2:	e043      	b.n	801213c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	60fb      	str	r3, [r7, #12]
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d1ef      	bne.n	80120a2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80120c2:	68f8      	ldr	r0, [r7, #12]
 80120c4:	f7ff fed4 	bl	8011e70 <tcp_output_segment_busy>
 80120c8:	4603      	mov	r3, r0
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d002      	beq.n	80120d4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80120ce:	f06f 0305 	mvn.w	r3, #5
 80120d2:	e033      	b.n	801213c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	2200      	movs	r2, #0
 80120e8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	8b5b      	ldrh	r3, [r3, #26]
 80120ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80120f2:	b29a      	uxth	r2, r3
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	68db      	ldr	r3, [r3, #12]
 80120fc:	685b      	ldr	r3, [r3, #4]
 80120fe:	4618      	mov	r0, r3
 8012100:	f7f8 fd11 	bl	800ab26 <lwip_htonl>
 8012104:	4604      	mov	r4, r0
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	891b      	ldrh	r3, [r3, #8]
 801210a:	461d      	mov	r5, r3
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	68db      	ldr	r3, [r3, #12]
 8012110:	899b      	ldrh	r3, [r3, #12]
 8012112:	b29b      	uxth	r3, r3
 8012114:	4618      	mov	r0, r3
 8012116:	f7f8 fcf1 	bl	800aafc <lwip_htons>
 801211a:	4603      	mov	r3, r0
 801211c:	b2db      	uxtb	r3, r3
 801211e:	f003 0303 	and.w	r3, r3, #3
 8012122:	2b00      	cmp	r3, #0
 8012124:	d001      	beq.n	801212a <tcp_rexmit_rto_prepare+0xba>
 8012126:	2301      	movs	r3, #1
 8012128:	e000      	b.n	801212c <tcp_rexmit_rto_prepare+0xbc>
 801212a:	2300      	movs	r3, #0
 801212c:	442b      	add	r3, r5
 801212e:	18e2      	adds	r2, r4, r3
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	2200      	movs	r2, #0
 8012138:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801213a:	2300      	movs	r3, #0
}
 801213c:	4618      	mov	r0, r3
 801213e:	3710      	adds	r7, #16
 8012140:	46bd      	mov	sp, r7
 8012142:	bdb0      	pop	{r4, r5, r7, pc}
 8012144:	0801b654 	.word	0x0801b654
 8012148:	0801bc90 	.word	0x0801bc90
 801214c:	0801b6a8 	.word	0x0801b6a8

08012150 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b082      	sub	sp, #8
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d106      	bne.n	801216c <tcp_rexmit_rto_commit+0x1c>
 801215e:	4b0d      	ldr	r3, [pc, #52]	; (8012194 <tcp_rexmit_rto_commit+0x44>)
 8012160:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012164:	490c      	ldr	r1, [pc, #48]	; (8012198 <tcp_rexmit_rto_commit+0x48>)
 8012166:	480d      	ldr	r0, [pc, #52]	; (801219c <tcp_rexmit_rto_commit+0x4c>)
 8012168:	f005 fe30 	bl	8017dcc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012172:	2bff      	cmp	r3, #255	; 0xff
 8012174:	d007      	beq.n	8012186 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801217c:	3301      	adds	r3, #1
 801217e:	b2da      	uxtb	r2, r3
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012186:	6878      	ldr	r0, [r7, #4]
 8012188:	f7ff fc7a 	bl	8011a80 <tcp_output>
}
 801218c:	bf00      	nop
 801218e:	3708      	adds	r7, #8
 8012190:	46bd      	mov	sp, r7
 8012192:	bd80      	pop	{r7, pc}
 8012194:	0801b654 	.word	0x0801b654
 8012198:	0801bcb4 	.word	0x0801bcb4
 801219c:	0801b6a8 	.word	0x0801b6a8

080121a0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b082      	sub	sp, #8
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d106      	bne.n	80121bc <tcp_rexmit_rto+0x1c>
 80121ae:	4b0a      	ldr	r3, [pc, #40]	; (80121d8 <tcp_rexmit_rto+0x38>)
 80121b0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80121b4:	4909      	ldr	r1, [pc, #36]	; (80121dc <tcp_rexmit_rto+0x3c>)
 80121b6:	480a      	ldr	r0, [pc, #40]	; (80121e0 <tcp_rexmit_rto+0x40>)
 80121b8:	f005 fe08 	bl	8017dcc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80121bc:	6878      	ldr	r0, [r7, #4]
 80121be:	f7ff ff57 	bl	8012070 <tcp_rexmit_rto_prepare>
 80121c2:	4603      	mov	r3, r0
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d102      	bne.n	80121ce <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80121c8:	6878      	ldr	r0, [r7, #4]
 80121ca:	f7ff ffc1 	bl	8012150 <tcp_rexmit_rto_commit>
  }
}
 80121ce:	bf00      	nop
 80121d0:	3708      	adds	r7, #8
 80121d2:	46bd      	mov	sp, r7
 80121d4:	bd80      	pop	{r7, pc}
 80121d6:	bf00      	nop
 80121d8:	0801b654 	.word	0x0801b654
 80121dc:	0801bcd8 	.word	0x0801bcd8
 80121e0:	0801b6a8 	.word	0x0801b6a8

080121e4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80121e4:	b590      	push	{r4, r7, lr}
 80121e6:	b085      	sub	sp, #20
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d106      	bne.n	8012200 <tcp_rexmit+0x1c>
 80121f2:	4b2f      	ldr	r3, [pc, #188]	; (80122b0 <tcp_rexmit+0xcc>)
 80121f4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80121f8:	492e      	ldr	r1, [pc, #184]	; (80122b4 <tcp_rexmit+0xd0>)
 80121fa:	482f      	ldr	r0, [pc, #188]	; (80122b8 <tcp_rexmit+0xd4>)
 80121fc:	f005 fde6 	bl	8017dcc <iprintf>

  if (pcb->unacked == NULL) {
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012204:	2b00      	cmp	r3, #0
 8012206:	d102      	bne.n	801220e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012208:	f06f 0305 	mvn.w	r3, #5
 801220c:	e04c      	b.n	80122a8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012212:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012214:	68b8      	ldr	r0, [r7, #8]
 8012216:	f7ff fe2b 	bl	8011e70 <tcp_output_segment_busy>
 801221a:	4603      	mov	r3, r0
 801221c:	2b00      	cmp	r3, #0
 801221e:	d002      	beq.n	8012226 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012220:	f06f 0305 	mvn.w	r3, #5
 8012224:	e040      	b.n	80122a8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012226:	68bb      	ldr	r3, [r7, #8]
 8012228:	681a      	ldr	r2, [r3, #0]
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	336c      	adds	r3, #108	; 0x6c
 8012232:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012234:	e002      	b.n	801223c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d011      	beq.n	8012268 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	68db      	ldr	r3, [r3, #12]
 801224a:	685b      	ldr	r3, [r3, #4]
 801224c:	4618      	mov	r0, r3
 801224e:	f7f8 fc6a 	bl	800ab26 <lwip_htonl>
 8012252:	4604      	mov	r4, r0
 8012254:	68bb      	ldr	r3, [r7, #8]
 8012256:	68db      	ldr	r3, [r3, #12]
 8012258:	685b      	ldr	r3, [r3, #4]
 801225a:	4618      	mov	r0, r3
 801225c:	f7f8 fc63 	bl	800ab26 <lwip_htonl>
 8012260:	4603      	mov	r3, r0
 8012262:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012264:	2b00      	cmp	r3, #0
 8012266:	dbe6      	blt.n	8012236 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	681a      	ldr	r2, [r3, #0]
 801226c:	68bb      	ldr	r3, [r7, #8]
 801226e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	68ba      	ldr	r2, [r7, #8]
 8012274:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012276:	68bb      	ldr	r3, [r7, #8]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d103      	bne.n	8012286 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	2200      	movs	r2, #0
 8012282:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801228c:	2bff      	cmp	r3, #255	; 0xff
 801228e:	d007      	beq.n	80122a0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012296:	3301      	adds	r3, #1
 8012298:	b2da      	uxtb	r2, r3
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	2200      	movs	r2, #0
 80122a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80122a6:	2300      	movs	r3, #0
}
 80122a8:	4618      	mov	r0, r3
 80122aa:	3714      	adds	r7, #20
 80122ac:	46bd      	mov	sp, r7
 80122ae:	bd90      	pop	{r4, r7, pc}
 80122b0:	0801b654 	.word	0x0801b654
 80122b4:	0801bcf4 	.word	0x0801bcf4
 80122b8:	0801b6a8 	.word	0x0801b6a8

080122bc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b082      	sub	sp, #8
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d106      	bne.n	80122d8 <tcp_rexmit_fast+0x1c>
 80122ca:	4b2e      	ldr	r3, [pc, #184]	; (8012384 <tcp_rexmit_fast+0xc8>)
 80122cc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80122d0:	492d      	ldr	r1, [pc, #180]	; (8012388 <tcp_rexmit_fast+0xcc>)
 80122d2:	482e      	ldr	r0, [pc, #184]	; (801238c <tcp_rexmit_fast+0xd0>)
 80122d4:	f005 fd7a 	bl	8017dcc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d04d      	beq.n	801237c <tcp_rexmit_fast+0xc0>
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	8b5b      	ldrh	r3, [r3, #26]
 80122e4:	f003 0304 	and.w	r3, r3, #4
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d147      	bne.n	801237c <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80122ec:	6878      	ldr	r0, [r7, #4]
 80122ee:	f7ff ff79 	bl	80121e4 <tcp_rexmit>
 80122f2:	4603      	mov	r3, r0
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d141      	bne.n	801237c <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012304:	429a      	cmp	r2, r3
 8012306:	d207      	bcs.n	8012318 <tcp_rexmit_fast+0x5c>
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801230e:	0fda      	lsrs	r2, r3, #31
 8012310:	4413      	add	r3, r2
 8012312:	105b      	asrs	r3, r3, #1
 8012314:	b29b      	uxth	r3, r3
 8012316:	e006      	b.n	8012326 <tcp_rexmit_fast+0x6a>
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801231e:	0fda      	lsrs	r2, r3, #31
 8012320:	4413      	add	r3, r2
 8012322:	105b      	asrs	r3, r3, #1
 8012324:	b29b      	uxth	r3, r3
 8012326:	687a      	ldr	r2, [r7, #4]
 8012328:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012332:	461a      	mov	r2, r3
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012338:	005b      	lsls	r3, r3, #1
 801233a:	429a      	cmp	r2, r3
 801233c:	d206      	bcs.n	801234c <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012342:	005b      	lsls	r3, r3, #1
 8012344:	b29a      	uxth	r2, r3
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012356:	4619      	mov	r1, r3
 8012358:	0049      	lsls	r1, r1, #1
 801235a:	440b      	add	r3, r1
 801235c:	b29b      	uxth	r3, r3
 801235e:	4413      	add	r3, r2
 8012360:	b29a      	uxth	r2, r3
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	8b5b      	ldrh	r3, [r3, #26]
 801236c:	f043 0304 	orr.w	r3, r3, #4
 8012370:	b29a      	uxth	r2, r3
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	2200      	movs	r2, #0
 801237a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801237c:	bf00      	nop
 801237e:	3708      	adds	r7, #8
 8012380:	46bd      	mov	sp, r7
 8012382:	bd80      	pop	{r7, pc}
 8012384:	0801b654 	.word	0x0801b654
 8012388:	0801bd0c 	.word	0x0801bd0c
 801238c:	0801b6a8 	.word	0x0801b6a8

08012390 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b086      	sub	sp, #24
 8012394:	af00      	add	r7, sp, #0
 8012396:	60f8      	str	r0, [r7, #12]
 8012398:	607b      	str	r3, [r7, #4]
 801239a:	460b      	mov	r3, r1
 801239c:	817b      	strh	r3, [r7, #10]
 801239e:	4613      	mov	r3, r2
 80123a0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80123a2:	897a      	ldrh	r2, [r7, #10]
 80123a4:	893b      	ldrh	r3, [r7, #8]
 80123a6:	4413      	add	r3, r2
 80123a8:	b29b      	uxth	r3, r3
 80123aa:	3314      	adds	r3, #20
 80123ac:	b29b      	uxth	r3, r3
 80123ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 80123b2:	4619      	mov	r1, r3
 80123b4:	2022      	movs	r0, #34	; 0x22
 80123b6:	f7f9 fcab 	bl	800bd10 <pbuf_alloc>
 80123ba:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80123bc:	697b      	ldr	r3, [r7, #20]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d04e      	beq.n	8012460 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80123c2:	697b      	ldr	r3, [r7, #20]
 80123c4:	895b      	ldrh	r3, [r3, #10]
 80123c6:	461a      	mov	r2, r3
 80123c8:	897b      	ldrh	r3, [r7, #10]
 80123ca:	3314      	adds	r3, #20
 80123cc:	429a      	cmp	r2, r3
 80123ce:	da06      	bge.n	80123de <tcp_output_alloc_header_common+0x4e>
 80123d0:	4b26      	ldr	r3, [pc, #152]	; (801246c <tcp_output_alloc_header_common+0xdc>)
 80123d2:	f240 7224 	movw	r2, #1828	; 0x724
 80123d6:	4926      	ldr	r1, [pc, #152]	; (8012470 <tcp_output_alloc_header_common+0xe0>)
 80123d8:	4826      	ldr	r0, [pc, #152]	; (8012474 <tcp_output_alloc_header_common+0xe4>)
 80123da:	f005 fcf7 	bl	8017dcc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80123de:	697b      	ldr	r3, [r7, #20]
 80123e0:	685b      	ldr	r3, [r3, #4]
 80123e2:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80123e4:	8c3b      	ldrh	r3, [r7, #32]
 80123e6:	4618      	mov	r0, r3
 80123e8:	f7f8 fb88 	bl	800aafc <lwip_htons>
 80123ec:	4603      	mov	r3, r0
 80123ee:	461a      	mov	r2, r3
 80123f0:	693b      	ldr	r3, [r7, #16]
 80123f2:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80123f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80123f6:	4618      	mov	r0, r3
 80123f8:	f7f8 fb80 	bl	800aafc <lwip_htons>
 80123fc:	4603      	mov	r3, r0
 80123fe:	461a      	mov	r2, r3
 8012400:	693b      	ldr	r3, [r7, #16]
 8012402:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012404:	693b      	ldr	r3, [r7, #16]
 8012406:	687a      	ldr	r2, [r7, #4]
 8012408:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801240a:	68f8      	ldr	r0, [r7, #12]
 801240c:	f7f8 fb8b 	bl	800ab26 <lwip_htonl>
 8012410:	4602      	mov	r2, r0
 8012412:	693b      	ldr	r3, [r7, #16]
 8012414:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012416:	897b      	ldrh	r3, [r7, #10]
 8012418:	089b      	lsrs	r3, r3, #2
 801241a:	b29b      	uxth	r3, r3
 801241c:	3305      	adds	r3, #5
 801241e:	b29b      	uxth	r3, r3
 8012420:	031b      	lsls	r3, r3, #12
 8012422:	b29a      	uxth	r2, r3
 8012424:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012428:	b29b      	uxth	r3, r3
 801242a:	4313      	orrs	r3, r2
 801242c:	b29b      	uxth	r3, r3
 801242e:	4618      	mov	r0, r3
 8012430:	f7f8 fb64 	bl	800aafc <lwip_htons>
 8012434:	4603      	mov	r3, r0
 8012436:	461a      	mov	r2, r3
 8012438:	693b      	ldr	r3, [r7, #16]
 801243a:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801243c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801243e:	4618      	mov	r0, r3
 8012440:	f7f8 fb5c 	bl	800aafc <lwip_htons>
 8012444:	4603      	mov	r3, r0
 8012446:	461a      	mov	r2, r3
 8012448:	693b      	ldr	r3, [r7, #16]
 801244a:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801244c:	693b      	ldr	r3, [r7, #16]
 801244e:	2200      	movs	r2, #0
 8012450:	741a      	strb	r2, [r3, #16]
 8012452:	2200      	movs	r2, #0
 8012454:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012456:	693b      	ldr	r3, [r7, #16]
 8012458:	2200      	movs	r2, #0
 801245a:	749a      	strb	r2, [r3, #18]
 801245c:	2200      	movs	r2, #0
 801245e:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012460:	697b      	ldr	r3, [r7, #20]
}
 8012462:	4618      	mov	r0, r3
 8012464:	3718      	adds	r7, #24
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}
 801246a:	bf00      	nop
 801246c:	0801b654 	.word	0x0801b654
 8012470:	0801bd2c 	.word	0x0801bd2c
 8012474:	0801b6a8 	.word	0x0801b6a8

08012478 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012478:	b5b0      	push	{r4, r5, r7, lr}
 801247a:	b08a      	sub	sp, #40	; 0x28
 801247c:	af04      	add	r7, sp, #16
 801247e:	60f8      	str	r0, [r7, #12]
 8012480:	607b      	str	r3, [r7, #4]
 8012482:	460b      	mov	r3, r1
 8012484:	817b      	strh	r3, [r7, #10]
 8012486:	4613      	mov	r3, r2
 8012488:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d106      	bne.n	801249e <tcp_output_alloc_header+0x26>
 8012490:	4b15      	ldr	r3, [pc, #84]	; (80124e8 <tcp_output_alloc_header+0x70>)
 8012492:	f240 7242 	movw	r2, #1858	; 0x742
 8012496:	4915      	ldr	r1, [pc, #84]	; (80124ec <tcp_output_alloc_header+0x74>)
 8012498:	4815      	ldr	r0, [pc, #84]	; (80124f0 <tcp_output_alloc_header+0x78>)
 801249a:	f005 fc97 	bl	8017dcc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	8adb      	ldrh	r3, [r3, #22]
 80124a6:	68fa      	ldr	r2, [r7, #12]
 80124a8:	8b12      	ldrh	r2, [r2, #24]
 80124aa:	68f9      	ldr	r1, [r7, #12]
 80124ac:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80124ae:	893d      	ldrh	r5, [r7, #8]
 80124b0:	897c      	ldrh	r4, [r7, #10]
 80124b2:	9103      	str	r1, [sp, #12]
 80124b4:	2110      	movs	r1, #16
 80124b6:	9102      	str	r1, [sp, #8]
 80124b8:	9201      	str	r2, [sp, #4]
 80124ba:	9300      	str	r3, [sp, #0]
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	462a      	mov	r2, r5
 80124c0:	4621      	mov	r1, r4
 80124c2:	f7ff ff65 	bl	8012390 <tcp_output_alloc_header_common>
 80124c6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80124c8:	697b      	ldr	r3, [r7, #20]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d006      	beq.n	80124dc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124d2:	68fa      	ldr	r2, [r7, #12]
 80124d4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80124d6:	441a      	add	r2, r3
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80124dc:	697b      	ldr	r3, [r7, #20]
}
 80124de:	4618      	mov	r0, r3
 80124e0:	3718      	adds	r7, #24
 80124e2:	46bd      	mov	sp, r7
 80124e4:	bdb0      	pop	{r4, r5, r7, pc}
 80124e6:	bf00      	nop
 80124e8:	0801b654 	.word	0x0801b654
 80124ec:	0801bd5c 	.word	0x0801bd5c
 80124f0:	0801b6a8 	.word	0x0801b6a8

080124f4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b088      	sub	sp, #32
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	60f8      	str	r0, [r7, #12]
 80124fc:	60b9      	str	r1, [r7, #8]
 80124fe:	4611      	mov	r1, r2
 8012500:	461a      	mov	r2, r3
 8012502:	460b      	mov	r3, r1
 8012504:	71fb      	strb	r3, [r7, #7]
 8012506:	4613      	mov	r3, r2
 8012508:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801250a:	2300      	movs	r3, #0
 801250c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801250e:	68bb      	ldr	r3, [r7, #8]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d106      	bne.n	8012522 <tcp_output_fill_options+0x2e>
 8012514:	4b13      	ldr	r3, [pc, #76]	; (8012564 <tcp_output_fill_options+0x70>)
 8012516:	f240 7256 	movw	r2, #1878	; 0x756
 801251a:	4913      	ldr	r1, [pc, #76]	; (8012568 <tcp_output_fill_options+0x74>)
 801251c:	4813      	ldr	r0, [pc, #76]	; (801256c <tcp_output_fill_options+0x78>)
 801251e:	f005 fc55 	bl	8017dcc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012522:	68bb      	ldr	r3, [r7, #8]
 8012524:	685b      	ldr	r3, [r3, #4]
 8012526:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012528:	69bb      	ldr	r3, [r7, #24]
 801252a:	3314      	adds	r3, #20
 801252c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801252e:	69bb      	ldr	r3, [r7, #24]
 8012530:	f103 0214 	add.w	r2, r3, #20
 8012534:	8bfb      	ldrh	r3, [r7, #30]
 8012536:	009b      	lsls	r3, r3, #2
 8012538:	4619      	mov	r1, r3
 801253a:	79fb      	ldrb	r3, [r7, #7]
 801253c:	009b      	lsls	r3, r3, #2
 801253e:	f003 0304 	and.w	r3, r3, #4
 8012542:	440b      	add	r3, r1
 8012544:	4413      	add	r3, r2
 8012546:	697a      	ldr	r2, [r7, #20]
 8012548:	429a      	cmp	r2, r3
 801254a:	d006      	beq.n	801255a <tcp_output_fill_options+0x66>
 801254c:	4b05      	ldr	r3, [pc, #20]	; (8012564 <tcp_output_fill_options+0x70>)
 801254e:	f240 7275 	movw	r2, #1909	; 0x775
 8012552:	4907      	ldr	r1, [pc, #28]	; (8012570 <tcp_output_fill_options+0x7c>)
 8012554:	4805      	ldr	r0, [pc, #20]	; (801256c <tcp_output_fill_options+0x78>)
 8012556:	f005 fc39 	bl	8017dcc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801255a:	bf00      	nop
 801255c:	3720      	adds	r7, #32
 801255e:	46bd      	mov	sp, r7
 8012560:	bd80      	pop	{r7, pc}
 8012562:	bf00      	nop
 8012564:	0801b654 	.word	0x0801b654
 8012568:	0801bd84 	.word	0x0801bd84
 801256c:	0801b6a8 	.word	0x0801b6a8
 8012570:	0801bc7c 	.word	0x0801bc7c

08012574 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012574:	b580      	push	{r7, lr}
 8012576:	b08a      	sub	sp, #40	; 0x28
 8012578:	af04      	add	r7, sp, #16
 801257a:	60f8      	str	r0, [r7, #12]
 801257c:	60b9      	str	r1, [r7, #8]
 801257e:	607a      	str	r2, [r7, #4]
 8012580:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012582:	68bb      	ldr	r3, [r7, #8]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d106      	bne.n	8012596 <tcp_output_control_segment+0x22>
 8012588:	4b1c      	ldr	r3, [pc, #112]	; (80125fc <tcp_output_control_segment+0x88>)
 801258a:	f240 7287 	movw	r2, #1927	; 0x787
 801258e:	491c      	ldr	r1, [pc, #112]	; (8012600 <tcp_output_control_segment+0x8c>)
 8012590:	481c      	ldr	r0, [pc, #112]	; (8012604 <tcp_output_control_segment+0x90>)
 8012592:	f005 fc1b 	bl	8017dcc <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012596:	683a      	ldr	r2, [r7, #0]
 8012598:	6879      	ldr	r1, [r7, #4]
 801259a:	68f8      	ldr	r0, [r7, #12]
 801259c:	f7fe fad6 	bl	8010b4c <tcp_route>
 80125a0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80125a2:	693b      	ldr	r3, [r7, #16]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d102      	bne.n	80125ae <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80125a8:	23fc      	movs	r3, #252	; 0xfc
 80125aa:	75fb      	strb	r3, [r7, #23]
 80125ac:	e01c      	b.n	80125e8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d006      	beq.n	80125c2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	7adb      	ldrb	r3, [r3, #11]
 80125b8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	7a9b      	ldrb	r3, [r3, #10]
 80125be:	757b      	strb	r3, [r7, #21]
 80125c0:	e003      	b.n	80125ca <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80125c2:	23ff      	movs	r3, #255	; 0xff
 80125c4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80125c6:	2300      	movs	r3, #0
 80125c8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80125ca:	7dba      	ldrb	r2, [r7, #22]
 80125cc:	693b      	ldr	r3, [r7, #16]
 80125ce:	9302      	str	r3, [sp, #8]
 80125d0:	2306      	movs	r3, #6
 80125d2:	9301      	str	r3, [sp, #4]
 80125d4:	7d7b      	ldrb	r3, [r7, #21]
 80125d6:	9300      	str	r3, [sp, #0]
 80125d8:	4613      	mov	r3, r2
 80125da:	683a      	ldr	r2, [r7, #0]
 80125dc:	6879      	ldr	r1, [r7, #4]
 80125de:	68b8      	ldr	r0, [r7, #8]
 80125e0:	f004 f96e 	bl	80168c0 <ip4_output_if>
 80125e4:	4603      	mov	r3, r0
 80125e6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80125e8:	68b8      	ldr	r0, [r7, #8]
 80125ea:	f7f9 fe71 	bl	800c2d0 <pbuf_free>
  return err;
 80125ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80125f2:	4618      	mov	r0, r3
 80125f4:	3718      	adds	r7, #24
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bd80      	pop	{r7, pc}
 80125fa:	bf00      	nop
 80125fc:	0801b654 	.word	0x0801b654
 8012600:	0801bdac 	.word	0x0801bdac
 8012604:	0801b6a8 	.word	0x0801b6a8

08012608 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012608:	b590      	push	{r4, r7, lr}
 801260a:	b08b      	sub	sp, #44	; 0x2c
 801260c:	af04      	add	r7, sp, #16
 801260e:	60f8      	str	r0, [r7, #12]
 8012610:	60b9      	str	r1, [r7, #8]
 8012612:	607a      	str	r2, [r7, #4]
 8012614:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012616:	683b      	ldr	r3, [r7, #0]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d106      	bne.n	801262a <tcp_rst+0x22>
 801261c:	4b1f      	ldr	r3, [pc, #124]	; (801269c <tcp_rst+0x94>)
 801261e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012622:	491f      	ldr	r1, [pc, #124]	; (80126a0 <tcp_rst+0x98>)
 8012624:	481f      	ldr	r0, [pc, #124]	; (80126a4 <tcp_rst+0x9c>)
 8012626:	f005 fbd1 	bl	8017dcc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801262a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801262c:	2b00      	cmp	r3, #0
 801262e:	d106      	bne.n	801263e <tcp_rst+0x36>
 8012630:	4b1a      	ldr	r3, [pc, #104]	; (801269c <tcp_rst+0x94>)
 8012632:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012636:	491c      	ldr	r1, [pc, #112]	; (80126a8 <tcp_rst+0xa0>)
 8012638:	481a      	ldr	r0, [pc, #104]	; (80126a4 <tcp_rst+0x9c>)
 801263a:	f005 fbc7 	bl	8017dcc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801263e:	2300      	movs	r3, #0
 8012640:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012642:	f246 0308 	movw	r3, #24584	; 0x6008
 8012646:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012648:	7dfb      	ldrb	r3, [r7, #23]
 801264a:	b29c      	uxth	r4, r3
 801264c:	68b8      	ldr	r0, [r7, #8]
 801264e:	f7f8 fa6a 	bl	800ab26 <lwip_htonl>
 8012652:	4602      	mov	r2, r0
 8012654:	8abb      	ldrh	r3, [r7, #20]
 8012656:	9303      	str	r3, [sp, #12]
 8012658:	2314      	movs	r3, #20
 801265a:	9302      	str	r3, [sp, #8]
 801265c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801265e:	9301      	str	r3, [sp, #4]
 8012660:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012662:	9300      	str	r3, [sp, #0]
 8012664:	4613      	mov	r3, r2
 8012666:	2200      	movs	r2, #0
 8012668:	4621      	mov	r1, r4
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	f7ff fe90 	bl	8012390 <tcp_output_alloc_header_common>
 8012670:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012672:	693b      	ldr	r3, [r7, #16]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d00c      	beq.n	8012692 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012678:	7dfb      	ldrb	r3, [r7, #23]
 801267a:	2200      	movs	r2, #0
 801267c:	6939      	ldr	r1, [r7, #16]
 801267e:	68f8      	ldr	r0, [r7, #12]
 8012680:	f7ff ff38 	bl	80124f4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012686:	683a      	ldr	r2, [r7, #0]
 8012688:	6939      	ldr	r1, [r7, #16]
 801268a:	68f8      	ldr	r0, [r7, #12]
 801268c:	f7ff ff72 	bl	8012574 <tcp_output_control_segment>
 8012690:	e000      	b.n	8012694 <tcp_rst+0x8c>
    return;
 8012692:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012694:	371c      	adds	r7, #28
 8012696:	46bd      	mov	sp, r7
 8012698:	bd90      	pop	{r4, r7, pc}
 801269a:	bf00      	nop
 801269c:	0801b654 	.word	0x0801b654
 80126a0:	0801bdd8 	.word	0x0801bdd8
 80126a4:	0801b6a8 	.word	0x0801b6a8
 80126a8:	0801bdf4 	.word	0x0801bdf4

080126ac <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80126ac:	b590      	push	{r4, r7, lr}
 80126ae:	b087      	sub	sp, #28
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80126b4:	2300      	movs	r3, #0
 80126b6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80126b8:	2300      	movs	r3, #0
 80126ba:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d106      	bne.n	80126d0 <tcp_send_empty_ack+0x24>
 80126c2:	4b28      	ldr	r3, [pc, #160]	; (8012764 <tcp_send_empty_ack+0xb8>)
 80126c4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80126c8:	4927      	ldr	r1, [pc, #156]	; (8012768 <tcp_send_empty_ack+0xbc>)
 80126ca:	4828      	ldr	r0, [pc, #160]	; (801276c <tcp_send_empty_ack+0xc0>)
 80126cc:	f005 fb7e 	bl	8017dcc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80126d0:	7dfb      	ldrb	r3, [r7, #23]
 80126d2:	009b      	lsls	r3, r3, #2
 80126d4:	b2db      	uxtb	r3, r3
 80126d6:	f003 0304 	and.w	r3, r3, #4
 80126da:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80126dc:	7d7b      	ldrb	r3, [r7, #21]
 80126de:	b29c      	uxth	r4, r3
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80126e4:	4618      	mov	r0, r3
 80126e6:	f7f8 fa1e 	bl	800ab26 <lwip_htonl>
 80126ea:	4603      	mov	r3, r0
 80126ec:	2200      	movs	r2, #0
 80126ee:	4621      	mov	r1, r4
 80126f0:	6878      	ldr	r0, [r7, #4]
 80126f2:	f7ff fec1 	bl	8012478 <tcp_output_alloc_header>
 80126f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80126f8:	693b      	ldr	r3, [r7, #16]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d109      	bne.n	8012712 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	8b5b      	ldrh	r3, [r3, #26]
 8012702:	f043 0303 	orr.w	r3, r3, #3
 8012706:	b29a      	uxth	r2, r3
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801270c:	f06f 0301 	mvn.w	r3, #1
 8012710:	e023      	b.n	801275a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012712:	7dbb      	ldrb	r3, [r7, #22]
 8012714:	7dfa      	ldrb	r2, [r7, #23]
 8012716:	6939      	ldr	r1, [r7, #16]
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f7ff feeb 	bl	80124f4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801271e:	687a      	ldr	r2, [r7, #4]
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	3304      	adds	r3, #4
 8012724:	6939      	ldr	r1, [r7, #16]
 8012726:	6878      	ldr	r0, [r7, #4]
 8012728:	f7ff ff24 	bl	8012574 <tcp_output_control_segment>
 801272c:	4603      	mov	r3, r0
 801272e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d007      	beq.n	8012748 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	8b5b      	ldrh	r3, [r3, #26]
 801273c:	f043 0303 	orr.w	r3, r3, #3
 8012740:	b29a      	uxth	r2, r3
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	835a      	strh	r2, [r3, #26]
 8012746:	e006      	b.n	8012756 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	8b5b      	ldrh	r3, [r3, #26]
 801274c:	f023 0303 	bic.w	r3, r3, #3
 8012750:	b29a      	uxth	r2, r3
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012756:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801275a:	4618      	mov	r0, r3
 801275c:	371c      	adds	r7, #28
 801275e:	46bd      	mov	sp, r7
 8012760:	bd90      	pop	{r4, r7, pc}
 8012762:	bf00      	nop
 8012764:	0801b654 	.word	0x0801b654
 8012768:	0801be10 	.word	0x0801be10
 801276c:	0801b6a8 	.word	0x0801b6a8

08012770 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012770:	b590      	push	{r4, r7, lr}
 8012772:	b087      	sub	sp, #28
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012778:	2300      	movs	r3, #0
 801277a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d106      	bne.n	8012790 <tcp_keepalive+0x20>
 8012782:	4b18      	ldr	r3, [pc, #96]	; (80127e4 <tcp_keepalive+0x74>)
 8012784:	f640 0224 	movw	r2, #2084	; 0x824
 8012788:	4917      	ldr	r1, [pc, #92]	; (80127e8 <tcp_keepalive+0x78>)
 801278a:	4818      	ldr	r0, [pc, #96]	; (80127ec <tcp_keepalive+0x7c>)
 801278c:	f005 fb1e 	bl	8017dcc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012790:	7dfb      	ldrb	r3, [r7, #23]
 8012792:	b29c      	uxth	r4, r3
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012798:	3b01      	subs	r3, #1
 801279a:	4618      	mov	r0, r3
 801279c:	f7f8 f9c3 	bl	800ab26 <lwip_htonl>
 80127a0:	4603      	mov	r3, r0
 80127a2:	2200      	movs	r2, #0
 80127a4:	4621      	mov	r1, r4
 80127a6:	6878      	ldr	r0, [r7, #4]
 80127a8:	f7ff fe66 	bl	8012478 <tcp_output_alloc_header>
 80127ac:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80127ae:	693b      	ldr	r3, [r7, #16]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d102      	bne.n	80127ba <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80127b4:	f04f 33ff 	mov.w	r3, #4294967295
 80127b8:	e010      	b.n	80127dc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80127ba:	7dfb      	ldrb	r3, [r7, #23]
 80127bc:	2200      	movs	r2, #0
 80127be:	6939      	ldr	r1, [r7, #16]
 80127c0:	6878      	ldr	r0, [r7, #4]
 80127c2:	f7ff fe97 	bl	80124f4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80127c6:	687a      	ldr	r2, [r7, #4]
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	3304      	adds	r3, #4
 80127cc:	6939      	ldr	r1, [r7, #16]
 80127ce:	6878      	ldr	r0, [r7, #4]
 80127d0:	f7ff fed0 	bl	8012574 <tcp_output_control_segment>
 80127d4:	4603      	mov	r3, r0
 80127d6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80127d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80127dc:	4618      	mov	r0, r3
 80127de:	371c      	adds	r7, #28
 80127e0:	46bd      	mov	sp, r7
 80127e2:	bd90      	pop	{r4, r7, pc}
 80127e4:	0801b654 	.word	0x0801b654
 80127e8:	0801be30 	.word	0x0801be30
 80127ec:	0801b6a8 	.word	0x0801b6a8

080127f0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80127f0:	b590      	push	{r4, r7, lr}
 80127f2:	b08b      	sub	sp, #44	; 0x2c
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80127f8:	2300      	movs	r3, #0
 80127fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d106      	bne.n	8012812 <tcp_zero_window_probe+0x22>
 8012804:	4b4c      	ldr	r3, [pc, #304]	; (8012938 <tcp_zero_window_probe+0x148>)
 8012806:	f640 024f 	movw	r2, #2127	; 0x84f
 801280a:	494c      	ldr	r1, [pc, #304]	; (801293c <tcp_zero_window_probe+0x14c>)
 801280c:	484c      	ldr	r0, [pc, #304]	; (8012940 <tcp_zero_window_probe+0x150>)
 801280e:	f005 fadd 	bl	8017dcc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012816:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012818:	6a3b      	ldr	r3, [r7, #32]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d101      	bne.n	8012822 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801281e:	2300      	movs	r3, #0
 8012820:	e086      	b.n	8012930 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012828:	2bff      	cmp	r3, #255	; 0xff
 801282a:	d007      	beq.n	801283c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012832:	3301      	adds	r3, #1
 8012834:	b2da      	uxtb	r2, r3
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801283c:	6a3b      	ldr	r3, [r7, #32]
 801283e:	68db      	ldr	r3, [r3, #12]
 8012840:	899b      	ldrh	r3, [r3, #12]
 8012842:	b29b      	uxth	r3, r3
 8012844:	4618      	mov	r0, r3
 8012846:	f7f8 f959 	bl	800aafc <lwip_htons>
 801284a:	4603      	mov	r3, r0
 801284c:	b2db      	uxtb	r3, r3
 801284e:	f003 0301 	and.w	r3, r3, #1
 8012852:	2b00      	cmp	r3, #0
 8012854:	d005      	beq.n	8012862 <tcp_zero_window_probe+0x72>
 8012856:	6a3b      	ldr	r3, [r7, #32]
 8012858:	891b      	ldrh	r3, [r3, #8]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d101      	bne.n	8012862 <tcp_zero_window_probe+0x72>
 801285e:	2301      	movs	r3, #1
 8012860:	e000      	b.n	8012864 <tcp_zero_window_probe+0x74>
 8012862:	2300      	movs	r3, #0
 8012864:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012866:	7ffb      	ldrb	r3, [r7, #31]
 8012868:	2b00      	cmp	r3, #0
 801286a:	bf0c      	ite	eq
 801286c:	2301      	moveq	r3, #1
 801286e:	2300      	movne	r3, #0
 8012870:	b2db      	uxtb	r3, r3
 8012872:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012878:	b299      	uxth	r1, r3
 801287a:	6a3b      	ldr	r3, [r7, #32]
 801287c:	68db      	ldr	r3, [r3, #12]
 801287e:	685b      	ldr	r3, [r3, #4]
 8012880:	8bba      	ldrh	r2, [r7, #28]
 8012882:	6878      	ldr	r0, [r7, #4]
 8012884:	f7ff fdf8 	bl	8012478 <tcp_output_alloc_header>
 8012888:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801288a:	69bb      	ldr	r3, [r7, #24]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d102      	bne.n	8012896 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012890:	f04f 33ff 	mov.w	r3, #4294967295
 8012894:	e04c      	b.n	8012930 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012896:	69bb      	ldr	r3, [r7, #24]
 8012898:	685b      	ldr	r3, [r3, #4]
 801289a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801289c:	7ffb      	ldrb	r3, [r7, #31]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d011      	beq.n	80128c6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80128a2:	697b      	ldr	r3, [r7, #20]
 80128a4:	899b      	ldrh	r3, [r3, #12]
 80128a6:	b29b      	uxth	r3, r3
 80128a8:	b21b      	sxth	r3, r3
 80128aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80128ae:	b21c      	sxth	r4, r3
 80128b0:	2011      	movs	r0, #17
 80128b2:	f7f8 f923 	bl	800aafc <lwip_htons>
 80128b6:	4603      	mov	r3, r0
 80128b8:	b21b      	sxth	r3, r3
 80128ba:	4323      	orrs	r3, r4
 80128bc:	b21b      	sxth	r3, r3
 80128be:	b29a      	uxth	r2, r3
 80128c0:	697b      	ldr	r3, [r7, #20]
 80128c2:	819a      	strh	r2, [r3, #12]
 80128c4:	e010      	b.n	80128e8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80128c6:	69bb      	ldr	r3, [r7, #24]
 80128c8:	685b      	ldr	r3, [r3, #4]
 80128ca:	3314      	adds	r3, #20
 80128cc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80128ce:	6a3b      	ldr	r3, [r7, #32]
 80128d0:	6858      	ldr	r0, [r3, #4]
 80128d2:	6a3b      	ldr	r3, [r7, #32]
 80128d4:	685b      	ldr	r3, [r3, #4]
 80128d6:	891a      	ldrh	r2, [r3, #8]
 80128d8:	6a3b      	ldr	r3, [r7, #32]
 80128da:	891b      	ldrh	r3, [r3, #8]
 80128dc:	1ad3      	subs	r3, r2, r3
 80128de:	b29b      	uxth	r3, r3
 80128e0:	2201      	movs	r2, #1
 80128e2:	6939      	ldr	r1, [r7, #16]
 80128e4:	f7f9 fefa 	bl	800c6dc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80128e8:	6a3b      	ldr	r3, [r7, #32]
 80128ea:	68db      	ldr	r3, [r3, #12]
 80128ec:	685b      	ldr	r3, [r3, #4]
 80128ee:	4618      	mov	r0, r3
 80128f0:	f7f8 f919 	bl	800ab26 <lwip_htonl>
 80128f4:	4603      	mov	r3, r0
 80128f6:	3301      	adds	r3, #1
 80128f8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	1ad3      	subs	r3, r2, r3
 8012902:	2b00      	cmp	r3, #0
 8012904:	da02      	bge.n	801290c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	68fa      	ldr	r2, [r7, #12]
 801290a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801290c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012910:	2200      	movs	r2, #0
 8012912:	69b9      	ldr	r1, [r7, #24]
 8012914:	6878      	ldr	r0, [r7, #4]
 8012916:	f7ff fded 	bl	80124f4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801291a:	687a      	ldr	r2, [r7, #4]
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	3304      	adds	r3, #4
 8012920:	69b9      	ldr	r1, [r7, #24]
 8012922:	6878      	ldr	r0, [r7, #4]
 8012924:	f7ff fe26 	bl	8012574 <tcp_output_control_segment>
 8012928:	4603      	mov	r3, r0
 801292a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801292c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012930:	4618      	mov	r0, r3
 8012932:	372c      	adds	r7, #44	; 0x2c
 8012934:	46bd      	mov	sp, r7
 8012936:	bd90      	pop	{r4, r7, pc}
 8012938:	0801b654 	.word	0x0801b654
 801293c:	0801be4c 	.word	0x0801be4c
 8012940:	0801b6a8 	.word	0x0801b6a8

08012944 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012944:	b580      	push	{r7, lr}
 8012946:	b082      	sub	sp, #8
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801294c:	f7f9 ffb4 	bl	800c8b8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012950:	4b0a      	ldr	r3, [pc, #40]	; (801297c <tcpip_tcp_timer+0x38>)
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d103      	bne.n	8012960 <tcpip_tcp_timer+0x1c>
 8012958:	4b09      	ldr	r3, [pc, #36]	; (8012980 <tcpip_tcp_timer+0x3c>)
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d005      	beq.n	801296c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012960:	2200      	movs	r2, #0
 8012962:	4908      	ldr	r1, [pc, #32]	; (8012984 <tcpip_tcp_timer+0x40>)
 8012964:	20fa      	movs	r0, #250	; 0xfa
 8012966:	f000 f8f1 	bl	8012b4c <sys_timeout>
 801296a:	e002      	b.n	8012972 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801296c:	4b06      	ldr	r3, [pc, #24]	; (8012988 <tcpip_tcp_timer+0x44>)
 801296e:	2200      	movs	r2, #0
 8012970:	601a      	str	r2, [r3, #0]
  }
}
 8012972:	bf00      	nop
 8012974:	3708      	adds	r7, #8
 8012976:	46bd      	mov	sp, r7
 8012978:	bd80      	pop	{r7, pc}
 801297a:	bf00      	nop
 801297c:	2000f514 	.word	0x2000f514
 8012980:	2000f524 	.word	0x2000f524
 8012984:	08012945 	.word	0x08012945
 8012988:	20008acc 	.word	0x20008acc

0801298c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801298c:	b580      	push	{r7, lr}
 801298e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012990:	4b0a      	ldr	r3, [pc, #40]	; (80129bc <tcp_timer_needed+0x30>)
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d10f      	bne.n	80129b8 <tcp_timer_needed+0x2c>
 8012998:	4b09      	ldr	r3, [pc, #36]	; (80129c0 <tcp_timer_needed+0x34>)
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d103      	bne.n	80129a8 <tcp_timer_needed+0x1c>
 80129a0:	4b08      	ldr	r3, [pc, #32]	; (80129c4 <tcp_timer_needed+0x38>)
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d007      	beq.n	80129b8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80129a8:	4b04      	ldr	r3, [pc, #16]	; (80129bc <tcp_timer_needed+0x30>)
 80129aa:	2201      	movs	r2, #1
 80129ac:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80129ae:	2200      	movs	r2, #0
 80129b0:	4905      	ldr	r1, [pc, #20]	; (80129c8 <tcp_timer_needed+0x3c>)
 80129b2:	20fa      	movs	r0, #250	; 0xfa
 80129b4:	f000 f8ca 	bl	8012b4c <sys_timeout>
  }
}
 80129b8:	bf00      	nop
 80129ba:	bd80      	pop	{r7, pc}
 80129bc:	20008acc 	.word	0x20008acc
 80129c0:	2000f514 	.word	0x2000f514
 80129c4:	2000f524 	.word	0x2000f524
 80129c8:	08012945 	.word	0x08012945

080129cc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b086      	sub	sp, #24
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	60f8      	str	r0, [r7, #12]
 80129d4:	60b9      	str	r1, [r7, #8]
 80129d6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80129d8:	200a      	movs	r0, #10
 80129da:	f7f8 fd7b 	bl	800b4d4 <memp_malloc>
 80129de:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80129e0:	693b      	ldr	r3, [r7, #16]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d109      	bne.n	80129fa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80129e6:	693b      	ldr	r3, [r7, #16]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d151      	bne.n	8012a90 <sys_timeout_abs+0xc4>
 80129ec:	4b2a      	ldr	r3, [pc, #168]	; (8012a98 <sys_timeout_abs+0xcc>)
 80129ee:	22be      	movs	r2, #190	; 0xbe
 80129f0:	492a      	ldr	r1, [pc, #168]	; (8012a9c <sys_timeout_abs+0xd0>)
 80129f2:	482b      	ldr	r0, [pc, #172]	; (8012aa0 <sys_timeout_abs+0xd4>)
 80129f4:	f005 f9ea 	bl	8017dcc <iprintf>
    return;
 80129f8:	e04a      	b.n	8012a90 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80129fa:	693b      	ldr	r3, [r7, #16]
 80129fc:	2200      	movs	r2, #0
 80129fe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012a00:	693b      	ldr	r3, [r7, #16]
 8012a02:	68ba      	ldr	r2, [r7, #8]
 8012a04:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012a06:	693b      	ldr	r3, [r7, #16]
 8012a08:	687a      	ldr	r2, [r7, #4]
 8012a0a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012a0c:	693b      	ldr	r3, [r7, #16]
 8012a0e:	68fa      	ldr	r2, [r7, #12]
 8012a10:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012a12:	4b24      	ldr	r3, [pc, #144]	; (8012aa4 <sys_timeout_abs+0xd8>)
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d103      	bne.n	8012a22 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012a1a:	4a22      	ldr	r2, [pc, #136]	; (8012aa4 <sys_timeout_abs+0xd8>)
 8012a1c:	693b      	ldr	r3, [r7, #16]
 8012a1e:	6013      	str	r3, [r2, #0]
    return;
 8012a20:	e037      	b.n	8012a92 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012a22:	693b      	ldr	r3, [r7, #16]
 8012a24:	685a      	ldr	r2, [r3, #4]
 8012a26:	4b1f      	ldr	r3, [pc, #124]	; (8012aa4 <sys_timeout_abs+0xd8>)
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	685b      	ldr	r3, [r3, #4]
 8012a2c:	1ad3      	subs	r3, r2, r3
 8012a2e:	0fdb      	lsrs	r3, r3, #31
 8012a30:	f003 0301 	and.w	r3, r3, #1
 8012a34:	b2db      	uxtb	r3, r3
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d007      	beq.n	8012a4a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012a3a:	4b1a      	ldr	r3, [pc, #104]	; (8012aa4 <sys_timeout_abs+0xd8>)
 8012a3c:	681a      	ldr	r2, [r3, #0]
 8012a3e:	693b      	ldr	r3, [r7, #16]
 8012a40:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012a42:	4a18      	ldr	r2, [pc, #96]	; (8012aa4 <sys_timeout_abs+0xd8>)
 8012a44:	693b      	ldr	r3, [r7, #16]
 8012a46:	6013      	str	r3, [r2, #0]
 8012a48:	e023      	b.n	8012a92 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012a4a:	4b16      	ldr	r3, [pc, #88]	; (8012aa4 <sys_timeout_abs+0xd8>)
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	617b      	str	r3, [r7, #20]
 8012a50:	e01a      	b.n	8012a88 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012a52:	697b      	ldr	r3, [r7, #20]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d00b      	beq.n	8012a72 <sys_timeout_abs+0xa6>
 8012a5a:	693b      	ldr	r3, [r7, #16]
 8012a5c:	685a      	ldr	r2, [r3, #4]
 8012a5e:	697b      	ldr	r3, [r7, #20]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	685b      	ldr	r3, [r3, #4]
 8012a64:	1ad3      	subs	r3, r2, r3
 8012a66:	0fdb      	lsrs	r3, r3, #31
 8012a68:	f003 0301 	and.w	r3, r3, #1
 8012a6c:	b2db      	uxtb	r3, r3
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d007      	beq.n	8012a82 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012a72:	697b      	ldr	r3, [r7, #20]
 8012a74:	681a      	ldr	r2, [r3, #0]
 8012a76:	693b      	ldr	r3, [r7, #16]
 8012a78:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012a7a:	697b      	ldr	r3, [r7, #20]
 8012a7c:	693a      	ldr	r2, [r7, #16]
 8012a7e:	601a      	str	r2, [r3, #0]
        break;
 8012a80:	e007      	b.n	8012a92 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012a82:	697b      	ldr	r3, [r7, #20]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	617b      	str	r3, [r7, #20]
 8012a88:	697b      	ldr	r3, [r7, #20]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d1e1      	bne.n	8012a52 <sys_timeout_abs+0x86>
 8012a8e:	e000      	b.n	8012a92 <sys_timeout_abs+0xc6>
    return;
 8012a90:	bf00      	nop
      }
    }
  }
}
 8012a92:	3718      	adds	r7, #24
 8012a94:	46bd      	mov	sp, r7
 8012a96:	bd80      	pop	{r7, pc}
 8012a98:	0801be70 	.word	0x0801be70
 8012a9c:	0801bea4 	.word	0x0801bea4
 8012aa0:	0801bee4 	.word	0x0801bee4
 8012aa4:	20008ac4 	.word	0x20008ac4

08012aa8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b086      	sub	sp, #24
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012ab4:	697b      	ldr	r3, [r7, #20]
 8012ab6:	685b      	ldr	r3, [r3, #4]
 8012ab8:	4798      	blx	r3

  now = sys_now();
 8012aba:	f7f1 fe9d 	bl	80047f8 <sys_now>
 8012abe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012ac0:	697b      	ldr	r3, [r7, #20]
 8012ac2:	681a      	ldr	r2, [r3, #0]
 8012ac4:	4b0f      	ldr	r3, [pc, #60]	; (8012b04 <lwip_cyclic_timer+0x5c>)
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	4413      	add	r3, r2
 8012aca:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012acc:	68fa      	ldr	r2, [r7, #12]
 8012ace:	693b      	ldr	r3, [r7, #16]
 8012ad0:	1ad3      	subs	r3, r2, r3
 8012ad2:	0fdb      	lsrs	r3, r3, #31
 8012ad4:	f003 0301 	and.w	r3, r3, #1
 8012ad8:	b2db      	uxtb	r3, r3
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d009      	beq.n	8012af2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012ade:	697b      	ldr	r3, [r7, #20]
 8012ae0:	681a      	ldr	r2, [r3, #0]
 8012ae2:	693b      	ldr	r3, [r7, #16]
 8012ae4:	4413      	add	r3, r2
 8012ae6:	687a      	ldr	r2, [r7, #4]
 8012ae8:	4907      	ldr	r1, [pc, #28]	; (8012b08 <lwip_cyclic_timer+0x60>)
 8012aea:	4618      	mov	r0, r3
 8012aec:	f7ff ff6e 	bl	80129cc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012af0:	e004      	b.n	8012afc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012af2:	687a      	ldr	r2, [r7, #4]
 8012af4:	4904      	ldr	r1, [pc, #16]	; (8012b08 <lwip_cyclic_timer+0x60>)
 8012af6:	68f8      	ldr	r0, [r7, #12]
 8012af8:	f7ff ff68 	bl	80129cc <sys_timeout_abs>
}
 8012afc:	bf00      	nop
 8012afe:	3718      	adds	r7, #24
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd80      	pop	{r7, pc}
 8012b04:	20008ac8 	.word	0x20008ac8
 8012b08:	08012aa9 	.word	0x08012aa9

08012b0c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b082      	sub	sp, #8
 8012b10:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012b12:	2301      	movs	r3, #1
 8012b14:	607b      	str	r3, [r7, #4]
 8012b16:	e00e      	b.n	8012b36 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012b18:	4a0a      	ldr	r2, [pc, #40]	; (8012b44 <sys_timeouts_init+0x38>)
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	00db      	lsls	r3, r3, #3
 8012b24:	4a07      	ldr	r2, [pc, #28]	; (8012b44 <sys_timeouts_init+0x38>)
 8012b26:	4413      	add	r3, r2
 8012b28:	461a      	mov	r2, r3
 8012b2a:	4907      	ldr	r1, [pc, #28]	; (8012b48 <sys_timeouts_init+0x3c>)
 8012b2c:	f000 f80e 	bl	8012b4c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	3301      	adds	r3, #1
 8012b34:	607b      	str	r3, [r7, #4]
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	2b04      	cmp	r3, #4
 8012b3a:	d9ed      	bls.n	8012b18 <sys_timeouts_init+0xc>
  }
}
 8012b3c:	bf00      	nop
 8012b3e:	3708      	adds	r7, #8
 8012b40:	46bd      	mov	sp, r7
 8012b42:	bd80      	pop	{r7, pc}
 8012b44:	08026f6c 	.word	0x08026f6c
 8012b48:	08012aa9 	.word	0x08012aa9

08012b4c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012b4c:	b580      	push	{r7, lr}
 8012b4e:	b086      	sub	sp, #24
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	60f8      	str	r0, [r7, #12]
 8012b54:	60b9      	str	r1, [r7, #8]
 8012b56:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012b5e:	d306      	bcc.n	8012b6e <sys_timeout+0x22>
 8012b60:	4b0a      	ldr	r3, [pc, #40]	; (8012b8c <sys_timeout+0x40>)
 8012b62:	f240 1229 	movw	r2, #297	; 0x129
 8012b66:	490a      	ldr	r1, [pc, #40]	; (8012b90 <sys_timeout+0x44>)
 8012b68:	480a      	ldr	r0, [pc, #40]	; (8012b94 <sys_timeout+0x48>)
 8012b6a:	f005 f92f 	bl	8017dcc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012b6e:	f7f1 fe43 	bl	80047f8 <sys_now>
 8012b72:	4602      	mov	r2, r0
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	4413      	add	r3, r2
 8012b78:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012b7a:	687a      	ldr	r2, [r7, #4]
 8012b7c:	68b9      	ldr	r1, [r7, #8]
 8012b7e:	6978      	ldr	r0, [r7, #20]
 8012b80:	f7ff ff24 	bl	80129cc <sys_timeout_abs>
#endif
}
 8012b84:	bf00      	nop
 8012b86:	3718      	adds	r7, #24
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd80      	pop	{r7, pc}
 8012b8c:	0801be70 	.word	0x0801be70
 8012b90:	0801bf0c 	.word	0x0801bf0c
 8012b94:	0801bee4 	.word	0x0801bee4

08012b98 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b084      	sub	sp, #16
 8012b9c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012b9e:	f7f1 fe2b 	bl	80047f8 <sys_now>
 8012ba2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012ba4:	4b17      	ldr	r3, [pc, #92]	; (8012c04 <sys_check_timeouts+0x6c>)
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012baa:	68bb      	ldr	r3, [r7, #8]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d022      	beq.n	8012bf6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012bb0:	68bb      	ldr	r3, [r7, #8]
 8012bb2:	685b      	ldr	r3, [r3, #4]
 8012bb4:	68fa      	ldr	r2, [r7, #12]
 8012bb6:	1ad3      	subs	r3, r2, r3
 8012bb8:	0fdb      	lsrs	r3, r3, #31
 8012bba:	f003 0301 	and.w	r3, r3, #1
 8012bbe:	b2db      	uxtb	r3, r3
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d11a      	bne.n	8012bfa <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012bc4:	68bb      	ldr	r3, [r7, #8]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	4a0e      	ldr	r2, [pc, #56]	; (8012c04 <sys_check_timeouts+0x6c>)
 8012bca:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012bcc:	68bb      	ldr	r3, [r7, #8]
 8012bce:	689b      	ldr	r3, [r3, #8]
 8012bd0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012bd2:	68bb      	ldr	r3, [r7, #8]
 8012bd4:	68db      	ldr	r3, [r3, #12]
 8012bd6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012bd8:	68bb      	ldr	r3, [r7, #8]
 8012bda:	685b      	ldr	r3, [r3, #4]
 8012bdc:	4a0a      	ldr	r2, [pc, #40]	; (8012c08 <sys_check_timeouts+0x70>)
 8012bde:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012be0:	68b9      	ldr	r1, [r7, #8]
 8012be2:	200a      	movs	r0, #10
 8012be4:	f7f8 fcc8 	bl	800b578 <memp_free>
    if (handler != NULL) {
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d0da      	beq.n	8012ba4 <sys_check_timeouts+0xc>
      handler(arg);
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	6838      	ldr	r0, [r7, #0]
 8012bf2:	4798      	blx	r3
  do {
 8012bf4:	e7d6      	b.n	8012ba4 <sys_check_timeouts+0xc>
      return;
 8012bf6:	bf00      	nop
 8012bf8:	e000      	b.n	8012bfc <sys_check_timeouts+0x64>
      return;
 8012bfa:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012bfc:	3710      	adds	r7, #16
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	bd80      	pop	{r7, pc}
 8012c02:	bf00      	nop
 8012c04:	20008ac4 	.word	0x20008ac4
 8012c08:	20008ac8 	.word	0x20008ac8

08012c0c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b082      	sub	sp, #8
 8012c10:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012c12:	4b16      	ldr	r3, [pc, #88]	; (8012c6c <sys_timeouts_sleeptime+0x60>)
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d102      	bne.n	8012c20 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8012c1e:	e020      	b.n	8012c62 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012c20:	f7f1 fdea 	bl	80047f8 <sys_now>
 8012c24:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012c26:	4b11      	ldr	r3, [pc, #68]	; (8012c6c <sys_timeouts_sleeptime+0x60>)
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	685a      	ldr	r2, [r3, #4]
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	1ad3      	subs	r3, r2, r3
 8012c30:	0fdb      	lsrs	r3, r3, #31
 8012c32:	f003 0301 	and.w	r3, r3, #1
 8012c36:	b2db      	uxtb	r3, r3
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d001      	beq.n	8012c40 <sys_timeouts_sleeptime+0x34>
    return 0;
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	e010      	b.n	8012c62 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012c40:	4b0a      	ldr	r3, [pc, #40]	; (8012c6c <sys_timeouts_sleeptime+0x60>)
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	685a      	ldr	r2, [r3, #4]
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	1ad3      	subs	r3, r2, r3
 8012c4a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012c4c:	683b      	ldr	r3, [r7, #0]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	da06      	bge.n	8012c60 <sys_timeouts_sleeptime+0x54>
 8012c52:	4b07      	ldr	r3, [pc, #28]	; (8012c70 <sys_timeouts_sleeptime+0x64>)
 8012c54:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8012c58:	4906      	ldr	r1, [pc, #24]	; (8012c74 <sys_timeouts_sleeptime+0x68>)
 8012c5a:	4807      	ldr	r0, [pc, #28]	; (8012c78 <sys_timeouts_sleeptime+0x6c>)
 8012c5c:	f005 f8b6 	bl	8017dcc <iprintf>
    return ret;
 8012c60:	683b      	ldr	r3, [r7, #0]
  }
}
 8012c62:	4618      	mov	r0, r3
 8012c64:	3708      	adds	r7, #8
 8012c66:	46bd      	mov	sp, r7
 8012c68:	bd80      	pop	{r7, pc}
 8012c6a:	bf00      	nop
 8012c6c:	20008ac4 	.word	0x20008ac4
 8012c70:	0801be70 	.word	0x0801be70
 8012c74:	0801bf44 	.word	0x0801bf44
 8012c78:	0801bee4 	.word	0x0801bee4

08012c7c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012c80:	f005 f920 	bl	8017ec4 <rand>
 8012c84:	4603      	mov	r3, r0
 8012c86:	b29b      	uxth	r3, r3
 8012c88:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012c8c:	b29b      	uxth	r3, r3
 8012c8e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012c92:	b29a      	uxth	r2, r3
 8012c94:	4b01      	ldr	r3, [pc, #4]	; (8012c9c <udp_init+0x20>)
 8012c96:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012c98:	bf00      	nop
 8012c9a:	bd80      	pop	{r7, pc}
 8012c9c:	20000018 	.word	0x20000018

08012ca0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012ca0:	b480      	push	{r7}
 8012ca2:	b083      	sub	sp, #12
 8012ca4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012caa:	4b17      	ldr	r3, [pc, #92]	; (8012d08 <udp_new_port+0x68>)
 8012cac:	881b      	ldrh	r3, [r3, #0]
 8012cae:	1c5a      	adds	r2, r3, #1
 8012cb0:	b291      	uxth	r1, r2
 8012cb2:	4a15      	ldr	r2, [pc, #84]	; (8012d08 <udp_new_port+0x68>)
 8012cb4:	8011      	strh	r1, [r2, #0]
 8012cb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012cba:	4293      	cmp	r3, r2
 8012cbc:	d103      	bne.n	8012cc6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012cbe:	4b12      	ldr	r3, [pc, #72]	; (8012d08 <udp_new_port+0x68>)
 8012cc0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012cc4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012cc6:	4b11      	ldr	r3, [pc, #68]	; (8012d0c <udp_new_port+0x6c>)
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	603b      	str	r3, [r7, #0]
 8012ccc:	e011      	b.n	8012cf2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012cce:	683b      	ldr	r3, [r7, #0]
 8012cd0:	8a5a      	ldrh	r2, [r3, #18]
 8012cd2:	4b0d      	ldr	r3, [pc, #52]	; (8012d08 <udp_new_port+0x68>)
 8012cd4:	881b      	ldrh	r3, [r3, #0]
 8012cd6:	429a      	cmp	r2, r3
 8012cd8:	d108      	bne.n	8012cec <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012cda:	88fb      	ldrh	r3, [r7, #6]
 8012cdc:	3301      	adds	r3, #1
 8012cde:	80fb      	strh	r3, [r7, #6]
 8012ce0:	88fb      	ldrh	r3, [r7, #6]
 8012ce2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012ce6:	d3e0      	bcc.n	8012caa <udp_new_port+0xa>
        return 0;
 8012ce8:	2300      	movs	r3, #0
 8012cea:	e007      	b.n	8012cfc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012cec:	683b      	ldr	r3, [r7, #0]
 8012cee:	68db      	ldr	r3, [r3, #12]
 8012cf0:	603b      	str	r3, [r7, #0]
 8012cf2:	683b      	ldr	r3, [r7, #0]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d1ea      	bne.n	8012cce <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012cf8:	4b03      	ldr	r3, [pc, #12]	; (8012d08 <udp_new_port+0x68>)
 8012cfa:	881b      	ldrh	r3, [r3, #0]
}
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	370c      	adds	r7, #12
 8012d00:	46bd      	mov	sp, r7
 8012d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d06:	4770      	bx	lr
 8012d08:	20000018 	.word	0x20000018
 8012d0c:	2000f52c 	.word	0x2000f52c

08012d10 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b084      	sub	sp, #16
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	60f8      	str	r0, [r7, #12]
 8012d18:	60b9      	str	r1, [r7, #8]
 8012d1a:	4613      	mov	r3, r2
 8012d1c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d105      	bne.n	8012d30 <udp_input_local_match+0x20>
 8012d24:	4b27      	ldr	r3, [pc, #156]	; (8012dc4 <udp_input_local_match+0xb4>)
 8012d26:	2287      	movs	r2, #135	; 0x87
 8012d28:	4927      	ldr	r1, [pc, #156]	; (8012dc8 <udp_input_local_match+0xb8>)
 8012d2a:	4828      	ldr	r0, [pc, #160]	; (8012dcc <udp_input_local_match+0xbc>)
 8012d2c:	f005 f84e 	bl	8017dcc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012d30:	68bb      	ldr	r3, [r7, #8]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d105      	bne.n	8012d42 <udp_input_local_match+0x32>
 8012d36:	4b23      	ldr	r3, [pc, #140]	; (8012dc4 <udp_input_local_match+0xb4>)
 8012d38:	2288      	movs	r2, #136	; 0x88
 8012d3a:	4925      	ldr	r1, [pc, #148]	; (8012dd0 <udp_input_local_match+0xc0>)
 8012d3c:	4823      	ldr	r0, [pc, #140]	; (8012dcc <udp_input_local_match+0xbc>)
 8012d3e:	f005 f845 	bl	8017dcc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	7a1b      	ldrb	r3, [r3, #8]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d00b      	beq.n	8012d62 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	7a1a      	ldrb	r2, [r3, #8]
 8012d4e:	4b21      	ldr	r3, [pc, #132]	; (8012dd4 <udp_input_local_match+0xc4>)
 8012d50:	685b      	ldr	r3, [r3, #4]
 8012d52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012d56:	3301      	adds	r3, #1
 8012d58:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012d5a:	429a      	cmp	r2, r3
 8012d5c:	d001      	beq.n	8012d62 <udp_input_local_match+0x52>
    return 0;
 8012d5e:	2300      	movs	r3, #0
 8012d60:	e02b      	b.n	8012dba <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012d62:	79fb      	ldrb	r3, [r7, #7]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d018      	beq.n	8012d9a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d013      	beq.n	8012d96 <udp_input_local_match+0x86>
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d00f      	beq.n	8012d96 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012d76:	4b17      	ldr	r3, [pc, #92]	; (8012dd4 <udp_input_local_match+0xc4>)
 8012d78:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d7e:	d00a      	beq.n	8012d96 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	681a      	ldr	r2, [r3, #0]
 8012d84:	4b13      	ldr	r3, [pc, #76]	; (8012dd4 <udp_input_local_match+0xc4>)
 8012d86:	695b      	ldr	r3, [r3, #20]
 8012d88:	405a      	eors	r2, r3
 8012d8a:	68bb      	ldr	r3, [r7, #8]
 8012d8c:	3308      	adds	r3, #8
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d110      	bne.n	8012db8 <udp_input_local_match+0xa8>
          return 1;
 8012d96:	2301      	movs	r3, #1
 8012d98:	e00f      	b.n	8012dba <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d009      	beq.n	8012db4 <udp_input_local_match+0xa4>
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d005      	beq.n	8012db4 <udp_input_local_match+0xa4>
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	681a      	ldr	r2, [r3, #0]
 8012dac:	4b09      	ldr	r3, [pc, #36]	; (8012dd4 <udp_input_local_match+0xc4>)
 8012dae:	695b      	ldr	r3, [r3, #20]
 8012db0:	429a      	cmp	r2, r3
 8012db2:	d101      	bne.n	8012db8 <udp_input_local_match+0xa8>
        return 1;
 8012db4:	2301      	movs	r3, #1
 8012db6:	e000      	b.n	8012dba <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012db8:	2300      	movs	r3, #0
}
 8012dba:	4618      	mov	r0, r3
 8012dbc:	3710      	adds	r7, #16
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bd80      	pop	{r7, pc}
 8012dc2:	bf00      	nop
 8012dc4:	0801bf58 	.word	0x0801bf58
 8012dc8:	0801bf88 	.word	0x0801bf88
 8012dcc:	0801bfac 	.word	0x0801bfac
 8012dd0:	0801bfd4 	.word	0x0801bfd4
 8012dd4:	2000bde0 	.word	0x2000bde0

08012dd8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012dd8:	b590      	push	{r4, r7, lr}
 8012dda:	b08d      	sub	sp, #52	; 0x34
 8012ddc:	af02      	add	r7, sp, #8
 8012dde:	6078      	str	r0, [r7, #4]
 8012de0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012de2:	2300      	movs	r3, #0
 8012de4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d105      	bne.n	8012df8 <udp_input+0x20>
 8012dec:	4b7c      	ldr	r3, [pc, #496]	; (8012fe0 <udp_input+0x208>)
 8012dee:	22cf      	movs	r2, #207	; 0xcf
 8012df0:	497c      	ldr	r1, [pc, #496]	; (8012fe4 <udp_input+0x20c>)
 8012df2:	487d      	ldr	r0, [pc, #500]	; (8012fe8 <udp_input+0x210>)
 8012df4:	f004 ffea 	bl	8017dcc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012df8:	683b      	ldr	r3, [r7, #0]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d105      	bne.n	8012e0a <udp_input+0x32>
 8012dfe:	4b78      	ldr	r3, [pc, #480]	; (8012fe0 <udp_input+0x208>)
 8012e00:	22d0      	movs	r2, #208	; 0xd0
 8012e02:	497a      	ldr	r1, [pc, #488]	; (8012fec <udp_input+0x214>)
 8012e04:	4878      	ldr	r0, [pc, #480]	; (8012fe8 <udp_input+0x210>)
 8012e06:	f004 ffe1 	bl	8017dcc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	895b      	ldrh	r3, [r3, #10]
 8012e0e:	2b07      	cmp	r3, #7
 8012e10:	d803      	bhi.n	8012e1a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012e12:	6878      	ldr	r0, [r7, #4]
 8012e14:	f7f9 fa5c 	bl	800c2d0 <pbuf_free>
    goto end;
 8012e18:	e0de      	b.n	8012fd8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	685b      	ldr	r3, [r3, #4]
 8012e1e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012e20:	4b73      	ldr	r3, [pc, #460]	; (8012ff0 <udp_input+0x218>)
 8012e22:	695a      	ldr	r2, [r3, #20]
 8012e24:	4b72      	ldr	r3, [pc, #456]	; (8012ff0 <udp_input+0x218>)
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	4619      	mov	r1, r3
 8012e2a:	4610      	mov	r0, r2
 8012e2c:	f003 fe20 	bl	8016a70 <ip4_addr_isbroadcast_u32>
 8012e30:	4603      	mov	r3, r0
 8012e32:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012e34:	697b      	ldr	r3, [r7, #20]
 8012e36:	881b      	ldrh	r3, [r3, #0]
 8012e38:	b29b      	uxth	r3, r3
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	f7f7 fe5e 	bl	800aafc <lwip_htons>
 8012e40:	4603      	mov	r3, r0
 8012e42:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012e44:	697b      	ldr	r3, [r7, #20]
 8012e46:	885b      	ldrh	r3, [r3, #2]
 8012e48:	b29b      	uxth	r3, r3
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	f7f7 fe56 	bl	800aafc <lwip_htons>
 8012e50:	4603      	mov	r3, r0
 8012e52:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012e54:	2300      	movs	r3, #0
 8012e56:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012e58:	2300      	movs	r3, #0
 8012e5a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e60:	4b64      	ldr	r3, [pc, #400]	; (8012ff4 <udp_input+0x21c>)
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	627b      	str	r3, [r7, #36]	; 0x24
 8012e66:	e054      	b.n	8012f12 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e6a:	8a5b      	ldrh	r3, [r3, #18]
 8012e6c:	89fa      	ldrh	r2, [r7, #14]
 8012e6e:	429a      	cmp	r2, r3
 8012e70:	d14a      	bne.n	8012f08 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012e72:	7cfb      	ldrb	r3, [r7, #19]
 8012e74:	461a      	mov	r2, r3
 8012e76:	6839      	ldr	r1, [r7, #0]
 8012e78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e7a:	f7ff ff49 	bl	8012d10 <udp_input_local_match>
 8012e7e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d041      	beq.n	8012f08 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e86:	7c1b      	ldrb	r3, [r3, #16]
 8012e88:	f003 0304 	and.w	r3, r3, #4
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d11d      	bne.n	8012ecc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012e90:	69fb      	ldr	r3, [r7, #28]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d102      	bne.n	8012e9c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e98:	61fb      	str	r3, [r7, #28]
 8012e9a:	e017      	b.n	8012ecc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012e9c:	7cfb      	ldrb	r3, [r7, #19]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d014      	beq.n	8012ecc <udp_input+0xf4>
 8012ea2:	4b53      	ldr	r3, [pc, #332]	; (8012ff0 <udp_input+0x218>)
 8012ea4:	695b      	ldr	r3, [r3, #20]
 8012ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012eaa:	d10f      	bne.n	8012ecc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012eac:	69fb      	ldr	r3, [r7, #28]
 8012eae:	681a      	ldr	r2, [r3, #0]
 8012eb0:	683b      	ldr	r3, [r7, #0]
 8012eb2:	3304      	adds	r3, #4
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	429a      	cmp	r2, r3
 8012eb8:	d008      	beq.n	8012ecc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ebc:	681a      	ldr	r2, [r3, #0]
 8012ebe:	683b      	ldr	r3, [r7, #0]
 8012ec0:	3304      	adds	r3, #4
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	429a      	cmp	r2, r3
 8012ec6:	d101      	bne.n	8012ecc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eca:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ece:	8a9b      	ldrh	r3, [r3, #20]
 8012ed0:	8a3a      	ldrh	r2, [r7, #16]
 8012ed2:	429a      	cmp	r2, r3
 8012ed4:	d118      	bne.n	8012f08 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ed8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d005      	beq.n	8012eea <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ee0:	685a      	ldr	r2, [r3, #4]
 8012ee2:	4b43      	ldr	r3, [pc, #268]	; (8012ff0 <udp_input+0x218>)
 8012ee4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012ee6:	429a      	cmp	r2, r3
 8012ee8:	d10e      	bne.n	8012f08 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012eea:	6a3b      	ldr	r3, [r7, #32]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d014      	beq.n	8012f1a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ef2:	68da      	ldr	r2, [r3, #12]
 8012ef4:	6a3b      	ldr	r3, [r7, #32]
 8012ef6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012ef8:	4b3e      	ldr	r3, [pc, #248]	; (8012ff4 <udp_input+0x21c>)
 8012efa:	681a      	ldr	r2, [r3, #0]
 8012efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012efe:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012f00:	4a3c      	ldr	r2, [pc, #240]	; (8012ff4 <udp_input+0x21c>)
 8012f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f04:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012f06:	e008      	b.n	8012f1a <udp_input+0x142>
      }
    }

    prev = pcb;
 8012f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f0a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f0e:	68db      	ldr	r3, [r3, #12]
 8012f10:	627b      	str	r3, [r7, #36]	; 0x24
 8012f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d1a7      	bne.n	8012e68 <udp_input+0x90>
 8012f18:	e000      	b.n	8012f1c <udp_input+0x144>
        break;
 8012f1a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d101      	bne.n	8012f26 <udp_input+0x14e>
    pcb = uncon_pcb;
 8012f22:	69fb      	ldr	r3, [r7, #28]
 8012f24:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d002      	beq.n	8012f32 <udp_input+0x15a>
    for_us = 1;
 8012f2c:	2301      	movs	r3, #1
 8012f2e:	76fb      	strb	r3, [r7, #27]
 8012f30:	e00a      	b.n	8012f48 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012f32:	683b      	ldr	r3, [r7, #0]
 8012f34:	3304      	adds	r3, #4
 8012f36:	681a      	ldr	r2, [r3, #0]
 8012f38:	4b2d      	ldr	r3, [pc, #180]	; (8012ff0 <udp_input+0x218>)
 8012f3a:	695b      	ldr	r3, [r3, #20]
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	bf0c      	ite	eq
 8012f40:	2301      	moveq	r3, #1
 8012f42:	2300      	movne	r3, #0
 8012f44:	b2db      	uxtb	r3, r3
 8012f46:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012f48:	7efb      	ldrb	r3, [r7, #27]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d041      	beq.n	8012fd2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012f4e:	2108      	movs	r1, #8
 8012f50:	6878      	ldr	r0, [r7, #4]
 8012f52:	f7f9 f937 	bl	800c1c4 <pbuf_remove_header>
 8012f56:	4603      	mov	r3, r0
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d00a      	beq.n	8012f72 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012f5c:	4b20      	ldr	r3, [pc, #128]	; (8012fe0 <udp_input+0x208>)
 8012f5e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012f62:	4925      	ldr	r1, [pc, #148]	; (8012ff8 <udp_input+0x220>)
 8012f64:	4820      	ldr	r0, [pc, #128]	; (8012fe8 <udp_input+0x210>)
 8012f66:	f004 ff31 	bl	8017dcc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012f6a:	6878      	ldr	r0, [r7, #4]
 8012f6c:	f7f9 f9b0 	bl	800c2d0 <pbuf_free>
      goto end;
 8012f70:	e032      	b.n	8012fd8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8012f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d012      	beq.n	8012f9e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f7a:	699b      	ldr	r3, [r3, #24]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d00a      	beq.n	8012f96 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f82:	699c      	ldr	r4, [r3, #24]
 8012f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f86:	69d8      	ldr	r0, [r3, #28]
 8012f88:	8a3b      	ldrh	r3, [r7, #16]
 8012f8a:	9300      	str	r3, [sp, #0]
 8012f8c:	4b1b      	ldr	r3, [pc, #108]	; (8012ffc <udp_input+0x224>)
 8012f8e:	687a      	ldr	r2, [r7, #4]
 8012f90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012f92:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012f94:	e021      	b.n	8012fda <udp_input+0x202>
        pbuf_free(p);
 8012f96:	6878      	ldr	r0, [r7, #4]
 8012f98:	f7f9 f99a 	bl	800c2d0 <pbuf_free>
        goto end;
 8012f9c:	e01c      	b.n	8012fd8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012f9e:	7cfb      	ldrb	r3, [r7, #19]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d112      	bne.n	8012fca <udp_input+0x1f2>
 8012fa4:	4b12      	ldr	r3, [pc, #72]	; (8012ff0 <udp_input+0x218>)
 8012fa6:	695b      	ldr	r3, [r3, #20]
 8012fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012fac:	2be0      	cmp	r3, #224	; 0xe0
 8012fae:	d00c      	beq.n	8012fca <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012fb0:	4b0f      	ldr	r3, [pc, #60]	; (8012ff0 <udp_input+0x218>)
 8012fb2:	899b      	ldrh	r3, [r3, #12]
 8012fb4:	3308      	adds	r3, #8
 8012fb6:	b29b      	uxth	r3, r3
 8012fb8:	b21b      	sxth	r3, r3
 8012fba:	4619      	mov	r1, r3
 8012fbc:	6878      	ldr	r0, [r7, #4]
 8012fbe:	f7f9 f974 	bl	800c2aa <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012fc2:	2103      	movs	r1, #3
 8012fc4:	6878      	ldr	r0, [r7, #4]
 8012fc6:	f003 fa17 	bl	80163f8 <icmp_dest_unreach>
      pbuf_free(p);
 8012fca:	6878      	ldr	r0, [r7, #4]
 8012fcc:	f7f9 f980 	bl	800c2d0 <pbuf_free>
  return;
 8012fd0:	e003      	b.n	8012fda <udp_input+0x202>
    pbuf_free(p);
 8012fd2:	6878      	ldr	r0, [r7, #4]
 8012fd4:	f7f9 f97c 	bl	800c2d0 <pbuf_free>
  return;
 8012fd8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012fda:	372c      	adds	r7, #44	; 0x2c
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd90      	pop	{r4, r7, pc}
 8012fe0:	0801bf58 	.word	0x0801bf58
 8012fe4:	0801bffc 	.word	0x0801bffc
 8012fe8:	0801bfac 	.word	0x0801bfac
 8012fec:	0801c014 	.word	0x0801c014
 8012ff0:	2000bde0 	.word	0x2000bde0
 8012ff4:	2000f52c 	.word	0x2000f52c
 8012ff8:	0801c030 	.word	0x0801c030
 8012ffc:	2000bdf0 	.word	0x2000bdf0

08013000 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b088      	sub	sp, #32
 8013004:	af02      	add	r7, sp, #8
 8013006:	60f8      	str	r0, [r7, #12]
 8013008:	60b9      	str	r1, [r7, #8]
 801300a:	607a      	str	r2, [r7, #4]
 801300c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d109      	bne.n	8013028 <udp_sendto_if+0x28>
 8013014:	4b2e      	ldr	r3, [pc, #184]	; (80130d0 <udp_sendto_if+0xd0>)
 8013016:	f44f 7220 	mov.w	r2, #640	; 0x280
 801301a:	492e      	ldr	r1, [pc, #184]	; (80130d4 <udp_sendto_if+0xd4>)
 801301c:	482e      	ldr	r0, [pc, #184]	; (80130d8 <udp_sendto_if+0xd8>)
 801301e:	f004 fed5 	bl	8017dcc <iprintf>
 8013022:	f06f 030f 	mvn.w	r3, #15
 8013026:	e04f      	b.n	80130c8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013028:	68bb      	ldr	r3, [r7, #8]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d109      	bne.n	8013042 <udp_sendto_if+0x42>
 801302e:	4b28      	ldr	r3, [pc, #160]	; (80130d0 <udp_sendto_if+0xd0>)
 8013030:	f240 2281 	movw	r2, #641	; 0x281
 8013034:	4929      	ldr	r1, [pc, #164]	; (80130dc <udp_sendto_if+0xdc>)
 8013036:	4828      	ldr	r0, [pc, #160]	; (80130d8 <udp_sendto_if+0xd8>)
 8013038:	f004 fec8 	bl	8017dcc <iprintf>
 801303c:	f06f 030f 	mvn.w	r3, #15
 8013040:	e042      	b.n	80130c8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d109      	bne.n	801305c <udp_sendto_if+0x5c>
 8013048:	4b21      	ldr	r3, [pc, #132]	; (80130d0 <udp_sendto_if+0xd0>)
 801304a:	f240 2282 	movw	r2, #642	; 0x282
 801304e:	4924      	ldr	r1, [pc, #144]	; (80130e0 <udp_sendto_if+0xe0>)
 8013050:	4821      	ldr	r0, [pc, #132]	; (80130d8 <udp_sendto_if+0xd8>)
 8013052:	f004 febb 	bl	8017dcc <iprintf>
 8013056:	f06f 030f 	mvn.w	r3, #15
 801305a:	e035      	b.n	80130c8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801305c:	6a3b      	ldr	r3, [r7, #32]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d109      	bne.n	8013076 <udp_sendto_if+0x76>
 8013062:	4b1b      	ldr	r3, [pc, #108]	; (80130d0 <udp_sendto_if+0xd0>)
 8013064:	f240 2283 	movw	r2, #643	; 0x283
 8013068:	491e      	ldr	r1, [pc, #120]	; (80130e4 <udp_sendto_if+0xe4>)
 801306a:	481b      	ldr	r0, [pc, #108]	; (80130d8 <udp_sendto_if+0xd8>)
 801306c:	f004 feae 	bl	8017dcc <iprintf>
 8013070:	f06f 030f 	mvn.w	r3, #15
 8013074:	e028      	b.n	80130c8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d009      	beq.n	8013090 <udp_sendto_if+0x90>
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d005      	beq.n	8013090 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801308c:	2be0      	cmp	r3, #224	; 0xe0
 801308e:	d103      	bne.n	8013098 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013090:	6a3b      	ldr	r3, [r7, #32]
 8013092:	3304      	adds	r3, #4
 8013094:	617b      	str	r3, [r7, #20]
 8013096:	e00b      	b.n	80130b0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	681a      	ldr	r2, [r3, #0]
 801309c:	6a3b      	ldr	r3, [r7, #32]
 801309e:	3304      	adds	r3, #4
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	429a      	cmp	r2, r3
 80130a4:	d002      	beq.n	80130ac <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80130a6:	f06f 0303 	mvn.w	r3, #3
 80130aa:	e00d      	b.n	80130c8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80130b0:	887a      	ldrh	r2, [r7, #2]
 80130b2:	697b      	ldr	r3, [r7, #20]
 80130b4:	9301      	str	r3, [sp, #4]
 80130b6:	6a3b      	ldr	r3, [r7, #32]
 80130b8:	9300      	str	r3, [sp, #0]
 80130ba:	4613      	mov	r3, r2
 80130bc:	687a      	ldr	r2, [r7, #4]
 80130be:	68b9      	ldr	r1, [r7, #8]
 80130c0:	68f8      	ldr	r0, [r7, #12]
 80130c2:	f000 f811 	bl	80130e8 <udp_sendto_if_src>
 80130c6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80130c8:	4618      	mov	r0, r3
 80130ca:	3718      	adds	r7, #24
 80130cc:	46bd      	mov	sp, r7
 80130ce:	bd80      	pop	{r7, pc}
 80130d0:	0801bf58 	.word	0x0801bf58
 80130d4:	0801c0cc 	.word	0x0801c0cc
 80130d8:	0801bfac 	.word	0x0801bfac
 80130dc:	0801c0e8 	.word	0x0801c0e8
 80130e0:	0801c104 	.word	0x0801c104
 80130e4:	0801c124 	.word	0x0801c124

080130e8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b08c      	sub	sp, #48	; 0x30
 80130ec:	af04      	add	r7, sp, #16
 80130ee:	60f8      	str	r0, [r7, #12]
 80130f0:	60b9      	str	r1, [r7, #8]
 80130f2:	607a      	str	r2, [r7, #4]
 80130f4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d109      	bne.n	8013110 <udp_sendto_if_src+0x28>
 80130fc:	4b65      	ldr	r3, [pc, #404]	; (8013294 <udp_sendto_if_src+0x1ac>)
 80130fe:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013102:	4965      	ldr	r1, [pc, #404]	; (8013298 <udp_sendto_if_src+0x1b0>)
 8013104:	4865      	ldr	r0, [pc, #404]	; (801329c <udp_sendto_if_src+0x1b4>)
 8013106:	f004 fe61 	bl	8017dcc <iprintf>
 801310a:	f06f 030f 	mvn.w	r3, #15
 801310e:	e0bc      	b.n	801328a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013110:	68bb      	ldr	r3, [r7, #8]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d109      	bne.n	801312a <udp_sendto_if_src+0x42>
 8013116:	4b5f      	ldr	r3, [pc, #380]	; (8013294 <udp_sendto_if_src+0x1ac>)
 8013118:	f240 22d2 	movw	r2, #722	; 0x2d2
 801311c:	4960      	ldr	r1, [pc, #384]	; (80132a0 <udp_sendto_if_src+0x1b8>)
 801311e:	485f      	ldr	r0, [pc, #380]	; (801329c <udp_sendto_if_src+0x1b4>)
 8013120:	f004 fe54 	bl	8017dcc <iprintf>
 8013124:	f06f 030f 	mvn.w	r3, #15
 8013128:	e0af      	b.n	801328a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d109      	bne.n	8013144 <udp_sendto_if_src+0x5c>
 8013130:	4b58      	ldr	r3, [pc, #352]	; (8013294 <udp_sendto_if_src+0x1ac>)
 8013132:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013136:	495b      	ldr	r1, [pc, #364]	; (80132a4 <udp_sendto_if_src+0x1bc>)
 8013138:	4858      	ldr	r0, [pc, #352]	; (801329c <udp_sendto_if_src+0x1b4>)
 801313a:	f004 fe47 	bl	8017dcc <iprintf>
 801313e:	f06f 030f 	mvn.w	r3, #15
 8013142:	e0a2      	b.n	801328a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013146:	2b00      	cmp	r3, #0
 8013148:	d109      	bne.n	801315e <udp_sendto_if_src+0x76>
 801314a:	4b52      	ldr	r3, [pc, #328]	; (8013294 <udp_sendto_if_src+0x1ac>)
 801314c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8013150:	4955      	ldr	r1, [pc, #340]	; (80132a8 <udp_sendto_if_src+0x1c0>)
 8013152:	4852      	ldr	r0, [pc, #328]	; (801329c <udp_sendto_if_src+0x1b4>)
 8013154:	f004 fe3a 	bl	8017dcc <iprintf>
 8013158:	f06f 030f 	mvn.w	r3, #15
 801315c:	e095      	b.n	801328a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801315e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013160:	2b00      	cmp	r3, #0
 8013162:	d109      	bne.n	8013178 <udp_sendto_if_src+0x90>
 8013164:	4b4b      	ldr	r3, [pc, #300]	; (8013294 <udp_sendto_if_src+0x1ac>)
 8013166:	f240 22d5 	movw	r2, #725	; 0x2d5
 801316a:	4950      	ldr	r1, [pc, #320]	; (80132ac <udp_sendto_if_src+0x1c4>)
 801316c:	484b      	ldr	r0, [pc, #300]	; (801329c <udp_sendto_if_src+0x1b4>)
 801316e:	f004 fe2d 	bl	8017dcc <iprintf>
 8013172:	f06f 030f 	mvn.w	r3, #15
 8013176:	e088      	b.n	801328a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	8a5b      	ldrh	r3, [r3, #18]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d10f      	bne.n	80131a0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013180:	68f9      	ldr	r1, [r7, #12]
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	8a5b      	ldrh	r3, [r3, #18]
 8013186:	461a      	mov	r2, r3
 8013188:	68f8      	ldr	r0, [r7, #12]
 801318a:	f000 f893 	bl	80132b4 <udp_bind>
 801318e:	4603      	mov	r3, r0
 8013190:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013192:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d002      	beq.n	80131a0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801319a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801319e:	e074      	b.n	801328a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80131a0:	68bb      	ldr	r3, [r7, #8]
 80131a2:	891b      	ldrh	r3, [r3, #8]
 80131a4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80131a8:	4293      	cmp	r3, r2
 80131aa:	d902      	bls.n	80131b2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80131ac:	f04f 33ff 	mov.w	r3, #4294967295
 80131b0:	e06b      	b.n	801328a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80131b2:	2108      	movs	r1, #8
 80131b4:	68b8      	ldr	r0, [r7, #8]
 80131b6:	f7f8 fff5 	bl	800c1a4 <pbuf_add_header>
 80131ba:	4603      	mov	r3, r0
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d015      	beq.n	80131ec <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80131c0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80131c4:	2108      	movs	r1, #8
 80131c6:	2022      	movs	r0, #34	; 0x22
 80131c8:	f7f8 fda2 	bl	800bd10 <pbuf_alloc>
 80131cc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80131ce:	69fb      	ldr	r3, [r7, #28]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d102      	bne.n	80131da <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80131d4:	f04f 33ff 	mov.w	r3, #4294967295
 80131d8:	e057      	b.n	801328a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80131da:	68bb      	ldr	r3, [r7, #8]
 80131dc:	891b      	ldrh	r3, [r3, #8]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d006      	beq.n	80131f0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80131e2:	68b9      	ldr	r1, [r7, #8]
 80131e4:	69f8      	ldr	r0, [r7, #28]
 80131e6:	f7f9 f997 	bl	800c518 <pbuf_chain>
 80131ea:	e001      	b.n	80131f0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80131ec:	68bb      	ldr	r3, [r7, #8]
 80131ee:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80131f0:	69fb      	ldr	r3, [r7, #28]
 80131f2:	895b      	ldrh	r3, [r3, #10]
 80131f4:	2b07      	cmp	r3, #7
 80131f6:	d806      	bhi.n	8013206 <udp_sendto_if_src+0x11e>
 80131f8:	4b26      	ldr	r3, [pc, #152]	; (8013294 <udp_sendto_if_src+0x1ac>)
 80131fa:	f240 320e 	movw	r2, #782	; 0x30e
 80131fe:	492c      	ldr	r1, [pc, #176]	; (80132b0 <udp_sendto_if_src+0x1c8>)
 8013200:	4826      	ldr	r0, [pc, #152]	; (801329c <udp_sendto_if_src+0x1b4>)
 8013202:	f004 fde3 	bl	8017dcc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013206:	69fb      	ldr	r3, [r7, #28]
 8013208:	685b      	ldr	r3, [r3, #4]
 801320a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	8a5b      	ldrh	r3, [r3, #18]
 8013210:	4618      	mov	r0, r3
 8013212:	f7f7 fc73 	bl	800aafc <lwip_htons>
 8013216:	4603      	mov	r3, r0
 8013218:	461a      	mov	r2, r3
 801321a:	697b      	ldr	r3, [r7, #20]
 801321c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801321e:	887b      	ldrh	r3, [r7, #2]
 8013220:	4618      	mov	r0, r3
 8013222:	f7f7 fc6b 	bl	800aafc <lwip_htons>
 8013226:	4603      	mov	r3, r0
 8013228:	461a      	mov	r2, r3
 801322a:	697b      	ldr	r3, [r7, #20]
 801322c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801322e:	697b      	ldr	r3, [r7, #20]
 8013230:	2200      	movs	r2, #0
 8013232:	719a      	strb	r2, [r3, #6]
 8013234:	2200      	movs	r2, #0
 8013236:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013238:	69fb      	ldr	r3, [r7, #28]
 801323a:	891b      	ldrh	r3, [r3, #8]
 801323c:	4618      	mov	r0, r3
 801323e:	f7f7 fc5d 	bl	800aafc <lwip_htons>
 8013242:	4603      	mov	r3, r0
 8013244:	461a      	mov	r2, r3
 8013246:	697b      	ldr	r3, [r7, #20]
 8013248:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801324a:	2311      	movs	r3, #17
 801324c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	7adb      	ldrb	r3, [r3, #11]
 8013252:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	7a9b      	ldrb	r3, [r3, #10]
 8013258:	7cb9      	ldrb	r1, [r7, #18]
 801325a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801325c:	9202      	str	r2, [sp, #8]
 801325e:	7cfa      	ldrb	r2, [r7, #19]
 8013260:	9201      	str	r2, [sp, #4]
 8013262:	9300      	str	r3, [sp, #0]
 8013264:	460b      	mov	r3, r1
 8013266:	687a      	ldr	r2, [r7, #4]
 8013268:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801326a:	69f8      	ldr	r0, [r7, #28]
 801326c:	f003 fb52 	bl	8016914 <ip4_output_if_src>
 8013270:	4603      	mov	r3, r0
 8013272:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013274:	69fa      	ldr	r2, [r7, #28]
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	429a      	cmp	r2, r3
 801327a:	d004      	beq.n	8013286 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801327c:	69f8      	ldr	r0, [r7, #28]
 801327e:	f7f9 f827 	bl	800c2d0 <pbuf_free>
    q = NULL;
 8013282:	2300      	movs	r3, #0
 8013284:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013286:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801328a:	4618      	mov	r0, r3
 801328c:	3720      	adds	r7, #32
 801328e:	46bd      	mov	sp, r7
 8013290:	bd80      	pop	{r7, pc}
 8013292:	bf00      	nop
 8013294:	0801bf58 	.word	0x0801bf58
 8013298:	0801c144 	.word	0x0801c144
 801329c:	0801bfac 	.word	0x0801bfac
 80132a0:	0801c164 	.word	0x0801c164
 80132a4:	0801c184 	.word	0x0801c184
 80132a8:	0801c1a8 	.word	0x0801c1a8
 80132ac:	0801c1cc 	.word	0x0801c1cc
 80132b0:	0801c1f0 	.word	0x0801c1f0

080132b4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80132b4:	b580      	push	{r7, lr}
 80132b6:	b086      	sub	sp, #24
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	60f8      	str	r0, [r7, #12]
 80132bc:	60b9      	str	r1, [r7, #8]
 80132be:	4613      	mov	r3, r2
 80132c0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80132c2:	68bb      	ldr	r3, [r7, #8]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d101      	bne.n	80132cc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80132c8:	4b39      	ldr	r3, [pc, #228]	; (80133b0 <udp_bind+0xfc>)
 80132ca:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d109      	bne.n	80132e6 <udp_bind+0x32>
 80132d2:	4b38      	ldr	r3, [pc, #224]	; (80133b4 <udp_bind+0x100>)
 80132d4:	f240 32b7 	movw	r2, #951	; 0x3b7
 80132d8:	4937      	ldr	r1, [pc, #220]	; (80133b8 <udp_bind+0x104>)
 80132da:	4838      	ldr	r0, [pc, #224]	; (80133bc <udp_bind+0x108>)
 80132dc:	f004 fd76 	bl	8017dcc <iprintf>
 80132e0:	f06f 030f 	mvn.w	r3, #15
 80132e4:	e060      	b.n	80133a8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80132e6:	2300      	movs	r3, #0
 80132e8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80132ea:	4b35      	ldr	r3, [pc, #212]	; (80133c0 <udp_bind+0x10c>)
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	617b      	str	r3, [r7, #20]
 80132f0:	e009      	b.n	8013306 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80132f2:	68fa      	ldr	r2, [r7, #12]
 80132f4:	697b      	ldr	r3, [r7, #20]
 80132f6:	429a      	cmp	r2, r3
 80132f8:	d102      	bne.n	8013300 <udp_bind+0x4c>
      rebind = 1;
 80132fa:	2301      	movs	r3, #1
 80132fc:	74fb      	strb	r3, [r7, #19]
      break;
 80132fe:	e005      	b.n	801330c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013300:	697b      	ldr	r3, [r7, #20]
 8013302:	68db      	ldr	r3, [r3, #12]
 8013304:	617b      	str	r3, [r7, #20]
 8013306:	697b      	ldr	r3, [r7, #20]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d1f2      	bne.n	80132f2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801330c:	88fb      	ldrh	r3, [r7, #6]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d109      	bne.n	8013326 <udp_bind+0x72>
    port = udp_new_port();
 8013312:	f7ff fcc5 	bl	8012ca0 <udp_new_port>
 8013316:	4603      	mov	r3, r0
 8013318:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801331a:	88fb      	ldrh	r3, [r7, #6]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d12c      	bne.n	801337a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013320:	f06f 0307 	mvn.w	r3, #7
 8013324:	e040      	b.n	80133a8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013326:	4b26      	ldr	r3, [pc, #152]	; (80133c0 <udp_bind+0x10c>)
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	617b      	str	r3, [r7, #20]
 801332c:	e022      	b.n	8013374 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801332e:	68fa      	ldr	r2, [r7, #12]
 8013330:	697b      	ldr	r3, [r7, #20]
 8013332:	429a      	cmp	r2, r3
 8013334:	d01b      	beq.n	801336e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013336:	697b      	ldr	r3, [r7, #20]
 8013338:	8a5b      	ldrh	r3, [r3, #18]
 801333a:	88fa      	ldrh	r2, [r7, #6]
 801333c:	429a      	cmp	r2, r3
 801333e:	d116      	bne.n	801336e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013340:	697b      	ldr	r3, [r7, #20]
 8013342:	681a      	ldr	r2, [r3, #0]
 8013344:	68bb      	ldr	r3, [r7, #8]
 8013346:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013348:	429a      	cmp	r2, r3
 801334a:	d00d      	beq.n	8013368 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801334c:	68bb      	ldr	r3, [r7, #8]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d00a      	beq.n	8013368 <udp_bind+0xb4>
 8013352:	68bb      	ldr	r3, [r7, #8]
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d006      	beq.n	8013368 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801335a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801335c:	2b00      	cmp	r3, #0
 801335e:	d003      	beq.n	8013368 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013360:	697b      	ldr	r3, [r7, #20]
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d102      	bne.n	801336e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013368:	f06f 0307 	mvn.w	r3, #7
 801336c:	e01c      	b.n	80133a8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801336e:	697b      	ldr	r3, [r7, #20]
 8013370:	68db      	ldr	r3, [r3, #12]
 8013372:	617b      	str	r3, [r7, #20]
 8013374:	697b      	ldr	r3, [r7, #20]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d1d9      	bne.n	801332e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801337a:	68bb      	ldr	r3, [r7, #8]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d002      	beq.n	8013386 <udp_bind+0xd2>
 8013380:	68bb      	ldr	r3, [r7, #8]
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	e000      	b.n	8013388 <udp_bind+0xd4>
 8013386:	2300      	movs	r3, #0
 8013388:	68fa      	ldr	r2, [r7, #12]
 801338a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	88fa      	ldrh	r2, [r7, #6]
 8013390:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013392:	7cfb      	ldrb	r3, [r7, #19]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d106      	bne.n	80133a6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013398:	4b09      	ldr	r3, [pc, #36]	; (80133c0 <udp_bind+0x10c>)
 801339a:	681a      	ldr	r2, [r3, #0]
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80133a0:	4a07      	ldr	r2, [pc, #28]	; (80133c0 <udp_bind+0x10c>)
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80133a6:	2300      	movs	r3, #0
}
 80133a8:	4618      	mov	r0, r3
 80133aa:	3718      	adds	r7, #24
 80133ac:	46bd      	mov	sp, r7
 80133ae:	bd80      	pop	{r7, pc}
 80133b0:	08026f94 	.word	0x08026f94
 80133b4:	0801bf58 	.word	0x0801bf58
 80133b8:	0801c220 	.word	0x0801c220
 80133bc:	0801bfac 	.word	0x0801bfac
 80133c0:	2000f52c 	.word	0x2000f52c

080133c4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b086      	sub	sp, #24
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	60f8      	str	r0, [r7, #12]
 80133cc:	60b9      	str	r1, [r7, #8]
 80133ce:	4613      	mov	r3, r2
 80133d0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d109      	bne.n	80133ec <udp_connect+0x28>
 80133d8:	4b2c      	ldr	r3, [pc, #176]	; (801348c <udp_connect+0xc8>)
 80133da:	f240 4235 	movw	r2, #1077	; 0x435
 80133de:	492c      	ldr	r1, [pc, #176]	; (8013490 <udp_connect+0xcc>)
 80133e0:	482c      	ldr	r0, [pc, #176]	; (8013494 <udp_connect+0xd0>)
 80133e2:	f004 fcf3 	bl	8017dcc <iprintf>
 80133e6:	f06f 030f 	mvn.w	r3, #15
 80133ea:	e04b      	b.n	8013484 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80133ec:	68bb      	ldr	r3, [r7, #8]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d109      	bne.n	8013406 <udp_connect+0x42>
 80133f2:	4b26      	ldr	r3, [pc, #152]	; (801348c <udp_connect+0xc8>)
 80133f4:	f240 4236 	movw	r2, #1078	; 0x436
 80133f8:	4927      	ldr	r1, [pc, #156]	; (8013498 <udp_connect+0xd4>)
 80133fa:	4826      	ldr	r0, [pc, #152]	; (8013494 <udp_connect+0xd0>)
 80133fc:	f004 fce6 	bl	8017dcc <iprintf>
 8013400:	f06f 030f 	mvn.w	r3, #15
 8013404:	e03e      	b.n	8013484 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	8a5b      	ldrh	r3, [r3, #18]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d10f      	bne.n	801342e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801340e:	68f9      	ldr	r1, [r7, #12]
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	8a5b      	ldrh	r3, [r3, #18]
 8013414:	461a      	mov	r2, r3
 8013416:	68f8      	ldr	r0, [r7, #12]
 8013418:	f7ff ff4c 	bl	80132b4 <udp_bind>
 801341c:	4603      	mov	r3, r0
 801341e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013420:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d002      	beq.n	801342e <udp_connect+0x6a>
      return err;
 8013428:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801342c:	e02a      	b.n	8013484 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801342e:	68bb      	ldr	r3, [r7, #8]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d002      	beq.n	801343a <udp_connect+0x76>
 8013434:	68bb      	ldr	r3, [r7, #8]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	e000      	b.n	801343c <udp_connect+0x78>
 801343a:	2300      	movs	r3, #0
 801343c:	68fa      	ldr	r2, [r7, #12]
 801343e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	88fa      	ldrh	r2, [r7, #6]
 8013444:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	7c1b      	ldrb	r3, [r3, #16]
 801344a:	f043 0304 	orr.w	r3, r3, #4
 801344e:	b2da      	uxtb	r2, r3
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013454:	4b11      	ldr	r3, [pc, #68]	; (801349c <udp_connect+0xd8>)
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	617b      	str	r3, [r7, #20]
 801345a:	e008      	b.n	801346e <udp_connect+0xaa>
    if (pcb == ipcb) {
 801345c:	68fa      	ldr	r2, [r7, #12]
 801345e:	697b      	ldr	r3, [r7, #20]
 8013460:	429a      	cmp	r2, r3
 8013462:	d101      	bne.n	8013468 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8013464:	2300      	movs	r3, #0
 8013466:	e00d      	b.n	8013484 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013468:	697b      	ldr	r3, [r7, #20]
 801346a:	68db      	ldr	r3, [r3, #12]
 801346c:	617b      	str	r3, [r7, #20]
 801346e:	697b      	ldr	r3, [r7, #20]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d1f3      	bne.n	801345c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8013474:	4b09      	ldr	r3, [pc, #36]	; (801349c <udp_connect+0xd8>)
 8013476:	681a      	ldr	r2, [r3, #0]
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801347c:	4a07      	ldr	r2, [pc, #28]	; (801349c <udp_connect+0xd8>)
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8013482:	2300      	movs	r3, #0
}
 8013484:	4618      	mov	r0, r3
 8013486:	3718      	adds	r7, #24
 8013488:	46bd      	mov	sp, r7
 801348a:	bd80      	pop	{r7, pc}
 801348c:	0801bf58 	.word	0x0801bf58
 8013490:	0801c238 	.word	0x0801c238
 8013494:	0801bfac 	.word	0x0801bfac
 8013498:	0801c254 	.word	0x0801c254
 801349c:	2000f52c 	.word	0x2000f52c

080134a0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b084      	sub	sp, #16
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	60f8      	str	r0, [r7, #12]
 80134a8:	60b9      	str	r1, [r7, #8]
 80134aa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d107      	bne.n	80134c2 <udp_recv+0x22>
 80134b2:	4b08      	ldr	r3, [pc, #32]	; (80134d4 <udp_recv+0x34>)
 80134b4:	f240 428a 	movw	r2, #1162	; 0x48a
 80134b8:	4907      	ldr	r1, [pc, #28]	; (80134d8 <udp_recv+0x38>)
 80134ba:	4808      	ldr	r0, [pc, #32]	; (80134dc <udp_recv+0x3c>)
 80134bc:	f004 fc86 	bl	8017dcc <iprintf>
 80134c0:	e005      	b.n	80134ce <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	68ba      	ldr	r2, [r7, #8]
 80134c6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	687a      	ldr	r2, [r7, #4]
 80134cc:	61da      	str	r2, [r3, #28]
}
 80134ce:	3710      	adds	r7, #16
 80134d0:	46bd      	mov	sp, r7
 80134d2:	bd80      	pop	{r7, pc}
 80134d4:	0801bf58 	.word	0x0801bf58
 80134d8:	0801c28c 	.word	0x0801c28c
 80134dc:	0801bfac 	.word	0x0801bfac

080134e0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b084      	sub	sp, #16
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d107      	bne.n	80134fe <udp_remove+0x1e>
 80134ee:	4b19      	ldr	r3, [pc, #100]	; (8013554 <udp_remove+0x74>)
 80134f0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80134f4:	4918      	ldr	r1, [pc, #96]	; (8013558 <udp_remove+0x78>)
 80134f6:	4819      	ldr	r0, [pc, #100]	; (801355c <udp_remove+0x7c>)
 80134f8:	f004 fc68 	bl	8017dcc <iprintf>
 80134fc:	e026      	b.n	801354c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80134fe:	4b18      	ldr	r3, [pc, #96]	; (8013560 <udp_remove+0x80>)
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	687a      	ldr	r2, [r7, #4]
 8013504:	429a      	cmp	r2, r3
 8013506:	d105      	bne.n	8013514 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013508:	4b15      	ldr	r3, [pc, #84]	; (8013560 <udp_remove+0x80>)
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	68db      	ldr	r3, [r3, #12]
 801350e:	4a14      	ldr	r2, [pc, #80]	; (8013560 <udp_remove+0x80>)
 8013510:	6013      	str	r3, [r2, #0]
 8013512:	e017      	b.n	8013544 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013514:	4b12      	ldr	r3, [pc, #72]	; (8013560 <udp_remove+0x80>)
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	60fb      	str	r3, [r7, #12]
 801351a:	e010      	b.n	801353e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	68db      	ldr	r3, [r3, #12]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d009      	beq.n	8013538 <udp_remove+0x58>
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	68db      	ldr	r3, [r3, #12]
 8013528:	687a      	ldr	r2, [r7, #4]
 801352a:	429a      	cmp	r2, r3
 801352c:	d104      	bne.n	8013538 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	68da      	ldr	r2, [r3, #12]
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	60da      	str	r2, [r3, #12]
        break;
 8013536:	e005      	b.n	8013544 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	68db      	ldr	r3, [r3, #12]
 801353c:	60fb      	str	r3, [r7, #12]
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d1eb      	bne.n	801351c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013544:	6879      	ldr	r1, [r7, #4]
 8013546:	2000      	movs	r0, #0
 8013548:	f7f8 f816 	bl	800b578 <memp_free>
}
 801354c:	3710      	adds	r7, #16
 801354e:	46bd      	mov	sp, r7
 8013550:	bd80      	pop	{r7, pc}
 8013552:	bf00      	nop
 8013554:	0801bf58 	.word	0x0801bf58
 8013558:	0801c2a4 	.word	0x0801c2a4
 801355c:	0801bfac 	.word	0x0801bfac
 8013560:	2000f52c 	.word	0x2000f52c

08013564 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013564:	b580      	push	{r7, lr}
 8013566:	b082      	sub	sp, #8
 8013568:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801356a:	2000      	movs	r0, #0
 801356c:	f7f7 ffb2 	bl	800b4d4 <memp_malloc>
 8013570:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d007      	beq.n	8013588 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013578:	2220      	movs	r2, #32
 801357a:	2100      	movs	r1, #0
 801357c:	6878      	ldr	r0, [r7, #4]
 801357e:	f004 fc1c 	bl	8017dba <memset>
    pcb->ttl = UDP_TTL;
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	22ff      	movs	r2, #255	; 0xff
 8013586:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013588:	687b      	ldr	r3, [r7, #4]
}
 801358a:	4618      	mov	r0, r3
 801358c:	3708      	adds	r7, #8
 801358e:	46bd      	mov	sp, r7
 8013590:	bd80      	pop	{r7, pc}

08013592 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8013592:	b580      	push	{r7, lr}
 8013594:	b084      	sub	sp, #16
 8013596:	af00      	add	r7, sp, #0
 8013598:	4603      	mov	r3, r0
 801359a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801359c:	f7ff ffe2 	bl	8013564 <udp_new>
 80135a0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80135a2:	68fb      	ldr	r3, [r7, #12]
}
 80135a4:	4618      	mov	r0, r3
 80135a6:	3710      	adds	r7, #16
 80135a8:	46bd      	mov	sp, r7
 80135aa:	bd80      	pop	{r7, pc}

080135ac <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80135ac:	b480      	push	{r7}
 80135ae:	b085      	sub	sp, #20
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	6078      	str	r0, [r7, #4]
 80135b4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d01e      	beq.n	80135fa <udp_netif_ip_addr_changed+0x4e>
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d01a      	beq.n	80135fa <udp_netif_ip_addr_changed+0x4e>
 80135c4:	683b      	ldr	r3, [r7, #0]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d017      	beq.n	80135fa <udp_netif_ip_addr_changed+0x4e>
 80135ca:	683b      	ldr	r3, [r7, #0]
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d013      	beq.n	80135fa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80135d2:	4b0d      	ldr	r3, [pc, #52]	; (8013608 <udp_netif_ip_addr_changed+0x5c>)
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	60fb      	str	r3, [r7, #12]
 80135d8:	e00c      	b.n	80135f4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	681a      	ldr	r2, [r3, #0]
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	429a      	cmp	r2, r3
 80135e4:	d103      	bne.n	80135ee <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80135e6:	683b      	ldr	r3, [r7, #0]
 80135e8:	681a      	ldr	r2, [r3, #0]
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	68db      	ldr	r3, [r3, #12]
 80135f2:	60fb      	str	r3, [r7, #12]
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d1ef      	bne.n	80135da <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80135fa:	bf00      	nop
 80135fc:	3714      	adds	r7, #20
 80135fe:	46bd      	mov	sp, r7
 8013600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013604:	4770      	bx	lr
 8013606:	bf00      	nop
 8013608:	2000f52c 	.word	0x2000f52c

0801360c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801360c:	b580      	push	{r7, lr}
 801360e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8013610:	4b20      	ldr	r3, [pc, #128]	; (8013694 <dhcp_inc_pcb_refcount+0x88>)
 8013612:	781b      	ldrb	r3, [r3, #0]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d133      	bne.n	8013680 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8013618:	4b1f      	ldr	r3, [pc, #124]	; (8013698 <dhcp_inc_pcb_refcount+0x8c>)
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d005      	beq.n	801362c <dhcp_inc_pcb_refcount+0x20>
 8013620:	4b1e      	ldr	r3, [pc, #120]	; (801369c <dhcp_inc_pcb_refcount+0x90>)
 8013622:	22e5      	movs	r2, #229	; 0xe5
 8013624:	491e      	ldr	r1, [pc, #120]	; (80136a0 <dhcp_inc_pcb_refcount+0x94>)
 8013626:	481f      	ldr	r0, [pc, #124]	; (80136a4 <dhcp_inc_pcb_refcount+0x98>)
 8013628:	f004 fbd0 	bl	8017dcc <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801362c:	f7ff ff9a 	bl	8013564 <udp_new>
 8013630:	4602      	mov	r2, r0
 8013632:	4b19      	ldr	r3, [pc, #100]	; (8013698 <dhcp_inc_pcb_refcount+0x8c>)
 8013634:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 8013636:	4b18      	ldr	r3, [pc, #96]	; (8013698 <dhcp_inc_pcb_refcount+0x8c>)
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d102      	bne.n	8013644 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801363e:	f04f 33ff 	mov.w	r3, #4294967295
 8013642:	e024      	b.n	801368e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8013644:	4b14      	ldr	r3, [pc, #80]	; (8013698 <dhcp_inc_pcb_refcount+0x8c>)
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	7a5a      	ldrb	r2, [r3, #9]
 801364a:	4b13      	ldr	r3, [pc, #76]	; (8013698 <dhcp_inc_pcb_refcount+0x8c>)
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	f042 0220 	orr.w	r2, r2, #32
 8013652:	b2d2      	uxtb	r2, r2
 8013654:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8013656:	4b10      	ldr	r3, [pc, #64]	; (8013698 <dhcp_inc_pcb_refcount+0x8c>)
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	2244      	movs	r2, #68	; 0x44
 801365c:	4912      	ldr	r1, [pc, #72]	; (80136a8 <dhcp_inc_pcb_refcount+0x9c>)
 801365e:	4618      	mov	r0, r3
 8013660:	f7ff fe28 	bl	80132b4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8013664:	4b0c      	ldr	r3, [pc, #48]	; (8013698 <dhcp_inc_pcb_refcount+0x8c>)
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	2243      	movs	r2, #67	; 0x43
 801366a:	490f      	ldr	r1, [pc, #60]	; (80136a8 <dhcp_inc_pcb_refcount+0x9c>)
 801366c:	4618      	mov	r0, r3
 801366e:	f7ff fea9 	bl	80133c4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8013672:	4b09      	ldr	r3, [pc, #36]	; (8013698 <dhcp_inc_pcb_refcount+0x8c>)
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	2200      	movs	r2, #0
 8013678:	490c      	ldr	r1, [pc, #48]	; (80136ac <dhcp_inc_pcb_refcount+0xa0>)
 801367a:	4618      	mov	r0, r3
 801367c:	f7ff ff10 	bl	80134a0 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8013680:	4b04      	ldr	r3, [pc, #16]	; (8013694 <dhcp_inc_pcb_refcount+0x88>)
 8013682:	781b      	ldrb	r3, [r3, #0]
 8013684:	3301      	adds	r3, #1
 8013686:	b2da      	uxtb	r2, r3
 8013688:	4b02      	ldr	r3, [pc, #8]	; (8013694 <dhcp_inc_pcb_refcount+0x88>)
 801368a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801368c:	2300      	movs	r3, #0
}
 801368e:	4618      	mov	r0, r3
 8013690:	bd80      	pop	{r7, pc}
 8013692:	bf00      	nop
 8013694:	20008ad4 	.word	0x20008ad4
 8013698:	20008ad0 	.word	0x20008ad0
 801369c:	0801c2bc 	.word	0x0801c2bc
 80136a0:	0801c2f4 	.word	0x0801c2f4
 80136a4:	0801c31c 	.word	0x0801c31c
 80136a8:	08026f94 	.word	0x08026f94
 80136ac:	08014f65 	.word	0x08014f65

080136b0 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80136b0:	b580      	push	{r7, lr}
 80136b2:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80136b4:	4b0e      	ldr	r3, [pc, #56]	; (80136f0 <dhcp_dec_pcb_refcount+0x40>)
 80136b6:	781b      	ldrb	r3, [r3, #0]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d105      	bne.n	80136c8 <dhcp_dec_pcb_refcount+0x18>
 80136bc:	4b0d      	ldr	r3, [pc, #52]	; (80136f4 <dhcp_dec_pcb_refcount+0x44>)
 80136be:	22ff      	movs	r2, #255	; 0xff
 80136c0:	490d      	ldr	r1, [pc, #52]	; (80136f8 <dhcp_dec_pcb_refcount+0x48>)
 80136c2:	480e      	ldr	r0, [pc, #56]	; (80136fc <dhcp_dec_pcb_refcount+0x4c>)
 80136c4:	f004 fb82 	bl	8017dcc <iprintf>
  dhcp_pcb_refcount--;
 80136c8:	4b09      	ldr	r3, [pc, #36]	; (80136f0 <dhcp_dec_pcb_refcount+0x40>)
 80136ca:	781b      	ldrb	r3, [r3, #0]
 80136cc:	3b01      	subs	r3, #1
 80136ce:	b2da      	uxtb	r2, r3
 80136d0:	4b07      	ldr	r3, [pc, #28]	; (80136f0 <dhcp_dec_pcb_refcount+0x40>)
 80136d2:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80136d4:	4b06      	ldr	r3, [pc, #24]	; (80136f0 <dhcp_dec_pcb_refcount+0x40>)
 80136d6:	781b      	ldrb	r3, [r3, #0]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d107      	bne.n	80136ec <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80136dc:	4b08      	ldr	r3, [pc, #32]	; (8013700 <dhcp_dec_pcb_refcount+0x50>)
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	4618      	mov	r0, r3
 80136e2:	f7ff fefd 	bl	80134e0 <udp_remove>
    dhcp_pcb = NULL;
 80136e6:	4b06      	ldr	r3, [pc, #24]	; (8013700 <dhcp_dec_pcb_refcount+0x50>)
 80136e8:	2200      	movs	r2, #0
 80136ea:	601a      	str	r2, [r3, #0]
  }
}
 80136ec:	bf00      	nop
 80136ee:	bd80      	pop	{r7, pc}
 80136f0:	20008ad4 	.word	0x20008ad4
 80136f4:	0801c2bc 	.word	0x0801c2bc
 80136f8:	0801c344 	.word	0x0801c344
 80136fc:	0801c31c 	.word	0x0801c31c
 8013700:	20008ad0 	.word	0x20008ad0

08013704 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8013704:	b580      	push	{r7, lr}
 8013706:	b084      	sub	sp, #16
 8013708:	af00      	add	r7, sp, #0
 801370a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013710:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013712:	210c      	movs	r1, #12
 8013714:	68f8      	ldr	r0, [r7, #12]
 8013716:	f001 f867 	bl	80147e8 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801371a:	4b06      	ldr	r3, [pc, #24]	; (8013734 <dhcp_handle_nak+0x30>)
 801371c:	4a05      	ldr	r2, [pc, #20]	; (8013734 <dhcp_handle_nak+0x30>)
 801371e:	4905      	ldr	r1, [pc, #20]	; (8013734 <dhcp_handle_nak+0x30>)
 8013720:	6878      	ldr	r0, [r7, #4]
 8013722:	f7f8 f8cb 	bl	800b8bc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8013726:	6878      	ldr	r0, [r7, #4]
 8013728:	f000 fc5a 	bl	8013fe0 <dhcp_discover>
}
 801372c:	bf00      	nop
 801372e:	3710      	adds	r7, #16
 8013730:	46bd      	mov	sp, r7
 8013732:	bd80      	pop	{r7, pc}
 8013734:	08026f94 	.word	0x08026f94

08013738 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8013738:	b580      	push	{r7, lr}
 801373a:	b084      	sub	sp, #16
 801373c:	af00      	add	r7, sp, #0
 801373e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013744:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8013746:	2108      	movs	r1, #8
 8013748:	68f8      	ldr	r0, [r7, #12]
 801374a:	f001 f84d 	bl	80147e8 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	331c      	adds	r3, #28
 8013752:	2200      	movs	r2, #0
 8013754:	4619      	mov	r1, r3
 8013756:	6878      	ldr	r0, [r7, #4]
 8013758:	f002 fb4c 	bl	8015df4 <etharp_query>
 801375c:	4603      	mov	r3, r0
 801375e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	799b      	ldrb	r3, [r3, #6]
 8013764:	2bff      	cmp	r3, #255	; 0xff
 8013766:	d005      	beq.n	8013774 <dhcp_check+0x3c>
    dhcp->tries++;
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	799b      	ldrb	r3, [r3, #6]
 801376c:	3301      	adds	r3, #1
 801376e:	b2da      	uxtb	r2, r3
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8013774:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8013778:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801377a:	893b      	ldrh	r3, [r7, #8]
 801377c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013780:	4a06      	ldr	r2, [pc, #24]	; (801379c <dhcp_check+0x64>)
 8013782:	fb82 1203 	smull	r1, r2, r2, r3
 8013786:	1152      	asrs	r2, r2, #5
 8013788:	17db      	asrs	r3, r3, #31
 801378a:	1ad3      	subs	r3, r2, r3
 801378c:	b29a      	uxth	r2, r3
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8013792:	bf00      	nop
 8013794:	3710      	adds	r7, #16
 8013796:	46bd      	mov	sp, r7
 8013798:	bd80      	pop	{r7, pc}
 801379a:	bf00      	nop
 801379c:	10624dd3 	.word	0x10624dd3

080137a0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80137a0:	b580      	push	{r7, lr}
 80137a2:	b084      	sub	sp, #16
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	6078      	str	r0, [r7, #4]
 80137a8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137ae:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80137b0:	4b0c      	ldr	r3, [pc, #48]	; (80137e4 <dhcp_handle_offer+0x44>)
 80137b2:	789b      	ldrb	r3, [r3, #2]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d011      	beq.n	80137dc <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	2200      	movs	r2, #0
 80137bc:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80137be:	4b0a      	ldr	r3, [pc, #40]	; (80137e8 <dhcp_handle_offer+0x48>)
 80137c0:	689b      	ldr	r3, [r3, #8]
 80137c2:	4618      	mov	r0, r3
 80137c4:	f7f7 f9af 	bl	800ab26 <lwip_htonl>
 80137c8:	4602      	mov	r2, r0
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80137ce:	683b      	ldr	r3, [r7, #0]
 80137d0:	691a      	ldr	r2, [r3, #16]
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80137d6:	6878      	ldr	r0, [r7, #4]
 80137d8:	f000 f808 	bl	80137ec <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80137dc:	bf00      	nop
 80137de:	3710      	adds	r7, #16
 80137e0:	46bd      	mov	sp, r7
 80137e2:	bd80      	pop	{r7, pc}
 80137e4:	2000f530 	.word	0x2000f530
 80137e8:	2000f538 	.word	0x2000f538

080137ec <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80137ec:	b5b0      	push	{r4, r5, r7, lr}
 80137ee:	b08a      	sub	sp, #40	; 0x28
 80137f0:	af02      	add	r7, sp, #8
 80137f2:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d109      	bne.n	801380e <dhcp_select+0x22>
 80137fa:	4b71      	ldr	r3, [pc, #452]	; (80139c0 <dhcp_select+0x1d4>)
 80137fc:	f240 1277 	movw	r2, #375	; 0x177
 8013800:	4970      	ldr	r1, [pc, #448]	; (80139c4 <dhcp_select+0x1d8>)
 8013802:	4871      	ldr	r0, [pc, #452]	; (80139c8 <dhcp_select+0x1dc>)
 8013804:	f004 fae2 	bl	8017dcc <iprintf>
 8013808:	f06f 030f 	mvn.w	r3, #15
 801380c:	e0d3      	b.n	80139b6 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013812:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8013814:	69bb      	ldr	r3, [r7, #24]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d109      	bne.n	801382e <dhcp_select+0x42>
 801381a:	4b69      	ldr	r3, [pc, #420]	; (80139c0 <dhcp_select+0x1d4>)
 801381c:	f240 1279 	movw	r2, #377	; 0x179
 8013820:	496a      	ldr	r1, [pc, #424]	; (80139cc <dhcp_select+0x1e0>)
 8013822:	4869      	ldr	r0, [pc, #420]	; (80139c8 <dhcp_select+0x1dc>)
 8013824:	f004 fad2 	bl	8017dcc <iprintf>
 8013828:	f06f 0305 	mvn.w	r3, #5
 801382c:	e0c3      	b.n	80139b6 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801382e:	2101      	movs	r1, #1
 8013830:	69b8      	ldr	r0, [r7, #24]
 8013832:	f000 ffd9 	bl	80147e8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013836:	f107 030c 	add.w	r3, r7, #12
 801383a:	2203      	movs	r2, #3
 801383c:	69b9      	ldr	r1, [r7, #24]
 801383e:	6878      	ldr	r0, [r7, #4]
 8013840:	f001 fc5c 	bl	80150fc <dhcp_create_msg>
 8013844:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013846:	697b      	ldr	r3, [r7, #20]
 8013848:	2b00      	cmp	r3, #0
 801384a:	f000 8085 	beq.w	8013958 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801384e:	697b      	ldr	r3, [r7, #20]
 8013850:	685b      	ldr	r3, [r3, #4]
 8013852:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013854:	89b8      	ldrh	r0, [r7, #12]
 8013856:	693b      	ldr	r3, [r7, #16]
 8013858:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801385c:	2302      	movs	r3, #2
 801385e:	2239      	movs	r2, #57	; 0x39
 8013860:	f000 ffdc 	bl	801481c <dhcp_option>
 8013864:	4603      	mov	r3, r0
 8013866:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013868:	89b8      	ldrh	r0, [r7, #12]
 801386a:	693b      	ldr	r3, [r7, #16]
 801386c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013874:	461a      	mov	r2, r3
 8013876:	f001 f82b 	bl	80148d0 <dhcp_option_short>
 801387a:	4603      	mov	r3, r0
 801387c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801387e:	89b8      	ldrh	r0, [r7, #12]
 8013880:	693b      	ldr	r3, [r7, #16]
 8013882:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013886:	2304      	movs	r3, #4
 8013888:	2232      	movs	r2, #50	; 0x32
 801388a:	f000 ffc7 	bl	801481c <dhcp_option>
 801388e:	4603      	mov	r3, r0
 8013890:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013892:	89bc      	ldrh	r4, [r7, #12]
 8013894:	693b      	ldr	r3, [r7, #16]
 8013896:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801389a:	69bb      	ldr	r3, [r7, #24]
 801389c:	69db      	ldr	r3, [r3, #28]
 801389e:	4618      	mov	r0, r3
 80138a0:	f7f7 f941 	bl	800ab26 <lwip_htonl>
 80138a4:	4603      	mov	r3, r0
 80138a6:	461a      	mov	r2, r3
 80138a8:	4629      	mov	r1, r5
 80138aa:	4620      	mov	r0, r4
 80138ac:	f001 f842 	bl	8014934 <dhcp_option_long>
 80138b0:	4603      	mov	r3, r0
 80138b2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80138b4:	89b8      	ldrh	r0, [r7, #12]
 80138b6:	693b      	ldr	r3, [r7, #16]
 80138b8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80138bc:	2304      	movs	r3, #4
 80138be:	2236      	movs	r2, #54	; 0x36
 80138c0:	f000 ffac 	bl	801481c <dhcp_option>
 80138c4:	4603      	mov	r3, r0
 80138c6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80138c8:	89bc      	ldrh	r4, [r7, #12]
 80138ca:	693b      	ldr	r3, [r7, #16]
 80138cc:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80138d0:	69bb      	ldr	r3, [r7, #24]
 80138d2:	699b      	ldr	r3, [r3, #24]
 80138d4:	4618      	mov	r0, r3
 80138d6:	f7f7 f926 	bl	800ab26 <lwip_htonl>
 80138da:	4603      	mov	r3, r0
 80138dc:	461a      	mov	r2, r3
 80138de:	4629      	mov	r1, r5
 80138e0:	4620      	mov	r0, r4
 80138e2:	f001 f827 	bl	8014934 <dhcp_option_long>
 80138e6:	4603      	mov	r3, r0
 80138e8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80138ea:	89b8      	ldrh	r0, [r7, #12]
 80138ec:	693b      	ldr	r3, [r7, #16]
 80138ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80138f2:	2303      	movs	r3, #3
 80138f4:	2237      	movs	r2, #55	; 0x37
 80138f6:	f000 ff91 	bl	801481c <dhcp_option>
 80138fa:	4603      	mov	r3, r0
 80138fc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80138fe:	2300      	movs	r3, #0
 8013900:	77bb      	strb	r3, [r7, #30]
 8013902:	e00e      	b.n	8013922 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013904:	89b8      	ldrh	r0, [r7, #12]
 8013906:	693b      	ldr	r3, [r7, #16]
 8013908:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801390c:	7fbb      	ldrb	r3, [r7, #30]
 801390e:	4a30      	ldr	r2, [pc, #192]	; (80139d0 <dhcp_select+0x1e4>)
 8013910:	5cd3      	ldrb	r3, [r2, r3]
 8013912:	461a      	mov	r2, r3
 8013914:	f000 ffb6 	bl	8014884 <dhcp_option_byte>
 8013918:	4603      	mov	r3, r0
 801391a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801391c:	7fbb      	ldrb	r3, [r7, #30]
 801391e:	3301      	adds	r3, #1
 8013920:	77bb      	strb	r3, [r7, #30]
 8013922:	7fbb      	ldrb	r3, [r7, #30]
 8013924:	2b02      	cmp	r3, #2
 8013926:	d9ed      	bls.n	8013904 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013928:	89b8      	ldrh	r0, [r7, #12]
 801392a:	693b      	ldr	r3, [r7, #16]
 801392c:	33f0      	adds	r3, #240	; 0xf0
 801392e:	697a      	ldr	r2, [r7, #20]
 8013930:	4619      	mov	r1, r3
 8013932:	f001 fcb9 	bl	80152a8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013936:	4b27      	ldr	r3, [pc, #156]	; (80139d4 <dhcp_select+0x1e8>)
 8013938:	6818      	ldr	r0, [r3, #0]
 801393a:	4b27      	ldr	r3, [pc, #156]	; (80139d8 <dhcp_select+0x1ec>)
 801393c:	9301      	str	r3, [sp, #4]
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	9300      	str	r3, [sp, #0]
 8013942:	2343      	movs	r3, #67	; 0x43
 8013944:	4a25      	ldr	r2, [pc, #148]	; (80139dc <dhcp_select+0x1f0>)
 8013946:	6979      	ldr	r1, [r7, #20]
 8013948:	f7ff fbce 	bl	80130e8 <udp_sendto_if_src>
 801394c:	4603      	mov	r3, r0
 801394e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013950:	6978      	ldr	r0, [r7, #20]
 8013952:	f7f8 fcbd 	bl	800c2d0 <pbuf_free>
 8013956:	e001      	b.n	801395c <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013958:	23ff      	movs	r3, #255	; 0xff
 801395a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801395c:	69bb      	ldr	r3, [r7, #24]
 801395e:	799b      	ldrb	r3, [r3, #6]
 8013960:	2bff      	cmp	r3, #255	; 0xff
 8013962:	d005      	beq.n	8013970 <dhcp_select+0x184>
    dhcp->tries++;
 8013964:	69bb      	ldr	r3, [r7, #24]
 8013966:	799b      	ldrb	r3, [r3, #6]
 8013968:	3301      	adds	r3, #1
 801396a:	b2da      	uxtb	r2, r3
 801396c:	69bb      	ldr	r3, [r7, #24]
 801396e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013970:	69bb      	ldr	r3, [r7, #24]
 8013972:	799b      	ldrb	r3, [r3, #6]
 8013974:	2b05      	cmp	r3, #5
 8013976:	d80d      	bhi.n	8013994 <dhcp_select+0x1a8>
 8013978:	69bb      	ldr	r3, [r7, #24]
 801397a:	799b      	ldrb	r3, [r3, #6]
 801397c:	461a      	mov	r2, r3
 801397e:	2301      	movs	r3, #1
 8013980:	4093      	lsls	r3, r2
 8013982:	b29b      	uxth	r3, r3
 8013984:	461a      	mov	r2, r3
 8013986:	0152      	lsls	r2, r2, #5
 8013988:	1ad2      	subs	r2, r2, r3
 801398a:	0092      	lsls	r2, r2, #2
 801398c:	4413      	add	r3, r2
 801398e:	00db      	lsls	r3, r3, #3
 8013990:	b29b      	uxth	r3, r3
 8013992:	e001      	b.n	8013998 <dhcp_select+0x1ac>
 8013994:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013998:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801399a:	89fb      	ldrh	r3, [r7, #14]
 801399c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80139a0:	4a0f      	ldr	r2, [pc, #60]	; (80139e0 <dhcp_select+0x1f4>)
 80139a2:	fb82 1203 	smull	r1, r2, r2, r3
 80139a6:	1152      	asrs	r2, r2, #5
 80139a8:	17db      	asrs	r3, r3, #31
 80139aa:	1ad3      	subs	r3, r2, r3
 80139ac:	b29a      	uxth	r2, r3
 80139ae:	69bb      	ldr	r3, [r7, #24]
 80139b0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80139b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80139b6:	4618      	mov	r0, r3
 80139b8:	3720      	adds	r7, #32
 80139ba:	46bd      	mov	sp, r7
 80139bc:	bdb0      	pop	{r4, r5, r7, pc}
 80139be:	bf00      	nop
 80139c0:	0801c2bc 	.word	0x0801c2bc
 80139c4:	0801c368 	.word	0x0801c368
 80139c8:	0801c31c 	.word	0x0801c31c
 80139cc:	0801c384 	.word	0x0801c384
 80139d0:	2000001c 	.word	0x2000001c
 80139d4:	20008ad0 	.word	0x20008ad0
 80139d8:	08026f94 	.word	0x08026f94
 80139dc:	08026f98 	.word	0x08026f98
 80139e0:	10624dd3 	.word	0x10624dd3

080139e4 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80139e4:	b580      	push	{r7, lr}
 80139e6:	b082      	sub	sp, #8
 80139e8:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80139ea:	4b27      	ldr	r3, [pc, #156]	; (8013a88 <dhcp_coarse_tmr+0xa4>)
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	607b      	str	r3, [r7, #4]
 80139f0:	e042      	b.n	8013a78 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139f6:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80139f8:	683b      	ldr	r3, [r7, #0]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d039      	beq.n	8013a72 <dhcp_coarse_tmr+0x8e>
 80139fe:	683b      	ldr	r3, [r7, #0]
 8013a00:	795b      	ldrb	r3, [r3, #5]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d035      	beq.n	8013a72 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8013a06:	683b      	ldr	r3, [r7, #0]
 8013a08:	8a9b      	ldrh	r3, [r3, #20]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d012      	beq.n	8013a34 <dhcp_coarse_tmr+0x50>
 8013a0e:	683b      	ldr	r3, [r7, #0]
 8013a10:	8a5b      	ldrh	r3, [r3, #18]
 8013a12:	3301      	adds	r3, #1
 8013a14:	b29a      	uxth	r2, r3
 8013a16:	683b      	ldr	r3, [r7, #0]
 8013a18:	825a      	strh	r2, [r3, #18]
 8013a1a:	683b      	ldr	r3, [r7, #0]
 8013a1c:	8a5a      	ldrh	r2, [r3, #18]
 8013a1e:	683b      	ldr	r3, [r7, #0]
 8013a20:	8a9b      	ldrh	r3, [r3, #20]
 8013a22:	429a      	cmp	r2, r3
 8013a24:	d106      	bne.n	8013a34 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8013a26:	6878      	ldr	r0, [r7, #4]
 8013a28:	f000 fe44 	bl	80146b4 <dhcp_release_and_stop>
        dhcp_start(netif);
 8013a2c:	6878      	ldr	r0, [r7, #4]
 8013a2e:	f000 f969 	bl	8013d04 <dhcp_start>
 8013a32:	e01e      	b.n	8013a72 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8013a34:	683b      	ldr	r3, [r7, #0]
 8013a36:	8a1b      	ldrh	r3, [r3, #16]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d00b      	beq.n	8013a54 <dhcp_coarse_tmr+0x70>
 8013a3c:	683b      	ldr	r3, [r7, #0]
 8013a3e:	8a1b      	ldrh	r3, [r3, #16]
 8013a40:	1e5a      	subs	r2, r3, #1
 8013a42:	b291      	uxth	r1, r2
 8013a44:	683a      	ldr	r2, [r7, #0]
 8013a46:	8211      	strh	r1, [r2, #16]
 8013a48:	2b01      	cmp	r3, #1
 8013a4a:	d103      	bne.n	8013a54 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8013a4c:	6878      	ldr	r0, [r7, #4]
 8013a4e:	f000 f8c6 	bl	8013bde <dhcp_t2_timeout>
 8013a52:	e00e      	b.n	8013a72 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8013a54:	683b      	ldr	r3, [r7, #0]
 8013a56:	89db      	ldrh	r3, [r3, #14]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d00a      	beq.n	8013a72 <dhcp_coarse_tmr+0x8e>
 8013a5c:	683b      	ldr	r3, [r7, #0]
 8013a5e:	89db      	ldrh	r3, [r3, #14]
 8013a60:	1e5a      	subs	r2, r3, #1
 8013a62:	b291      	uxth	r1, r2
 8013a64:	683a      	ldr	r2, [r7, #0]
 8013a66:	81d1      	strh	r1, [r2, #14]
 8013a68:	2b01      	cmp	r3, #1
 8013a6a:	d102      	bne.n	8013a72 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8013a6c:	6878      	ldr	r0, [r7, #4]
 8013a6e:	f000 f888 	bl	8013b82 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	607b      	str	r3, [r7, #4]
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d1b9      	bne.n	80139f2 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8013a7e:	bf00      	nop
 8013a80:	3708      	adds	r7, #8
 8013a82:	46bd      	mov	sp, r7
 8013a84:	bd80      	pop	{r7, pc}
 8013a86:	bf00      	nop
 8013a88:	2000f504 	.word	0x2000f504

08013a8c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b082      	sub	sp, #8
 8013a90:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8013a92:	4b16      	ldr	r3, [pc, #88]	; (8013aec <dhcp_fine_tmr+0x60>)
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	607b      	str	r3, [r7, #4]
 8013a98:	e020      	b.n	8013adc <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a9e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8013aa0:	683b      	ldr	r3, [r7, #0]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d017      	beq.n	8013ad6 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8013aa6:	683b      	ldr	r3, [r7, #0]
 8013aa8:	891b      	ldrh	r3, [r3, #8]
 8013aaa:	2b01      	cmp	r3, #1
 8013aac:	d906      	bls.n	8013abc <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8013aae:	683b      	ldr	r3, [r7, #0]
 8013ab0:	891b      	ldrh	r3, [r3, #8]
 8013ab2:	3b01      	subs	r3, #1
 8013ab4:	b29a      	uxth	r2, r3
 8013ab6:	683b      	ldr	r3, [r7, #0]
 8013ab8:	811a      	strh	r2, [r3, #8]
 8013aba:	e00c      	b.n	8013ad6 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8013abc:	683b      	ldr	r3, [r7, #0]
 8013abe:	891b      	ldrh	r3, [r3, #8]
 8013ac0:	2b01      	cmp	r3, #1
 8013ac2:	d108      	bne.n	8013ad6 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8013ac4:	683b      	ldr	r3, [r7, #0]
 8013ac6:	891b      	ldrh	r3, [r3, #8]
 8013ac8:	3b01      	subs	r3, #1
 8013aca:	b29a      	uxth	r2, r3
 8013acc:	683b      	ldr	r3, [r7, #0]
 8013ace:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8013ad0:	6878      	ldr	r0, [r7, #4]
 8013ad2:	f000 f80d 	bl	8013af0 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	607b      	str	r3, [r7, #4]
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d1db      	bne.n	8013a9a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8013ae2:	bf00      	nop
 8013ae4:	3708      	adds	r7, #8
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bd80      	pop	{r7, pc}
 8013aea:	bf00      	nop
 8013aec:	2000f504 	.word	0x2000f504

08013af0 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b084      	sub	sp, #16
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013afc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	795b      	ldrb	r3, [r3, #5]
 8013b02:	2b0c      	cmp	r3, #12
 8013b04:	d003      	beq.n	8013b0e <dhcp_timeout+0x1e>
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	795b      	ldrb	r3, [r3, #5]
 8013b0a:	2b06      	cmp	r3, #6
 8013b0c:	d103      	bne.n	8013b16 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8013b0e:	6878      	ldr	r0, [r7, #4]
 8013b10:	f000 fa66 	bl	8013fe0 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8013b14:	e031      	b.n	8013b7a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	795b      	ldrb	r3, [r3, #5]
 8013b1a:	2b01      	cmp	r3, #1
 8013b1c:	d10e      	bne.n	8013b3c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	799b      	ldrb	r3, [r3, #6]
 8013b22:	2b05      	cmp	r3, #5
 8013b24:	d803      	bhi.n	8013b2e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8013b26:	6878      	ldr	r0, [r7, #4]
 8013b28:	f7ff fe60 	bl	80137ec <dhcp_select>
}
 8013b2c:	e025      	b.n	8013b7a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8013b2e:	6878      	ldr	r0, [r7, #4]
 8013b30:	f000 fdc0 	bl	80146b4 <dhcp_release_and_stop>
      dhcp_start(netif);
 8013b34:	6878      	ldr	r0, [r7, #4]
 8013b36:	f000 f8e5 	bl	8013d04 <dhcp_start>
}
 8013b3a:	e01e      	b.n	8013b7a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	795b      	ldrb	r3, [r3, #5]
 8013b40:	2b08      	cmp	r3, #8
 8013b42:	d10b      	bne.n	8013b5c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	799b      	ldrb	r3, [r3, #6]
 8013b48:	2b01      	cmp	r3, #1
 8013b4a:	d803      	bhi.n	8013b54 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8013b4c:	6878      	ldr	r0, [r7, #4]
 8013b4e:	f7ff fdf3 	bl	8013738 <dhcp_check>
}
 8013b52:	e012      	b.n	8013b7a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8013b54:	6878      	ldr	r0, [r7, #4]
 8013b56:	f000 fae5 	bl	8014124 <dhcp_bind>
}
 8013b5a:	e00e      	b.n	8013b7a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	795b      	ldrb	r3, [r3, #5]
 8013b60:	2b03      	cmp	r3, #3
 8013b62:	d10a      	bne.n	8013b7a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	799b      	ldrb	r3, [r3, #6]
 8013b68:	2b01      	cmp	r3, #1
 8013b6a:	d803      	bhi.n	8013b74 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8013b6c:	6878      	ldr	r0, [r7, #4]
 8013b6e:	f000 fceb 	bl	8014548 <dhcp_reboot>
}
 8013b72:	e002      	b.n	8013b7a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8013b74:	6878      	ldr	r0, [r7, #4]
 8013b76:	f000 fa33 	bl	8013fe0 <dhcp_discover>
}
 8013b7a:	bf00      	nop
 8013b7c:	3710      	adds	r7, #16
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	bd80      	pop	{r7, pc}

08013b82 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8013b82:	b580      	push	{r7, lr}
 8013b84:	b084      	sub	sp, #16
 8013b86:	af00      	add	r7, sp, #0
 8013b88:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b8e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	795b      	ldrb	r3, [r3, #5]
 8013b94:	2b01      	cmp	r3, #1
 8013b96:	d007      	beq.n	8013ba8 <dhcp_t1_timeout+0x26>
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	795b      	ldrb	r3, [r3, #5]
 8013b9c:	2b0a      	cmp	r3, #10
 8013b9e:	d003      	beq.n	8013ba8 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013ba4:	2b05      	cmp	r3, #5
 8013ba6:	d116      	bne.n	8013bd6 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8013ba8:	6878      	ldr	r0, [r7, #4]
 8013baa:	f000 fb95 	bl	80142d8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	899b      	ldrh	r3, [r3, #12]
 8013bb2:	461a      	mov	r2, r3
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	8a5b      	ldrh	r3, [r3, #18]
 8013bb8:	1ad3      	subs	r3, r2, r3
 8013bba:	2b01      	cmp	r3, #1
 8013bbc:	dd0b      	ble.n	8013bd6 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	899b      	ldrh	r3, [r3, #12]
 8013bc2:	461a      	mov	r2, r3
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	8a5b      	ldrh	r3, [r3, #18]
 8013bc8:	1ad3      	subs	r3, r2, r3
 8013bca:	0fda      	lsrs	r2, r3, #31
 8013bcc:	4413      	add	r3, r2
 8013bce:	105b      	asrs	r3, r3, #1
 8013bd0:	b29a      	uxth	r2, r3
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8013bd6:	bf00      	nop
 8013bd8:	3710      	adds	r7, #16
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bd80      	pop	{r7, pc}

08013bde <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8013bde:	b580      	push	{r7, lr}
 8013be0:	b084      	sub	sp, #16
 8013be2:	af00      	add	r7, sp, #0
 8013be4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bea:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	795b      	ldrb	r3, [r3, #5]
 8013bf0:	2b01      	cmp	r3, #1
 8013bf2:	d00b      	beq.n	8013c0c <dhcp_t2_timeout+0x2e>
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	795b      	ldrb	r3, [r3, #5]
 8013bf8:	2b0a      	cmp	r3, #10
 8013bfa:	d007      	beq.n	8013c0c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013c00:	2b05      	cmp	r3, #5
 8013c02:	d003      	beq.n	8013c0c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	795b      	ldrb	r3, [r3, #5]
 8013c08:	2b04      	cmp	r3, #4
 8013c0a:	d116      	bne.n	8013c3a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8013c0c:	6878      	ldr	r0, [r7, #4]
 8013c0e:	f000 fbff 	bl	8014410 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	8a9b      	ldrh	r3, [r3, #20]
 8013c16:	461a      	mov	r2, r3
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	8a5b      	ldrh	r3, [r3, #18]
 8013c1c:	1ad3      	subs	r3, r2, r3
 8013c1e:	2b01      	cmp	r3, #1
 8013c20:	dd0b      	ble.n	8013c3a <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	8a9b      	ldrh	r3, [r3, #20]
 8013c26:	461a      	mov	r2, r3
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	8a5b      	ldrh	r3, [r3, #18]
 8013c2c:	1ad3      	subs	r3, r2, r3
 8013c2e:	0fda      	lsrs	r2, r3, #31
 8013c30:	4413      	add	r3, r2
 8013c32:	105b      	asrs	r3, r3, #1
 8013c34:	b29a      	uxth	r2, r3
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8013c3a:	bf00      	nop
 8013c3c:	3710      	adds	r7, #16
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	bd80      	pop	{r7, pc}
	...

08013c44 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b084      	sub	sp, #16
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	6078      	str	r0, [r7, #4]
 8013c4c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c52:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	2200      	movs	r2, #0
 8013c58:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	2200      	movs	r2, #0
 8013c5e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8013c60:	4b26      	ldr	r3, [pc, #152]	; (8013cfc <dhcp_handle_ack+0xb8>)
 8013c62:	78db      	ldrb	r3, [r3, #3]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d003      	beq.n	8013c70 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8013c68:	4b25      	ldr	r3, [pc, #148]	; (8013d00 <dhcp_handle_ack+0xbc>)
 8013c6a:	68da      	ldr	r2, [r3, #12]
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8013c70:	4b22      	ldr	r3, [pc, #136]	; (8013cfc <dhcp_handle_ack+0xb8>)
 8013c72:	791b      	ldrb	r3, [r3, #4]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d004      	beq.n	8013c82 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8013c78:	4b21      	ldr	r3, [pc, #132]	; (8013d00 <dhcp_handle_ack+0xbc>)
 8013c7a:	691a      	ldr	r2, [r3, #16]
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8013c80:	e004      	b.n	8013c8c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c86:	085a      	lsrs	r2, r3, #1
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8013c8c:	4b1b      	ldr	r3, [pc, #108]	; (8013cfc <dhcp_handle_ack+0xb8>)
 8013c8e:	795b      	ldrb	r3, [r3, #5]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d004      	beq.n	8013c9e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8013c94:	4b1a      	ldr	r3, [pc, #104]	; (8013d00 <dhcp_handle_ack+0xbc>)
 8013c96:	695a      	ldr	r2, [r3, #20]
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	631a      	str	r2, [r3, #48]	; 0x30
 8013c9c:	e007      	b.n	8013cae <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013ca2:	4613      	mov	r3, r2
 8013ca4:	00db      	lsls	r3, r3, #3
 8013ca6:	1a9b      	subs	r3, r3, r2
 8013ca8:	08da      	lsrs	r2, r3, #3
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013cae:	683b      	ldr	r3, [r7, #0]
 8013cb0:	691a      	ldr	r2, [r3, #16]
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8013cb6:	4b11      	ldr	r3, [pc, #68]	; (8013cfc <dhcp_handle_ack+0xb8>)
 8013cb8:	799b      	ldrb	r3, [r3, #6]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d00b      	beq.n	8013cd6 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8013cbe:	4b10      	ldr	r3, [pc, #64]	; (8013d00 <dhcp_handle_ack+0xbc>)
 8013cc0:	699b      	ldr	r3, [r3, #24]
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	f7f6 ff2f 	bl	800ab26 <lwip_htonl>
 8013cc8:	4602      	mov	r2, r0
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	2201      	movs	r2, #1
 8013cd2:	71da      	strb	r2, [r3, #7]
 8013cd4:	e002      	b.n	8013cdc <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	2200      	movs	r2, #0
 8013cda:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8013cdc:	4b07      	ldr	r3, [pc, #28]	; (8013cfc <dhcp_handle_ack+0xb8>)
 8013cde:	79db      	ldrb	r3, [r3, #7]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d007      	beq.n	8013cf4 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8013ce4:	4b06      	ldr	r3, [pc, #24]	; (8013d00 <dhcp_handle_ack+0xbc>)
 8013ce6:	69db      	ldr	r3, [r3, #28]
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f7f6 ff1c 	bl	800ab26 <lwip_htonl>
 8013cee:	4602      	mov	r2, r0
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8013cf4:	bf00      	nop
 8013cf6:	3710      	adds	r7, #16
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd80      	pop	{r7, pc}
 8013cfc:	2000f530 	.word	0x2000f530
 8013d00:	2000f538 	.word	0x2000f538

08013d04 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b084      	sub	sp, #16
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d109      	bne.n	8013d26 <dhcp_start+0x22>
 8013d12:	4b37      	ldr	r3, [pc, #220]	; (8013df0 <dhcp_start+0xec>)
 8013d14:	f240 22e7 	movw	r2, #743	; 0x2e7
 8013d18:	4936      	ldr	r1, [pc, #216]	; (8013df4 <dhcp_start+0xf0>)
 8013d1a:	4837      	ldr	r0, [pc, #220]	; (8013df8 <dhcp_start+0xf4>)
 8013d1c:	f004 f856 	bl	8017dcc <iprintf>
 8013d20:	f06f 030f 	mvn.w	r3, #15
 8013d24:	e060      	b.n	8013de8 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013d2c:	f003 0301 	and.w	r3, r3, #1
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d109      	bne.n	8013d48 <dhcp_start+0x44>
 8013d34:	4b2e      	ldr	r3, [pc, #184]	; (8013df0 <dhcp_start+0xec>)
 8013d36:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8013d3a:	4930      	ldr	r1, [pc, #192]	; (8013dfc <dhcp_start+0xf8>)
 8013d3c:	482e      	ldr	r0, [pc, #184]	; (8013df8 <dhcp_start+0xf4>)
 8013d3e:	f004 f845 	bl	8017dcc <iprintf>
 8013d42:	f06f 030f 	mvn.w	r3, #15
 8013d46:	e04f      	b.n	8013de8 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d4c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013d52:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8013d56:	d202      	bcs.n	8013d5e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8013d58:	f04f 33ff 	mov.w	r3, #4294967295
 8013d5c:	e044      	b.n	8013de8 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d10d      	bne.n	8013d80 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8013d64:	2034      	movs	r0, #52	; 0x34
 8013d66:	f7f7 fa33 	bl	800b1d0 <mem_malloc>
 8013d6a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d102      	bne.n	8013d78 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8013d72:	f04f 33ff 	mov.w	r3, #4294967295
 8013d76:	e037      	b.n	8013de8 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	68fa      	ldr	r2, [r7, #12]
 8013d7c:	625a      	str	r2, [r3, #36]	; 0x24
 8013d7e:	e005      	b.n	8013d8c <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	791b      	ldrb	r3, [r3, #4]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d001      	beq.n	8013d8c <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013d88:	f7ff fc92 	bl	80136b0 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8013d8c:	2234      	movs	r2, #52	; 0x34
 8013d8e:	2100      	movs	r1, #0
 8013d90:	68f8      	ldr	r0, [r7, #12]
 8013d92:	f004 f812 	bl	8017dba <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8013d96:	f7ff fc39 	bl	801360c <dhcp_inc_pcb_refcount>
 8013d9a:	4603      	mov	r3, r0
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d002      	beq.n	8013da6 <dhcp_start+0xa2>
    return ERR_MEM;
 8013da0:	f04f 33ff 	mov.w	r3, #4294967295
 8013da4:	e020      	b.n	8013de8 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	2201      	movs	r2, #1
 8013daa:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013db2:	f003 0304 	and.w	r3, r3, #4
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d105      	bne.n	8013dc6 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8013dba:	2102      	movs	r1, #2
 8013dbc:	68f8      	ldr	r0, [r7, #12]
 8013dbe:	f000 fd13 	bl	80147e8 <dhcp_set_state>
    return ERR_OK;
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	e010      	b.n	8013de8 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8013dc6:	6878      	ldr	r0, [r7, #4]
 8013dc8:	f000 f90a 	bl	8013fe0 <dhcp_discover>
 8013dcc:	4603      	mov	r3, r0
 8013dce:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8013dd0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d005      	beq.n	8013de4 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8013dd8:	6878      	ldr	r0, [r7, #4]
 8013dda:	f000 fc6b 	bl	80146b4 <dhcp_release_and_stop>
    return ERR_MEM;
 8013dde:	f04f 33ff 	mov.w	r3, #4294967295
 8013de2:	e001      	b.n	8013de8 <dhcp_start+0xe4>
  }
  return result;
 8013de4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013de8:	4618      	mov	r0, r3
 8013dea:	3710      	adds	r7, #16
 8013dec:	46bd      	mov	sp, r7
 8013dee:	bd80      	pop	{r7, pc}
 8013df0:	0801c2bc 	.word	0x0801c2bc
 8013df4:	0801c3a0 	.word	0x0801c3a0
 8013df8:	0801c31c 	.word	0x0801c31c
 8013dfc:	0801c3e4 	.word	0x0801c3e4

08013e00 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	b084      	sub	sp, #16
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e0c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d037      	beq.n	8013e84 <dhcp_network_changed+0x84>
    return;
  }
  switch (dhcp->state) {
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	795b      	ldrb	r3, [r3, #5]
 8013e18:	2b0a      	cmp	r3, #10
 8013e1a:	d820      	bhi.n	8013e5e <dhcp_network_changed+0x5e>
 8013e1c:	a201      	add	r2, pc, #4	; (adr r2, 8013e24 <dhcp_network_changed+0x24>)
 8013e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e22:	bf00      	nop
 8013e24:	08013e89 	.word	0x08013e89
 8013e28:	08013e5f 	.word	0x08013e5f
 8013e2c:	08013e5f 	.word	0x08013e5f
 8013e30:	08013e51 	.word	0x08013e51
 8013e34:	08013e51 	.word	0x08013e51
 8013e38:	08013e51 	.word	0x08013e51
 8013e3c:	08013e5f 	.word	0x08013e5f
 8013e40:	08013e5f 	.word	0x08013e5f
 8013e44:	08013e5f 	.word	0x08013e5f
 8013e48:	08013e5f 	.word	0x08013e5f
 8013e4c:	08013e51 	.word	0x08013e51
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	2200      	movs	r2, #0
 8013e54:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8013e56:	6878      	ldr	r0, [r7, #4]
 8013e58:	f000 fb76 	bl	8014548 <dhcp_reboot>
      break;
 8013e5c:	e015      	b.n	8013e8a <dhcp_network_changed+0x8a>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	795b      	ldrb	r3, [r3, #5]
 8013e62:	2b0c      	cmp	r3, #12
 8013e64:	d906      	bls.n	8013e74 <dhcp_network_changed+0x74>
 8013e66:	4b0a      	ldr	r3, [pc, #40]	; (8013e90 <dhcp_network_changed+0x90>)
 8013e68:	f240 326d 	movw	r2, #877	; 0x36d
 8013e6c:	4909      	ldr	r1, [pc, #36]	; (8013e94 <dhcp_network_changed+0x94>)
 8013e6e:	480a      	ldr	r0, [pc, #40]	; (8013e98 <dhcp_network_changed+0x98>)
 8013e70:	f003 ffac 	bl	8017dcc <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	2200      	movs	r2, #0
 8013e78:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8013e7a:	6878      	ldr	r0, [r7, #4]
 8013e7c:	f000 f8b0 	bl	8013fe0 <dhcp_discover>
      break;
 8013e80:	bf00      	nop
 8013e82:	e002      	b.n	8013e8a <dhcp_network_changed+0x8a>
    return;
 8013e84:	bf00      	nop
 8013e86:	e000      	b.n	8013e8a <dhcp_network_changed+0x8a>
      break;
 8013e88:	bf00      	nop
  }
}
 8013e8a:	3710      	adds	r7, #16
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	bd80      	pop	{r7, pc}
 8013e90:	0801c2bc 	.word	0x0801c2bc
 8013e94:	0801c408 	.word	0x0801c408
 8013e98:	0801c31c 	.word	0x0801c31c

08013e9c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b084      	sub	sp, #16
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	6078      	str	r0, [r7, #4]
 8013ea4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d107      	bne.n	8013ebc <dhcp_arp_reply+0x20>
 8013eac:	4b0e      	ldr	r3, [pc, #56]	; (8013ee8 <dhcp_arp_reply+0x4c>)
 8013eae:	f240 328b 	movw	r2, #907	; 0x38b
 8013eb2:	490e      	ldr	r1, [pc, #56]	; (8013eec <dhcp_arp_reply+0x50>)
 8013eb4:	480e      	ldr	r0, [pc, #56]	; (8013ef0 <dhcp_arp_reply+0x54>)
 8013eb6:	f003 ff89 	bl	8017dcc <iprintf>
 8013eba:	e012      	b.n	8013ee2 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ec0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d00c      	beq.n	8013ee2 <dhcp_arp_reply+0x46>
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	795b      	ldrb	r3, [r3, #5]
 8013ecc:	2b08      	cmp	r3, #8
 8013ece:	d108      	bne.n	8013ee2 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8013ed0:	683b      	ldr	r3, [r7, #0]
 8013ed2:	681a      	ldr	r2, [r3, #0]
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	69db      	ldr	r3, [r3, #28]
 8013ed8:	429a      	cmp	r2, r3
 8013eda:	d102      	bne.n	8013ee2 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8013edc:	6878      	ldr	r0, [r7, #4]
 8013ede:	f000 f809 	bl	8013ef4 <dhcp_decline>
    }
  }
}
 8013ee2:	3710      	adds	r7, #16
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	bd80      	pop	{r7, pc}
 8013ee8:	0801c2bc 	.word	0x0801c2bc
 8013eec:	0801c3a0 	.word	0x0801c3a0
 8013ef0:	0801c31c 	.word	0x0801c31c

08013ef4 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8013ef4:	b5b0      	push	{r4, r5, r7, lr}
 8013ef6:	b08a      	sub	sp, #40	; 0x28
 8013ef8:	af02      	add	r7, sp, #8
 8013efa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f00:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013f02:	210c      	movs	r1, #12
 8013f04:	69b8      	ldr	r0, [r7, #24]
 8013f06:	f000 fc6f 	bl	80147e8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8013f0a:	f107 030c 	add.w	r3, r7, #12
 8013f0e:	2204      	movs	r2, #4
 8013f10:	69b9      	ldr	r1, [r7, #24]
 8013f12:	6878      	ldr	r0, [r7, #4]
 8013f14:	f001 f8f2 	bl	80150fc <dhcp_create_msg>
 8013f18:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013f1a:	697b      	ldr	r3, [r7, #20]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d035      	beq.n	8013f8c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013f20:	697b      	ldr	r3, [r7, #20]
 8013f22:	685b      	ldr	r3, [r3, #4]
 8013f24:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013f26:	89b8      	ldrh	r0, [r7, #12]
 8013f28:	693b      	ldr	r3, [r7, #16]
 8013f2a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013f2e:	2304      	movs	r3, #4
 8013f30:	2232      	movs	r2, #50	; 0x32
 8013f32:	f000 fc73 	bl	801481c <dhcp_option>
 8013f36:	4603      	mov	r3, r0
 8013f38:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013f3a:	89bc      	ldrh	r4, [r7, #12]
 8013f3c:	693b      	ldr	r3, [r7, #16]
 8013f3e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013f42:	69bb      	ldr	r3, [r7, #24]
 8013f44:	69db      	ldr	r3, [r3, #28]
 8013f46:	4618      	mov	r0, r3
 8013f48:	f7f6 fded 	bl	800ab26 <lwip_htonl>
 8013f4c:	4603      	mov	r3, r0
 8013f4e:	461a      	mov	r2, r3
 8013f50:	4629      	mov	r1, r5
 8013f52:	4620      	mov	r0, r4
 8013f54:	f000 fcee 	bl	8014934 <dhcp_option_long>
 8013f58:	4603      	mov	r3, r0
 8013f5a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013f5c:	89b8      	ldrh	r0, [r7, #12]
 8013f5e:	693b      	ldr	r3, [r7, #16]
 8013f60:	33f0      	adds	r3, #240	; 0xf0
 8013f62:	697a      	ldr	r2, [r7, #20]
 8013f64:	4619      	mov	r1, r3
 8013f66:	f001 f99f 	bl	80152a8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013f6a:	4b19      	ldr	r3, [pc, #100]	; (8013fd0 <dhcp_decline+0xdc>)
 8013f6c:	6818      	ldr	r0, [r3, #0]
 8013f6e:	4b19      	ldr	r3, [pc, #100]	; (8013fd4 <dhcp_decline+0xe0>)
 8013f70:	9301      	str	r3, [sp, #4]
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	9300      	str	r3, [sp, #0]
 8013f76:	2343      	movs	r3, #67	; 0x43
 8013f78:	4a17      	ldr	r2, [pc, #92]	; (8013fd8 <dhcp_decline+0xe4>)
 8013f7a:	6979      	ldr	r1, [r7, #20]
 8013f7c:	f7ff f8b4 	bl	80130e8 <udp_sendto_if_src>
 8013f80:	4603      	mov	r3, r0
 8013f82:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013f84:	6978      	ldr	r0, [r7, #20]
 8013f86:	f7f8 f9a3 	bl	800c2d0 <pbuf_free>
 8013f8a:	e001      	b.n	8013f90 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013f8c:	23ff      	movs	r3, #255	; 0xff
 8013f8e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013f90:	69bb      	ldr	r3, [r7, #24]
 8013f92:	799b      	ldrb	r3, [r3, #6]
 8013f94:	2bff      	cmp	r3, #255	; 0xff
 8013f96:	d005      	beq.n	8013fa4 <dhcp_decline+0xb0>
    dhcp->tries++;
 8013f98:	69bb      	ldr	r3, [r7, #24]
 8013f9a:	799b      	ldrb	r3, [r3, #6]
 8013f9c:	3301      	adds	r3, #1
 8013f9e:	b2da      	uxtb	r2, r3
 8013fa0:	69bb      	ldr	r3, [r7, #24]
 8013fa2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8013fa4:	f242 7310 	movw	r3, #10000	; 0x2710
 8013fa8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013faa:	89fb      	ldrh	r3, [r7, #14]
 8013fac:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013fb0:	4a0a      	ldr	r2, [pc, #40]	; (8013fdc <dhcp_decline+0xe8>)
 8013fb2:	fb82 1203 	smull	r1, r2, r2, r3
 8013fb6:	1152      	asrs	r2, r2, #5
 8013fb8:	17db      	asrs	r3, r3, #31
 8013fba:	1ad3      	subs	r3, r2, r3
 8013fbc:	b29a      	uxth	r2, r3
 8013fbe:	69bb      	ldr	r3, [r7, #24]
 8013fc0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013fc2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	3720      	adds	r7, #32
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	bdb0      	pop	{r4, r5, r7, pc}
 8013fce:	bf00      	nop
 8013fd0:	20008ad0 	.word	0x20008ad0
 8013fd4:	08026f94 	.word	0x08026f94
 8013fd8:	08026f98 	.word	0x08026f98
 8013fdc:	10624dd3 	.word	0x10624dd3

08013fe0 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b08a      	sub	sp, #40	; 0x28
 8013fe4:	af02      	add	r7, sp, #8
 8013fe6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fec:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8013fee:	2300      	movs	r3, #0
 8013ff0:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8013ff2:	69bb      	ldr	r3, [r7, #24]
 8013ff4:	2200      	movs	r2, #0
 8013ff6:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8013ff8:	2106      	movs	r1, #6
 8013ffa:	69b8      	ldr	r0, [r7, #24]
 8013ffc:	f000 fbf4 	bl	80147e8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8014000:	f107 0308 	add.w	r3, r7, #8
 8014004:	2201      	movs	r2, #1
 8014006:	69b9      	ldr	r1, [r7, #24]
 8014008:	6878      	ldr	r0, [r7, #4]
 801400a:	f001 f877 	bl	80150fc <dhcp_create_msg>
 801400e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8014010:	693b      	ldr	r3, [r7, #16]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d04b      	beq.n	80140ae <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014016:	693b      	ldr	r3, [r7, #16]
 8014018:	685b      	ldr	r3, [r3, #4]
 801401a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801401c:	8938      	ldrh	r0, [r7, #8]
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014024:	2302      	movs	r3, #2
 8014026:	2239      	movs	r2, #57	; 0x39
 8014028:	f000 fbf8 	bl	801481c <dhcp_option>
 801402c:	4603      	mov	r3, r0
 801402e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014030:	8938      	ldrh	r0, [r7, #8]
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801403c:	461a      	mov	r2, r3
 801403e:	f000 fc47 	bl	80148d0 <dhcp_option_short>
 8014042:	4603      	mov	r3, r0
 8014044:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014046:	8938      	ldrh	r0, [r7, #8]
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801404e:	2303      	movs	r3, #3
 8014050:	2237      	movs	r2, #55	; 0x37
 8014052:	f000 fbe3 	bl	801481c <dhcp_option>
 8014056:	4603      	mov	r3, r0
 8014058:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801405a:	2300      	movs	r3, #0
 801405c:	77fb      	strb	r3, [r7, #31]
 801405e:	e00e      	b.n	801407e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014060:	8938      	ldrh	r0, [r7, #8]
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014068:	7ffb      	ldrb	r3, [r7, #31]
 801406a:	4a29      	ldr	r2, [pc, #164]	; (8014110 <dhcp_discover+0x130>)
 801406c:	5cd3      	ldrb	r3, [r2, r3]
 801406e:	461a      	mov	r2, r3
 8014070:	f000 fc08 	bl	8014884 <dhcp_option_byte>
 8014074:	4603      	mov	r3, r0
 8014076:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014078:	7ffb      	ldrb	r3, [r7, #31]
 801407a:	3301      	adds	r3, #1
 801407c:	77fb      	strb	r3, [r7, #31]
 801407e:	7ffb      	ldrb	r3, [r7, #31]
 8014080:	2b02      	cmp	r3, #2
 8014082:	d9ed      	bls.n	8014060 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014084:	8938      	ldrh	r0, [r7, #8]
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	33f0      	adds	r3, #240	; 0xf0
 801408a:	693a      	ldr	r2, [r7, #16]
 801408c:	4619      	mov	r1, r3
 801408e:	f001 f90b 	bl	80152a8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014092:	4b20      	ldr	r3, [pc, #128]	; (8014114 <dhcp_discover+0x134>)
 8014094:	6818      	ldr	r0, [r3, #0]
 8014096:	4b20      	ldr	r3, [pc, #128]	; (8014118 <dhcp_discover+0x138>)
 8014098:	9301      	str	r3, [sp, #4]
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	9300      	str	r3, [sp, #0]
 801409e:	2343      	movs	r3, #67	; 0x43
 80140a0:	4a1e      	ldr	r2, [pc, #120]	; (801411c <dhcp_discover+0x13c>)
 80140a2:	6939      	ldr	r1, [r7, #16]
 80140a4:	f7ff f820 	bl	80130e8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80140a8:	6938      	ldr	r0, [r7, #16]
 80140aa:	f7f8 f911 	bl	800c2d0 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80140ae:	69bb      	ldr	r3, [r7, #24]
 80140b0:	799b      	ldrb	r3, [r3, #6]
 80140b2:	2bff      	cmp	r3, #255	; 0xff
 80140b4:	d005      	beq.n	80140c2 <dhcp_discover+0xe2>
    dhcp->tries++;
 80140b6:	69bb      	ldr	r3, [r7, #24]
 80140b8:	799b      	ldrb	r3, [r3, #6]
 80140ba:	3301      	adds	r3, #1
 80140bc:	b2da      	uxtb	r2, r3
 80140be:	69bb      	ldr	r3, [r7, #24]
 80140c0:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80140c2:	69bb      	ldr	r3, [r7, #24]
 80140c4:	799b      	ldrb	r3, [r3, #6]
 80140c6:	2b05      	cmp	r3, #5
 80140c8:	d80d      	bhi.n	80140e6 <dhcp_discover+0x106>
 80140ca:	69bb      	ldr	r3, [r7, #24]
 80140cc:	799b      	ldrb	r3, [r3, #6]
 80140ce:	461a      	mov	r2, r3
 80140d0:	2301      	movs	r3, #1
 80140d2:	4093      	lsls	r3, r2
 80140d4:	b29b      	uxth	r3, r3
 80140d6:	461a      	mov	r2, r3
 80140d8:	0152      	lsls	r2, r2, #5
 80140da:	1ad2      	subs	r2, r2, r3
 80140dc:	0092      	lsls	r2, r2, #2
 80140de:	4413      	add	r3, r2
 80140e0:	00db      	lsls	r3, r3, #3
 80140e2:	b29b      	uxth	r3, r3
 80140e4:	e001      	b.n	80140ea <dhcp_discover+0x10a>
 80140e6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80140ea:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80140ec:	897b      	ldrh	r3, [r7, #10]
 80140ee:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80140f2:	4a0b      	ldr	r2, [pc, #44]	; (8014120 <dhcp_discover+0x140>)
 80140f4:	fb82 1203 	smull	r1, r2, r2, r3
 80140f8:	1152      	asrs	r2, r2, #5
 80140fa:	17db      	asrs	r3, r3, #31
 80140fc:	1ad3      	subs	r3, r2, r3
 80140fe:	b29a      	uxth	r2, r3
 8014100:	69bb      	ldr	r3, [r7, #24]
 8014102:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014104:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014108:	4618      	mov	r0, r3
 801410a:	3720      	adds	r7, #32
 801410c:	46bd      	mov	sp, r7
 801410e:	bd80      	pop	{r7, pc}
 8014110:	2000001c 	.word	0x2000001c
 8014114:	20008ad0 	.word	0x20008ad0
 8014118:	08026f94 	.word	0x08026f94
 801411c:	08026f98 	.word	0x08026f98
 8014120:	10624dd3 	.word	0x10624dd3

08014124 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b088      	sub	sp, #32
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d107      	bne.n	8014142 <dhcp_bind+0x1e>
 8014132:	4b64      	ldr	r3, [pc, #400]	; (80142c4 <dhcp_bind+0x1a0>)
 8014134:	f240 4215 	movw	r2, #1045	; 0x415
 8014138:	4963      	ldr	r1, [pc, #396]	; (80142c8 <dhcp_bind+0x1a4>)
 801413a:	4864      	ldr	r0, [pc, #400]	; (80142cc <dhcp_bind+0x1a8>)
 801413c:	f003 fe46 	bl	8017dcc <iprintf>
 8014140:	e0bc      	b.n	80142bc <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014146:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8014148:	69bb      	ldr	r3, [r7, #24]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d107      	bne.n	801415e <dhcp_bind+0x3a>
 801414e:	4b5d      	ldr	r3, [pc, #372]	; (80142c4 <dhcp_bind+0x1a0>)
 8014150:	f240 4217 	movw	r2, #1047	; 0x417
 8014154:	495e      	ldr	r1, [pc, #376]	; (80142d0 <dhcp_bind+0x1ac>)
 8014156:	485d      	ldr	r0, [pc, #372]	; (80142cc <dhcp_bind+0x1a8>)
 8014158:	f003 fe38 	bl	8017dcc <iprintf>
 801415c:	e0ae      	b.n	80142bc <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801415e:	69bb      	ldr	r3, [r7, #24]
 8014160:	2200      	movs	r2, #0
 8014162:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8014164:	69bb      	ldr	r3, [r7, #24]
 8014166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014168:	f1b3 3fff 	cmp.w	r3, #4294967295
 801416c:	d019      	beq.n	80141a2 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801416e:	69bb      	ldr	r3, [r7, #24]
 8014170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014172:	331e      	adds	r3, #30
 8014174:	4a57      	ldr	r2, [pc, #348]	; (80142d4 <dhcp_bind+0x1b0>)
 8014176:	fba2 2303 	umull	r2, r3, r2, r3
 801417a:	095b      	lsrs	r3, r3, #5
 801417c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801417e:	69fb      	ldr	r3, [r7, #28]
 8014180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014184:	d302      	bcc.n	801418c <dhcp_bind+0x68>
      timeout = 0xffff;
 8014186:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801418a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801418c:	69fb      	ldr	r3, [r7, #28]
 801418e:	b29a      	uxth	r2, r3
 8014190:	69bb      	ldr	r3, [r7, #24]
 8014192:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8014194:	69bb      	ldr	r3, [r7, #24]
 8014196:	8a9b      	ldrh	r3, [r3, #20]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d102      	bne.n	80141a2 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801419c:	69bb      	ldr	r3, [r7, #24]
 801419e:	2201      	movs	r2, #1
 80141a0:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80141a2:	69bb      	ldr	r3, [r7, #24]
 80141a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141aa:	d01d      	beq.n	80141e8 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80141ac:	69bb      	ldr	r3, [r7, #24]
 80141ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141b0:	331e      	adds	r3, #30
 80141b2:	4a48      	ldr	r2, [pc, #288]	; (80142d4 <dhcp_bind+0x1b0>)
 80141b4:	fba2 2303 	umull	r2, r3, r2, r3
 80141b8:	095b      	lsrs	r3, r3, #5
 80141ba:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80141bc:	69fb      	ldr	r3, [r7, #28]
 80141be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80141c2:	d302      	bcc.n	80141ca <dhcp_bind+0xa6>
      timeout = 0xffff;
 80141c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80141c8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80141ca:	69fb      	ldr	r3, [r7, #28]
 80141cc:	b29a      	uxth	r2, r3
 80141ce:	69bb      	ldr	r3, [r7, #24]
 80141d0:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80141d2:	69bb      	ldr	r3, [r7, #24]
 80141d4:	895b      	ldrh	r3, [r3, #10]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d102      	bne.n	80141e0 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80141da:	69bb      	ldr	r3, [r7, #24]
 80141dc:	2201      	movs	r2, #1
 80141de:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80141e0:	69bb      	ldr	r3, [r7, #24]
 80141e2:	895a      	ldrh	r2, [r3, #10]
 80141e4:	69bb      	ldr	r3, [r7, #24]
 80141e6:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80141e8:	69bb      	ldr	r3, [r7, #24]
 80141ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141f0:	d01d      	beq.n	801422e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80141f2:	69bb      	ldr	r3, [r7, #24]
 80141f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141f6:	331e      	adds	r3, #30
 80141f8:	4a36      	ldr	r2, [pc, #216]	; (80142d4 <dhcp_bind+0x1b0>)
 80141fa:	fba2 2303 	umull	r2, r3, r2, r3
 80141fe:	095b      	lsrs	r3, r3, #5
 8014200:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014202:	69fb      	ldr	r3, [r7, #28]
 8014204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014208:	d302      	bcc.n	8014210 <dhcp_bind+0xec>
      timeout = 0xffff;
 801420a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801420e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8014210:	69fb      	ldr	r3, [r7, #28]
 8014212:	b29a      	uxth	r2, r3
 8014214:	69bb      	ldr	r3, [r7, #24]
 8014216:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8014218:	69bb      	ldr	r3, [r7, #24]
 801421a:	899b      	ldrh	r3, [r3, #12]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d102      	bne.n	8014226 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8014220:	69bb      	ldr	r3, [r7, #24]
 8014222:	2201      	movs	r2, #1
 8014224:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8014226:	69bb      	ldr	r3, [r7, #24]
 8014228:	899a      	ldrh	r2, [r3, #12]
 801422a:	69bb      	ldr	r3, [r7, #24]
 801422c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801422e:	69bb      	ldr	r3, [r7, #24]
 8014230:	895a      	ldrh	r2, [r3, #10]
 8014232:	69bb      	ldr	r3, [r7, #24]
 8014234:	899b      	ldrh	r3, [r3, #12]
 8014236:	429a      	cmp	r2, r3
 8014238:	d306      	bcc.n	8014248 <dhcp_bind+0x124>
 801423a:	69bb      	ldr	r3, [r7, #24]
 801423c:	899b      	ldrh	r3, [r3, #12]
 801423e:	2b00      	cmp	r3, #0
 8014240:	d002      	beq.n	8014248 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8014242:	69bb      	ldr	r3, [r7, #24]
 8014244:	2200      	movs	r2, #0
 8014246:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8014248:	69bb      	ldr	r3, [r7, #24]
 801424a:	79db      	ldrb	r3, [r3, #7]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d003      	beq.n	8014258 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8014250:	69bb      	ldr	r3, [r7, #24]
 8014252:	6a1b      	ldr	r3, [r3, #32]
 8014254:	613b      	str	r3, [r7, #16]
 8014256:	e014      	b.n	8014282 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8014258:	69bb      	ldr	r3, [r7, #24]
 801425a:	331c      	adds	r3, #28
 801425c:	781b      	ldrb	r3, [r3, #0]
 801425e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8014260:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014264:	2b00      	cmp	r3, #0
 8014266:	db02      	blt.n	801426e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8014268:	23ff      	movs	r3, #255	; 0xff
 801426a:	613b      	str	r3, [r7, #16]
 801426c:	e009      	b.n	8014282 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801426e:	7dfb      	ldrb	r3, [r7, #23]
 8014270:	2bbf      	cmp	r3, #191	; 0xbf
 8014272:	d903      	bls.n	801427c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8014274:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8014278:	613b      	str	r3, [r7, #16]
 801427a:	e002      	b.n	8014282 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801427c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014280:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8014282:	69bb      	ldr	r3, [r7, #24]
 8014284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014286:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	2b00      	cmp	r3, #0
 801428c:	d108      	bne.n	80142a0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801428e:	69bb      	ldr	r3, [r7, #24]
 8014290:	69da      	ldr	r2, [r3, #28]
 8014292:	693b      	ldr	r3, [r7, #16]
 8014294:	4013      	ands	r3, r2
 8014296:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801429e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80142a0:	210a      	movs	r1, #10
 80142a2:	69b8      	ldr	r0, [r7, #24]
 80142a4:	f000 faa0 	bl	80147e8 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80142a8:	69bb      	ldr	r3, [r7, #24]
 80142aa:	f103 011c 	add.w	r1, r3, #28
 80142ae:	f107 030c 	add.w	r3, r7, #12
 80142b2:	f107 0210 	add.w	r2, r7, #16
 80142b6:	6878      	ldr	r0, [r7, #4]
 80142b8:	f7f7 fb00 	bl	800b8bc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80142bc:	3720      	adds	r7, #32
 80142be:	46bd      	mov	sp, r7
 80142c0:	bd80      	pop	{r7, pc}
 80142c2:	bf00      	nop
 80142c4:	0801c2bc 	.word	0x0801c2bc
 80142c8:	0801c41c 	.word	0x0801c41c
 80142cc:	0801c31c 	.word	0x0801c31c
 80142d0:	0801c438 	.word	0x0801c438
 80142d4:	88888889 	.word	0x88888889

080142d8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b08a      	sub	sp, #40	; 0x28
 80142dc:	af02      	add	r7, sp, #8
 80142de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142e4:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80142e6:	2105      	movs	r1, #5
 80142e8:	69b8      	ldr	r0, [r7, #24]
 80142ea:	f000 fa7d 	bl	80147e8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80142ee:	f107 030c 	add.w	r3, r7, #12
 80142f2:	2203      	movs	r2, #3
 80142f4:	69b9      	ldr	r1, [r7, #24]
 80142f6:	6878      	ldr	r0, [r7, #4]
 80142f8:	f000 ff00 	bl	80150fc <dhcp_create_msg>
 80142fc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80142fe:	697b      	ldr	r3, [r7, #20]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d04e      	beq.n	80143a2 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014304:	697b      	ldr	r3, [r7, #20]
 8014306:	685b      	ldr	r3, [r3, #4]
 8014308:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801430a:	89b8      	ldrh	r0, [r7, #12]
 801430c:	693b      	ldr	r3, [r7, #16]
 801430e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014312:	2302      	movs	r3, #2
 8014314:	2239      	movs	r2, #57	; 0x39
 8014316:	f000 fa81 	bl	801481c <dhcp_option>
 801431a:	4603      	mov	r3, r0
 801431c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801431e:	89b8      	ldrh	r0, [r7, #12]
 8014320:	693b      	ldr	r3, [r7, #16]
 8014322:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801432a:	461a      	mov	r2, r3
 801432c:	f000 fad0 	bl	80148d0 <dhcp_option_short>
 8014330:	4603      	mov	r3, r0
 8014332:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014334:	89b8      	ldrh	r0, [r7, #12]
 8014336:	693b      	ldr	r3, [r7, #16]
 8014338:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801433c:	2303      	movs	r3, #3
 801433e:	2237      	movs	r2, #55	; 0x37
 8014340:	f000 fa6c 	bl	801481c <dhcp_option>
 8014344:	4603      	mov	r3, r0
 8014346:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014348:	2300      	movs	r3, #0
 801434a:	77bb      	strb	r3, [r7, #30]
 801434c:	e00e      	b.n	801436c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801434e:	89b8      	ldrh	r0, [r7, #12]
 8014350:	693b      	ldr	r3, [r7, #16]
 8014352:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014356:	7fbb      	ldrb	r3, [r7, #30]
 8014358:	4a2a      	ldr	r2, [pc, #168]	; (8014404 <dhcp_renew+0x12c>)
 801435a:	5cd3      	ldrb	r3, [r2, r3]
 801435c:	461a      	mov	r2, r3
 801435e:	f000 fa91 	bl	8014884 <dhcp_option_byte>
 8014362:	4603      	mov	r3, r0
 8014364:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014366:	7fbb      	ldrb	r3, [r7, #30]
 8014368:	3301      	adds	r3, #1
 801436a:	77bb      	strb	r3, [r7, #30]
 801436c:	7fbb      	ldrb	r3, [r7, #30]
 801436e:	2b02      	cmp	r3, #2
 8014370:	d9ed      	bls.n	801434e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014372:	89b8      	ldrh	r0, [r7, #12]
 8014374:	693b      	ldr	r3, [r7, #16]
 8014376:	33f0      	adds	r3, #240	; 0xf0
 8014378:	697a      	ldr	r2, [r7, #20]
 801437a:	4619      	mov	r1, r3
 801437c:	f000 ff94 	bl	80152a8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014380:	4b21      	ldr	r3, [pc, #132]	; (8014408 <dhcp_renew+0x130>)
 8014382:	6818      	ldr	r0, [r3, #0]
 8014384:	69bb      	ldr	r3, [r7, #24]
 8014386:	f103 0218 	add.w	r2, r3, #24
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	9300      	str	r3, [sp, #0]
 801438e:	2343      	movs	r3, #67	; 0x43
 8014390:	6979      	ldr	r1, [r7, #20]
 8014392:	f7fe fe35 	bl	8013000 <udp_sendto_if>
 8014396:	4603      	mov	r3, r0
 8014398:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801439a:	6978      	ldr	r0, [r7, #20]
 801439c:	f7f7 ff98 	bl	800c2d0 <pbuf_free>
 80143a0:	e001      	b.n	80143a6 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80143a2:	23ff      	movs	r3, #255	; 0xff
 80143a4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80143a6:	69bb      	ldr	r3, [r7, #24]
 80143a8:	799b      	ldrb	r3, [r3, #6]
 80143aa:	2bff      	cmp	r3, #255	; 0xff
 80143ac:	d005      	beq.n	80143ba <dhcp_renew+0xe2>
    dhcp->tries++;
 80143ae:	69bb      	ldr	r3, [r7, #24]
 80143b0:	799b      	ldrb	r3, [r3, #6]
 80143b2:	3301      	adds	r3, #1
 80143b4:	b2da      	uxtb	r2, r3
 80143b6:	69bb      	ldr	r3, [r7, #24]
 80143b8:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80143ba:	69bb      	ldr	r3, [r7, #24]
 80143bc:	799b      	ldrb	r3, [r3, #6]
 80143be:	2b09      	cmp	r3, #9
 80143c0:	d80a      	bhi.n	80143d8 <dhcp_renew+0x100>
 80143c2:	69bb      	ldr	r3, [r7, #24]
 80143c4:	799b      	ldrb	r3, [r3, #6]
 80143c6:	b29b      	uxth	r3, r3
 80143c8:	461a      	mov	r2, r3
 80143ca:	0152      	lsls	r2, r2, #5
 80143cc:	1ad2      	subs	r2, r2, r3
 80143ce:	0092      	lsls	r2, r2, #2
 80143d0:	4413      	add	r3, r2
 80143d2:	011b      	lsls	r3, r3, #4
 80143d4:	b29b      	uxth	r3, r3
 80143d6:	e001      	b.n	80143dc <dhcp_renew+0x104>
 80143d8:	f644 6320 	movw	r3, #20000	; 0x4e20
 80143dc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80143de:	89fb      	ldrh	r3, [r7, #14]
 80143e0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80143e4:	4a09      	ldr	r2, [pc, #36]	; (801440c <dhcp_renew+0x134>)
 80143e6:	fb82 1203 	smull	r1, r2, r2, r3
 80143ea:	1152      	asrs	r2, r2, #5
 80143ec:	17db      	asrs	r3, r3, #31
 80143ee:	1ad3      	subs	r3, r2, r3
 80143f0:	b29a      	uxth	r2, r3
 80143f2:	69bb      	ldr	r3, [r7, #24]
 80143f4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80143f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80143fa:	4618      	mov	r0, r3
 80143fc:	3720      	adds	r7, #32
 80143fe:	46bd      	mov	sp, r7
 8014400:	bd80      	pop	{r7, pc}
 8014402:	bf00      	nop
 8014404:	2000001c 	.word	0x2000001c
 8014408:	20008ad0 	.word	0x20008ad0
 801440c:	10624dd3 	.word	0x10624dd3

08014410 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8014410:	b580      	push	{r7, lr}
 8014412:	b08a      	sub	sp, #40	; 0x28
 8014414:	af02      	add	r7, sp, #8
 8014416:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801441c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801441e:	2104      	movs	r1, #4
 8014420:	69b8      	ldr	r0, [r7, #24]
 8014422:	f000 f9e1 	bl	80147e8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014426:	f107 030c 	add.w	r3, r7, #12
 801442a:	2203      	movs	r2, #3
 801442c:	69b9      	ldr	r1, [r7, #24]
 801442e:	6878      	ldr	r0, [r7, #4]
 8014430:	f000 fe64 	bl	80150fc <dhcp_create_msg>
 8014434:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014436:	697b      	ldr	r3, [r7, #20]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d04c      	beq.n	80144d6 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801443c:	697b      	ldr	r3, [r7, #20]
 801443e:	685b      	ldr	r3, [r3, #4]
 8014440:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014442:	89b8      	ldrh	r0, [r7, #12]
 8014444:	693b      	ldr	r3, [r7, #16]
 8014446:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801444a:	2302      	movs	r3, #2
 801444c:	2239      	movs	r2, #57	; 0x39
 801444e:	f000 f9e5 	bl	801481c <dhcp_option>
 8014452:	4603      	mov	r3, r0
 8014454:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014456:	89b8      	ldrh	r0, [r7, #12]
 8014458:	693b      	ldr	r3, [r7, #16]
 801445a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014462:	461a      	mov	r2, r3
 8014464:	f000 fa34 	bl	80148d0 <dhcp_option_short>
 8014468:	4603      	mov	r3, r0
 801446a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801446c:	89b8      	ldrh	r0, [r7, #12]
 801446e:	693b      	ldr	r3, [r7, #16]
 8014470:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014474:	2303      	movs	r3, #3
 8014476:	2237      	movs	r2, #55	; 0x37
 8014478:	f000 f9d0 	bl	801481c <dhcp_option>
 801447c:	4603      	mov	r3, r0
 801447e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014480:	2300      	movs	r3, #0
 8014482:	77bb      	strb	r3, [r7, #30]
 8014484:	e00e      	b.n	80144a4 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014486:	89b8      	ldrh	r0, [r7, #12]
 8014488:	693b      	ldr	r3, [r7, #16]
 801448a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801448e:	7fbb      	ldrb	r3, [r7, #30]
 8014490:	4a29      	ldr	r2, [pc, #164]	; (8014538 <dhcp_rebind+0x128>)
 8014492:	5cd3      	ldrb	r3, [r2, r3]
 8014494:	461a      	mov	r2, r3
 8014496:	f000 f9f5 	bl	8014884 <dhcp_option_byte>
 801449a:	4603      	mov	r3, r0
 801449c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801449e:	7fbb      	ldrb	r3, [r7, #30]
 80144a0:	3301      	adds	r3, #1
 80144a2:	77bb      	strb	r3, [r7, #30]
 80144a4:	7fbb      	ldrb	r3, [r7, #30]
 80144a6:	2b02      	cmp	r3, #2
 80144a8:	d9ed      	bls.n	8014486 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80144aa:	89b8      	ldrh	r0, [r7, #12]
 80144ac:	693b      	ldr	r3, [r7, #16]
 80144ae:	33f0      	adds	r3, #240	; 0xf0
 80144b0:	697a      	ldr	r2, [r7, #20]
 80144b2:	4619      	mov	r1, r3
 80144b4:	f000 fef8 	bl	80152a8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80144b8:	4b20      	ldr	r3, [pc, #128]	; (801453c <dhcp_rebind+0x12c>)
 80144ba:	6818      	ldr	r0, [r3, #0]
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	9300      	str	r3, [sp, #0]
 80144c0:	2343      	movs	r3, #67	; 0x43
 80144c2:	4a1f      	ldr	r2, [pc, #124]	; (8014540 <dhcp_rebind+0x130>)
 80144c4:	6979      	ldr	r1, [r7, #20]
 80144c6:	f7fe fd9b 	bl	8013000 <udp_sendto_if>
 80144ca:	4603      	mov	r3, r0
 80144cc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80144ce:	6978      	ldr	r0, [r7, #20]
 80144d0:	f7f7 fefe 	bl	800c2d0 <pbuf_free>
 80144d4:	e001      	b.n	80144da <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80144d6:	23ff      	movs	r3, #255	; 0xff
 80144d8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80144da:	69bb      	ldr	r3, [r7, #24]
 80144dc:	799b      	ldrb	r3, [r3, #6]
 80144de:	2bff      	cmp	r3, #255	; 0xff
 80144e0:	d005      	beq.n	80144ee <dhcp_rebind+0xde>
    dhcp->tries++;
 80144e2:	69bb      	ldr	r3, [r7, #24]
 80144e4:	799b      	ldrb	r3, [r3, #6]
 80144e6:	3301      	adds	r3, #1
 80144e8:	b2da      	uxtb	r2, r3
 80144ea:	69bb      	ldr	r3, [r7, #24]
 80144ec:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80144ee:	69bb      	ldr	r3, [r7, #24]
 80144f0:	799b      	ldrb	r3, [r3, #6]
 80144f2:	2b09      	cmp	r3, #9
 80144f4:	d80a      	bhi.n	801450c <dhcp_rebind+0xfc>
 80144f6:	69bb      	ldr	r3, [r7, #24]
 80144f8:	799b      	ldrb	r3, [r3, #6]
 80144fa:	b29b      	uxth	r3, r3
 80144fc:	461a      	mov	r2, r3
 80144fe:	0152      	lsls	r2, r2, #5
 8014500:	1ad2      	subs	r2, r2, r3
 8014502:	0092      	lsls	r2, r2, #2
 8014504:	4413      	add	r3, r2
 8014506:	00db      	lsls	r3, r3, #3
 8014508:	b29b      	uxth	r3, r3
 801450a:	e001      	b.n	8014510 <dhcp_rebind+0x100>
 801450c:	f242 7310 	movw	r3, #10000	; 0x2710
 8014510:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014512:	89fb      	ldrh	r3, [r7, #14]
 8014514:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014518:	4a0a      	ldr	r2, [pc, #40]	; (8014544 <dhcp_rebind+0x134>)
 801451a:	fb82 1203 	smull	r1, r2, r2, r3
 801451e:	1152      	asrs	r2, r2, #5
 8014520:	17db      	asrs	r3, r3, #31
 8014522:	1ad3      	subs	r3, r2, r3
 8014524:	b29a      	uxth	r2, r3
 8014526:	69bb      	ldr	r3, [r7, #24]
 8014528:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801452a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801452e:	4618      	mov	r0, r3
 8014530:	3720      	adds	r7, #32
 8014532:	46bd      	mov	sp, r7
 8014534:	bd80      	pop	{r7, pc}
 8014536:	bf00      	nop
 8014538:	2000001c 	.word	0x2000001c
 801453c:	20008ad0 	.word	0x20008ad0
 8014540:	08026f98 	.word	0x08026f98
 8014544:	10624dd3 	.word	0x10624dd3

08014548 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8014548:	b5b0      	push	{r4, r5, r7, lr}
 801454a:	b08a      	sub	sp, #40	; 0x28
 801454c:	af02      	add	r7, sp, #8
 801454e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014554:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8014556:	2103      	movs	r1, #3
 8014558:	69b8      	ldr	r0, [r7, #24]
 801455a:	f000 f945 	bl	80147e8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801455e:	f107 030c 	add.w	r3, r7, #12
 8014562:	2203      	movs	r2, #3
 8014564:	69b9      	ldr	r1, [r7, #24]
 8014566:	6878      	ldr	r0, [r7, #4]
 8014568:	f000 fdc8 	bl	80150fc <dhcp_create_msg>
 801456c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801456e:	697b      	ldr	r3, [r7, #20]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d066      	beq.n	8014642 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014574:	697b      	ldr	r3, [r7, #20]
 8014576:	685b      	ldr	r3, [r3, #4]
 8014578:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801457a:	89b8      	ldrh	r0, [r7, #12]
 801457c:	693b      	ldr	r3, [r7, #16]
 801457e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014582:	2302      	movs	r3, #2
 8014584:	2239      	movs	r2, #57	; 0x39
 8014586:	f000 f949 	bl	801481c <dhcp_option>
 801458a:	4603      	mov	r3, r0
 801458c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801458e:	89b8      	ldrh	r0, [r7, #12]
 8014590:	693b      	ldr	r3, [r7, #16]
 8014592:	33f0      	adds	r3, #240	; 0xf0
 8014594:	f44f 7210 	mov.w	r2, #576	; 0x240
 8014598:	4619      	mov	r1, r3
 801459a:	f000 f999 	bl	80148d0 <dhcp_option_short>
 801459e:	4603      	mov	r3, r0
 80145a0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80145a2:	89b8      	ldrh	r0, [r7, #12]
 80145a4:	693b      	ldr	r3, [r7, #16]
 80145a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80145aa:	2304      	movs	r3, #4
 80145ac:	2232      	movs	r2, #50	; 0x32
 80145ae:	f000 f935 	bl	801481c <dhcp_option>
 80145b2:	4603      	mov	r3, r0
 80145b4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80145b6:	89bc      	ldrh	r4, [r7, #12]
 80145b8:	693b      	ldr	r3, [r7, #16]
 80145ba:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80145be:	69bb      	ldr	r3, [r7, #24]
 80145c0:	69db      	ldr	r3, [r3, #28]
 80145c2:	4618      	mov	r0, r3
 80145c4:	f7f6 faaf 	bl	800ab26 <lwip_htonl>
 80145c8:	4603      	mov	r3, r0
 80145ca:	461a      	mov	r2, r3
 80145cc:	4629      	mov	r1, r5
 80145ce:	4620      	mov	r0, r4
 80145d0:	f000 f9b0 	bl	8014934 <dhcp_option_long>
 80145d4:	4603      	mov	r3, r0
 80145d6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80145d8:	89b8      	ldrh	r0, [r7, #12]
 80145da:	693b      	ldr	r3, [r7, #16]
 80145dc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80145e0:	2303      	movs	r3, #3
 80145e2:	2237      	movs	r2, #55	; 0x37
 80145e4:	f000 f91a 	bl	801481c <dhcp_option>
 80145e8:	4603      	mov	r3, r0
 80145ea:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80145ec:	2300      	movs	r3, #0
 80145ee:	77bb      	strb	r3, [r7, #30]
 80145f0:	e00e      	b.n	8014610 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80145f2:	89b8      	ldrh	r0, [r7, #12]
 80145f4:	693b      	ldr	r3, [r7, #16]
 80145f6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80145fa:	7fbb      	ldrb	r3, [r7, #30]
 80145fc:	4a29      	ldr	r2, [pc, #164]	; (80146a4 <dhcp_reboot+0x15c>)
 80145fe:	5cd3      	ldrb	r3, [r2, r3]
 8014600:	461a      	mov	r2, r3
 8014602:	f000 f93f 	bl	8014884 <dhcp_option_byte>
 8014606:	4603      	mov	r3, r0
 8014608:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801460a:	7fbb      	ldrb	r3, [r7, #30]
 801460c:	3301      	adds	r3, #1
 801460e:	77bb      	strb	r3, [r7, #30]
 8014610:	7fbb      	ldrb	r3, [r7, #30]
 8014612:	2b02      	cmp	r3, #2
 8014614:	d9ed      	bls.n	80145f2 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014616:	89b8      	ldrh	r0, [r7, #12]
 8014618:	693b      	ldr	r3, [r7, #16]
 801461a:	33f0      	adds	r3, #240	; 0xf0
 801461c:	697a      	ldr	r2, [r7, #20]
 801461e:	4619      	mov	r1, r3
 8014620:	f000 fe42 	bl	80152a8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014624:	4b20      	ldr	r3, [pc, #128]	; (80146a8 <dhcp_reboot+0x160>)
 8014626:	6818      	ldr	r0, [r3, #0]
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	9300      	str	r3, [sp, #0]
 801462c:	2343      	movs	r3, #67	; 0x43
 801462e:	4a1f      	ldr	r2, [pc, #124]	; (80146ac <dhcp_reboot+0x164>)
 8014630:	6979      	ldr	r1, [r7, #20]
 8014632:	f7fe fce5 	bl	8013000 <udp_sendto_if>
 8014636:	4603      	mov	r3, r0
 8014638:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801463a:	6978      	ldr	r0, [r7, #20]
 801463c:	f7f7 fe48 	bl	800c2d0 <pbuf_free>
 8014640:	e001      	b.n	8014646 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014642:	23ff      	movs	r3, #255	; 0xff
 8014644:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014646:	69bb      	ldr	r3, [r7, #24]
 8014648:	799b      	ldrb	r3, [r3, #6]
 801464a:	2bff      	cmp	r3, #255	; 0xff
 801464c:	d005      	beq.n	801465a <dhcp_reboot+0x112>
    dhcp->tries++;
 801464e:	69bb      	ldr	r3, [r7, #24]
 8014650:	799b      	ldrb	r3, [r3, #6]
 8014652:	3301      	adds	r3, #1
 8014654:	b2da      	uxtb	r2, r3
 8014656:	69bb      	ldr	r3, [r7, #24]
 8014658:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801465a:	69bb      	ldr	r3, [r7, #24]
 801465c:	799b      	ldrb	r3, [r3, #6]
 801465e:	2b09      	cmp	r3, #9
 8014660:	d80a      	bhi.n	8014678 <dhcp_reboot+0x130>
 8014662:	69bb      	ldr	r3, [r7, #24]
 8014664:	799b      	ldrb	r3, [r3, #6]
 8014666:	b29b      	uxth	r3, r3
 8014668:	461a      	mov	r2, r3
 801466a:	0152      	lsls	r2, r2, #5
 801466c:	1ad2      	subs	r2, r2, r3
 801466e:	0092      	lsls	r2, r2, #2
 8014670:	4413      	add	r3, r2
 8014672:	00db      	lsls	r3, r3, #3
 8014674:	b29b      	uxth	r3, r3
 8014676:	e001      	b.n	801467c <dhcp_reboot+0x134>
 8014678:	f242 7310 	movw	r3, #10000	; 0x2710
 801467c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801467e:	89fb      	ldrh	r3, [r7, #14]
 8014680:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014684:	4a0a      	ldr	r2, [pc, #40]	; (80146b0 <dhcp_reboot+0x168>)
 8014686:	fb82 1203 	smull	r1, r2, r2, r3
 801468a:	1152      	asrs	r2, r2, #5
 801468c:	17db      	asrs	r3, r3, #31
 801468e:	1ad3      	subs	r3, r2, r3
 8014690:	b29a      	uxth	r2, r3
 8014692:	69bb      	ldr	r3, [r7, #24]
 8014694:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014696:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801469a:	4618      	mov	r0, r3
 801469c:	3720      	adds	r7, #32
 801469e:	46bd      	mov	sp, r7
 80146a0:	bdb0      	pop	{r4, r5, r7, pc}
 80146a2:	bf00      	nop
 80146a4:	2000001c 	.word	0x2000001c
 80146a8:	20008ad0 	.word	0x20008ad0
 80146ac:	08026f98 	.word	0x08026f98
 80146b0:	10624dd3 	.word	0x10624dd3

080146b4 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80146b4:	b5b0      	push	{r4, r5, r7, lr}
 80146b6:	b08a      	sub	sp, #40	; 0x28
 80146b8:	af02      	add	r7, sp, #8
 80146ba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146c0:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80146c2:	69fb      	ldr	r3, [r7, #28]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	f000 8084 	beq.w	80147d2 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80146ca:	69fb      	ldr	r3, [r7, #28]
 80146cc:	795b      	ldrb	r3, [r3, #5]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	f000 8081 	beq.w	80147d6 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80146d4:	69fb      	ldr	r3, [r7, #28]
 80146d6:	699b      	ldr	r3, [r3, #24]
 80146d8:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80146da:	69fb      	ldr	r3, [r7, #28]
 80146dc:	2200      	movs	r2, #0
 80146de:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80146e0:	69fb      	ldr	r3, [r7, #28]
 80146e2:	2200      	movs	r2, #0
 80146e4:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80146e6:	69fb      	ldr	r3, [r7, #28]
 80146e8:	2200      	movs	r2, #0
 80146ea:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80146ec:	69fb      	ldr	r3, [r7, #28]
 80146ee:	2200      	movs	r2, #0
 80146f0:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80146f2:	69fb      	ldr	r3, [r7, #28]
 80146f4:	2200      	movs	r2, #0
 80146f6:	631a      	str	r2, [r3, #48]	; 0x30
 80146f8:	69fb      	ldr	r3, [r7, #28]
 80146fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80146fc:	69fb      	ldr	r3, [r7, #28]
 80146fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8014700:	69fb      	ldr	r3, [r7, #28]
 8014702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014704:	69fb      	ldr	r3, [r7, #28]
 8014706:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8014708:	69fb      	ldr	r3, [r7, #28]
 801470a:	2200      	movs	r2, #0
 801470c:	829a      	strh	r2, [r3, #20]
 801470e:	69fb      	ldr	r3, [r7, #28]
 8014710:	8a9a      	ldrh	r2, [r3, #20]
 8014712:	69fb      	ldr	r3, [r7, #28]
 8014714:	825a      	strh	r2, [r3, #18]
 8014716:	69fb      	ldr	r3, [r7, #28]
 8014718:	8a5a      	ldrh	r2, [r3, #18]
 801471a:	69fb      	ldr	r3, [r7, #28]
 801471c:	821a      	strh	r2, [r3, #16]
 801471e:	69fb      	ldr	r3, [r7, #28]
 8014720:	8a1a      	ldrh	r2, [r3, #16]
 8014722:	69fb      	ldr	r3, [r7, #28]
 8014724:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8014726:	6878      	ldr	r0, [r7, #4]
 8014728:	f000 fdec 	bl	8015304 <dhcp_supplied_address>
 801472c:	4603      	mov	r3, r0
 801472e:	2b00      	cmp	r3, #0
 8014730:	d03b      	beq.n	80147aa <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8014732:	f107 030e 	add.w	r3, r7, #14
 8014736:	2207      	movs	r2, #7
 8014738:	69f9      	ldr	r1, [r7, #28]
 801473a:	6878      	ldr	r0, [r7, #4]
 801473c:	f000 fcde 	bl	80150fc <dhcp_create_msg>
 8014740:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8014742:	69bb      	ldr	r3, [r7, #24]
 8014744:	2b00      	cmp	r3, #0
 8014746:	d030      	beq.n	80147aa <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014748:	69bb      	ldr	r3, [r7, #24]
 801474a:	685b      	ldr	r3, [r3, #4]
 801474c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801474e:	89f8      	ldrh	r0, [r7, #14]
 8014750:	697b      	ldr	r3, [r7, #20]
 8014752:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014756:	2304      	movs	r3, #4
 8014758:	2236      	movs	r2, #54	; 0x36
 801475a:	f000 f85f 	bl	801481c <dhcp_option>
 801475e:	4603      	mov	r3, r0
 8014760:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8014762:	89fc      	ldrh	r4, [r7, #14]
 8014764:	697b      	ldr	r3, [r7, #20]
 8014766:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801476a:	693b      	ldr	r3, [r7, #16]
 801476c:	4618      	mov	r0, r3
 801476e:	f7f6 f9da 	bl	800ab26 <lwip_htonl>
 8014772:	4603      	mov	r3, r0
 8014774:	461a      	mov	r2, r3
 8014776:	4629      	mov	r1, r5
 8014778:	4620      	mov	r0, r4
 801477a:	f000 f8db 	bl	8014934 <dhcp_option_long>
 801477e:	4603      	mov	r3, r0
 8014780:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014782:	89f8      	ldrh	r0, [r7, #14]
 8014784:	697b      	ldr	r3, [r7, #20]
 8014786:	33f0      	adds	r3, #240	; 0xf0
 8014788:	69ba      	ldr	r2, [r7, #24]
 801478a:	4619      	mov	r1, r3
 801478c:	f000 fd8c 	bl	80152a8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014790:	4b13      	ldr	r3, [pc, #76]	; (80147e0 <dhcp_release_and_stop+0x12c>)
 8014792:	6818      	ldr	r0, [r3, #0]
 8014794:	f107 0210 	add.w	r2, r7, #16
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	9300      	str	r3, [sp, #0]
 801479c:	2343      	movs	r3, #67	; 0x43
 801479e:	69b9      	ldr	r1, [r7, #24]
 80147a0:	f7fe fc2e 	bl	8013000 <udp_sendto_if>
      pbuf_free(p_out);
 80147a4:	69b8      	ldr	r0, [r7, #24]
 80147a6:	f7f7 fd93 	bl	800c2d0 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80147aa:	4b0e      	ldr	r3, [pc, #56]	; (80147e4 <dhcp_release_and_stop+0x130>)
 80147ac:	4a0d      	ldr	r2, [pc, #52]	; (80147e4 <dhcp_release_and_stop+0x130>)
 80147ae:	490d      	ldr	r1, [pc, #52]	; (80147e4 <dhcp_release_and_stop+0x130>)
 80147b0:	6878      	ldr	r0, [r7, #4]
 80147b2:	f7f7 f883 	bl	800b8bc <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80147b6:	2100      	movs	r1, #0
 80147b8:	69f8      	ldr	r0, [r7, #28]
 80147ba:	f000 f815 	bl	80147e8 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80147be:	69fb      	ldr	r3, [r7, #28]
 80147c0:	791b      	ldrb	r3, [r3, #4]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d008      	beq.n	80147d8 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80147c6:	f7fe ff73 	bl	80136b0 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80147ca:	69fb      	ldr	r3, [r7, #28]
 80147cc:	2200      	movs	r2, #0
 80147ce:	711a      	strb	r2, [r3, #4]
 80147d0:	e002      	b.n	80147d8 <dhcp_release_and_stop+0x124>
    return;
 80147d2:	bf00      	nop
 80147d4:	e000      	b.n	80147d8 <dhcp_release_and_stop+0x124>
    return;
 80147d6:	bf00      	nop
  }
}
 80147d8:	3720      	adds	r7, #32
 80147da:	46bd      	mov	sp, r7
 80147dc:	bdb0      	pop	{r4, r5, r7, pc}
 80147de:	bf00      	nop
 80147e0:	20008ad0 	.word	0x20008ad0
 80147e4:	08026f94 	.word	0x08026f94

080147e8 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80147e8:	b480      	push	{r7}
 80147ea:	b083      	sub	sp, #12
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	6078      	str	r0, [r7, #4]
 80147f0:	460b      	mov	r3, r1
 80147f2:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	795b      	ldrb	r3, [r3, #5]
 80147f8:	78fa      	ldrb	r2, [r7, #3]
 80147fa:	429a      	cmp	r2, r3
 80147fc:	d008      	beq.n	8014810 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	78fa      	ldrb	r2, [r7, #3]
 8014802:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	2200      	movs	r2, #0
 8014808:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	2200      	movs	r2, #0
 801480e:	811a      	strh	r2, [r3, #8]
  }
}
 8014810:	bf00      	nop
 8014812:	370c      	adds	r7, #12
 8014814:	46bd      	mov	sp, r7
 8014816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801481a:	4770      	bx	lr

0801481c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801481c:	b580      	push	{r7, lr}
 801481e:	b082      	sub	sp, #8
 8014820:	af00      	add	r7, sp, #0
 8014822:	6039      	str	r1, [r7, #0]
 8014824:	4611      	mov	r1, r2
 8014826:	461a      	mov	r2, r3
 8014828:	4603      	mov	r3, r0
 801482a:	80fb      	strh	r3, [r7, #6]
 801482c:	460b      	mov	r3, r1
 801482e:	717b      	strb	r3, [r7, #5]
 8014830:	4613      	mov	r3, r2
 8014832:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8014834:	88fa      	ldrh	r2, [r7, #6]
 8014836:	793b      	ldrb	r3, [r7, #4]
 8014838:	4413      	add	r3, r2
 801483a:	3302      	adds	r3, #2
 801483c:	2b44      	cmp	r3, #68	; 0x44
 801483e:	d906      	bls.n	801484e <dhcp_option+0x32>
 8014840:	4b0d      	ldr	r3, [pc, #52]	; (8014878 <dhcp_option+0x5c>)
 8014842:	f240 529a 	movw	r2, #1434	; 0x59a
 8014846:	490d      	ldr	r1, [pc, #52]	; (801487c <dhcp_option+0x60>)
 8014848:	480d      	ldr	r0, [pc, #52]	; (8014880 <dhcp_option+0x64>)
 801484a:	f003 fabf 	bl	8017dcc <iprintf>
  options[options_out_len++] = option_type;
 801484e:	88fb      	ldrh	r3, [r7, #6]
 8014850:	1c5a      	adds	r2, r3, #1
 8014852:	80fa      	strh	r2, [r7, #6]
 8014854:	461a      	mov	r2, r3
 8014856:	683b      	ldr	r3, [r7, #0]
 8014858:	4413      	add	r3, r2
 801485a:	797a      	ldrb	r2, [r7, #5]
 801485c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801485e:	88fb      	ldrh	r3, [r7, #6]
 8014860:	1c5a      	adds	r2, r3, #1
 8014862:	80fa      	strh	r2, [r7, #6]
 8014864:	461a      	mov	r2, r3
 8014866:	683b      	ldr	r3, [r7, #0]
 8014868:	4413      	add	r3, r2
 801486a:	793a      	ldrb	r2, [r7, #4]
 801486c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801486e:	88fb      	ldrh	r3, [r7, #6]
}
 8014870:	4618      	mov	r0, r3
 8014872:	3708      	adds	r7, #8
 8014874:	46bd      	mov	sp, r7
 8014876:	bd80      	pop	{r7, pc}
 8014878:	0801c2bc 	.word	0x0801c2bc
 801487c:	0801c450 	.word	0x0801c450
 8014880:	0801c31c 	.word	0x0801c31c

08014884 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8014884:	b580      	push	{r7, lr}
 8014886:	b082      	sub	sp, #8
 8014888:	af00      	add	r7, sp, #0
 801488a:	4603      	mov	r3, r0
 801488c:	6039      	str	r1, [r7, #0]
 801488e:	80fb      	strh	r3, [r7, #6]
 8014890:	4613      	mov	r3, r2
 8014892:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8014894:	88fb      	ldrh	r3, [r7, #6]
 8014896:	2b43      	cmp	r3, #67	; 0x43
 8014898:	d906      	bls.n	80148a8 <dhcp_option_byte+0x24>
 801489a:	4b0a      	ldr	r3, [pc, #40]	; (80148c4 <dhcp_option_byte+0x40>)
 801489c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80148a0:	4909      	ldr	r1, [pc, #36]	; (80148c8 <dhcp_option_byte+0x44>)
 80148a2:	480a      	ldr	r0, [pc, #40]	; (80148cc <dhcp_option_byte+0x48>)
 80148a4:	f003 fa92 	bl	8017dcc <iprintf>
  options[options_out_len++] = value;
 80148a8:	88fb      	ldrh	r3, [r7, #6]
 80148aa:	1c5a      	adds	r2, r3, #1
 80148ac:	80fa      	strh	r2, [r7, #6]
 80148ae:	461a      	mov	r2, r3
 80148b0:	683b      	ldr	r3, [r7, #0]
 80148b2:	4413      	add	r3, r2
 80148b4:	797a      	ldrb	r2, [r7, #5]
 80148b6:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80148b8:	88fb      	ldrh	r3, [r7, #6]
}
 80148ba:	4618      	mov	r0, r3
 80148bc:	3708      	adds	r7, #8
 80148be:	46bd      	mov	sp, r7
 80148c0:	bd80      	pop	{r7, pc}
 80148c2:	bf00      	nop
 80148c4:	0801c2bc 	.word	0x0801c2bc
 80148c8:	0801c494 	.word	0x0801c494
 80148cc:	0801c31c 	.word	0x0801c31c

080148d0 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b082      	sub	sp, #8
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	4603      	mov	r3, r0
 80148d8:	6039      	str	r1, [r7, #0]
 80148da:	80fb      	strh	r3, [r7, #6]
 80148dc:	4613      	mov	r3, r2
 80148de:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80148e0:	88fb      	ldrh	r3, [r7, #6]
 80148e2:	3302      	adds	r3, #2
 80148e4:	2b44      	cmp	r3, #68	; 0x44
 80148e6:	d906      	bls.n	80148f6 <dhcp_option_short+0x26>
 80148e8:	4b0f      	ldr	r3, [pc, #60]	; (8014928 <dhcp_option_short+0x58>)
 80148ea:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80148ee:	490f      	ldr	r1, [pc, #60]	; (801492c <dhcp_option_short+0x5c>)
 80148f0:	480f      	ldr	r0, [pc, #60]	; (8014930 <dhcp_option_short+0x60>)
 80148f2:	f003 fa6b 	bl	8017dcc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80148f6:	88bb      	ldrh	r3, [r7, #4]
 80148f8:	0a1b      	lsrs	r3, r3, #8
 80148fa:	b29a      	uxth	r2, r3
 80148fc:	88fb      	ldrh	r3, [r7, #6]
 80148fe:	1c59      	adds	r1, r3, #1
 8014900:	80f9      	strh	r1, [r7, #6]
 8014902:	4619      	mov	r1, r3
 8014904:	683b      	ldr	r3, [r7, #0]
 8014906:	440b      	add	r3, r1
 8014908:	b2d2      	uxtb	r2, r2
 801490a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801490c:	88fb      	ldrh	r3, [r7, #6]
 801490e:	1c5a      	adds	r2, r3, #1
 8014910:	80fa      	strh	r2, [r7, #6]
 8014912:	461a      	mov	r2, r3
 8014914:	683b      	ldr	r3, [r7, #0]
 8014916:	4413      	add	r3, r2
 8014918:	88ba      	ldrh	r2, [r7, #4]
 801491a:	b2d2      	uxtb	r2, r2
 801491c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801491e:	88fb      	ldrh	r3, [r7, #6]
}
 8014920:	4618      	mov	r0, r3
 8014922:	3708      	adds	r7, #8
 8014924:	46bd      	mov	sp, r7
 8014926:	bd80      	pop	{r7, pc}
 8014928:	0801c2bc 	.word	0x0801c2bc
 801492c:	0801c4cc 	.word	0x0801c4cc
 8014930:	0801c31c 	.word	0x0801c31c

08014934 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8014934:	b580      	push	{r7, lr}
 8014936:	b084      	sub	sp, #16
 8014938:	af00      	add	r7, sp, #0
 801493a:	4603      	mov	r3, r0
 801493c:	60b9      	str	r1, [r7, #8]
 801493e:	607a      	str	r2, [r7, #4]
 8014940:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8014942:	89fb      	ldrh	r3, [r7, #14]
 8014944:	3304      	adds	r3, #4
 8014946:	2b44      	cmp	r3, #68	; 0x44
 8014948:	d906      	bls.n	8014958 <dhcp_option_long+0x24>
 801494a:	4b19      	ldr	r3, [pc, #100]	; (80149b0 <dhcp_option_long+0x7c>)
 801494c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8014950:	4918      	ldr	r1, [pc, #96]	; (80149b4 <dhcp_option_long+0x80>)
 8014952:	4819      	ldr	r0, [pc, #100]	; (80149b8 <dhcp_option_long+0x84>)
 8014954:	f003 fa3a 	bl	8017dcc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	0e1a      	lsrs	r2, r3, #24
 801495c:	89fb      	ldrh	r3, [r7, #14]
 801495e:	1c59      	adds	r1, r3, #1
 8014960:	81f9      	strh	r1, [r7, #14]
 8014962:	4619      	mov	r1, r3
 8014964:	68bb      	ldr	r3, [r7, #8]
 8014966:	440b      	add	r3, r1
 8014968:	b2d2      	uxtb	r2, r2
 801496a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	0c1a      	lsrs	r2, r3, #16
 8014970:	89fb      	ldrh	r3, [r7, #14]
 8014972:	1c59      	adds	r1, r3, #1
 8014974:	81f9      	strh	r1, [r7, #14]
 8014976:	4619      	mov	r1, r3
 8014978:	68bb      	ldr	r3, [r7, #8]
 801497a:	440b      	add	r3, r1
 801497c:	b2d2      	uxtb	r2, r2
 801497e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	0a1a      	lsrs	r2, r3, #8
 8014984:	89fb      	ldrh	r3, [r7, #14]
 8014986:	1c59      	adds	r1, r3, #1
 8014988:	81f9      	strh	r1, [r7, #14]
 801498a:	4619      	mov	r1, r3
 801498c:	68bb      	ldr	r3, [r7, #8]
 801498e:	440b      	add	r3, r1
 8014990:	b2d2      	uxtb	r2, r2
 8014992:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8014994:	89fb      	ldrh	r3, [r7, #14]
 8014996:	1c5a      	adds	r2, r3, #1
 8014998:	81fa      	strh	r2, [r7, #14]
 801499a:	461a      	mov	r2, r3
 801499c:	68bb      	ldr	r3, [r7, #8]
 801499e:	4413      	add	r3, r2
 80149a0:	687a      	ldr	r2, [r7, #4]
 80149a2:	b2d2      	uxtb	r2, r2
 80149a4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80149a6:	89fb      	ldrh	r3, [r7, #14]
}
 80149a8:	4618      	mov	r0, r3
 80149aa:	3710      	adds	r7, #16
 80149ac:	46bd      	mov	sp, r7
 80149ae:	bd80      	pop	{r7, pc}
 80149b0:	0801c2bc 	.word	0x0801c2bc
 80149b4:	0801c508 	.word	0x0801c508
 80149b8:	0801c31c 	.word	0x0801c31c

080149bc <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80149bc:	b580      	push	{r7, lr}
 80149be:	b090      	sub	sp, #64	; 0x40
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	6078      	str	r0, [r7, #4]
 80149c4:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80149c6:	2300      	movs	r3, #0
 80149c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 80149ca:	2300      	movs	r3, #0
 80149cc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80149ce:	2208      	movs	r2, #8
 80149d0:	2100      	movs	r1, #0
 80149d2:	48be      	ldr	r0, [pc, #760]	; (8014ccc <dhcp_parse_reply+0x310>)
 80149d4:	f003 f9f1 	bl	8017dba <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	895b      	ldrh	r3, [r3, #10]
 80149dc:	2b2b      	cmp	r3, #43	; 0x2b
 80149de:	d802      	bhi.n	80149e6 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80149e0:	f06f 0301 	mvn.w	r3, #1
 80149e4:	e2a8      	b.n	8014f38 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	685b      	ldr	r3, [r3, #4]
 80149ea:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80149ec:	23f0      	movs	r3, #240	; 0xf0
 80149ee:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	891b      	ldrh	r3, [r3, #8]
 80149f4:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80149fa:	e00c      	b.n	8014a16 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80149fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149fe:	895b      	ldrh	r3, [r3, #10]
 8014a00:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014a02:	1ad3      	subs	r3, r2, r3
 8014a04:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8014a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a08:	895b      	ldrh	r3, [r3, #10]
 8014a0a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8014a0c:	1ad3      	subs	r3, r2, r3
 8014a0e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8014a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d004      	beq.n	8014a26 <dhcp_parse_reply+0x6a>
 8014a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a1e:	895b      	ldrh	r3, [r3, #10]
 8014a20:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014a22:	429a      	cmp	r2, r3
 8014a24:	d2ea      	bcs.n	80149fc <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8014a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d102      	bne.n	8014a32 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8014a2c:	f06f 0301 	mvn.w	r3, #1
 8014a30:	e282      	b.n	8014f38 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8014a32:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014a34:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8014a36:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014a38:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8014a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a3c:	685b      	ldr	r3, [r3, #4]
 8014a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014a40:	e23a      	b.n	8014eb8 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8014a42:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014a44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014a46:	4413      	add	r3, r2
 8014a48:	781b      	ldrb	r3, [r3, #0]
 8014a4a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8014a4c:	2300      	movs	r3, #0
 8014a4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8014a52:	f04f 33ff 	mov.w	r3, #4294967295
 8014a56:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8014a58:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014a5a:	3302      	adds	r3, #2
 8014a5c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8014a5e:	8bfa      	ldrh	r2, [r7, #30]
 8014a60:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014a62:	429a      	cmp	r2, r3
 8014a64:	d202      	bcs.n	8014a6c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8014a66:	f06f 0301 	mvn.w	r3, #1
 8014a6a:	e265      	b.n	8014f38 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8014a6c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014a6e:	3301      	adds	r3, #1
 8014a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a72:	8952      	ldrh	r2, [r2, #10]
 8014a74:	4293      	cmp	r3, r2
 8014a76:	da07      	bge.n	8014a88 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8014a78:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014a7a:	3301      	adds	r3, #1
 8014a7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014a7e:	4413      	add	r3, r2
 8014a80:	781b      	ldrb	r3, [r3, #0]
 8014a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014a86:	e00b      	b.n	8014aa0 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8014a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d004      	beq.n	8014a9a <dhcp_parse_reply+0xde>
 8014a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	685b      	ldr	r3, [r3, #4]
 8014a96:	781b      	ldrb	r3, [r3, #0]
 8014a98:	e000      	b.n	8014a9c <dhcp_parse_reply+0xe0>
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8014aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014aa4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8014aa8:	7dfb      	ldrb	r3, [r7, #23]
 8014aaa:	2b3b      	cmp	r3, #59	; 0x3b
 8014aac:	f200 812d 	bhi.w	8014d0a <dhcp_parse_reply+0x34e>
 8014ab0:	a201      	add	r2, pc, #4	; (adr r2, 8014ab8 <dhcp_parse_reply+0xfc>)
 8014ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ab6:	bf00      	nop
 8014ab8:	08014ba9 	.word	0x08014ba9
 8014abc:	08014bb9 	.word	0x08014bb9
 8014ac0:	08014d0b 	.word	0x08014d0b
 8014ac4:	08014bdb 	.word	0x08014bdb
 8014ac8:	08014d0b 	.word	0x08014d0b
 8014acc:	08014d0b 	.word	0x08014d0b
 8014ad0:	08014d0b 	.word	0x08014d0b
 8014ad4:	08014d0b 	.word	0x08014d0b
 8014ad8:	08014d0b 	.word	0x08014d0b
 8014adc:	08014d0b 	.word	0x08014d0b
 8014ae0:	08014d0b 	.word	0x08014d0b
 8014ae4:	08014d0b 	.word	0x08014d0b
 8014ae8:	08014d0b 	.word	0x08014d0b
 8014aec:	08014d0b 	.word	0x08014d0b
 8014af0:	08014d0b 	.word	0x08014d0b
 8014af4:	08014d0b 	.word	0x08014d0b
 8014af8:	08014d0b 	.word	0x08014d0b
 8014afc:	08014d0b 	.word	0x08014d0b
 8014b00:	08014d0b 	.word	0x08014d0b
 8014b04:	08014d0b 	.word	0x08014d0b
 8014b08:	08014d0b 	.word	0x08014d0b
 8014b0c:	08014d0b 	.word	0x08014d0b
 8014b10:	08014d0b 	.word	0x08014d0b
 8014b14:	08014d0b 	.word	0x08014d0b
 8014b18:	08014d0b 	.word	0x08014d0b
 8014b1c:	08014d0b 	.word	0x08014d0b
 8014b20:	08014d0b 	.word	0x08014d0b
 8014b24:	08014d0b 	.word	0x08014d0b
 8014b28:	08014d0b 	.word	0x08014d0b
 8014b2c:	08014d0b 	.word	0x08014d0b
 8014b30:	08014d0b 	.word	0x08014d0b
 8014b34:	08014d0b 	.word	0x08014d0b
 8014b38:	08014d0b 	.word	0x08014d0b
 8014b3c:	08014d0b 	.word	0x08014d0b
 8014b40:	08014d0b 	.word	0x08014d0b
 8014b44:	08014d0b 	.word	0x08014d0b
 8014b48:	08014d0b 	.word	0x08014d0b
 8014b4c:	08014d0b 	.word	0x08014d0b
 8014b50:	08014d0b 	.word	0x08014d0b
 8014b54:	08014d0b 	.word	0x08014d0b
 8014b58:	08014d0b 	.word	0x08014d0b
 8014b5c:	08014d0b 	.word	0x08014d0b
 8014b60:	08014d0b 	.word	0x08014d0b
 8014b64:	08014d0b 	.word	0x08014d0b
 8014b68:	08014d0b 	.word	0x08014d0b
 8014b6c:	08014d0b 	.word	0x08014d0b
 8014b70:	08014d0b 	.word	0x08014d0b
 8014b74:	08014d0b 	.word	0x08014d0b
 8014b78:	08014d0b 	.word	0x08014d0b
 8014b7c:	08014d0b 	.word	0x08014d0b
 8014b80:	08014d0b 	.word	0x08014d0b
 8014b84:	08014c07 	.word	0x08014c07
 8014b88:	08014c29 	.word	0x08014c29
 8014b8c:	08014c65 	.word	0x08014c65
 8014b90:	08014c87 	.word	0x08014c87
 8014b94:	08014d0b 	.word	0x08014d0b
 8014b98:	08014d0b 	.word	0x08014d0b
 8014b9c:	08014d0b 	.word	0x08014d0b
 8014ba0:	08014ca9 	.word	0x08014ca9
 8014ba4:	08014ce9 	.word	0x08014ce9
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8014ba8:	2300      	movs	r3, #0
 8014baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014bae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014bb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8014bb6:	e0ac      	b.n	8014d12 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014bbc:	2b04      	cmp	r3, #4
 8014bbe:	d009      	beq.n	8014bd4 <dhcp_parse_reply+0x218>
 8014bc0:	4b43      	ldr	r3, [pc, #268]	; (8014cd0 <dhcp_parse_reply+0x314>)
 8014bc2:	f240 622e 	movw	r2, #1582	; 0x62e
 8014bc6:	4943      	ldr	r1, [pc, #268]	; (8014cd4 <dhcp_parse_reply+0x318>)
 8014bc8:	4843      	ldr	r0, [pc, #268]	; (8014cd8 <dhcp_parse_reply+0x31c>)
 8014bca:	f003 f8ff 	bl	8017dcc <iprintf>
 8014bce:	f06f 0305 	mvn.w	r3, #5
 8014bd2:	e1b1      	b.n	8014f38 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8014bd4:	2306      	movs	r3, #6
 8014bd6:	623b      	str	r3, [r7, #32]
        break;
 8014bd8:	e09b      	b.n	8014d12 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8014bda:	2304      	movs	r3, #4
 8014bdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8014be0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014be4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014be8:	429a      	cmp	r2, r3
 8014bea:	d209      	bcs.n	8014c00 <dhcp_parse_reply+0x244>
 8014bec:	4b38      	ldr	r3, [pc, #224]	; (8014cd0 <dhcp_parse_reply+0x314>)
 8014bee:	f240 6233 	movw	r2, #1587	; 0x633
 8014bf2:	493a      	ldr	r1, [pc, #232]	; (8014cdc <dhcp_parse_reply+0x320>)
 8014bf4:	4838      	ldr	r0, [pc, #224]	; (8014cd8 <dhcp_parse_reply+0x31c>)
 8014bf6:	f003 f8e9 	bl	8017dcc <iprintf>
 8014bfa:	f06f 0305 	mvn.w	r3, #5
 8014bfe:	e19b      	b.n	8014f38 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8014c00:	2307      	movs	r3, #7
 8014c02:	623b      	str	r3, [r7, #32]
        break;
 8014c04:	e085      	b.n	8014d12 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014c06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c0a:	2b04      	cmp	r3, #4
 8014c0c:	d009      	beq.n	8014c22 <dhcp_parse_reply+0x266>
 8014c0e:	4b30      	ldr	r3, [pc, #192]	; (8014cd0 <dhcp_parse_reply+0x314>)
 8014c10:	f240 6241 	movw	r2, #1601	; 0x641
 8014c14:	492f      	ldr	r1, [pc, #188]	; (8014cd4 <dhcp_parse_reply+0x318>)
 8014c16:	4830      	ldr	r0, [pc, #192]	; (8014cd8 <dhcp_parse_reply+0x31c>)
 8014c18:	f003 f8d8 	bl	8017dcc <iprintf>
 8014c1c:	f06f 0305 	mvn.w	r3, #5
 8014c20:	e18a      	b.n	8014f38 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8014c22:	2303      	movs	r3, #3
 8014c24:	623b      	str	r3, [r7, #32]
        break;
 8014c26:	e074      	b.n	8014d12 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014c28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c2c:	2b01      	cmp	r3, #1
 8014c2e:	d009      	beq.n	8014c44 <dhcp_parse_reply+0x288>
 8014c30:	4b27      	ldr	r3, [pc, #156]	; (8014cd0 <dhcp_parse_reply+0x314>)
 8014c32:	f240 624f 	movw	r2, #1615	; 0x64f
 8014c36:	492a      	ldr	r1, [pc, #168]	; (8014ce0 <dhcp_parse_reply+0x324>)
 8014c38:	4827      	ldr	r0, [pc, #156]	; (8014cd8 <dhcp_parse_reply+0x31c>)
 8014c3a:	f003 f8c7 	bl	8017dcc <iprintf>
 8014c3e:	f06f 0305 	mvn.w	r3, #5
 8014c42:	e179      	b.n	8014f38 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8014c44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014c46:	2bf0      	cmp	r3, #240	; 0xf0
 8014c48:	d009      	beq.n	8014c5e <dhcp_parse_reply+0x2a2>
 8014c4a:	4b21      	ldr	r3, [pc, #132]	; (8014cd0 <dhcp_parse_reply+0x314>)
 8014c4c:	f240 6251 	movw	r2, #1617	; 0x651
 8014c50:	4924      	ldr	r1, [pc, #144]	; (8014ce4 <dhcp_parse_reply+0x328>)
 8014c52:	4821      	ldr	r0, [pc, #132]	; (8014cd8 <dhcp_parse_reply+0x31c>)
 8014c54:	f003 f8ba 	bl	8017dcc <iprintf>
 8014c58:	f06f 0305 	mvn.w	r3, #5
 8014c5c:	e16c      	b.n	8014f38 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8014c5e:	2300      	movs	r3, #0
 8014c60:	623b      	str	r3, [r7, #32]
        break;
 8014c62:	e056      	b.n	8014d12 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c68:	2b01      	cmp	r3, #1
 8014c6a:	d009      	beq.n	8014c80 <dhcp_parse_reply+0x2c4>
 8014c6c:	4b18      	ldr	r3, [pc, #96]	; (8014cd0 <dhcp_parse_reply+0x314>)
 8014c6e:	f240 6255 	movw	r2, #1621	; 0x655
 8014c72:	491b      	ldr	r1, [pc, #108]	; (8014ce0 <dhcp_parse_reply+0x324>)
 8014c74:	4818      	ldr	r0, [pc, #96]	; (8014cd8 <dhcp_parse_reply+0x31c>)
 8014c76:	f003 f8a9 	bl	8017dcc <iprintf>
 8014c7a:	f06f 0305 	mvn.w	r3, #5
 8014c7e:	e15b      	b.n	8014f38 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8014c80:	2301      	movs	r3, #1
 8014c82:	623b      	str	r3, [r7, #32]
        break;
 8014c84:	e045      	b.n	8014d12 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014c86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c8a:	2b04      	cmp	r3, #4
 8014c8c:	d009      	beq.n	8014ca2 <dhcp_parse_reply+0x2e6>
 8014c8e:	4b10      	ldr	r3, [pc, #64]	; (8014cd0 <dhcp_parse_reply+0x314>)
 8014c90:	f240 6259 	movw	r2, #1625	; 0x659
 8014c94:	490f      	ldr	r1, [pc, #60]	; (8014cd4 <dhcp_parse_reply+0x318>)
 8014c96:	4810      	ldr	r0, [pc, #64]	; (8014cd8 <dhcp_parse_reply+0x31c>)
 8014c98:	f003 f898 	bl	8017dcc <iprintf>
 8014c9c:	f06f 0305 	mvn.w	r3, #5
 8014ca0:	e14a      	b.n	8014f38 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8014ca2:	2302      	movs	r3, #2
 8014ca4:	623b      	str	r3, [r7, #32]
        break;
 8014ca6:	e034      	b.n	8014d12 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014cac:	2b04      	cmp	r3, #4
 8014cae:	d009      	beq.n	8014cc4 <dhcp_parse_reply+0x308>
 8014cb0:	4b07      	ldr	r3, [pc, #28]	; (8014cd0 <dhcp_parse_reply+0x314>)
 8014cb2:	f240 625d 	movw	r2, #1629	; 0x65d
 8014cb6:	4907      	ldr	r1, [pc, #28]	; (8014cd4 <dhcp_parse_reply+0x318>)
 8014cb8:	4807      	ldr	r0, [pc, #28]	; (8014cd8 <dhcp_parse_reply+0x31c>)
 8014cba:	f003 f887 	bl	8017dcc <iprintf>
 8014cbe:	f06f 0305 	mvn.w	r3, #5
 8014cc2:	e139      	b.n	8014f38 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8014cc4:	2304      	movs	r3, #4
 8014cc6:	623b      	str	r3, [r7, #32]
        break;
 8014cc8:	e023      	b.n	8014d12 <dhcp_parse_reply+0x356>
 8014cca:	bf00      	nop
 8014ccc:	2000f530 	.word	0x2000f530
 8014cd0:	0801c2bc 	.word	0x0801c2bc
 8014cd4:	0801c544 	.word	0x0801c544
 8014cd8:	0801c31c 	.word	0x0801c31c
 8014cdc:	0801c550 	.word	0x0801c550
 8014ce0:	0801c564 	.word	0x0801c564
 8014ce4:	0801c570 	.word	0x0801c570
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014cec:	2b04      	cmp	r3, #4
 8014cee:	d009      	beq.n	8014d04 <dhcp_parse_reply+0x348>
 8014cf0:	4b93      	ldr	r3, [pc, #588]	; (8014f40 <dhcp_parse_reply+0x584>)
 8014cf2:	f240 6261 	movw	r2, #1633	; 0x661
 8014cf6:	4993      	ldr	r1, [pc, #588]	; (8014f44 <dhcp_parse_reply+0x588>)
 8014cf8:	4893      	ldr	r0, [pc, #588]	; (8014f48 <dhcp_parse_reply+0x58c>)
 8014cfa:	f003 f867 	bl	8017dcc <iprintf>
 8014cfe:	f06f 0305 	mvn.w	r3, #5
 8014d02:	e119      	b.n	8014f38 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8014d04:	2305      	movs	r3, #5
 8014d06:	623b      	str	r3, [r7, #32]
        break;
 8014d08:	e003      	b.n	8014d12 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8014d10:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8014d12:	7dfb      	ldrb	r3, [r7, #23]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d103      	bne.n	8014d20 <dhcp_parse_reply+0x364>
      offset++;
 8014d18:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014d1a:	3301      	adds	r3, #1
 8014d1c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8014d1e:	e0a1      	b.n	8014e64 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8014d20:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014d22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d26:	4413      	add	r3, r2
 8014d28:	3302      	adds	r3, #2
 8014d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014d2e:	db02      	blt.n	8014d36 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8014d30:	f06f 0301 	mvn.w	r3, #1
 8014d34:	e100      	b.n	8014f38 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8014d36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d3a:	b29a      	uxth	r2, r3
 8014d3c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014d3e:	4413      	add	r3, r2
 8014d40:	b29b      	uxth	r3, r3
 8014d42:	3302      	adds	r3, #2
 8014d44:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8014d46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	f000 808a 	beq.w	8014e64 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8014d50:	2300      	movs	r3, #0
 8014d52:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8014d54:	6a3b      	ldr	r3, [r7, #32]
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	db02      	blt.n	8014d60 <dhcp_parse_reply+0x3a4>
 8014d5a:	6a3b      	ldr	r3, [r7, #32]
 8014d5c:	2b07      	cmp	r3, #7
 8014d5e:	dd06      	ble.n	8014d6e <dhcp_parse_reply+0x3b2>
 8014d60:	4b77      	ldr	r3, [pc, #476]	; (8014f40 <dhcp_parse_reply+0x584>)
 8014d62:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8014d66:	4979      	ldr	r1, [pc, #484]	; (8014f4c <dhcp_parse_reply+0x590>)
 8014d68:	4877      	ldr	r0, [pc, #476]	; (8014f48 <dhcp_parse_reply+0x58c>)
 8014d6a:	f003 f82f 	bl	8017dcc <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8014d6e:	4a78      	ldr	r2, [pc, #480]	; (8014f50 <dhcp_parse_reply+0x594>)
 8014d70:	6a3b      	ldr	r3, [r7, #32]
 8014d72:	4413      	add	r3, r2
 8014d74:	781b      	ldrb	r3, [r3, #0]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d174      	bne.n	8014e64 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8014d7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014d7e:	2b04      	cmp	r3, #4
 8014d80:	bf28      	it	cs
 8014d82:	2304      	movcs	r3, #4
 8014d84:	b2db      	uxtb	r3, r3
 8014d86:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8014d88:	8bfb      	ldrh	r3, [r7, #30]
 8014d8a:	8aba      	ldrh	r2, [r7, #20]
 8014d8c:	f107 0108 	add.w	r1, r7, #8
 8014d90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014d92:	f7f7 fca3 	bl	800c6dc <pbuf_copy_partial>
 8014d96:	4603      	mov	r3, r0
 8014d98:	461a      	mov	r2, r3
 8014d9a:	8abb      	ldrh	r3, [r7, #20]
 8014d9c:	4293      	cmp	r3, r2
 8014d9e:	d002      	beq.n	8014da6 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8014da0:	f06f 0301 	mvn.w	r3, #1
 8014da4:	e0c8      	b.n	8014f38 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8014da6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014daa:	2b04      	cmp	r3, #4
 8014dac:	d933      	bls.n	8014e16 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8014dae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014db2:	f003 0303 	and.w	r3, r3, #3
 8014db6:	b2db      	uxtb	r3, r3
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d009      	beq.n	8014dd0 <dhcp_parse_reply+0x414>
 8014dbc:	4b60      	ldr	r3, [pc, #384]	; (8014f40 <dhcp_parse_reply+0x584>)
 8014dbe:	f240 6281 	movw	r2, #1665	; 0x681
 8014dc2:	4964      	ldr	r1, [pc, #400]	; (8014f54 <dhcp_parse_reply+0x598>)
 8014dc4:	4860      	ldr	r0, [pc, #384]	; (8014f48 <dhcp_parse_reply+0x58c>)
 8014dc6:	f003 f801 	bl	8017dcc <iprintf>
 8014dca:	f06f 0305 	mvn.w	r3, #5
 8014dce:	e0b3      	b.n	8014f38 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8014dd0:	4a5f      	ldr	r2, [pc, #380]	; (8014f50 <dhcp_parse_reply+0x594>)
 8014dd2:	6a3b      	ldr	r3, [r7, #32]
 8014dd4:	4413      	add	r3, r2
 8014dd6:	2201      	movs	r2, #1
 8014dd8:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8014dda:	68bb      	ldr	r3, [r7, #8]
 8014ddc:	4618      	mov	r0, r3
 8014dde:	f7f5 fea2 	bl	800ab26 <lwip_htonl>
 8014de2:	4601      	mov	r1, r0
 8014de4:	4a5c      	ldr	r2, [pc, #368]	; (8014f58 <dhcp_parse_reply+0x59c>)
 8014de6:	6a3b      	ldr	r3, [r7, #32]
 8014de8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8014dec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014df0:	3b04      	subs	r3, #4
 8014df2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8014df6:	8bfb      	ldrh	r3, [r7, #30]
 8014df8:	3304      	adds	r3, #4
 8014dfa:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8014dfc:	8a7a      	ldrh	r2, [r7, #18]
 8014dfe:	8bfb      	ldrh	r3, [r7, #30]
 8014e00:	429a      	cmp	r2, r3
 8014e02:	d202      	bcs.n	8014e0a <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8014e04:	f06f 0301 	mvn.w	r3, #1
 8014e08:	e096      	b.n	8014f38 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8014e0a:	8a7b      	ldrh	r3, [r7, #18]
 8014e0c:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8014e0e:	6a3b      	ldr	r3, [r7, #32]
 8014e10:	3301      	adds	r3, #1
 8014e12:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8014e14:	e79e      	b.n	8014d54 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8014e16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014e1a:	2b04      	cmp	r3, #4
 8014e1c:	d106      	bne.n	8014e2c <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8014e1e:	68bb      	ldr	r3, [r7, #8]
 8014e20:	4618      	mov	r0, r3
 8014e22:	f7f5 fe80 	bl	800ab26 <lwip_htonl>
 8014e26:	4603      	mov	r3, r0
 8014e28:	60bb      	str	r3, [r7, #8]
 8014e2a:	e011      	b.n	8014e50 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8014e2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014e30:	2b01      	cmp	r3, #1
 8014e32:	d009      	beq.n	8014e48 <dhcp_parse_reply+0x48c>
 8014e34:	4b42      	ldr	r3, [pc, #264]	; (8014f40 <dhcp_parse_reply+0x584>)
 8014e36:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8014e3a:	4948      	ldr	r1, [pc, #288]	; (8014f5c <dhcp_parse_reply+0x5a0>)
 8014e3c:	4842      	ldr	r0, [pc, #264]	; (8014f48 <dhcp_parse_reply+0x58c>)
 8014e3e:	f002 ffc5 	bl	8017dcc <iprintf>
 8014e42:	f06f 0305 	mvn.w	r3, #5
 8014e46:	e077      	b.n	8014f38 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8014e48:	f107 0308 	add.w	r3, r7, #8
 8014e4c:	781b      	ldrb	r3, [r3, #0]
 8014e4e:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8014e50:	4a3f      	ldr	r2, [pc, #252]	; (8014f50 <dhcp_parse_reply+0x594>)
 8014e52:	6a3b      	ldr	r3, [r7, #32]
 8014e54:	4413      	add	r3, r2
 8014e56:	2201      	movs	r2, #1
 8014e58:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8014e5a:	68ba      	ldr	r2, [r7, #8]
 8014e5c:	493e      	ldr	r1, [pc, #248]	; (8014f58 <dhcp_parse_reply+0x59c>)
 8014e5e:	6a3b      	ldr	r3, [r7, #32]
 8014e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8014e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e66:	895b      	ldrh	r3, [r3, #10]
 8014e68:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014e6a:	429a      	cmp	r2, r3
 8014e6c:	d324      	bcc.n	8014eb8 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8014e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e70:	895b      	ldrh	r3, [r3, #10]
 8014e72:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014e74:	1ad3      	subs	r3, r2, r3
 8014e76:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8014e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e7a:	895b      	ldrh	r3, [r3, #10]
 8014e7c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8014e7e:	1ad3      	subs	r3, r2, r3
 8014e80:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8014e82:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014e84:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014e86:	429a      	cmp	r2, r3
 8014e88:	d213      	bcs.n	8014eb2 <dhcp_parse_reply+0x4f6>
        q = q->next;
 8014e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8014e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d109      	bne.n	8014eaa <dhcp_parse_reply+0x4ee>
 8014e96:	4b2a      	ldr	r3, [pc, #168]	; (8014f40 <dhcp_parse_reply+0x584>)
 8014e98:	f240 629d 	movw	r2, #1693	; 0x69d
 8014e9c:	4930      	ldr	r1, [pc, #192]	; (8014f60 <dhcp_parse_reply+0x5a4>)
 8014e9e:	482a      	ldr	r0, [pc, #168]	; (8014f48 <dhcp_parse_reply+0x58c>)
 8014ea0:	f002 ff94 	bl	8017dcc <iprintf>
 8014ea4:	f06f 0305 	mvn.w	r3, #5
 8014ea8:	e046      	b.n	8014f38 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8014eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014eac:	685b      	ldr	r3, [r3, #4]
 8014eae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014eb0:	e002      	b.n	8014eb8 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8014eb2:	f06f 0301 	mvn.w	r3, #1
 8014eb6:	e03f      	b.n	8014f38 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d00a      	beq.n	8014ed4 <dhcp_parse_reply+0x518>
 8014ebe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014ec0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014ec2:	429a      	cmp	r2, r3
 8014ec4:	d206      	bcs.n	8014ed4 <dhcp_parse_reply+0x518>
 8014ec6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014ec8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014eca:	4413      	add	r3, r2
 8014ecc:	781b      	ldrb	r3, [r3, #0]
 8014ece:	2bff      	cmp	r3, #255	; 0xff
 8014ed0:	f47f adb7 	bne.w	8014a42 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8014ed4:	4b1e      	ldr	r3, [pc, #120]	; (8014f50 <dhcp_parse_reply+0x594>)
 8014ed6:	781b      	ldrb	r3, [r3, #0]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d018      	beq.n	8014f0e <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014edc:	4b1e      	ldr	r3, [pc, #120]	; (8014f58 <dhcp_parse_reply+0x59c>)
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014ee2:	4b1b      	ldr	r3, [pc, #108]	; (8014f50 <dhcp_parse_reply+0x594>)
 8014ee4:	2200      	movs	r2, #0
 8014ee6:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	2b01      	cmp	r3, #1
 8014eec:	d102      	bne.n	8014ef4 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8014eee:	2301      	movs	r3, #1
 8014ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014ef2:	e00c      	b.n	8014f0e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	2b02      	cmp	r3, #2
 8014ef8:	d102      	bne.n	8014f00 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8014efa:	2301      	movs	r3, #1
 8014efc:	62bb      	str	r3, [r7, #40]	; 0x28
 8014efe:	e006      	b.n	8014f0e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	2b03      	cmp	r3, #3
 8014f04:	d103      	bne.n	8014f0e <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8014f06:	2301      	movs	r3, #1
 8014f08:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8014f0a:	2301      	movs	r3, #1
 8014f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8014f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d006      	beq.n	8014f22 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8014f14:	2300      	movs	r3, #0
 8014f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8014f18:	236c      	movs	r3, #108	; 0x6c
 8014f1a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8014f1c:	23ec      	movs	r3, #236	; 0xec
 8014f1e:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8014f20:	e569      	b.n	80149f6 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8014f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d006      	beq.n	8014f36 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8014f28:	2300      	movs	r3, #0
 8014f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8014f2c:	232c      	movs	r3, #44	; 0x2c
 8014f2e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8014f30:	236c      	movs	r3, #108	; 0x6c
 8014f32:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8014f34:	e55f      	b.n	80149f6 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8014f36:	2300      	movs	r3, #0
}
 8014f38:	4618      	mov	r0, r3
 8014f3a:	3740      	adds	r7, #64	; 0x40
 8014f3c:	46bd      	mov	sp, r7
 8014f3e:	bd80      	pop	{r7, pc}
 8014f40:	0801c2bc 	.word	0x0801c2bc
 8014f44:	0801c544 	.word	0x0801c544
 8014f48:	0801c31c 	.word	0x0801c31c
 8014f4c:	0801c588 	.word	0x0801c588
 8014f50:	2000f530 	.word	0x2000f530
 8014f54:	0801c59c 	.word	0x0801c59c
 8014f58:	2000f538 	.word	0x2000f538
 8014f5c:	0801c5b4 	.word	0x0801c5b4
 8014f60:	0801c5c8 	.word	0x0801c5c8

08014f64 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b08a      	sub	sp, #40	; 0x28
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	60f8      	str	r0, [r7, #12]
 8014f6c:	60b9      	str	r1, [r7, #8]
 8014f6e:	607a      	str	r2, [r7, #4]
 8014f70:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8014f72:	4b5f      	ldr	r3, [pc, #380]	; (80150f0 <dhcp_recv+0x18c>)
 8014f74:	685b      	ldr	r3, [r3, #4]
 8014f76:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014f78:	6a3b      	ldr	r3, [r7, #32]
 8014f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f7c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	685b      	ldr	r3, [r3, #4]
 8014f82:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8014f84:	69fb      	ldr	r3, [r7, #28]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	f000 809d 	beq.w	80150c6 <dhcp_recv+0x162>
 8014f8c:	69fb      	ldr	r3, [r7, #28]
 8014f8e:	791b      	ldrb	r3, [r3, #4]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	f000 8098 	beq.w	80150c6 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	895b      	ldrh	r3, [r3, #10]
 8014f9a:	2b2b      	cmp	r3, #43	; 0x2b
 8014f9c:	f240 8095 	bls.w	80150ca <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8014fa0:	69bb      	ldr	r3, [r7, #24]
 8014fa2:	781b      	ldrb	r3, [r3, #0]
 8014fa4:	2b02      	cmp	r3, #2
 8014fa6:	f040 8092 	bne.w	80150ce <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014faa:	2300      	movs	r3, #0
 8014fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014fb0:	e012      	b.n	8014fd8 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8014fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014fb6:	6a3a      	ldr	r2, [r7, #32]
 8014fb8:	4413      	add	r3, r2
 8014fba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8014fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014fc2:	69b9      	ldr	r1, [r7, #24]
 8014fc4:	440b      	add	r3, r1
 8014fc6:	7f1b      	ldrb	r3, [r3, #28]
 8014fc8:	429a      	cmp	r2, r3
 8014fca:	f040 8082 	bne.w	80150d2 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014fce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014fd2:	3301      	adds	r3, #1
 8014fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014fd8:	6a3b      	ldr	r3, [r7, #32]
 8014fda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014fde:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014fe2:	429a      	cmp	r2, r3
 8014fe4:	d203      	bcs.n	8014fee <dhcp_recv+0x8a>
 8014fe6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014fea:	2b05      	cmp	r3, #5
 8014fec:	d9e1      	bls.n	8014fb2 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8014fee:	69bb      	ldr	r3, [r7, #24]
 8014ff0:	685b      	ldr	r3, [r3, #4]
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	f7f5 fd97 	bl	800ab26 <lwip_htonl>
 8014ff8:	4602      	mov	r2, r0
 8014ffa:	69fb      	ldr	r3, [r7, #28]
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	429a      	cmp	r2, r3
 8015000:	d169      	bne.n	80150d6 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8015002:	69f9      	ldr	r1, [r7, #28]
 8015004:	6878      	ldr	r0, [r7, #4]
 8015006:	f7ff fcd9 	bl	80149bc <dhcp_parse_reply>
 801500a:	4603      	mov	r3, r0
 801500c:	2b00      	cmp	r3, #0
 801500e:	d164      	bne.n	80150da <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8015010:	4b38      	ldr	r3, [pc, #224]	; (80150f4 <dhcp_recv+0x190>)
 8015012:	785b      	ldrb	r3, [r3, #1]
 8015014:	2b00      	cmp	r3, #0
 8015016:	d062      	beq.n	80150de <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	685b      	ldr	r3, [r3, #4]
 801501c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801501e:	4b36      	ldr	r3, [pc, #216]	; (80150f8 <dhcp_recv+0x194>)
 8015020:	685b      	ldr	r3, [r3, #4]
 8015022:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8015024:	7cfb      	ldrb	r3, [r7, #19]
 8015026:	2b05      	cmp	r3, #5
 8015028:	d12a      	bne.n	8015080 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801502a:	69fb      	ldr	r3, [r7, #28]
 801502c:	795b      	ldrb	r3, [r3, #5]
 801502e:	2b01      	cmp	r3, #1
 8015030:	d112      	bne.n	8015058 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8015032:	6979      	ldr	r1, [r7, #20]
 8015034:	6a38      	ldr	r0, [r7, #32]
 8015036:	f7fe fe05 	bl	8013c44 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801503a:	6a3b      	ldr	r3, [r7, #32]
 801503c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015040:	f003 0308 	and.w	r3, r3, #8
 8015044:	2b00      	cmp	r3, #0
 8015046:	d003      	beq.n	8015050 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8015048:	6a38      	ldr	r0, [r7, #32]
 801504a:	f7fe fb75 	bl	8013738 <dhcp_check>
 801504e:	e047      	b.n	80150e0 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8015050:	6a38      	ldr	r0, [r7, #32]
 8015052:	f7ff f867 	bl	8014124 <dhcp_bind>
 8015056:	e043      	b.n	80150e0 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015058:	69fb      	ldr	r3, [r7, #28]
 801505a:	795b      	ldrb	r3, [r3, #5]
 801505c:	2b03      	cmp	r3, #3
 801505e:	d007      	beq.n	8015070 <dhcp_recv+0x10c>
 8015060:	69fb      	ldr	r3, [r7, #28]
 8015062:	795b      	ldrb	r3, [r3, #5]
 8015064:	2b04      	cmp	r3, #4
 8015066:	d003      	beq.n	8015070 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8015068:	69fb      	ldr	r3, [r7, #28]
 801506a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801506c:	2b05      	cmp	r3, #5
 801506e:	d137      	bne.n	80150e0 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 8015070:	6979      	ldr	r1, [r7, #20]
 8015072:	6a38      	ldr	r0, [r7, #32]
 8015074:	f7fe fde6 	bl	8013c44 <dhcp_handle_ack>
      dhcp_bind(netif);
 8015078:	6a38      	ldr	r0, [r7, #32]
 801507a:	f7ff f853 	bl	8014124 <dhcp_bind>
 801507e:	e02f      	b.n	80150e0 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8015080:	7cfb      	ldrb	r3, [r7, #19]
 8015082:	2b06      	cmp	r3, #6
 8015084:	d113      	bne.n	80150ae <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015086:	69fb      	ldr	r3, [r7, #28]
 8015088:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801508a:	2b03      	cmp	r3, #3
 801508c:	d00b      	beq.n	80150a6 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801508e:	69fb      	ldr	r3, [r7, #28]
 8015090:	795b      	ldrb	r3, [r3, #5]
 8015092:	2b01      	cmp	r3, #1
 8015094:	d007      	beq.n	80150a6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015096:	69fb      	ldr	r3, [r7, #28]
 8015098:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801509a:	2b04      	cmp	r3, #4
 801509c:	d003      	beq.n	80150a6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801509e:	69fb      	ldr	r3, [r7, #28]
 80150a0:	795b      	ldrb	r3, [r3, #5]
 80150a2:	2b05      	cmp	r3, #5
 80150a4:	d103      	bne.n	80150ae <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80150a6:	6a38      	ldr	r0, [r7, #32]
 80150a8:	f7fe fb2c 	bl	8013704 <dhcp_handle_nak>
 80150ac:	e018      	b.n	80150e0 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80150ae:	7cfb      	ldrb	r3, [r7, #19]
 80150b0:	2b02      	cmp	r3, #2
 80150b2:	d108      	bne.n	80150c6 <dhcp_recv+0x162>
 80150b4:	69fb      	ldr	r3, [r7, #28]
 80150b6:	795b      	ldrb	r3, [r3, #5]
 80150b8:	2b06      	cmp	r3, #6
 80150ba:	d104      	bne.n	80150c6 <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80150bc:	6979      	ldr	r1, [r7, #20]
 80150be:	6a38      	ldr	r0, [r7, #32]
 80150c0:	f7fe fb6e 	bl	80137a0 <dhcp_handle_offer>
 80150c4:	e00c      	b.n	80150e0 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 80150c6:	bf00      	nop
 80150c8:	e00a      	b.n	80150e0 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80150ca:	bf00      	nop
 80150cc:	e008      	b.n	80150e0 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80150ce:	bf00      	nop
 80150d0:	e006      	b.n	80150e0 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 80150d2:	bf00      	nop
 80150d4:	e004      	b.n	80150e0 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80150d6:	bf00      	nop
 80150d8:	e002      	b.n	80150e0 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80150da:	bf00      	nop
 80150dc:	e000      	b.n	80150e0 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80150de:	bf00      	nop
  pbuf_free(p);
 80150e0:	6878      	ldr	r0, [r7, #4]
 80150e2:	f7f7 f8f5 	bl	800c2d0 <pbuf_free>
}
 80150e6:	bf00      	nop
 80150e8:	3728      	adds	r7, #40	; 0x28
 80150ea:	46bd      	mov	sp, r7
 80150ec:	bd80      	pop	{r7, pc}
 80150ee:	bf00      	nop
 80150f0:	2000bde0 	.word	0x2000bde0
 80150f4:	2000f530 	.word	0x2000f530
 80150f8:	2000f538 	.word	0x2000f538

080150fc <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80150fc:	b580      	push	{r7, lr}
 80150fe:	b088      	sub	sp, #32
 8015100:	af00      	add	r7, sp, #0
 8015102:	60f8      	str	r0, [r7, #12]
 8015104:	60b9      	str	r1, [r7, #8]
 8015106:	603b      	str	r3, [r7, #0]
 8015108:	4613      	mov	r3, r2
 801510a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	2b00      	cmp	r3, #0
 8015110:	d108      	bne.n	8015124 <dhcp_create_msg+0x28>
 8015112:	4b5f      	ldr	r3, [pc, #380]	; (8015290 <dhcp_create_msg+0x194>)
 8015114:	f240 7269 	movw	r2, #1897	; 0x769
 8015118:	495e      	ldr	r1, [pc, #376]	; (8015294 <dhcp_create_msg+0x198>)
 801511a:	485f      	ldr	r0, [pc, #380]	; (8015298 <dhcp_create_msg+0x19c>)
 801511c:	f002 fe56 	bl	8017dcc <iprintf>
 8015120:	2300      	movs	r3, #0
 8015122:	e0b1      	b.n	8015288 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8015124:	68bb      	ldr	r3, [r7, #8]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d108      	bne.n	801513c <dhcp_create_msg+0x40>
 801512a:	4b59      	ldr	r3, [pc, #356]	; (8015290 <dhcp_create_msg+0x194>)
 801512c:	f240 726a 	movw	r2, #1898	; 0x76a
 8015130:	495a      	ldr	r1, [pc, #360]	; (801529c <dhcp_create_msg+0x1a0>)
 8015132:	4859      	ldr	r0, [pc, #356]	; (8015298 <dhcp_create_msg+0x19c>)
 8015134:	f002 fe4a 	bl	8017dcc <iprintf>
 8015138:	2300      	movs	r3, #0
 801513a:	e0a5      	b.n	8015288 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801513c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015140:	f44f 719a 	mov.w	r1, #308	; 0x134
 8015144:	2036      	movs	r0, #54	; 0x36
 8015146:	f7f6 fde3 	bl	800bd10 <pbuf_alloc>
 801514a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801514c:	69bb      	ldr	r3, [r7, #24]
 801514e:	2b00      	cmp	r3, #0
 8015150:	d101      	bne.n	8015156 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8015152:	2300      	movs	r3, #0
 8015154:	e098      	b.n	8015288 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8015156:	69bb      	ldr	r3, [r7, #24]
 8015158:	895b      	ldrh	r3, [r3, #10]
 801515a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801515e:	d206      	bcs.n	801516e <dhcp_create_msg+0x72>
 8015160:	4b4b      	ldr	r3, [pc, #300]	; (8015290 <dhcp_create_msg+0x194>)
 8015162:	f240 7272 	movw	r2, #1906	; 0x772
 8015166:	494e      	ldr	r1, [pc, #312]	; (80152a0 <dhcp_create_msg+0x1a4>)
 8015168:	484b      	ldr	r0, [pc, #300]	; (8015298 <dhcp_create_msg+0x19c>)
 801516a:	f002 fe2f 	bl	8017dcc <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801516e:	79fb      	ldrb	r3, [r7, #7]
 8015170:	2b03      	cmp	r3, #3
 8015172:	d103      	bne.n	801517c <dhcp_create_msg+0x80>
 8015174:	68bb      	ldr	r3, [r7, #8]
 8015176:	795b      	ldrb	r3, [r3, #5]
 8015178:	2b03      	cmp	r3, #3
 801517a:	d10d      	bne.n	8015198 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801517c:	68bb      	ldr	r3, [r7, #8]
 801517e:	799b      	ldrb	r3, [r3, #6]
 8015180:	2b00      	cmp	r3, #0
 8015182:	d105      	bne.n	8015190 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8015184:	f002 fe9e 	bl	8017ec4 <rand>
 8015188:	4603      	mov	r3, r0
 801518a:	461a      	mov	r2, r3
 801518c:	4b45      	ldr	r3, [pc, #276]	; (80152a4 <dhcp_create_msg+0x1a8>)
 801518e:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8015190:	4b44      	ldr	r3, [pc, #272]	; (80152a4 <dhcp_create_msg+0x1a8>)
 8015192:	681a      	ldr	r2, [r3, #0]
 8015194:	68bb      	ldr	r3, [r7, #8]
 8015196:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8015198:	69bb      	ldr	r3, [r7, #24]
 801519a:	685b      	ldr	r3, [r3, #4]
 801519c:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801519e:	f44f 729a 	mov.w	r2, #308	; 0x134
 80151a2:	2100      	movs	r1, #0
 80151a4:	6978      	ldr	r0, [r7, #20]
 80151a6:	f002 fe08 	bl	8017dba <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80151aa:	697b      	ldr	r3, [r7, #20]
 80151ac:	2201      	movs	r2, #1
 80151ae:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80151b0:	697b      	ldr	r3, [r7, #20]
 80151b2:	2201      	movs	r2, #1
 80151b4:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80151bc:	697b      	ldr	r3, [r7, #20]
 80151be:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80151c0:	68bb      	ldr	r3, [r7, #8]
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	4618      	mov	r0, r3
 80151c6:	f7f5 fcae 	bl	800ab26 <lwip_htonl>
 80151ca:	4602      	mov	r2, r0
 80151cc:	697b      	ldr	r3, [r7, #20]
 80151ce:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80151d0:	79fb      	ldrb	r3, [r7, #7]
 80151d2:	2b08      	cmp	r3, #8
 80151d4:	d010      	beq.n	80151f8 <dhcp_create_msg+0xfc>
 80151d6:	79fb      	ldrb	r3, [r7, #7]
 80151d8:	2b04      	cmp	r3, #4
 80151da:	d00d      	beq.n	80151f8 <dhcp_create_msg+0xfc>
 80151dc:	79fb      	ldrb	r3, [r7, #7]
 80151de:	2b07      	cmp	r3, #7
 80151e0:	d00a      	beq.n	80151f8 <dhcp_create_msg+0xfc>
 80151e2:	79fb      	ldrb	r3, [r7, #7]
 80151e4:	2b03      	cmp	r3, #3
 80151e6:	d10c      	bne.n	8015202 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80151e8:	68bb      	ldr	r3, [r7, #8]
 80151ea:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80151ec:	2b05      	cmp	r3, #5
 80151ee:	d003      	beq.n	80151f8 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80151f0:	68bb      	ldr	r3, [r7, #8]
 80151f2:	795b      	ldrb	r3, [r3, #5]
 80151f4:	2b04      	cmp	r3, #4
 80151f6:	d104      	bne.n	8015202 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	3304      	adds	r3, #4
 80151fc:	681a      	ldr	r2, [r3, #0]
 80151fe:	697b      	ldr	r3, [r7, #20]
 8015200:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015202:	2300      	movs	r3, #0
 8015204:	83fb      	strh	r3, [r7, #30]
 8015206:	e00c      	b.n	8015222 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8015208:	8bfa      	ldrh	r2, [r7, #30]
 801520a:	8bfb      	ldrh	r3, [r7, #30]
 801520c:	68f9      	ldr	r1, [r7, #12]
 801520e:	440a      	add	r2, r1
 8015210:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8015214:	697a      	ldr	r2, [r7, #20]
 8015216:	4413      	add	r3, r2
 8015218:	460a      	mov	r2, r1
 801521a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801521c:	8bfb      	ldrh	r3, [r7, #30]
 801521e:	3301      	adds	r3, #1
 8015220:	83fb      	strh	r3, [r7, #30]
 8015222:	8bfb      	ldrh	r3, [r7, #30]
 8015224:	2b05      	cmp	r3, #5
 8015226:	d9ef      	bls.n	8015208 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8015228:	697b      	ldr	r3, [r7, #20]
 801522a:	2200      	movs	r2, #0
 801522c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015230:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8015234:	2200      	movs	r2, #0
 8015236:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801523a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801523e:	2200      	movs	r2, #0
 8015240:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8015244:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8015248:	2200      	movs	r2, #0
 801524a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801524e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8015252:	697b      	ldr	r3, [r7, #20]
 8015254:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015258:	2301      	movs	r3, #1
 801525a:	2235      	movs	r2, #53	; 0x35
 801525c:	2000      	movs	r0, #0
 801525e:	f7ff fadd 	bl	801481c <dhcp_option>
 8015262:	4603      	mov	r3, r0
 8015264:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8015266:	697b      	ldr	r3, [r7, #20]
 8015268:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801526c:	79fa      	ldrb	r2, [r7, #7]
 801526e:	8a7b      	ldrh	r3, [r7, #18]
 8015270:	4618      	mov	r0, r3
 8015272:	f7ff fb07 	bl	8014884 <dhcp_option_byte>
 8015276:	4603      	mov	r3, r0
 8015278:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801527a:	683b      	ldr	r3, [r7, #0]
 801527c:	2b00      	cmp	r3, #0
 801527e:	d002      	beq.n	8015286 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8015280:	683b      	ldr	r3, [r7, #0]
 8015282:	8a7a      	ldrh	r2, [r7, #18]
 8015284:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8015286:	69bb      	ldr	r3, [r7, #24]
}
 8015288:	4618      	mov	r0, r3
 801528a:	3720      	adds	r7, #32
 801528c:	46bd      	mov	sp, r7
 801528e:	bd80      	pop	{r7, pc}
 8015290:	0801c2bc 	.word	0x0801c2bc
 8015294:	0801c5dc 	.word	0x0801c5dc
 8015298:	0801c31c 	.word	0x0801c31c
 801529c:	0801c5fc 	.word	0x0801c5fc
 80152a0:	0801c61c 	.word	0x0801c61c
 80152a4:	20008ad8 	.word	0x20008ad8

080152a8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80152a8:	b580      	push	{r7, lr}
 80152aa:	b084      	sub	sp, #16
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	4603      	mov	r3, r0
 80152b0:	60b9      	str	r1, [r7, #8]
 80152b2:	607a      	str	r2, [r7, #4]
 80152b4:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80152b6:	89fb      	ldrh	r3, [r7, #14]
 80152b8:	1c5a      	adds	r2, r3, #1
 80152ba:	81fa      	strh	r2, [r7, #14]
 80152bc:	461a      	mov	r2, r3
 80152be:	68bb      	ldr	r3, [r7, #8]
 80152c0:	4413      	add	r3, r2
 80152c2:	22ff      	movs	r2, #255	; 0xff
 80152c4:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80152c6:	e007      	b.n	80152d8 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80152c8:	89fb      	ldrh	r3, [r7, #14]
 80152ca:	1c5a      	adds	r2, r3, #1
 80152cc:	81fa      	strh	r2, [r7, #14]
 80152ce:	461a      	mov	r2, r3
 80152d0:	68bb      	ldr	r3, [r7, #8]
 80152d2:	4413      	add	r3, r2
 80152d4:	2200      	movs	r2, #0
 80152d6:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80152d8:	89fb      	ldrh	r3, [r7, #14]
 80152da:	2b43      	cmp	r3, #67	; 0x43
 80152dc:	d904      	bls.n	80152e8 <dhcp_option_trailer+0x40>
 80152de:	89fb      	ldrh	r3, [r7, #14]
 80152e0:	f003 0303 	and.w	r3, r3, #3
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d002      	beq.n	80152ee <dhcp_option_trailer+0x46>
 80152e8:	89fb      	ldrh	r3, [r7, #14]
 80152ea:	2b43      	cmp	r3, #67	; 0x43
 80152ec:	d9ec      	bls.n	80152c8 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80152ee:	89fb      	ldrh	r3, [r7, #14]
 80152f0:	33f0      	adds	r3, #240	; 0xf0
 80152f2:	b29b      	uxth	r3, r3
 80152f4:	4619      	mov	r1, r3
 80152f6:	6878      	ldr	r0, [r7, #4]
 80152f8:	f7f6 fe64 	bl	800bfc4 <pbuf_realloc>
}
 80152fc:	bf00      	nop
 80152fe:	3710      	adds	r7, #16
 8015300:	46bd      	mov	sp, r7
 8015302:	bd80      	pop	{r7, pc}

08015304 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8015304:	b480      	push	{r7}
 8015306:	b085      	sub	sp, #20
 8015308:	af00      	add	r7, sp, #0
 801530a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	2b00      	cmp	r3, #0
 8015310:	d017      	beq.n	8015342 <dhcp_supplied_address+0x3e>
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015316:	2b00      	cmp	r3, #0
 8015318:	d013      	beq.n	8015342 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801531e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	795b      	ldrb	r3, [r3, #5]
 8015324:	2b0a      	cmp	r3, #10
 8015326:	d007      	beq.n	8015338 <dhcp_supplied_address+0x34>
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	795b      	ldrb	r3, [r3, #5]
 801532c:	2b05      	cmp	r3, #5
 801532e:	d003      	beq.n	8015338 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015334:	2b04      	cmp	r3, #4
 8015336:	d101      	bne.n	801533c <dhcp_supplied_address+0x38>
 8015338:	2301      	movs	r3, #1
 801533a:	e000      	b.n	801533e <dhcp_supplied_address+0x3a>
 801533c:	2300      	movs	r3, #0
 801533e:	b2db      	uxtb	r3, r3
 8015340:	e000      	b.n	8015344 <dhcp_supplied_address+0x40>
  }
  return 0;
 8015342:	2300      	movs	r3, #0
}
 8015344:	4618      	mov	r0, r3
 8015346:	3714      	adds	r7, #20
 8015348:	46bd      	mov	sp, r7
 801534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801534e:	4770      	bx	lr

08015350 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015350:	b580      	push	{r7, lr}
 8015352:	b082      	sub	sp, #8
 8015354:	af00      	add	r7, sp, #0
 8015356:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015358:	4915      	ldr	r1, [pc, #84]	; (80153b0 <etharp_free_entry+0x60>)
 801535a:	687a      	ldr	r2, [r7, #4]
 801535c:	4613      	mov	r3, r2
 801535e:	005b      	lsls	r3, r3, #1
 8015360:	4413      	add	r3, r2
 8015362:	00db      	lsls	r3, r3, #3
 8015364:	440b      	add	r3, r1
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	2b00      	cmp	r3, #0
 801536a:	d013      	beq.n	8015394 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801536c:	4910      	ldr	r1, [pc, #64]	; (80153b0 <etharp_free_entry+0x60>)
 801536e:	687a      	ldr	r2, [r7, #4]
 8015370:	4613      	mov	r3, r2
 8015372:	005b      	lsls	r3, r3, #1
 8015374:	4413      	add	r3, r2
 8015376:	00db      	lsls	r3, r3, #3
 8015378:	440b      	add	r3, r1
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	4618      	mov	r0, r3
 801537e:	f7f6 ffa7 	bl	800c2d0 <pbuf_free>
    arp_table[i].q = NULL;
 8015382:	490b      	ldr	r1, [pc, #44]	; (80153b0 <etharp_free_entry+0x60>)
 8015384:	687a      	ldr	r2, [r7, #4]
 8015386:	4613      	mov	r3, r2
 8015388:	005b      	lsls	r3, r3, #1
 801538a:	4413      	add	r3, r2
 801538c:	00db      	lsls	r3, r3, #3
 801538e:	440b      	add	r3, r1
 8015390:	2200      	movs	r2, #0
 8015392:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015394:	4906      	ldr	r1, [pc, #24]	; (80153b0 <etharp_free_entry+0x60>)
 8015396:	687a      	ldr	r2, [r7, #4]
 8015398:	4613      	mov	r3, r2
 801539a:	005b      	lsls	r3, r3, #1
 801539c:	4413      	add	r3, r2
 801539e:	00db      	lsls	r3, r3, #3
 80153a0:	440b      	add	r3, r1
 80153a2:	3314      	adds	r3, #20
 80153a4:	2200      	movs	r2, #0
 80153a6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80153a8:	bf00      	nop
 80153aa:	3708      	adds	r7, #8
 80153ac:	46bd      	mov	sp, r7
 80153ae:	bd80      	pop	{r7, pc}
 80153b0:	20008adc 	.word	0x20008adc

080153b4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80153b4:	b580      	push	{r7, lr}
 80153b6:	b082      	sub	sp, #8
 80153b8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80153ba:	2300      	movs	r3, #0
 80153bc:	607b      	str	r3, [r7, #4]
 80153be:	e096      	b.n	80154ee <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80153c0:	494f      	ldr	r1, [pc, #316]	; (8015500 <etharp_tmr+0x14c>)
 80153c2:	687a      	ldr	r2, [r7, #4]
 80153c4:	4613      	mov	r3, r2
 80153c6:	005b      	lsls	r3, r3, #1
 80153c8:	4413      	add	r3, r2
 80153ca:	00db      	lsls	r3, r3, #3
 80153cc:	440b      	add	r3, r1
 80153ce:	3314      	adds	r3, #20
 80153d0:	781b      	ldrb	r3, [r3, #0]
 80153d2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80153d4:	78fb      	ldrb	r3, [r7, #3]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	f000 8086 	beq.w	80154e8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80153dc:	4948      	ldr	r1, [pc, #288]	; (8015500 <etharp_tmr+0x14c>)
 80153de:	687a      	ldr	r2, [r7, #4]
 80153e0:	4613      	mov	r3, r2
 80153e2:	005b      	lsls	r3, r3, #1
 80153e4:	4413      	add	r3, r2
 80153e6:	00db      	lsls	r3, r3, #3
 80153e8:	440b      	add	r3, r1
 80153ea:	3312      	adds	r3, #18
 80153ec:	881b      	ldrh	r3, [r3, #0]
 80153ee:	3301      	adds	r3, #1
 80153f0:	b298      	uxth	r0, r3
 80153f2:	4943      	ldr	r1, [pc, #268]	; (8015500 <etharp_tmr+0x14c>)
 80153f4:	687a      	ldr	r2, [r7, #4]
 80153f6:	4613      	mov	r3, r2
 80153f8:	005b      	lsls	r3, r3, #1
 80153fa:	4413      	add	r3, r2
 80153fc:	00db      	lsls	r3, r3, #3
 80153fe:	440b      	add	r3, r1
 8015400:	3312      	adds	r3, #18
 8015402:	4602      	mov	r2, r0
 8015404:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015406:	493e      	ldr	r1, [pc, #248]	; (8015500 <etharp_tmr+0x14c>)
 8015408:	687a      	ldr	r2, [r7, #4]
 801540a:	4613      	mov	r3, r2
 801540c:	005b      	lsls	r3, r3, #1
 801540e:	4413      	add	r3, r2
 8015410:	00db      	lsls	r3, r3, #3
 8015412:	440b      	add	r3, r1
 8015414:	3312      	adds	r3, #18
 8015416:	881b      	ldrh	r3, [r3, #0]
 8015418:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801541c:	d215      	bcs.n	801544a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801541e:	4938      	ldr	r1, [pc, #224]	; (8015500 <etharp_tmr+0x14c>)
 8015420:	687a      	ldr	r2, [r7, #4]
 8015422:	4613      	mov	r3, r2
 8015424:	005b      	lsls	r3, r3, #1
 8015426:	4413      	add	r3, r2
 8015428:	00db      	lsls	r3, r3, #3
 801542a:	440b      	add	r3, r1
 801542c:	3314      	adds	r3, #20
 801542e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015430:	2b01      	cmp	r3, #1
 8015432:	d10e      	bne.n	8015452 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015434:	4932      	ldr	r1, [pc, #200]	; (8015500 <etharp_tmr+0x14c>)
 8015436:	687a      	ldr	r2, [r7, #4]
 8015438:	4613      	mov	r3, r2
 801543a:	005b      	lsls	r3, r3, #1
 801543c:	4413      	add	r3, r2
 801543e:	00db      	lsls	r3, r3, #3
 8015440:	440b      	add	r3, r1
 8015442:	3312      	adds	r3, #18
 8015444:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015446:	2b04      	cmp	r3, #4
 8015448:	d903      	bls.n	8015452 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801544a:	6878      	ldr	r0, [r7, #4]
 801544c:	f7ff ff80 	bl	8015350 <etharp_free_entry>
 8015450:	e04a      	b.n	80154e8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015452:	492b      	ldr	r1, [pc, #172]	; (8015500 <etharp_tmr+0x14c>)
 8015454:	687a      	ldr	r2, [r7, #4]
 8015456:	4613      	mov	r3, r2
 8015458:	005b      	lsls	r3, r3, #1
 801545a:	4413      	add	r3, r2
 801545c:	00db      	lsls	r3, r3, #3
 801545e:	440b      	add	r3, r1
 8015460:	3314      	adds	r3, #20
 8015462:	781b      	ldrb	r3, [r3, #0]
 8015464:	2b03      	cmp	r3, #3
 8015466:	d10a      	bne.n	801547e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015468:	4925      	ldr	r1, [pc, #148]	; (8015500 <etharp_tmr+0x14c>)
 801546a:	687a      	ldr	r2, [r7, #4]
 801546c:	4613      	mov	r3, r2
 801546e:	005b      	lsls	r3, r3, #1
 8015470:	4413      	add	r3, r2
 8015472:	00db      	lsls	r3, r3, #3
 8015474:	440b      	add	r3, r1
 8015476:	3314      	adds	r3, #20
 8015478:	2204      	movs	r2, #4
 801547a:	701a      	strb	r2, [r3, #0]
 801547c:	e034      	b.n	80154e8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801547e:	4920      	ldr	r1, [pc, #128]	; (8015500 <etharp_tmr+0x14c>)
 8015480:	687a      	ldr	r2, [r7, #4]
 8015482:	4613      	mov	r3, r2
 8015484:	005b      	lsls	r3, r3, #1
 8015486:	4413      	add	r3, r2
 8015488:	00db      	lsls	r3, r3, #3
 801548a:	440b      	add	r3, r1
 801548c:	3314      	adds	r3, #20
 801548e:	781b      	ldrb	r3, [r3, #0]
 8015490:	2b04      	cmp	r3, #4
 8015492:	d10a      	bne.n	80154aa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015494:	491a      	ldr	r1, [pc, #104]	; (8015500 <etharp_tmr+0x14c>)
 8015496:	687a      	ldr	r2, [r7, #4]
 8015498:	4613      	mov	r3, r2
 801549a:	005b      	lsls	r3, r3, #1
 801549c:	4413      	add	r3, r2
 801549e:	00db      	lsls	r3, r3, #3
 80154a0:	440b      	add	r3, r1
 80154a2:	3314      	adds	r3, #20
 80154a4:	2202      	movs	r2, #2
 80154a6:	701a      	strb	r2, [r3, #0]
 80154a8:	e01e      	b.n	80154e8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80154aa:	4915      	ldr	r1, [pc, #84]	; (8015500 <etharp_tmr+0x14c>)
 80154ac:	687a      	ldr	r2, [r7, #4]
 80154ae:	4613      	mov	r3, r2
 80154b0:	005b      	lsls	r3, r3, #1
 80154b2:	4413      	add	r3, r2
 80154b4:	00db      	lsls	r3, r3, #3
 80154b6:	440b      	add	r3, r1
 80154b8:	3314      	adds	r3, #20
 80154ba:	781b      	ldrb	r3, [r3, #0]
 80154bc:	2b01      	cmp	r3, #1
 80154be:	d113      	bne.n	80154e8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80154c0:	490f      	ldr	r1, [pc, #60]	; (8015500 <etharp_tmr+0x14c>)
 80154c2:	687a      	ldr	r2, [r7, #4]
 80154c4:	4613      	mov	r3, r2
 80154c6:	005b      	lsls	r3, r3, #1
 80154c8:	4413      	add	r3, r2
 80154ca:	00db      	lsls	r3, r3, #3
 80154cc:	440b      	add	r3, r1
 80154ce:	3308      	adds	r3, #8
 80154d0:	6818      	ldr	r0, [r3, #0]
 80154d2:	687a      	ldr	r2, [r7, #4]
 80154d4:	4613      	mov	r3, r2
 80154d6:	005b      	lsls	r3, r3, #1
 80154d8:	4413      	add	r3, r2
 80154da:	00db      	lsls	r3, r3, #3
 80154dc:	4a08      	ldr	r2, [pc, #32]	; (8015500 <etharp_tmr+0x14c>)
 80154de:	4413      	add	r3, r2
 80154e0:	3304      	adds	r3, #4
 80154e2:	4619      	mov	r1, r3
 80154e4:	f000 fe72 	bl	80161cc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	3301      	adds	r3, #1
 80154ec:	607b      	str	r3, [r7, #4]
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	2b09      	cmp	r3, #9
 80154f2:	f77f af65 	ble.w	80153c0 <etharp_tmr+0xc>
      }
    }
  }
}
 80154f6:	bf00      	nop
 80154f8:	3708      	adds	r7, #8
 80154fa:	46bd      	mov	sp, r7
 80154fc:	bd80      	pop	{r7, pc}
 80154fe:	bf00      	nop
 8015500:	20008adc 	.word	0x20008adc

08015504 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015504:	b580      	push	{r7, lr}
 8015506:	b08a      	sub	sp, #40	; 0x28
 8015508:	af00      	add	r7, sp, #0
 801550a:	60f8      	str	r0, [r7, #12]
 801550c:	460b      	mov	r3, r1
 801550e:	607a      	str	r2, [r7, #4]
 8015510:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015512:	230a      	movs	r3, #10
 8015514:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015516:	230a      	movs	r3, #10
 8015518:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801551a:	230a      	movs	r3, #10
 801551c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801551e:	2300      	movs	r3, #0
 8015520:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015522:	230a      	movs	r3, #10
 8015524:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015526:	2300      	movs	r3, #0
 8015528:	83bb      	strh	r3, [r7, #28]
 801552a:	2300      	movs	r3, #0
 801552c:	837b      	strh	r3, [r7, #26]
 801552e:	2300      	movs	r3, #0
 8015530:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015532:	2300      	movs	r3, #0
 8015534:	843b      	strh	r3, [r7, #32]
 8015536:	e0ae      	b.n	8015696 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015538:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801553c:	49a6      	ldr	r1, [pc, #664]	; (80157d8 <etharp_find_entry+0x2d4>)
 801553e:	4613      	mov	r3, r2
 8015540:	005b      	lsls	r3, r3, #1
 8015542:	4413      	add	r3, r2
 8015544:	00db      	lsls	r3, r3, #3
 8015546:	440b      	add	r3, r1
 8015548:	3314      	adds	r3, #20
 801554a:	781b      	ldrb	r3, [r3, #0]
 801554c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801554e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015552:	2b0a      	cmp	r3, #10
 8015554:	d105      	bne.n	8015562 <etharp_find_entry+0x5e>
 8015556:	7dfb      	ldrb	r3, [r7, #23]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d102      	bne.n	8015562 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801555c:	8c3b      	ldrh	r3, [r7, #32]
 801555e:	847b      	strh	r3, [r7, #34]	; 0x22
 8015560:	e095      	b.n	801568e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015562:	7dfb      	ldrb	r3, [r7, #23]
 8015564:	2b00      	cmp	r3, #0
 8015566:	f000 8092 	beq.w	801568e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801556a:	7dfb      	ldrb	r3, [r7, #23]
 801556c:	2b01      	cmp	r3, #1
 801556e:	d009      	beq.n	8015584 <etharp_find_entry+0x80>
 8015570:	7dfb      	ldrb	r3, [r7, #23]
 8015572:	2b01      	cmp	r3, #1
 8015574:	d806      	bhi.n	8015584 <etharp_find_entry+0x80>
 8015576:	4b99      	ldr	r3, [pc, #612]	; (80157dc <etharp_find_entry+0x2d8>)
 8015578:	f44f 7292 	mov.w	r2, #292	; 0x124
 801557c:	4998      	ldr	r1, [pc, #608]	; (80157e0 <etharp_find_entry+0x2dc>)
 801557e:	4899      	ldr	r0, [pc, #612]	; (80157e4 <etharp_find_entry+0x2e0>)
 8015580:	f002 fc24 	bl	8017dcc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	2b00      	cmp	r3, #0
 8015588:	d020      	beq.n	80155cc <etharp_find_entry+0xc8>
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	6819      	ldr	r1, [r3, #0]
 801558e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015592:	4891      	ldr	r0, [pc, #580]	; (80157d8 <etharp_find_entry+0x2d4>)
 8015594:	4613      	mov	r3, r2
 8015596:	005b      	lsls	r3, r3, #1
 8015598:	4413      	add	r3, r2
 801559a:	00db      	lsls	r3, r3, #3
 801559c:	4403      	add	r3, r0
 801559e:	3304      	adds	r3, #4
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	4299      	cmp	r1, r3
 80155a4:	d112      	bne.n	80155cc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d00c      	beq.n	80155c6 <etharp_find_entry+0xc2>
 80155ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80155b0:	4989      	ldr	r1, [pc, #548]	; (80157d8 <etharp_find_entry+0x2d4>)
 80155b2:	4613      	mov	r3, r2
 80155b4:	005b      	lsls	r3, r3, #1
 80155b6:	4413      	add	r3, r2
 80155b8:	00db      	lsls	r3, r3, #3
 80155ba:	440b      	add	r3, r1
 80155bc:	3308      	adds	r3, #8
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	687a      	ldr	r2, [r7, #4]
 80155c2:	429a      	cmp	r2, r3
 80155c4:	d102      	bne.n	80155cc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80155c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80155ca:	e100      	b.n	80157ce <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80155cc:	7dfb      	ldrb	r3, [r7, #23]
 80155ce:	2b01      	cmp	r3, #1
 80155d0:	d140      	bne.n	8015654 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80155d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80155d6:	4980      	ldr	r1, [pc, #512]	; (80157d8 <etharp_find_entry+0x2d4>)
 80155d8:	4613      	mov	r3, r2
 80155da:	005b      	lsls	r3, r3, #1
 80155dc:	4413      	add	r3, r2
 80155de:	00db      	lsls	r3, r3, #3
 80155e0:	440b      	add	r3, r1
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d01a      	beq.n	801561e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80155e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80155ec:	497a      	ldr	r1, [pc, #488]	; (80157d8 <etharp_find_entry+0x2d4>)
 80155ee:	4613      	mov	r3, r2
 80155f0:	005b      	lsls	r3, r3, #1
 80155f2:	4413      	add	r3, r2
 80155f4:	00db      	lsls	r3, r3, #3
 80155f6:	440b      	add	r3, r1
 80155f8:	3312      	adds	r3, #18
 80155fa:	881b      	ldrh	r3, [r3, #0]
 80155fc:	8bba      	ldrh	r2, [r7, #28]
 80155fe:	429a      	cmp	r2, r3
 8015600:	d845      	bhi.n	801568e <etharp_find_entry+0x18a>
            old_queue = i;
 8015602:	8c3b      	ldrh	r3, [r7, #32]
 8015604:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015606:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801560a:	4973      	ldr	r1, [pc, #460]	; (80157d8 <etharp_find_entry+0x2d4>)
 801560c:	4613      	mov	r3, r2
 801560e:	005b      	lsls	r3, r3, #1
 8015610:	4413      	add	r3, r2
 8015612:	00db      	lsls	r3, r3, #3
 8015614:	440b      	add	r3, r1
 8015616:	3312      	adds	r3, #18
 8015618:	881b      	ldrh	r3, [r3, #0]
 801561a:	83bb      	strh	r3, [r7, #28]
 801561c:	e037      	b.n	801568e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801561e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015622:	496d      	ldr	r1, [pc, #436]	; (80157d8 <etharp_find_entry+0x2d4>)
 8015624:	4613      	mov	r3, r2
 8015626:	005b      	lsls	r3, r3, #1
 8015628:	4413      	add	r3, r2
 801562a:	00db      	lsls	r3, r3, #3
 801562c:	440b      	add	r3, r1
 801562e:	3312      	adds	r3, #18
 8015630:	881b      	ldrh	r3, [r3, #0]
 8015632:	8b7a      	ldrh	r2, [r7, #26]
 8015634:	429a      	cmp	r2, r3
 8015636:	d82a      	bhi.n	801568e <etharp_find_entry+0x18a>
            old_pending = i;
 8015638:	8c3b      	ldrh	r3, [r7, #32]
 801563a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801563c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015640:	4965      	ldr	r1, [pc, #404]	; (80157d8 <etharp_find_entry+0x2d4>)
 8015642:	4613      	mov	r3, r2
 8015644:	005b      	lsls	r3, r3, #1
 8015646:	4413      	add	r3, r2
 8015648:	00db      	lsls	r3, r3, #3
 801564a:	440b      	add	r3, r1
 801564c:	3312      	adds	r3, #18
 801564e:	881b      	ldrh	r3, [r3, #0]
 8015650:	837b      	strh	r3, [r7, #26]
 8015652:	e01c      	b.n	801568e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015654:	7dfb      	ldrb	r3, [r7, #23]
 8015656:	2b01      	cmp	r3, #1
 8015658:	d919      	bls.n	801568e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801565a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801565e:	495e      	ldr	r1, [pc, #376]	; (80157d8 <etharp_find_entry+0x2d4>)
 8015660:	4613      	mov	r3, r2
 8015662:	005b      	lsls	r3, r3, #1
 8015664:	4413      	add	r3, r2
 8015666:	00db      	lsls	r3, r3, #3
 8015668:	440b      	add	r3, r1
 801566a:	3312      	adds	r3, #18
 801566c:	881b      	ldrh	r3, [r3, #0]
 801566e:	8b3a      	ldrh	r2, [r7, #24]
 8015670:	429a      	cmp	r2, r3
 8015672:	d80c      	bhi.n	801568e <etharp_find_entry+0x18a>
            old_stable = i;
 8015674:	8c3b      	ldrh	r3, [r7, #32]
 8015676:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015678:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801567c:	4956      	ldr	r1, [pc, #344]	; (80157d8 <etharp_find_entry+0x2d4>)
 801567e:	4613      	mov	r3, r2
 8015680:	005b      	lsls	r3, r3, #1
 8015682:	4413      	add	r3, r2
 8015684:	00db      	lsls	r3, r3, #3
 8015686:	440b      	add	r3, r1
 8015688:	3312      	adds	r3, #18
 801568a:	881b      	ldrh	r3, [r3, #0]
 801568c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801568e:	8c3b      	ldrh	r3, [r7, #32]
 8015690:	3301      	adds	r3, #1
 8015692:	b29b      	uxth	r3, r3
 8015694:	843b      	strh	r3, [r7, #32]
 8015696:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801569a:	2b09      	cmp	r3, #9
 801569c:	f77f af4c 	ble.w	8015538 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80156a0:	7afb      	ldrb	r3, [r7, #11]
 80156a2:	f003 0302 	and.w	r3, r3, #2
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d108      	bne.n	80156bc <etharp_find_entry+0x1b8>
 80156aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80156ae:	2b0a      	cmp	r3, #10
 80156b0:	d107      	bne.n	80156c2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80156b2:	7afb      	ldrb	r3, [r7, #11]
 80156b4:	f003 0301 	and.w	r3, r3, #1
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d102      	bne.n	80156c2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80156bc:	f04f 33ff 	mov.w	r3, #4294967295
 80156c0:	e085      	b.n	80157ce <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80156c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80156c6:	2b09      	cmp	r3, #9
 80156c8:	dc02      	bgt.n	80156d0 <etharp_find_entry+0x1cc>
    i = empty;
 80156ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80156cc:	843b      	strh	r3, [r7, #32]
 80156ce:	e039      	b.n	8015744 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80156d0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80156d4:	2b09      	cmp	r3, #9
 80156d6:	dc14      	bgt.n	8015702 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80156d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80156da:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80156dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80156e0:	493d      	ldr	r1, [pc, #244]	; (80157d8 <etharp_find_entry+0x2d4>)
 80156e2:	4613      	mov	r3, r2
 80156e4:	005b      	lsls	r3, r3, #1
 80156e6:	4413      	add	r3, r2
 80156e8:	00db      	lsls	r3, r3, #3
 80156ea:	440b      	add	r3, r1
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d018      	beq.n	8015724 <etharp_find_entry+0x220>
 80156f2:	4b3a      	ldr	r3, [pc, #232]	; (80157dc <etharp_find_entry+0x2d8>)
 80156f4:	f240 126d 	movw	r2, #365	; 0x16d
 80156f8:	493b      	ldr	r1, [pc, #236]	; (80157e8 <etharp_find_entry+0x2e4>)
 80156fa:	483a      	ldr	r0, [pc, #232]	; (80157e4 <etharp_find_entry+0x2e0>)
 80156fc:	f002 fb66 	bl	8017dcc <iprintf>
 8015700:	e010      	b.n	8015724 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015702:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015706:	2b09      	cmp	r3, #9
 8015708:	dc02      	bgt.n	8015710 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801570a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801570c:	843b      	strh	r3, [r7, #32]
 801570e:	e009      	b.n	8015724 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015710:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015714:	2b09      	cmp	r3, #9
 8015716:	dc02      	bgt.n	801571e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015718:	8bfb      	ldrh	r3, [r7, #30]
 801571a:	843b      	strh	r3, [r7, #32]
 801571c:	e002      	b.n	8015724 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801571e:	f04f 33ff 	mov.w	r3, #4294967295
 8015722:	e054      	b.n	80157ce <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015724:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015728:	2b09      	cmp	r3, #9
 801572a:	dd06      	ble.n	801573a <etharp_find_entry+0x236>
 801572c:	4b2b      	ldr	r3, [pc, #172]	; (80157dc <etharp_find_entry+0x2d8>)
 801572e:	f240 127f 	movw	r2, #383	; 0x17f
 8015732:	492e      	ldr	r1, [pc, #184]	; (80157ec <etharp_find_entry+0x2e8>)
 8015734:	482b      	ldr	r0, [pc, #172]	; (80157e4 <etharp_find_entry+0x2e0>)
 8015736:	f002 fb49 	bl	8017dcc <iprintf>
    etharp_free_entry(i);
 801573a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801573e:	4618      	mov	r0, r3
 8015740:	f7ff fe06 	bl	8015350 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015744:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015748:	2b09      	cmp	r3, #9
 801574a:	dd06      	ble.n	801575a <etharp_find_entry+0x256>
 801574c:	4b23      	ldr	r3, [pc, #140]	; (80157dc <etharp_find_entry+0x2d8>)
 801574e:	f240 1283 	movw	r2, #387	; 0x183
 8015752:	4926      	ldr	r1, [pc, #152]	; (80157ec <etharp_find_entry+0x2e8>)
 8015754:	4823      	ldr	r0, [pc, #140]	; (80157e4 <etharp_find_entry+0x2e0>)
 8015756:	f002 fb39 	bl	8017dcc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801575a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801575e:	491e      	ldr	r1, [pc, #120]	; (80157d8 <etharp_find_entry+0x2d4>)
 8015760:	4613      	mov	r3, r2
 8015762:	005b      	lsls	r3, r3, #1
 8015764:	4413      	add	r3, r2
 8015766:	00db      	lsls	r3, r3, #3
 8015768:	440b      	add	r3, r1
 801576a:	3314      	adds	r3, #20
 801576c:	781b      	ldrb	r3, [r3, #0]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d006      	beq.n	8015780 <etharp_find_entry+0x27c>
 8015772:	4b1a      	ldr	r3, [pc, #104]	; (80157dc <etharp_find_entry+0x2d8>)
 8015774:	f240 1285 	movw	r2, #389	; 0x185
 8015778:	491d      	ldr	r1, [pc, #116]	; (80157f0 <etharp_find_entry+0x2ec>)
 801577a:	481a      	ldr	r0, [pc, #104]	; (80157e4 <etharp_find_entry+0x2e0>)
 801577c:	f002 fb26 	bl	8017dcc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	2b00      	cmp	r3, #0
 8015784:	d00b      	beq.n	801579e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015786:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	6819      	ldr	r1, [r3, #0]
 801578e:	4812      	ldr	r0, [pc, #72]	; (80157d8 <etharp_find_entry+0x2d4>)
 8015790:	4613      	mov	r3, r2
 8015792:	005b      	lsls	r3, r3, #1
 8015794:	4413      	add	r3, r2
 8015796:	00db      	lsls	r3, r3, #3
 8015798:	4403      	add	r3, r0
 801579a:	3304      	adds	r3, #4
 801579c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801579e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80157a2:	490d      	ldr	r1, [pc, #52]	; (80157d8 <etharp_find_entry+0x2d4>)
 80157a4:	4613      	mov	r3, r2
 80157a6:	005b      	lsls	r3, r3, #1
 80157a8:	4413      	add	r3, r2
 80157aa:	00db      	lsls	r3, r3, #3
 80157ac:	440b      	add	r3, r1
 80157ae:	3312      	adds	r3, #18
 80157b0:	2200      	movs	r2, #0
 80157b2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80157b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80157b8:	4907      	ldr	r1, [pc, #28]	; (80157d8 <etharp_find_entry+0x2d4>)
 80157ba:	4613      	mov	r3, r2
 80157bc:	005b      	lsls	r3, r3, #1
 80157be:	4413      	add	r3, r2
 80157c0:	00db      	lsls	r3, r3, #3
 80157c2:	440b      	add	r3, r1
 80157c4:	3308      	adds	r3, #8
 80157c6:	687a      	ldr	r2, [r7, #4]
 80157c8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80157ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80157ce:	4618      	mov	r0, r3
 80157d0:	3728      	adds	r7, #40	; 0x28
 80157d2:	46bd      	mov	sp, r7
 80157d4:	bd80      	pop	{r7, pc}
 80157d6:	bf00      	nop
 80157d8:	20008adc 	.word	0x20008adc
 80157dc:	0801c65c 	.word	0x0801c65c
 80157e0:	0801c694 	.word	0x0801c694
 80157e4:	0801c6d4 	.word	0x0801c6d4
 80157e8:	0801c6fc 	.word	0x0801c6fc
 80157ec:	0801c714 	.word	0x0801c714
 80157f0:	0801c728 	.word	0x0801c728

080157f4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80157f4:	b580      	push	{r7, lr}
 80157f6:	b088      	sub	sp, #32
 80157f8:	af02      	add	r7, sp, #8
 80157fa:	60f8      	str	r0, [r7, #12]
 80157fc:	60b9      	str	r1, [r7, #8]
 80157fe:	607a      	str	r2, [r7, #4]
 8015800:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015808:	2b06      	cmp	r3, #6
 801580a:	d006      	beq.n	801581a <etharp_update_arp_entry+0x26>
 801580c:	4b48      	ldr	r3, [pc, #288]	; (8015930 <etharp_update_arp_entry+0x13c>)
 801580e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015812:	4948      	ldr	r1, [pc, #288]	; (8015934 <etharp_update_arp_entry+0x140>)
 8015814:	4848      	ldr	r0, [pc, #288]	; (8015938 <etharp_update_arp_entry+0x144>)
 8015816:	f002 fad9 	bl	8017dcc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801581a:	68bb      	ldr	r3, [r7, #8]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d012      	beq.n	8015846 <etharp_update_arp_entry+0x52>
 8015820:	68bb      	ldr	r3, [r7, #8]
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d00e      	beq.n	8015846 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015828:	68bb      	ldr	r3, [r7, #8]
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	68f9      	ldr	r1, [r7, #12]
 801582e:	4618      	mov	r0, r3
 8015830:	f001 f91e 	bl	8016a70 <ip4_addr_isbroadcast_u32>
 8015834:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015836:	2b00      	cmp	r3, #0
 8015838:	d105      	bne.n	8015846 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801583a:	68bb      	ldr	r3, [r7, #8]
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015842:	2be0      	cmp	r3, #224	; 0xe0
 8015844:	d102      	bne.n	801584c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015846:	f06f 030f 	mvn.w	r3, #15
 801584a:	e06c      	b.n	8015926 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801584c:	78fb      	ldrb	r3, [r7, #3]
 801584e:	68fa      	ldr	r2, [r7, #12]
 8015850:	4619      	mov	r1, r3
 8015852:	68b8      	ldr	r0, [r7, #8]
 8015854:	f7ff fe56 	bl	8015504 <etharp_find_entry>
 8015858:	4603      	mov	r3, r0
 801585a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801585c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015860:	2b00      	cmp	r3, #0
 8015862:	da02      	bge.n	801586a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015864:	8afb      	ldrh	r3, [r7, #22]
 8015866:	b25b      	sxtb	r3, r3
 8015868:	e05d      	b.n	8015926 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801586a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801586e:	4933      	ldr	r1, [pc, #204]	; (801593c <etharp_update_arp_entry+0x148>)
 8015870:	4613      	mov	r3, r2
 8015872:	005b      	lsls	r3, r3, #1
 8015874:	4413      	add	r3, r2
 8015876:	00db      	lsls	r3, r3, #3
 8015878:	440b      	add	r3, r1
 801587a:	3314      	adds	r3, #20
 801587c:	2202      	movs	r2, #2
 801587e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015880:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015884:	492d      	ldr	r1, [pc, #180]	; (801593c <etharp_update_arp_entry+0x148>)
 8015886:	4613      	mov	r3, r2
 8015888:	005b      	lsls	r3, r3, #1
 801588a:	4413      	add	r3, r2
 801588c:	00db      	lsls	r3, r3, #3
 801588e:	440b      	add	r3, r1
 8015890:	3308      	adds	r3, #8
 8015892:	68fa      	ldr	r2, [r7, #12]
 8015894:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015896:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801589a:	4613      	mov	r3, r2
 801589c:	005b      	lsls	r3, r3, #1
 801589e:	4413      	add	r3, r2
 80158a0:	00db      	lsls	r3, r3, #3
 80158a2:	3308      	adds	r3, #8
 80158a4:	4a25      	ldr	r2, [pc, #148]	; (801593c <etharp_update_arp_entry+0x148>)
 80158a6:	4413      	add	r3, r2
 80158a8:	3304      	adds	r3, #4
 80158aa:	2206      	movs	r2, #6
 80158ac:	6879      	ldr	r1, [r7, #4]
 80158ae:	4618      	mov	r0, r3
 80158b0:	f002 fa5f 	bl	8017d72 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80158b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80158b8:	4920      	ldr	r1, [pc, #128]	; (801593c <etharp_update_arp_entry+0x148>)
 80158ba:	4613      	mov	r3, r2
 80158bc:	005b      	lsls	r3, r3, #1
 80158be:	4413      	add	r3, r2
 80158c0:	00db      	lsls	r3, r3, #3
 80158c2:	440b      	add	r3, r1
 80158c4:	3312      	adds	r3, #18
 80158c6:	2200      	movs	r2, #0
 80158c8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80158ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80158ce:	491b      	ldr	r1, [pc, #108]	; (801593c <etharp_update_arp_entry+0x148>)
 80158d0:	4613      	mov	r3, r2
 80158d2:	005b      	lsls	r3, r3, #1
 80158d4:	4413      	add	r3, r2
 80158d6:	00db      	lsls	r3, r3, #3
 80158d8:	440b      	add	r3, r1
 80158da:	681b      	ldr	r3, [r3, #0]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d021      	beq.n	8015924 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80158e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80158e4:	4915      	ldr	r1, [pc, #84]	; (801593c <etharp_update_arp_entry+0x148>)
 80158e6:	4613      	mov	r3, r2
 80158e8:	005b      	lsls	r3, r3, #1
 80158ea:	4413      	add	r3, r2
 80158ec:	00db      	lsls	r3, r3, #3
 80158ee:	440b      	add	r3, r1
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80158f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80158f8:	4910      	ldr	r1, [pc, #64]	; (801593c <etharp_update_arp_entry+0x148>)
 80158fa:	4613      	mov	r3, r2
 80158fc:	005b      	lsls	r3, r3, #1
 80158fe:	4413      	add	r3, r2
 8015900:	00db      	lsls	r3, r3, #3
 8015902:	440b      	add	r3, r1
 8015904:	2200      	movs	r2, #0
 8015906:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801590e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015912:	9300      	str	r3, [sp, #0]
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	6939      	ldr	r1, [r7, #16]
 8015918:	68f8      	ldr	r0, [r7, #12]
 801591a:	f001 ffad 	bl	8017878 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801591e:	6938      	ldr	r0, [r7, #16]
 8015920:	f7f6 fcd6 	bl	800c2d0 <pbuf_free>
  }
  return ERR_OK;
 8015924:	2300      	movs	r3, #0
}
 8015926:	4618      	mov	r0, r3
 8015928:	3718      	adds	r7, #24
 801592a:	46bd      	mov	sp, r7
 801592c:	bd80      	pop	{r7, pc}
 801592e:	bf00      	nop
 8015930:	0801c65c 	.word	0x0801c65c
 8015934:	0801c754 	.word	0x0801c754
 8015938:	0801c6d4 	.word	0x0801c6d4
 801593c:	20008adc 	.word	0x20008adc

08015940 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015940:	b580      	push	{r7, lr}
 8015942:	b084      	sub	sp, #16
 8015944:	af00      	add	r7, sp, #0
 8015946:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015948:	2300      	movs	r3, #0
 801594a:	60fb      	str	r3, [r7, #12]
 801594c:	e01e      	b.n	801598c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801594e:	4913      	ldr	r1, [pc, #76]	; (801599c <etharp_cleanup_netif+0x5c>)
 8015950:	68fa      	ldr	r2, [r7, #12]
 8015952:	4613      	mov	r3, r2
 8015954:	005b      	lsls	r3, r3, #1
 8015956:	4413      	add	r3, r2
 8015958:	00db      	lsls	r3, r3, #3
 801595a:	440b      	add	r3, r1
 801595c:	3314      	adds	r3, #20
 801595e:	781b      	ldrb	r3, [r3, #0]
 8015960:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015962:	7afb      	ldrb	r3, [r7, #11]
 8015964:	2b00      	cmp	r3, #0
 8015966:	d00e      	beq.n	8015986 <etharp_cleanup_netif+0x46>
 8015968:	490c      	ldr	r1, [pc, #48]	; (801599c <etharp_cleanup_netif+0x5c>)
 801596a:	68fa      	ldr	r2, [r7, #12]
 801596c:	4613      	mov	r3, r2
 801596e:	005b      	lsls	r3, r3, #1
 8015970:	4413      	add	r3, r2
 8015972:	00db      	lsls	r3, r3, #3
 8015974:	440b      	add	r3, r1
 8015976:	3308      	adds	r3, #8
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	687a      	ldr	r2, [r7, #4]
 801597c:	429a      	cmp	r2, r3
 801597e:	d102      	bne.n	8015986 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015980:	68f8      	ldr	r0, [r7, #12]
 8015982:	f7ff fce5 	bl	8015350 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	3301      	adds	r3, #1
 801598a:	60fb      	str	r3, [r7, #12]
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	2b09      	cmp	r3, #9
 8015990:	dddd      	ble.n	801594e <etharp_cleanup_netif+0xe>
    }
  }
}
 8015992:	bf00      	nop
 8015994:	3710      	adds	r7, #16
 8015996:	46bd      	mov	sp, r7
 8015998:	bd80      	pop	{r7, pc}
 801599a:	bf00      	nop
 801599c:	20008adc 	.word	0x20008adc

080159a0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80159a0:	b5b0      	push	{r4, r5, r7, lr}
 80159a2:	b08a      	sub	sp, #40	; 0x28
 80159a4:	af04      	add	r7, sp, #16
 80159a6:	6078      	str	r0, [r7, #4]
 80159a8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80159aa:	683b      	ldr	r3, [r7, #0]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d107      	bne.n	80159c0 <etharp_input+0x20>
 80159b0:	4b3f      	ldr	r3, [pc, #252]	; (8015ab0 <etharp_input+0x110>)
 80159b2:	f240 228a 	movw	r2, #650	; 0x28a
 80159b6:	493f      	ldr	r1, [pc, #252]	; (8015ab4 <etharp_input+0x114>)
 80159b8:	483f      	ldr	r0, [pc, #252]	; (8015ab8 <etharp_input+0x118>)
 80159ba:	f002 fa07 	bl	8017dcc <iprintf>
 80159be:	e074      	b.n	8015aaa <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	685b      	ldr	r3, [r3, #4]
 80159c4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80159c6:	693b      	ldr	r3, [r7, #16]
 80159c8:	881b      	ldrh	r3, [r3, #0]
 80159ca:	b29b      	uxth	r3, r3
 80159cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80159d0:	d10c      	bne.n	80159ec <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80159d2:	693b      	ldr	r3, [r7, #16]
 80159d4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80159d6:	2b06      	cmp	r3, #6
 80159d8:	d108      	bne.n	80159ec <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80159da:	693b      	ldr	r3, [r7, #16]
 80159dc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80159de:	2b04      	cmp	r3, #4
 80159e0:	d104      	bne.n	80159ec <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80159e2:	693b      	ldr	r3, [r7, #16]
 80159e4:	885b      	ldrh	r3, [r3, #2]
 80159e6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80159e8:	2b08      	cmp	r3, #8
 80159ea:	d003      	beq.n	80159f4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80159ec:	6878      	ldr	r0, [r7, #4]
 80159ee:	f7f6 fc6f 	bl	800c2d0 <pbuf_free>
    return;
 80159f2:	e05a      	b.n	8015aaa <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80159f4:	693b      	ldr	r3, [r7, #16]
 80159f6:	330e      	adds	r3, #14
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80159fc:	693b      	ldr	r3, [r7, #16]
 80159fe:	3318      	adds	r3, #24
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015a04:	683b      	ldr	r3, [r7, #0]
 8015a06:	3304      	adds	r3, #4
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d102      	bne.n	8015a14 <etharp_input+0x74>
    for_us = 0;
 8015a0e:	2300      	movs	r3, #0
 8015a10:	75fb      	strb	r3, [r7, #23]
 8015a12:	e009      	b.n	8015a28 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015a14:	68ba      	ldr	r2, [r7, #8]
 8015a16:	683b      	ldr	r3, [r7, #0]
 8015a18:	3304      	adds	r3, #4
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	429a      	cmp	r2, r3
 8015a1e:	bf0c      	ite	eq
 8015a20:	2301      	moveq	r3, #1
 8015a22:	2300      	movne	r3, #0
 8015a24:	b2db      	uxtb	r3, r3
 8015a26:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015a28:	693b      	ldr	r3, [r7, #16]
 8015a2a:	f103 0208 	add.w	r2, r3, #8
 8015a2e:	7dfb      	ldrb	r3, [r7, #23]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d001      	beq.n	8015a38 <etharp_input+0x98>
 8015a34:	2301      	movs	r3, #1
 8015a36:	e000      	b.n	8015a3a <etharp_input+0x9a>
 8015a38:	2302      	movs	r3, #2
 8015a3a:	f107 010c 	add.w	r1, r7, #12
 8015a3e:	6838      	ldr	r0, [r7, #0]
 8015a40:	f7ff fed8 	bl	80157f4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015a44:	693b      	ldr	r3, [r7, #16]
 8015a46:	88db      	ldrh	r3, [r3, #6]
 8015a48:	b29b      	uxth	r3, r3
 8015a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015a4e:	d003      	beq.n	8015a58 <etharp_input+0xb8>
 8015a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015a54:	d01e      	beq.n	8015a94 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015a56:	e025      	b.n	8015aa4 <etharp_input+0x104>
      if (for_us) {
 8015a58:	7dfb      	ldrb	r3, [r7, #23]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d021      	beq.n	8015aa2 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015a5e:	683b      	ldr	r3, [r7, #0]
 8015a60:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8015a64:	693b      	ldr	r3, [r7, #16]
 8015a66:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015a6a:	683b      	ldr	r3, [r7, #0]
 8015a6c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8015a70:	683b      	ldr	r3, [r7, #0]
 8015a72:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015a74:	693a      	ldr	r2, [r7, #16]
 8015a76:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015a78:	2102      	movs	r1, #2
 8015a7a:	9103      	str	r1, [sp, #12]
 8015a7c:	f107 010c 	add.w	r1, r7, #12
 8015a80:	9102      	str	r1, [sp, #8]
 8015a82:	9201      	str	r2, [sp, #4]
 8015a84:	9300      	str	r3, [sp, #0]
 8015a86:	462b      	mov	r3, r5
 8015a88:	4622      	mov	r2, r4
 8015a8a:	4601      	mov	r1, r0
 8015a8c:	6838      	ldr	r0, [r7, #0]
 8015a8e:	f000 faef 	bl	8016070 <etharp_raw>
      break;
 8015a92:	e006      	b.n	8015aa2 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8015a94:	f107 030c 	add.w	r3, r7, #12
 8015a98:	4619      	mov	r1, r3
 8015a9a:	6838      	ldr	r0, [r7, #0]
 8015a9c:	f7fe f9fe 	bl	8013e9c <dhcp_arp_reply>
      break;
 8015aa0:	e000      	b.n	8015aa4 <etharp_input+0x104>
      break;
 8015aa2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015aa4:	6878      	ldr	r0, [r7, #4]
 8015aa6:	f7f6 fc13 	bl	800c2d0 <pbuf_free>
}
 8015aaa:	3718      	adds	r7, #24
 8015aac:	46bd      	mov	sp, r7
 8015aae:	bdb0      	pop	{r4, r5, r7, pc}
 8015ab0:	0801c65c 	.word	0x0801c65c
 8015ab4:	0801c7ac 	.word	0x0801c7ac
 8015ab8:	0801c6d4 	.word	0x0801c6d4

08015abc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015abc:	b580      	push	{r7, lr}
 8015abe:	b086      	sub	sp, #24
 8015ac0:	af02      	add	r7, sp, #8
 8015ac2:	60f8      	str	r0, [r7, #12]
 8015ac4:	60b9      	str	r1, [r7, #8]
 8015ac6:	4613      	mov	r3, r2
 8015ac8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015aca:	79fa      	ldrb	r2, [r7, #7]
 8015acc:	4944      	ldr	r1, [pc, #272]	; (8015be0 <etharp_output_to_arp_index+0x124>)
 8015ace:	4613      	mov	r3, r2
 8015ad0:	005b      	lsls	r3, r3, #1
 8015ad2:	4413      	add	r3, r2
 8015ad4:	00db      	lsls	r3, r3, #3
 8015ad6:	440b      	add	r3, r1
 8015ad8:	3314      	adds	r3, #20
 8015ada:	781b      	ldrb	r3, [r3, #0]
 8015adc:	2b01      	cmp	r3, #1
 8015ade:	d806      	bhi.n	8015aee <etharp_output_to_arp_index+0x32>
 8015ae0:	4b40      	ldr	r3, [pc, #256]	; (8015be4 <etharp_output_to_arp_index+0x128>)
 8015ae2:	f240 22ef 	movw	r2, #751	; 0x2ef
 8015ae6:	4940      	ldr	r1, [pc, #256]	; (8015be8 <etharp_output_to_arp_index+0x12c>)
 8015ae8:	4840      	ldr	r0, [pc, #256]	; (8015bec <etharp_output_to_arp_index+0x130>)
 8015aea:	f002 f96f 	bl	8017dcc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015aee:	79fa      	ldrb	r2, [r7, #7]
 8015af0:	493b      	ldr	r1, [pc, #236]	; (8015be0 <etharp_output_to_arp_index+0x124>)
 8015af2:	4613      	mov	r3, r2
 8015af4:	005b      	lsls	r3, r3, #1
 8015af6:	4413      	add	r3, r2
 8015af8:	00db      	lsls	r3, r3, #3
 8015afa:	440b      	add	r3, r1
 8015afc:	3314      	adds	r3, #20
 8015afe:	781b      	ldrb	r3, [r3, #0]
 8015b00:	2b02      	cmp	r3, #2
 8015b02:	d153      	bne.n	8015bac <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015b04:	79fa      	ldrb	r2, [r7, #7]
 8015b06:	4936      	ldr	r1, [pc, #216]	; (8015be0 <etharp_output_to_arp_index+0x124>)
 8015b08:	4613      	mov	r3, r2
 8015b0a:	005b      	lsls	r3, r3, #1
 8015b0c:	4413      	add	r3, r2
 8015b0e:	00db      	lsls	r3, r3, #3
 8015b10:	440b      	add	r3, r1
 8015b12:	3312      	adds	r3, #18
 8015b14:	881b      	ldrh	r3, [r3, #0]
 8015b16:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015b1a:	d919      	bls.n	8015b50 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015b1c:	79fa      	ldrb	r2, [r7, #7]
 8015b1e:	4613      	mov	r3, r2
 8015b20:	005b      	lsls	r3, r3, #1
 8015b22:	4413      	add	r3, r2
 8015b24:	00db      	lsls	r3, r3, #3
 8015b26:	4a2e      	ldr	r2, [pc, #184]	; (8015be0 <etharp_output_to_arp_index+0x124>)
 8015b28:	4413      	add	r3, r2
 8015b2a:	3304      	adds	r3, #4
 8015b2c:	4619      	mov	r1, r3
 8015b2e:	68f8      	ldr	r0, [r7, #12]
 8015b30:	f000 fb4c 	bl	80161cc <etharp_request>
 8015b34:	4603      	mov	r3, r0
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d138      	bne.n	8015bac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015b3a:	79fa      	ldrb	r2, [r7, #7]
 8015b3c:	4928      	ldr	r1, [pc, #160]	; (8015be0 <etharp_output_to_arp_index+0x124>)
 8015b3e:	4613      	mov	r3, r2
 8015b40:	005b      	lsls	r3, r3, #1
 8015b42:	4413      	add	r3, r2
 8015b44:	00db      	lsls	r3, r3, #3
 8015b46:	440b      	add	r3, r1
 8015b48:	3314      	adds	r3, #20
 8015b4a:	2203      	movs	r2, #3
 8015b4c:	701a      	strb	r2, [r3, #0]
 8015b4e:	e02d      	b.n	8015bac <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015b50:	79fa      	ldrb	r2, [r7, #7]
 8015b52:	4923      	ldr	r1, [pc, #140]	; (8015be0 <etharp_output_to_arp_index+0x124>)
 8015b54:	4613      	mov	r3, r2
 8015b56:	005b      	lsls	r3, r3, #1
 8015b58:	4413      	add	r3, r2
 8015b5a:	00db      	lsls	r3, r3, #3
 8015b5c:	440b      	add	r3, r1
 8015b5e:	3312      	adds	r3, #18
 8015b60:	881b      	ldrh	r3, [r3, #0]
 8015b62:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015b66:	d321      	bcc.n	8015bac <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015b68:	79fa      	ldrb	r2, [r7, #7]
 8015b6a:	4613      	mov	r3, r2
 8015b6c:	005b      	lsls	r3, r3, #1
 8015b6e:	4413      	add	r3, r2
 8015b70:	00db      	lsls	r3, r3, #3
 8015b72:	4a1b      	ldr	r2, [pc, #108]	; (8015be0 <etharp_output_to_arp_index+0x124>)
 8015b74:	4413      	add	r3, r2
 8015b76:	1d19      	adds	r1, r3, #4
 8015b78:	79fa      	ldrb	r2, [r7, #7]
 8015b7a:	4613      	mov	r3, r2
 8015b7c:	005b      	lsls	r3, r3, #1
 8015b7e:	4413      	add	r3, r2
 8015b80:	00db      	lsls	r3, r3, #3
 8015b82:	3308      	adds	r3, #8
 8015b84:	4a16      	ldr	r2, [pc, #88]	; (8015be0 <etharp_output_to_arp_index+0x124>)
 8015b86:	4413      	add	r3, r2
 8015b88:	3304      	adds	r3, #4
 8015b8a:	461a      	mov	r2, r3
 8015b8c:	68f8      	ldr	r0, [r7, #12]
 8015b8e:	f000 fafb 	bl	8016188 <etharp_request_dst>
 8015b92:	4603      	mov	r3, r0
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d109      	bne.n	8015bac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015b98:	79fa      	ldrb	r2, [r7, #7]
 8015b9a:	4911      	ldr	r1, [pc, #68]	; (8015be0 <etharp_output_to_arp_index+0x124>)
 8015b9c:	4613      	mov	r3, r2
 8015b9e:	005b      	lsls	r3, r3, #1
 8015ba0:	4413      	add	r3, r2
 8015ba2:	00db      	lsls	r3, r3, #3
 8015ba4:	440b      	add	r3, r1
 8015ba6:	3314      	adds	r3, #20
 8015ba8:	2203      	movs	r2, #3
 8015baa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8015bb2:	79fa      	ldrb	r2, [r7, #7]
 8015bb4:	4613      	mov	r3, r2
 8015bb6:	005b      	lsls	r3, r3, #1
 8015bb8:	4413      	add	r3, r2
 8015bba:	00db      	lsls	r3, r3, #3
 8015bbc:	3308      	adds	r3, #8
 8015bbe:	4a08      	ldr	r2, [pc, #32]	; (8015be0 <etharp_output_to_arp_index+0x124>)
 8015bc0:	4413      	add	r3, r2
 8015bc2:	1d1a      	adds	r2, r3, #4
 8015bc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015bc8:	9300      	str	r3, [sp, #0]
 8015bca:	4613      	mov	r3, r2
 8015bcc:	460a      	mov	r2, r1
 8015bce:	68b9      	ldr	r1, [r7, #8]
 8015bd0:	68f8      	ldr	r0, [r7, #12]
 8015bd2:	f001 fe51 	bl	8017878 <ethernet_output>
 8015bd6:	4603      	mov	r3, r0
}
 8015bd8:	4618      	mov	r0, r3
 8015bda:	3710      	adds	r7, #16
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	bd80      	pop	{r7, pc}
 8015be0:	20008adc 	.word	0x20008adc
 8015be4:	0801c65c 	.word	0x0801c65c
 8015be8:	0801c7cc 	.word	0x0801c7cc
 8015bec:	0801c6d4 	.word	0x0801c6d4

08015bf0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b08a      	sub	sp, #40	; 0x28
 8015bf4:	af02      	add	r7, sp, #8
 8015bf6:	60f8      	str	r0, [r7, #12]
 8015bf8:	60b9      	str	r1, [r7, #8]
 8015bfa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d106      	bne.n	8015c14 <etharp_output+0x24>
 8015c06:	4b73      	ldr	r3, [pc, #460]	; (8015dd4 <etharp_output+0x1e4>)
 8015c08:	f240 321e 	movw	r2, #798	; 0x31e
 8015c0c:	4972      	ldr	r1, [pc, #456]	; (8015dd8 <etharp_output+0x1e8>)
 8015c0e:	4873      	ldr	r0, [pc, #460]	; (8015ddc <etharp_output+0x1ec>)
 8015c10:	f002 f8dc 	bl	8017dcc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015c14:	68bb      	ldr	r3, [r7, #8]
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d106      	bne.n	8015c28 <etharp_output+0x38>
 8015c1a:	4b6e      	ldr	r3, [pc, #440]	; (8015dd4 <etharp_output+0x1e4>)
 8015c1c:	f240 321f 	movw	r2, #799	; 0x31f
 8015c20:	496f      	ldr	r1, [pc, #444]	; (8015de0 <etharp_output+0x1f0>)
 8015c22:	486e      	ldr	r0, [pc, #440]	; (8015ddc <etharp_output+0x1ec>)
 8015c24:	f002 f8d2 	bl	8017dcc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d106      	bne.n	8015c3c <etharp_output+0x4c>
 8015c2e:	4b69      	ldr	r3, [pc, #420]	; (8015dd4 <etharp_output+0x1e4>)
 8015c30:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015c34:	496b      	ldr	r1, [pc, #428]	; (8015de4 <etharp_output+0x1f4>)
 8015c36:	4869      	ldr	r0, [pc, #420]	; (8015ddc <etharp_output+0x1ec>)
 8015c38:	f002 f8c8 	bl	8017dcc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	68f9      	ldr	r1, [r7, #12]
 8015c42:	4618      	mov	r0, r3
 8015c44:	f000 ff14 	bl	8016a70 <ip4_addr_isbroadcast_u32>
 8015c48:	4603      	mov	r3, r0
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d002      	beq.n	8015c54 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015c4e:	4b66      	ldr	r3, [pc, #408]	; (8015de8 <etharp_output+0x1f8>)
 8015c50:	61fb      	str	r3, [r7, #28]
 8015c52:	e0af      	b.n	8015db4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015c5c:	2be0      	cmp	r3, #224	; 0xe0
 8015c5e:	d118      	bne.n	8015c92 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015c60:	2301      	movs	r3, #1
 8015c62:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015c64:	2300      	movs	r3, #0
 8015c66:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015c68:	235e      	movs	r3, #94	; 0x5e
 8015c6a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	3301      	adds	r3, #1
 8015c70:	781b      	ldrb	r3, [r3, #0]
 8015c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015c76:	b2db      	uxtb	r3, r3
 8015c78:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	3302      	adds	r3, #2
 8015c7e:	781b      	ldrb	r3, [r3, #0]
 8015c80:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	3303      	adds	r3, #3
 8015c86:	781b      	ldrb	r3, [r3, #0]
 8015c88:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015c8a:	f107 0310 	add.w	r3, r7, #16
 8015c8e:	61fb      	str	r3, [r7, #28]
 8015c90:	e090      	b.n	8015db4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	681a      	ldr	r2, [r3, #0]
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	3304      	adds	r3, #4
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	405a      	eors	r2, r3
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	3308      	adds	r3, #8
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	4013      	ands	r3, r2
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d012      	beq.n	8015cd0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	681b      	ldr	r3, [r3, #0]
 8015cae:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015cb0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015cb4:	4293      	cmp	r3, r2
 8015cb6:	d00b      	beq.n	8015cd0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	330c      	adds	r3, #12
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d003      	beq.n	8015cca <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	330c      	adds	r3, #12
 8015cc6:	61bb      	str	r3, [r7, #24]
 8015cc8:	e002      	b.n	8015cd0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015cca:	f06f 0303 	mvn.w	r3, #3
 8015cce:	e07d      	b.n	8015dcc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015cd0:	4b46      	ldr	r3, [pc, #280]	; (8015dec <etharp_output+0x1fc>)
 8015cd2:	781b      	ldrb	r3, [r3, #0]
 8015cd4:	4619      	mov	r1, r3
 8015cd6:	4a46      	ldr	r2, [pc, #280]	; (8015df0 <etharp_output+0x200>)
 8015cd8:	460b      	mov	r3, r1
 8015cda:	005b      	lsls	r3, r3, #1
 8015cdc:	440b      	add	r3, r1
 8015cde:	00db      	lsls	r3, r3, #3
 8015ce0:	4413      	add	r3, r2
 8015ce2:	3314      	adds	r3, #20
 8015ce4:	781b      	ldrb	r3, [r3, #0]
 8015ce6:	2b01      	cmp	r3, #1
 8015ce8:	d925      	bls.n	8015d36 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015cea:	4b40      	ldr	r3, [pc, #256]	; (8015dec <etharp_output+0x1fc>)
 8015cec:	781b      	ldrb	r3, [r3, #0]
 8015cee:	4619      	mov	r1, r3
 8015cf0:	4a3f      	ldr	r2, [pc, #252]	; (8015df0 <etharp_output+0x200>)
 8015cf2:	460b      	mov	r3, r1
 8015cf4:	005b      	lsls	r3, r3, #1
 8015cf6:	440b      	add	r3, r1
 8015cf8:	00db      	lsls	r3, r3, #3
 8015cfa:	4413      	add	r3, r2
 8015cfc:	3308      	adds	r3, #8
 8015cfe:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015d00:	68fa      	ldr	r2, [r7, #12]
 8015d02:	429a      	cmp	r2, r3
 8015d04:	d117      	bne.n	8015d36 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015d06:	69bb      	ldr	r3, [r7, #24]
 8015d08:	681a      	ldr	r2, [r3, #0]
 8015d0a:	4b38      	ldr	r3, [pc, #224]	; (8015dec <etharp_output+0x1fc>)
 8015d0c:	781b      	ldrb	r3, [r3, #0]
 8015d0e:	4618      	mov	r0, r3
 8015d10:	4937      	ldr	r1, [pc, #220]	; (8015df0 <etharp_output+0x200>)
 8015d12:	4603      	mov	r3, r0
 8015d14:	005b      	lsls	r3, r3, #1
 8015d16:	4403      	add	r3, r0
 8015d18:	00db      	lsls	r3, r3, #3
 8015d1a:	440b      	add	r3, r1
 8015d1c:	3304      	adds	r3, #4
 8015d1e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015d20:	429a      	cmp	r2, r3
 8015d22:	d108      	bne.n	8015d36 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015d24:	4b31      	ldr	r3, [pc, #196]	; (8015dec <etharp_output+0x1fc>)
 8015d26:	781b      	ldrb	r3, [r3, #0]
 8015d28:	461a      	mov	r2, r3
 8015d2a:	68b9      	ldr	r1, [r7, #8]
 8015d2c:	68f8      	ldr	r0, [r7, #12]
 8015d2e:	f7ff fec5 	bl	8015abc <etharp_output_to_arp_index>
 8015d32:	4603      	mov	r3, r0
 8015d34:	e04a      	b.n	8015dcc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015d36:	2300      	movs	r3, #0
 8015d38:	75fb      	strb	r3, [r7, #23]
 8015d3a:	e031      	b.n	8015da0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015d3c:	7dfa      	ldrb	r2, [r7, #23]
 8015d3e:	492c      	ldr	r1, [pc, #176]	; (8015df0 <etharp_output+0x200>)
 8015d40:	4613      	mov	r3, r2
 8015d42:	005b      	lsls	r3, r3, #1
 8015d44:	4413      	add	r3, r2
 8015d46:	00db      	lsls	r3, r3, #3
 8015d48:	440b      	add	r3, r1
 8015d4a:	3314      	adds	r3, #20
 8015d4c:	781b      	ldrb	r3, [r3, #0]
 8015d4e:	2b01      	cmp	r3, #1
 8015d50:	d923      	bls.n	8015d9a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015d52:	7dfa      	ldrb	r2, [r7, #23]
 8015d54:	4926      	ldr	r1, [pc, #152]	; (8015df0 <etharp_output+0x200>)
 8015d56:	4613      	mov	r3, r2
 8015d58:	005b      	lsls	r3, r3, #1
 8015d5a:	4413      	add	r3, r2
 8015d5c:	00db      	lsls	r3, r3, #3
 8015d5e:	440b      	add	r3, r1
 8015d60:	3308      	adds	r3, #8
 8015d62:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015d64:	68fa      	ldr	r2, [r7, #12]
 8015d66:	429a      	cmp	r2, r3
 8015d68:	d117      	bne.n	8015d9a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015d6a:	69bb      	ldr	r3, [r7, #24]
 8015d6c:	6819      	ldr	r1, [r3, #0]
 8015d6e:	7dfa      	ldrb	r2, [r7, #23]
 8015d70:	481f      	ldr	r0, [pc, #124]	; (8015df0 <etharp_output+0x200>)
 8015d72:	4613      	mov	r3, r2
 8015d74:	005b      	lsls	r3, r3, #1
 8015d76:	4413      	add	r3, r2
 8015d78:	00db      	lsls	r3, r3, #3
 8015d7a:	4403      	add	r3, r0
 8015d7c:	3304      	adds	r3, #4
 8015d7e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015d80:	4299      	cmp	r1, r3
 8015d82:	d10a      	bne.n	8015d9a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015d84:	4a19      	ldr	r2, [pc, #100]	; (8015dec <etharp_output+0x1fc>)
 8015d86:	7dfb      	ldrb	r3, [r7, #23]
 8015d88:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015d8a:	7dfb      	ldrb	r3, [r7, #23]
 8015d8c:	461a      	mov	r2, r3
 8015d8e:	68b9      	ldr	r1, [r7, #8]
 8015d90:	68f8      	ldr	r0, [r7, #12]
 8015d92:	f7ff fe93 	bl	8015abc <etharp_output_to_arp_index>
 8015d96:	4603      	mov	r3, r0
 8015d98:	e018      	b.n	8015dcc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015d9a:	7dfb      	ldrb	r3, [r7, #23]
 8015d9c:	3301      	adds	r3, #1
 8015d9e:	75fb      	strb	r3, [r7, #23]
 8015da0:	7dfb      	ldrb	r3, [r7, #23]
 8015da2:	2b09      	cmp	r3, #9
 8015da4:	d9ca      	bls.n	8015d3c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015da6:	68ba      	ldr	r2, [r7, #8]
 8015da8:	69b9      	ldr	r1, [r7, #24]
 8015daa:	68f8      	ldr	r0, [r7, #12]
 8015dac:	f000 f822 	bl	8015df4 <etharp_query>
 8015db0:	4603      	mov	r3, r0
 8015db2:	e00b      	b.n	8015dcc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8015dba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015dbe:	9300      	str	r3, [sp, #0]
 8015dc0:	69fb      	ldr	r3, [r7, #28]
 8015dc2:	68b9      	ldr	r1, [r7, #8]
 8015dc4:	68f8      	ldr	r0, [r7, #12]
 8015dc6:	f001 fd57 	bl	8017878 <ethernet_output>
 8015dca:	4603      	mov	r3, r0
}
 8015dcc:	4618      	mov	r0, r3
 8015dce:	3720      	adds	r7, #32
 8015dd0:	46bd      	mov	sp, r7
 8015dd2:	bd80      	pop	{r7, pc}
 8015dd4:	0801c65c 	.word	0x0801c65c
 8015dd8:	0801c7ac 	.word	0x0801c7ac
 8015ddc:	0801c6d4 	.word	0x0801c6d4
 8015de0:	0801c7fc 	.word	0x0801c7fc
 8015de4:	0801c79c 	.word	0x0801c79c
 8015de8:	08026f9c 	.word	0x08026f9c
 8015dec:	20008bcc 	.word	0x20008bcc
 8015df0:	20008adc 	.word	0x20008adc

08015df4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015df4:	b580      	push	{r7, lr}
 8015df6:	b08c      	sub	sp, #48	; 0x30
 8015df8:	af02      	add	r7, sp, #8
 8015dfa:	60f8      	str	r0, [r7, #12]
 8015dfc:	60b9      	str	r1, [r7, #8]
 8015dfe:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	332a      	adds	r3, #42	; 0x2a
 8015e04:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015e06:	23ff      	movs	r3, #255	; 0xff
 8015e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015e0c:	2300      	movs	r3, #0
 8015e0e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015e10:	68bb      	ldr	r3, [r7, #8]
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	68f9      	ldr	r1, [r7, #12]
 8015e16:	4618      	mov	r0, r3
 8015e18:	f000 fe2a 	bl	8016a70 <ip4_addr_isbroadcast_u32>
 8015e1c:	4603      	mov	r3, r0
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d10c      	bne.n	8015e3c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015e22:	68bb      	ldr	r3, [r7, #8]
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015e2a:	2be0      	cmp	r3, #224	; 0xe0
 8015e2c:	d006      	beq.n	8015e3c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015e2e:	68bb      	ldr	r3, [r7, #8]
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d003      	beq.n	8015e3c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015e34:	68bb      	ldr	r3, [r7, #8]
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d102      	bne.n	8015e42 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015e3c:	f06f 030f 	mvn.w	r3, #15
 8015e40:	e102      	b.n	8016048 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015e42:	68fa      	ldr	r2, [r7, #12]
 8015e44:	2101      	movs	r1, #1
 8015e46:	68b8      	ldr	r0, [r7, #8]
 8015e48:	f7ff fb5c 	bl	8015504 <etharp_find_entry>
 8015e4c:	4603      	mov	r3, r0
 8015e4e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015e50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	da02      	bge.n	8015e5e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015e58:	8a7b      	ldrh	r3, [r7, #18]
 8015e5a:	b25b      	sxtb	r3, r3
 8015e5c:	e0f4      	b.n	8016048 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015e5e:	8a7b      	ldrh	r3, [r7, #18]
 8015e60:	2b7e      	cmp	r3, #126	; 0x7e
 8015e62:	d906      	bls.n	8015e72 <etharp_query+0x7e>
 8015e64:	4b7a      	ldr	r3, [pc, #488]	; (8016050 <etharp_query+0x25c>)
 8015e66:	f240 32c1 	movw	r2, #961	; 0x3c1
 8015e6a:	497a      	ldr	r1, [pc, #488]	; (8016054 <etharp_query+0x260>)
 8015e6c:	487a      	ldr	r0, [pc, #488]	; (8016058 <etharp_query+0x264>)
 8015e6e:	f001 ffad 	bl	8017dcc <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015e72:	8a7b      	ldrh	r3, [r7, #18]
 8015e74:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015e76:	7c7a      	ldrb	r2, [r7, #17]
 8015e78:	4978      	ldr	r1, [pc, #480]	; (801605c <etharp_query+0x268>)
 8015e7a:	4613      	mov	r3, r2
 8015e7c:	005b      	lsls	r3, r3, #1
 8015e7e:	4413      	add	r3, r2
 8015e80:	00db      	lsls	r3, r3, #3
 8015e82:	440b      	add	r3, r1
 8015e84:	3314      	adds	r3, #20
 8015e86:	781b      	ldrb	r3, [r3, #0]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d115      	bne.n	8015eb8 <etharp_query+0xc4>
    is_new_entry = 1;
 8015e8c:	2301      	movs	r3, #1
 8015e8e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015e90:	7c7a      	ldrb	r2, [r7, #17]
 8015e92:	4972      	ldr	r1, [pc, #456]	; (801605c <etharp_query+0x268>)
 8015e94:	4613      	mov	r3, r2
 8015e96:	005b      	lsls	r3, r3, #1
 8015e98:	4413      	add	r3, r2
 8015e9a:	00db      	lsls	r3, r3, #3
 8015e9c:	440b      	add	r3, r1
 8015e9e:	3314      	adds	r3, #20
 8015ea0:	2201      	movs	r2, #1
 8015ea2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015ea4:	7c7a      	ldrb	r2, [r7, #17]
 8015ea6:	496d      	ldr	r1, [pc, #436]	; (801605c <etharp_query+0x268>)
 8015ea8:	4613      	mov	r3, r2
 8015eaa:	005b      	lsls	r3, r3, #1
 8015eac:	4413      	add	r3, r2
 8015eae:	00db      	lsls	r3, r3, #3
 8015eb0:	440b      	add	r3, r1
 8015eb2:	3308      	adds	r3, #8
 8015eb4:	68fa      	ldr	r2, [r7, #12]
 8015eb6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015eb8:	7c7a      	ldrb	r2, [r7, #17]
 8015eba:	4968      	ldr	r1, [pc, #416]	; (801605c <etharp_query+0x268>)
 8015ebc:	4613      	mov	r3, r2
 8015ebe:	005b      	lsls	r3, r3, #1
 8015ec0:	4413      	add	r3, r2
 8015ec2:	00db      	lsls	r3, r3, #3
 8015ec4:	440b      	add	r3, r1
 8015ec6:	3314      	adds	r3, #20
 8015ec8:	781b      	ldrb	r3, [r3, #0]
 8015eca:	2b01      	cmp	r3, #1
 8015ecc:	d011      	beq.n	8015ef2 <etharp_query+0xfe>
 8015ece:	7c7a      	ldrb	r2, [r7, #17]
 8015ed0:	4962      	ldr	r1, [pc, #392]	; (801605c <etharp_query+0x268>)
 8015ed2:	4613      	mov	r3, r2
 8015ed4:	005b      	lsls	r3, r3, #1
 8015ed6:	4413      	add	r3, r2
 8015ed8:	00db      	lsls	r3, r3, #3
 8015eda:	440b      	add	r3, r1
 8015edc:	3314      	adds	r3, #20
 8015ede:	781b      	ldrb	r3, [r3, #0]
 8015ee0:	2b01      	cmp	r3, #1
 8015ee2:	d806      	bhi.n	8015ef2 <etharp_query+0xfe>
 8015ee4:	4b5a      	ldr	r3, [pc, #360]	; (8016050 <etharp_query+0x25c>)
 8015ee6:	f240 32cf 	movw	r2, #975	; 0x3cf
 8015eea:	495d      	ldr	r1, [pc, #372]	; (8016060 <etharp_query+0x26c>)
 8015eec:	485a      	ldr	r0, [pc, #360]	; (8016058 <etharp_query+0x264>)
 8015eee:	f001 ff6d 	bl	8017dcc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015ef2:	6a3b      	ldr	r3, [r7, #32]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d102      	bne.n	8015efe <etharp_query+0x10a>
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d10c      	bne.n	8015f18 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015efe:	68b9      	ldr	r1, [r7, #8]
 8015f00:	68f8      	ldr	r0, [r7, #12]
 8015f02:	f000 f963 	bl	80161cc <etharp_request>
 8015f06:	4603      	mov	r3, r0
 8015f08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d102      	bne.n	8015f18 <etharp_query+0x124>
      return result;
 8015f12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015f16:	e097      	b.n	8016048 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d106      	bne.n	8015f2c <etharp_query+0x138>
 8015f1e:	4b4c      	ldr	r3, [pc, #304]	; (8016050 <etharp_query+0x25c>)
 8015f20:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015f24:	494f      	ldr	r1, [pc, #316]	; (8016064 <etharp_query+0x270>)
 8015f26:	484c      	ldr	r0, [pc, #304]	; (8016058 <etharp_query+0x264>)
 8015f28:	f001 ff50 	bl	8017dcc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015f2c:	7c7a      	ldrb	r2, [r7, #17]
 8015f2e:	494b      	ldr	r1, [pc, #300]	; (801605c <etharp_query+0x268>)
 8015f30:	4613      	mov	r3, r2
 8015f32:	005b      	lsls	r3, r3, #1
 8015f34:	4413      	add	r3, r2
 8015f36:	00db      	lsls	r3, r3, #3
 8015f38:	440b      	add	r3, r1
 8015f3a:	3314      	adds	r3, #20
 8015f3c:	781b      	ldrb	r3, [r3, #0]
 8015f3e:	2b01      	cmp	r3, #1
 8015f40:	d918      	bls.n	8015f74 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015f42:	4a49      	ldr	r2, [pc, #292]	; (8016068 <etharp_query+0x274>)
 8015f44:	7c7b      	ldrb	r3, [r7, #17]
 8015f46:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015f48:	7c7a      	ldrb	r2, [r7, #17]
 8015f4a:	4613      	mov	r3, r2
 8015f4c:	005b      	lsls	r3, r3, #1
 8015f4e:	4413      	add	r3, r2
 8015f50:	00db      	lsls	r3, r3, #3
 8015f52:	3308      	adds	r3, #8
 8015f54:	4a41      	ldr	r2, [pc, #260]	; (801605c <etharp_query+0x268>)
 8015f56:	4413      	add	r3, r2
 8015f58:	1d1a      	adds	r2, r3, #4
 8015f5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015f5e:	9300      	str	r3, [sp, #0]
 8015f60:	4613      	mov	r3, r2
 8015f62:	697a      	ldr	r2, [r7, #20]
 8015f64:	6879      	ldr	r1, [r7, #4]
 8015f66:	68f8      	ldr	r0, [r7, #12]
 8015f68:	f001 fc86 	bl	8017878 <ethernet_output>
 8015f6c:	4603      	mov	r3, r0
 8015f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015f72:	e067      	b.n	8016044 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015f74:	7c7a      	ldrb	r2, [r7, #17]
 8015f76:	4939      	ldr	r1, [pc, #228]	; (801605c <etharp_query+0x268>)
 8015f78:	4613      	mov	r3, r2
 8015f7a:	005b      	lsls	r3, r3, #1
 8015f7c:	4413      	add	r3, r2
 8015f7e:	00db      	lsls	r3, r3, #3
 8015f80:	440b      	add	r3, r1
 8015f82:	3314      	adds	r3, #20
 8015f84:	781b      	ldrb	r3, [r3, #0]
 8015f86:	2b01      	cmp	r3, #1
 8015f88:	d15c      	bne.n	8016044 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015f92:	e01c      	b.n	8015fce <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015f94:	69fb      	ldr	r3, [r7, #28]
 8015f96:	895a      	ldrh	r2, [r3, #10]
 8015f98:	69fb      	ldr	r3, [r7, #28]
 8015f9a:	891b      	ldrh	r3, [r3, #8]
 8015f9c:	429a      	cmp	r2, r3
 8015f9e:	d10a      	bne.n	8015fb6 <etharp_query+0x1c2>
 8015fa0:	69fb      	ldr	r3, [r7, #28]
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d006      	beq.n	8015fb6 <etharp_query+0x1c2>
 8015fa8:	4b29      	ldr	r3, [pc, #164]	; (8016050 <etharp_query+0x25c>)
 8015faa:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015fae:	492f      	ldr	r1, [pc, #188]	; (801606c <etharp_query+0x278>)
 8015fb0:	4829      	ldr	r0, [pc, #164]	; (8016058 <etharp_query+0x264>)
 8015fb2:	f001 ff0b 	bl	8017dcc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015fb6:	69fb      	ldr	r3, [r7, #28]
 8015fb8:	7b1b      	ldrb	r3, [r3, #12]
 8015fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d002      	beq.n	8015fc8 <etharp_query+0x1d4>
        copy_needed = 1;
 8015fc2:	2301      	movs	r3, #1
 8015fc4:	61bb      	str	r3, [r7, #24]
        break;
 8015fc6:	e005      	b.n	8015fd4 <etharp_query+0x1e0>
      }
      p = p->next;
 8015fc8:	69fb      	ldr	r3, [r7, #28]
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015fce:	69fb      	ldr	r3, [r7, #28]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d1df      	bne.n	8015f94 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8015fd4:	69bb      	ldr	r3, [r7, #24]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d007      	beq.n	8015fea <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015fda:	687a      	ldr	r2, [r7, #4]
 8015fdc:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015fe0:	200e      	movs	r0, #14
 8015fe2:	f7f6 fbed 	bl	800c7c0 <pbuf_clone>
 8015fe6:	61f8      	str	r0, [r7, #28]
 8015fe8:	e004      	b.n	8015ff4 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015fee:	69f8      	ldr	r0, [r7, #28]
 8015ff0:	f7f6 fa14 	bl	800c41c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015ff4:	69fb      	ldr	r3, [r7, #28]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d021      	beq.n	801603e <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015ffa:	7c7a      	ldrb	r2, [r7, #17]
 8015ffc:	4917      	ldr	r1, [pc, #92]	; (801605c <etharp_query+0x268>)
 8015ffe:	4613      	mov	r3, r2
 8016000:	005b      	lsls	r3, r3, #1
 8016002:	4413      	add	r3, r2
 8016004:	00db      	lsls	r3, r3, #3
 8016006:	440b      	add	r3, r1
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d00a      	beq.n	8016024 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801600e:	7c7a      	ldrb	r2, [r7, #17]
 8016010:	4912      	ldr	r1, [pc, #72]	; (801605c <etharp_query+0x268>)
 8016012:	4613      	mov	r3, r2
 8016014:	005b      	lsls	r3, r3, #1
 8016016:	4413      	add	r3, r2
 8016018:	00db      	lsls	r3, r3, #3
 801601a:	440b      	add	r3, r1
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	4618      	mov	r0, r3
 8016020:	f7f6 f956 	bl	800c2d0 <pbuf_free>
      }
      arp_table[i].q = p;
 8016024:	7c7a      	ldrb	r2, [r7, #17]
 8016026:	490d      	ldr	r1, [pc, #52]	; (801605c <etharp_query+0x268>)
 8016028:	4613      	mov	r3, r2
 801602a:	005b      	lsls	r3, r3, #1
 801602c:	4413      	add	r3, r2
 801602e:	00db      	lsls	r3, r3, #3
 8016030:	440b      	add	r3, r1
 8016032:	69fa      	ldr	r2, [r7, #28]
 8016034:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016036:	2300      	movs	r3, #0
 8016038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801603c:	e002      	b.n	8016044 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801603e:	23ff      	movs	r3, #255	; 0xff
 8016040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016044:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016048:	4618      	mov	r0, r3
 801604a:	3728      	adds	r7, #40	; 0x28
 801604c:	46bd      	mov	sp, r7
 801604e:	bd80      	pop	{r7, pc}
 8016050:	0801c65c 	.word	0x0801c65c
 8016054:	0801c808 	.word	0x0801c808
 8016058:	0801c6d4 	.word	0x0801c6d4
 801605c:	20008adc 	.word	0x20008adc
 8016060:	0801c818 	.word	0x0801c818
 8016064:	0801c7fc 	.word	0x0801c7fc
 8016068:	20008bcc 	.word	0x20008bcc
 801606c:	0801c840 	.word	0x0801c840

08016070 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016070:	b580      	push	{r7, lr}
 8016072:	b08a      	sub	sp, #40	; 0x28
 8016074:	af02      	add	r7, sp, #8
 8016076:	60f8      	str	r0, [r7, #12]
 8016078:	60b9      	str	r1, [r7, #8]
 801607a:	607a      	str	r2, [r7, #4]
 801607c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801607e:	2300      	movs	r3, #0
 8016080:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	2b00      	cmp	r3, #0
 8016086:	d106      	bne.n	8016096 <etharp_raw+0x26>
 8016088:	4b3a      	ldr	r3, [pc, #232]	; (8016174 <etharp_raw+0x104>)
 801608a:	f240 4257 	movw	r2, #1111	; 0x457
 801608e:	493a      	ldr	r1, [pc, #232]	; (8016178 <etharp_raw+0x108>)
 8016090:	483a      	ldr	r0, [pc, #232]	; (801617c <etharp_raw+0x10c>)
 8016092:	f001 fe9b 	bl	8017dcc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016096:	f44f 7220 	mov.w	r2, #640	; 0x280
 801609a:	211c      	movs	r1, #28
 801609c:	200e      	movs	r0, #14
 801609e:	f7f5 fe37 	bl	800bd10 <pbuf_alloc>
 80160a2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80160a4:	69bb      	ldr	r3, [r7, #24]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d102      	bne.n	80160b0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80160aa:	f04f 33ff 	mov.w	r3, #4294967295
 80160ae:	e05d      	b.n	801616c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80160b0:	69bb      	ldr	r3, [r7, #24]
 80160b2:	895b      	ldrh	r3, [r3, #10]
 80160b4:	2b1b      	cmp	r3, #27
 80160b6:	d806      	bhi.n	80160c6 <etharp_raw+0x56>
 80160b8:	4b2e      	ldr	r3, [pc, #184]	; (8016174 <etharp_raw+0x104>)
 80160ba:	f240 4263 	movw	r2, #1123	; 0x463
 80160be:	4930      	ldr	r1, [pc, #192]	; (8016180 <etharp_raw+0x110>)
 80160c0:	482e      	ldr	r0, [pc, #184]	; (801617c <etharp_raw+0x10c>)
 80160c2:	f001 fe83 	bl	8017dcc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80160c6:	69bb      	ldr	r3, [r7, #24]
 80160c8:	685b      	ldr	r3, [r3, #4]
 80160ca:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80160cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80160ce:	4618      	mov	r0, r3
 80160d0:	f7f4 fd14 	bl	800aafc <lwip_htons>
 80160d4:	4603      	mov	r3, r0
 80160d6:	461a      	mov	r2, r3
 80160d8:	697b      	ldr	r3, [r7, #20]
 80160da:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80160e2:	2b06      	cmp	r3, #6
 80160e4:	d006      	beq.n	80160f4 <etharp_raw+0x84>
 80160e6:	4b23      	ldr	r3, [pc, #140]	; (8016174 <etharp_raw+0x104>)
 80160e8:	f240 426a 	movw	r2, #1130	; 0x46a
 80160ec:	4925      	ldr	r1, [pc, #148]	; (8016184 <etharp_raw+0x114>)
 80160ee:	4823      	ldr	r0, [pc, #140]	; (801617c <etharp_raw+0x10c>)
 80160f0:	f001 fe6c 	bl	8017dcc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80160f4:	697b      	ldr	r3, [r7, #20]
 80160f6:	3308      	adds	r3, #8
 80160f8:	2206      	movs	r2, #6
 80160fa:	6839      	ldr	r1, [r7, #0]
 80160fc:	4618      	mov	r0, r3
 80160fe:	f001 fe38 	bl	8017d72 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016102:	697b      	ldr	r3, [r7, #20]
 8016104:	3312      	adds	r3, #18
 8016106:	2206      	movs	r2, #6
 8016108:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801610a:	4618      	mov	r0, r3
 801610c:	f001 fe31 	bl	8017d72 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016110:	697b      	ldr	r3, [r7, #20]
 8016112:	330e      	adds	r3, #14
 8016114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016116:	6812      	ldr	r2, [r2, #0]
 8016118:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801611a:	697b      	ldr	r3, [r7, #20]
 801611c:	3318      	adds	r3, #24
 801611e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016120:	6812      	ldr	r2, [r2, #0]
 8016122:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016124:	697b      	ldr	r3, [r7, #20]
 8016126:	2200      	movs	r2, #0
 8016128:	701a      	strb	r2, [r3, #0]
 801612a:	2200      	movs	r2, #0
 801612c:	f042 0201 	orr.w	r2, r2, #1
 8016130:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016132:	697b      	ldr	r3, [r7, #20]
 8016134:	2200      	movs	r2, #0
 8016136:	f042 0208 	orr.w	r2, r2, #8
 801613a:	709a      	strb	r2, [r3, #2]
 801613c:	2200      	movs	r2, #0
 801613e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016140:	697b      	ldr	r3, [r7, #20]
 8016142:	2206      	movs	r2, #6
 8016144:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016146:	697b      	ldr	r3, [r7, #20]
 8016148:	2204      	movs	r2, #4
 801614a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801614c:	f640 0306 	movw	r3, #2054	; 0x806
 8016150:	9300      	str	r3, [sp, #0]
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	68ba      	ldr	r2, [r7, #8]
 8016156:	69b9      	ldr	r1, [r7, #24]
 8016158:	68f8      	ldr	r0, [r7, #12]
 801615a:	f001 fb8d 	bl	8017878 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801615e:	69b8      	ldr	r0, [r7, #24]
 8016160:	f7f6 f8b6 	bl	800c2d0 <pbuf_free>
  p = NULL;
 8016164:	2300      	movs	r3, #0
 8016166:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016168:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801616c:	4618      	mov	r0, r3
 801616e:	3720      	adds	r7, #32
 8016170:	46bd      	mov	sp, r7
 8016172:	bd80      	pop	{r7, pc}
 8016174:	0801c65c 	.word	0x0801c65c
 8016178:	0801c7ac 	.word	0x0801c7ac
 801617c:	0801c6d4 	.word	0x0801c6d4
 8016180:	0801c85c 	.word	0x0801c85c
 8016184:	0801c890 	.word	0x0801c890

08016188 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016188:	b580      	push	{r7, lr}
 801618a:	b088      	sub	sp, #32
 801618c:	af04      	add	r7, sp, #16
 801618e:	60f8      	str	r0, [r7, #12]
 8016190:	60b9      	str	r1, [r7, #8]
 8016192:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80161a4:	2201      	movs	r2, #1
 80161a6:	9203      	str	r2, [sp, #12]
 80161a8:	68ba      	ldr	r2, [r7, #8]
 80161aa:	9202      	str	r2, [sp, #8]
 80161ac:	4a06      	ldr	r2, [pc, #24]	; (80161c8 <etharp_request_dst+0x40>)
 80161ae:	9201      	str	r2, [sp, #4]
 80161b0:	9300      	str	r3, [sp, #0]
 80161b2:	4603      	mov	r3, r0
 80161b4:	687a      	ldr	r2, [r7, #4]
 80161b6:	68f8      	ldr	r0, [r7, #12]
 80161b8:	f7ff ff5a 	bl	8016070 <etharp_raw>
 80161bc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80161be:	4618      	mov	r0, r3
 80161c0:	3710      	adds	r7, #16
 80161c2:	46bd      	mov	sp, r7
 80161c4:	bd80      	pop	{r7, pc}
 80161c6:	bf00      	nop
 80161c8:	08026fa4 	.word	0x08026fa4

080161cc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80161cc:	b580      	push	{r7, lr}
 80161ce:	b082      	sub	sp, #8
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	6078      	str	r0, [r7, #4]
 80161d4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80161d6:	4a05      	ldr	r2, [pc, #20]	; (80161ec <etharp_request+0x20>)
 80161d8:	6839      	ldr	r1, [r7, #0]
 80161da:	6878      	ldr	r0, [r7, #4]
 80161dc:	f7ff ffd4 	bl	8016188 <etharp_request_dst>
 80161e0:	4603      	mov	r3, r0
}
 80161e2:	4618      	mov	r0, r3
 80161e4:	3708      	adds	r7, #8
 80161e6:	46bd      	mov	sp, r7
 80161e8:	bd80      	pop	{r7, pc}
 80161ea:	bf00      	nop
 80161ec:	08026f9c 	.word	0x08026f9c

080161f0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b08e      	sub	sp, #56	; 0x38
 80161f4:	af04      	add	r7, sp, #16
 80161f6:	6078      	str	r0, [r7, #4]
 80161f8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80161fa:	4b79      	ldr	r3, [pc, #484]	; (80163e0 <icmp_input+0x1f0>)
 80161fc:	689b      	ldr	r3, [r3, #8]
 80161fe:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016202:	781b      	ldrb	r3, [r3, #0]
 8016204:	f003 030f 	and.w	r3, r3, #15
 8016208:	b2db      	uxtb	r3, r3
 801620a:	009b      	lsls	r3, r3, #2
 801620c:	b2db      	uxtb	r3, r3
 801620e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016210:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016212:	2b13      	cmp	r3, #19
 8016214:	f240 80cd 	bls.w	80163b2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	895b      	ldrh	r3, [r3, #10]
 801621c:	2b03      	cmp	r3, #3
 801621e:	f240 80ca 	bls.w	80163b6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	685b      	ldr	r3, [r3, #4]
 8016226:	781b      	ldrb	r3, [r3, #0]
 8016228:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801622c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016230:	2b00      	cmp	r3, #0
 8016232:	f000 80b7 	beq.w	80163a4 <icmp_input+0x1b4>
 8016236:	2b08      	cmp	r3, #8
 8016238:	f040 80b7 	bne.w	80163aa <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801623c:	4b69      	ldr	r3, [pc, #420]	; (80163e4 <icmp_input+0x1f4>)
 801623e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016240:	4b67      	ldr	r3, [pc, #412]	; (80163e0 <icmp_input+0x1f0>)
 8016242:	695b      	ldr	r3, [r3, #20]
 8016244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016248:	2be0      	cmp	r3, #224	; 0xe0
 801624a:	f000 80bb 	beq.w	80163c4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801624e:	4b64      	ldr	r3, [pc, #400]	; (80163e0 <icmp_input+0x1f0>)
 8016250:	695a      	ldr	r2, [r3, #20]
 8016252:	4b63      	ldr	r3, [pc, #396]	; (80163e0 <icmp_input+0x1f0>)
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	4619      	mov	r1, r3
 8016258:	4610      	mov	r0, r2
 801625a:	f000 fc09 	bl	8016a70 <ip4_addr_isbroadcast_u32>
 801625e:	4603      	mov	r3, r0
 8016260:	2b00      	cmp	r3, #0
 8016262:	f040 80b1 	bne.w	80163c8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	891b      	ldrh	r3, [r3, #8]
 801626a:	2b07      	cmp	r3, #7
 801626c:	f240 80a5 	bls.w	80163ba <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016270:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016272:	330e      	adds	r3, #14
 8016274:	4619      	mov	r1, r3
 8016276:	6878      	ldr	r0, [r7, #4]
 8016278:	f7f5 ff94 	bl	800c1a4 <pbuf_add_header>
 801627c:	4603      	mov	r3, r0
 801627e:	2b00      	cmp	r3, #0
 8016280:	d04b      	beq.n	801631a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	891a      	ldrh	r2, [r3, #8]
 8016286:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016288:	4413      	add	r3, r2
 801628a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	891b      	ldrh	r3, [r3, #8]
 8016290:	8b7a      	ldrh	r2, [r7, #26]
 8016292:	429a      	cmp	r2, r3
 8016294:	f0c0 809a 	bcc.w	80163cc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016298:	8b7b      	ldrh	r3, [r7, #26]
 801629a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801629e:	4619      	mov	r1, r3
 80162a0:	200e      	movs	r0, #14
 80162a2:	f7f5 fd35 	bl	800bd10 <pbuf_alloc>
 80162a6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80162a8:	697b      	ldr	r3, [r7, #20]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	f000 8090 	beq.w	80163d0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80162b0:	697b      	ldr	r3, [r7, #20]
 80162b2:	895b      	ldrh	r3, [r3, #10]
 80162b4:	461a      	mov	r2, r3
 80162b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80162b8:	3308      	adds	r3, #8
 80162ba:	429a      	cmp	r2, r3
 80162bc:	d203      	bcs.n	80162c6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80162be:	6978      	ldr	r0, [r7, #20]
 80162c0:	f7f6 f806 	bl	800c2d0 <pbuf_free>
          goto icmperr;
 80162c4:	e085      	b.n	80163d2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80162c6:	697b      	ldr	r3, [r7, #20]
 80162c8:	685b      	ldr	r3, [r3, #4]
 80162ca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80162cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80162ce:	4618      	mov	r0, r3
 80162d0:	f001 fd4f 	bl	8017d72 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80162d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80162d6:	4619      	mov	r1, r3
 80162d8:	6978      	ldr	r0, [r7, #20]
 80162da:	f7f5 ff73 	bl	800c1c4 <pbuf_remove_header>
 80162de:	4603      	mov	r3, r0
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d009      	beq.n	80162f8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80162e4:	4b40      	ldr	r3, [pc, #256]	; (80163e8 <icmp_input+0x1f8>)
 80162e6:	22b6      	movs	r2, #182	; 0xb6
 80162e8:	4940      	ldr	r1, [pc, #256]	; (80163ec <icmp_input+0x1fc>)
 80162ea:	4841      	ldr	r0, [pc, #260]	; (80163f0 <icmp_input+0x200>)
 80162ec:	f001 fd6e 	bl	8017dcc <iprintf>
          pbuf_free(r);
 80162f0:	6978      	ldr	r0, [r7, #20]
 80162f2:	f7f5 ffed 	bl	800c2d0 <pbuf_free>
          goto icmperr;
 80162f6:	e06c      	b.n	80163d2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80162f8:	6879      	ldr	r1, [r7, #4]
 80162fa:	6978      	ldr	r0, [r7, #20]
 80162fc:	f7f6 f91c 	bl	800c538 <pbuf_copy>
 8016300:	4603      	mov	r3, r0
 8016302:	2b00      	cmp	r3, #0
 8016304:	d003      	beq.n	801630e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016306:	6978      	ldr	r0, [r7, #20]
 8016308:	f7f5 ffe2 	bl	800c2d0 <pbuf_free>
          goto icmperr;
 801630c:	e061      	b.n	80163d2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801630e:	6878      	ldr	r0, [r7, #4]
 8016310:	f7f5 ffde 	bl	800c2d0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016314:	697b      	ldr	r3, [r7, #20]
 8016316:	607b      	str	r3, [r7, #4]
 8016318:	e00f      	b.n	801633a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801631a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801631c:	330e      	adds	r3, #14
 801631e:	4619      	mov	r1, r3
 8016320:	6878      	ldr	r0, [r7, #4]
 8016322:	f7f5 ff4f 	bl	800c1c4 <pbuf_remove_header>
 8016326:	4603      	mov	r3, r0
 8016328:	2b00      	cmp	r3, #0
 801632a:	d006      	beq.n	801633a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801632c:	4b2e      	ldr	r3, [pc, #184]	; (80163e8 <icmp_input+0x1f8>)
 801632e:	22c7      	movs	r2, #199	; 0xc7
 8016330:	4930      	ldr	r1, [pc, #192]	; (80163f4 <icmp_input+0x204>)
 8016332:	482f      	ldr	r0, [pc, #188]	; (80163f0 <icmp_input+0x200>)
 8016334:	f001 fd4a 	bl	8017dcc <iprintf>
          goto icmperr;
 8016338:	e04b      	b.n	80163d2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	685b      	ldr	r3, [r3, #4]
 801633e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016340:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016342:	4619      	mov	r1, r3
 8016344:	6878      	ldr	r0, [r7, #4]
 8016346:	f7f5 ff2d 	bl	800c1a4 <pbuf_add_header>
 801634a:	4603      	mov	r3, r0
 801634c:	2b00      	cmp	r3, #0
 801634e:	d12b      	bne.n	80163a8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	685b      	ldr	r3, [r3, #4]
 8016354:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8016356:	69fb      	ldr	r3, [r7, #28]
 8016358:	681a      	ldr	r2, [r3, #0]
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801635e:	4b20      	ldr	r3, [pc, #128]	; (80163e0 <icmp_input+0x1f0>)
 8016360:	691a      	ldr	r2, [r3, #16]
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016366:	693b      	ldr	r3, [r7, #16]
 8016368:	2200      	movs	r2, #0
 801636a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801636c:	693b      	ldr	r3, [r7, #16]
 801636e:	2200      	movs	r2, #0
 8016370:	709a      	strb	r2, [r3, #2]
 8016372:	2200      	movs	r2, #0
 8016374:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8016376:	68fb      	ldr	r3, [r7, #12]
 8016378:	22ff      	movs	r2, #255	; 0xff
 801637a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801637c:	68fb      	ldr	r3, [r7, #12]
 801637e:	2200      	movs	r2, #0
 8016380:	729a      	strb	r2, [r3, #10]
 8016382:	2200      	movs	r2, #0
 8016384:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016386:	683b      	ldr	r3, [r7, #0]
 8016388:	9302      	str	r3, [sp, #8]
 801638a:	2301      	movs	r3, #1
 801638c:	9301      	str	r3, [sp, #4]
 801638e:	2300      	movs	r3, #0
 8016390:	9300      	str	r3, [sp, #0]
 8016392:	23ff      	movs	r3, #255	; 0xff
 8016394:	2200      	movs	r2, #0
 8016396:	69f9      	ldr	r1, [r7, #28]
 8016398:	6878      	ldr	r0, [r7, #4]
 801639a:	f000 fa91 	bl	80168c0 <ip4_output_if>
 801639e:	4603      	mov	r3, r0
 80163a0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80163a2:	e001      	b.n	80163a8 <icmp_input+0x1b8>
      break;
 80163a4:	bf00      	nop
 80163a6:	e000      	b.n	80163aa <icmp_input+0x1ba>
      break;
 80163a8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80163aa:	6878      	ldr	r0, [r7, #4]
 80163ac:	f7f5 ff90 	bl	800c2d0 <pbuf_free>
  return;
 80163b0:	e013      	b.n	80163da <icmp_input+0x1ea>
    goto lenerr;
 80163b2:	bf00      	nop
 80163b4:	e002      	b.n	80163bc <icmp_input+0x1cc>
    goto lenerr;
 80163b6:	bf00      	nop
 80163b8:	e000      	b.n	80163bc <icmp_input+0x1cc>
        goto lenerr;
 80163ba:	bf00      	nop
lenerr:
  pbuf_free(p);
 80163bc:	6878      	ldr	r0, [r7, #4]
 80163be:	f7f5 ff87 	bl	800c2d0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80163c2:	e00a      	b.n	80163da <icmp_input+0x1ea>
        goto icmperr;
 80163c4:	bf00      	nop
 80163c6:	e004      	b.n	80163d2 <icmp_input+0x1e2>
        goto icmperr;
 80163c8:	bf00      	nop
 80163ca:	e002      	b.n	80163d2 <icmp_input+0x1e2>
          goto icmperr;
 80163cc:	bf00      	nop
 80163ce:	e000      	b.n	80163d2 <icmp_input+0x1e2>
          goto icmperr;
 80163d0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80163d2:	6878      	ldr	r0, [r7, #4]
 80163d4:	f7f5 ff7c 	bl	800c2d0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80163d8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80163da:	3728      	adds	r7, #40	; 0x28
 80163dc:	46bd      	mov	sp, r7
 80163de:	bd80      	pop	{r7, pc}
 80163e0:	2000bde0 	.word	0x2000bde0
 80163e4:	2000bdf4 	.word	0x2000bdf4
 80163e8:	0801c8d4 	.word	0x0801c8d4
 80163ec:	0801c90c 	.word	0x0801c90c
 80163f0:	0801c944 	.word	0x0801c944
 80163f4:	0801c96c 	.word	0x0801c96c

080163f8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80163f8:	b580      	push	{r7, lr}
 80163fa:	b082      	sub	sp, #8
 80163fc:	af00      	add	r7, sp, #0
 80163fe:	6078      	str	r0, [r7, #4]
 8016400:	460b      	mov	r3, r1
 8016402:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016404:	78fb      	ldrb	r3, [r7, #3]
 8016406:	461a      	mov	r2, r3
 8016408:	2103      	movs	r1, #3
 801640a:	6878      	ldr	r0, [r7, #4]
 801640c:	f000 f814 	bl	8016438 <icmp_send_response>
}
 8016410:	bf00      	nop
 8016412:	3708      	adds	r7, #8
 8016414:	46bd      	mov	sp, r7
 8016416:	bd80      	pop	{r7, pc}

08016418 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016418:	b580      	push	{r7, lr}
 801641a:	b082      	sub	sp, #8
 801641c:	af00      	add	r7, sp, #0
 801641e:	6078      	str	r0, [r7, #4]
 8016420:	460b      	mov	r3, r1
 8016422:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016424:	78fb      	ldrb	r3, [r7, #3]
 8016426:	461a      	mov	r2, r3
 8016428:	210b      	movs	r1, #11
 801642a:	6878      	ldr	r0, [r7, #4]
 801642c:	f000 f804 	bl	8016438 <icmp_send_response>
}
 8016430:	bf00      	nop
 8016432:	3708      	adds	r7, #8
 8016434:	46bd      	mov	sp, r7
 8016436:	bd80      	pop	{r7, pc}

08016438 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016438:	b580      	push	{r7, lr}
 801643a:	b08c      	sub	sp, #48	; 0x30
 801643c:	af04      	add	r7, sp, #16
 801643e:	6078      	str	r0, [r7, #4]
 8016440:	460b      	mov	r3, r1
 8016442:	70fb      	strb	r3, [r7, #3]
 8016444:	4613      	mov	r3, r2
 8016446:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016448:	f44f 7220 	mov.w	r2, #640	; 0x280
 801644c:	2124      	movs	r1, #36	; 0x24
 801644e:	2022      	movs	r0, #34	; 0x22
 8016450:	f7f5 fc5e 	bl	800bd10 <pbuf_alloc>
 8016454:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016456:	69fb      	ldr	r3, [r7, #28]
 8016458:	2b00      	cmp	r3, #0
 801645a:	d04c      	beq.n	80164f6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801645c:	69fb      	ldr	r3, [r7, #28]
 801645e:	895b      	ldrh	r3, [r3, #10]
 8016460:	2b23      	cmp	r3, #35	; 0x23
 8016462:	d806      	bhi.n	8016472 <icmp_send_response+0x3a>
 8016464:	4b26      	ldr	r3, [pc, #152]	; (8016500 <icmp_send_response+0xc8>)
 8016466:	f240 1269 	movw	r2, #361	; 0x169
 801646a:	4926      	ldr	r1, [pc, #152]	; (8016504 <icmp_send_response+0xcc>)
 801646c:	4826      	ldr	r0, [pc, #152]	; (8016508 <icmp_send_response+0xd0>)
 801646e:	f001 fcad 	bl	8017dcc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	685b      	ldr	r3, [r3, #4]
 8016476:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016478:	69fb      	ldr	r3, [r7, #28]
 801647a:	685b      	ldr	r3, [r3, #4]
 801647c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801647e:	697b      	ldr	r3, [r7, #20]
 8016480:	78fa      	ldrb	r2, [r7, #3]
 8016482:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016484:	697b      	ldr	r3, [r7, #20]
 8016486:	78ba      	ldrb	r2, [r7, #2]
 8016488:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801648a:	697b      	ldr	r3, [r7, #20]
 801648c:	2200      	movs	r2, #0
 801648e:	711a      	strb	r2, [r3, #4]
 8016490:	2200      	movs	r2, #0
 8016492:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016494:	697b      	ldr	r3, [r7, #20]
 8016496:	2200      	movs	r2, #0
 8016498:	719a      	strb	r2, [r3, #6]
 801649a:	2200      	movs	r2, #0
 801649c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801649e:	69fb      	ldr	r3, [r7, #28]
 80164a0:	685b      	ldr	r3, [r3, #4]
 80164a2:	f103 0008 	add.w	r0, r3, #8
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	685b      	ldr	r3, [r3, #4]
 80164aa:	221c      	movs	r2, #28
 80164ac:	4619      	mov	r1, r3
 80164ae:	f001 fc60 	bl	8017d72 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80164b2:	69bb      	ldr	r3, [r7, #24]
 80164b4:	68db      	ldr	r3, [r3, #12]
 80164b6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80164b8:	f107 030c 	add.w	r3, r7, #12
 80164bc:	4618      	mov	r0, r3
 80164be:	f000 f825 	bl	801650c <ip4_route>
 80164c2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80164c4:	693b      	ldr	r3, [r7, #16]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d011      	beq.n	80164ee <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80164ca:	697b      	ldr	r3, [r7, #20]
 80164cc:	2200      	movs	r2, #0
 80164ce:	709a      	strb	r2, [r3, #2]
 80164d0:	2200      	movs	r2, #0
 80164d2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80164d4:	f107 020c 	add.w	r2, r7, #12
 80164d8:	693b      	ldr	r3, [r7, #16]
 80164da:	9302      	str	r3, [sp, #8]
 80164dc:	2301      	movs	r3, #1
 80164de:	9301      	str	r3, [sp, #4]
 80164e0:	2300      	movs	r3, #0
 80164e2:	9300      	str	r3, [sp, #0]
 80164e4:	23ff      	movs	r3, #255	; 0xff
 80164e6:	2100      	movs	r1, #0
 80164e8:	69f8      	ldr	r0, [r7, #28]
 80164ea:	f000 f9e9 	bl	80168c0 <ip4_output_if>
  }
  pbuf_free(q);
 80164ee:	69f8      	ldr	r0, [r7, #28]
 80164f0:	f7f5 feee 	bl	800c2d0 <pbuf_free>
 80164f4:	e000      	b.n	80164f8 <icmp_send_response+0xc0>
    return;
 80164f6:	bf00      	nop
}
 80164f8:	3720      	adds	r7, #32
 80164fa:	46bd      	mov	sp, r7
 80164fc:	bd80      	pop	{r7, pc}
 80164fe:	bf00      	nop
 8016500:	0801c8d4 	.word	0x0801c8d4
 8016504:	0801c9a0 	.word	0x0801c9a0
 8016508:	0801c944 	.word	0x0801c944

0801650c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801650c:	b480      	push	{r7}
 801650e:	b085      	sub	sp, #20
 8016510:	af00      	add	r7, sp, #0
 8016512:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016514:	4b33      	ldr	r3, [pc, #204]	; (80165e4 <ip4_route+0xd8>)
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	60fb      	str	r3, [r7, #12]
 801651a:	e036      	b.n	801658a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016522:	f003 0301 	and.w	r3, r3, #1
 8016526:	b2db      	uxtb	r3, r3
 8016528:	2b00      	cmp	r3, #0
 801652a:	d02b      	beq.n	8016584 <ip4_route+0x78>
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016532:	089b      	lsrs	r3, r3, #2
 8016534:	f003 0301 	and.w	r3, r3, #1
 8016538:	b2db      	uxtb	r3, r3
 801653a:	2b00      	cmp	r3, #0
 801653c:	d022      	beq.n	8016584 <ip4_route+0x78>
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	3304      	adds	r3, #4
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d01d      	beq.n	8016584 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	681a      	ldr	r2, [r3, #0]
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	3304      	adds	r3, #4
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	405a      	eors	r2, r3
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	3308      	adds	r3, #8
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	4013      	ands	r3, r2
 801655c:	2b00      	cmp	r3, #0
 801655e:	d101      	bne.n	8016564 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	e038      	b.n	80165d6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801656a:	f003 0302 	and.w	r3, r3, #2
 801656e:	2b00      	cmp	r3, #0
 8016570:	d108      	bne.n	8016584 <ip4_route+0x78>
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	681a      	ldr	r2, [r3, #0]
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	330c      	adds	r3, #12
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	429a      	cmp	r2, r3
 801657e:	d101      	bne.n	8016584 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016580:	68fb      	ldr	r3, [r7, #12]
 8016582:	e028      	b.n	80165d6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	60fb      	str	r3, [r7, #12]
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	2b00      	cmp	r3, #0
 801658e:	d1c5      	bne.n	801651c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016590:	4b15      	ldr	r3, [pc, #84]	; (80165e8 <ip4_route+0xdc>)
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d01a      	beq.n	80165ce <ip4_route+0xc2>
 8016598:	4b13      	ldr	r3, [pc, #76]	; (80165e8 <ip4_route+0xdc>)
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80165a0:	f003 0301 	and.w	r3, r3, #1
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d012      	beq.n	80165ce <ip4_route+0xc2>
 80165a8:	4b0f      	ldr	r3, [pc, #60]	; (80165e8 <ip4_route+0xdc>)
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80165b0:	f003 0304 	and.w	r3, r3, #4
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d00a      	beq.n	80165ce <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80165b8:	4b0b      	ldr	r3, [pc, #44]	; (80165e8 <ip4_route+0xdc>)
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	3304      	adds	r3, #4
 80165be:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d004      	beq.n	80165ce <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	b2db      	uxtb	r3, r3
 80165ca:	2b7f      	cmp	r3, #127	; 0x7f
 80165cc:	d101      	bne.n	80165d2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80165ce:	2300      	movs	r3, #0
 80165d0:	e001      	b.n	80165d6 <ip4_route+0xca>
  }

  return netif_default;
 80165d2:	4b05      	ldr	r3, [pc, #20]	; (80165e8 <ip4_route+0xdc>)
 80165d4:	681b      	ldr	r3, [r3, #0]
}
 80165d6:	4618      	mov	r0, r3
 80165d8:	3714      	adds	r7, #20
 80165da:	46bd      	mov	sp, r7
 80165dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165e0:	4770      	bx	lr
 80165e2:	bf00      	nop
 80165e4:	2000f504 	.word	0x2000f504
 80165e8:	2000f508 	.word	0x2000f508

080165ec <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80165ec:	b580      	push	{r7, lr}
 80165ee:	b082      	sub	sp, #8
 80165f0:	af00      	add	r7, sp, #0
 80165f2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80165fa:	f003 0301 	and.w	r3, r3, #1
 80165fe:	b2db      	uxtb	r3, r3
 8016600:	2b00      	cmp	r3, #0
 8016602:	d016      	beq.n	8016632 <ip4_input_accept+0x46>
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	3304      	adds	r3, #4
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	2b00      	cmp	r3, #0
 801660c:	d011      	beq.n	8016632 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801660e:	4b0b      	ldr	r3, [pc, #44]	; (801663c <ip4_input_accept+0x50>)
 8016610:	695a      	ldr	r2, [r3, #20]
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	3304      	adds	r3, #4
 8016616:	681b      	ldr	r3, [r3, #0]
 8016618:	429a      	cmp	r2, r3
 801661a:	d008      	beq.n	801662e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801661c:	4b07      	ldr	r3, [pc, #28]	; (801663c <ip4_input_accept+0x50>)
 801661e:	695b      	ldr	r3, [r3, #20]
 8016620:	6879      	ldr	r1, [r7, #4]
 8016622:	4618      	mov	r0, r3
 8016624:	f000 fa24 	bl	8016a70 <ip4_addr_isbroadcast_u32>
 8016628:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801662a:	2b00      	cmp	r3, #0
 801662c:	d001      	beq.n	8016632 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801662e:	2301      	movs	r3, #1
 8016630:	e000      	b.n	8016634 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016632:	2300      	movs	r3, #0
}
 8016634:	4618      	mov	r0, r3
 8016636:	3708      	adds	r7, #8
 8016638:	46bd      	mov	sp, r7
 801663a:	bd80      	pop	{r7, pc}
 801663c:	2000bde0 	.word	0x2000bde0

08016640 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016640:	b580      	push	{r7, lr}
 8016642:	b088      	sub	sp, #32
 8016644:	af00      	add	r7, sp, #0
 8016646:	6078      	str	r0, [r7, #4]
 8016648:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801664a:	2301      	movs	r3, #1
 801664c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	685b      	ldr	r3, [r3, #4]
 8016652:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8016654:	69fb      	ldr	r3, [r7, #28]
 8016656:	781b      	ldrb	r3, [r3, #0]
 8016658:	091b      	lsrs	r3, r3, #4
 801665a:	b2db      	uxtb	r3, r3
 801665c:	2b04      	cmp	r3, #4
 801665e:	d004      	beq.n	801666a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016660:	6878      	ldr	r0, [r7, #4]
 8016662:	f7f5 fe35 	bl	800c2d0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016666:	2300      	movs	r3, #0
 8016668:	e121      	b.n	80168ae <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801666a:	69fb      	ldr	r3, [r7, #28]
 801666c:	781b      	ldrb	r3, [r3, #0]
 801666e:	f003 030f 	and.w	r3, r3, #15
 8016672:	b2db      	uxtb	r3, r3
 8016674:	009b      	lsls	r3, r3, #2
 8016676:	b2db      	uxtb	r3, r3
 8016678:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801667a:	69fb      	ldr	r3, [r7, #28]
 801667c:	885b      	ldrh	r3, [r3, #2]
 801667e:	b29b      	uxth	r3, r3
 8016680:	4618      	mov	r0, r3
 8016682:	f7f4 fa3b 	bl	800aafc <lwip_htons>
 8016686:	4603      	mov	r3, r0
 8016688:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	891b      	ldrh	r3, [r3, #8]
 801668e:	8a3a      	ldrh	r2, [r7, #16]
 8016690:	429a      	cmp	r2, r3
 8016692:	d204      	bcs.n	801669e <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8016694:	8a3b      	ldrh	r3, [r7, #16]
 8016696:	4619      	mov	r1, r3
 8016698:	6878      	ldr	r0, [r7, #4]
 801669a:	f7f5 fc93 	bl	800bfc4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	895b      	ldrh	r3, [r3, #10]
 80166a2:	8a7a      	ldrh	r2, [r7, #18]
 80166a4:	429a      	cmp	r2, r3
 80166a6:	d807      	bhi.n	80166b8 <ip4_input+0x78>
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	891b      	ldrh	r3, [r3, #8]
 80166ac:	8a3a      	ldrh	r2, [r7, #16]
 80166ae:	429a      	cmp	r2, r3
 80166b0:	d802      	bhi.n	80166b8 <ip4_input+0x78>
 80166b2:	8a7b      	ldrh	r3, [r7, #18]
 80166b4:	2b13      	cmp	r3, #19
 80166b6:	d804      	bhi.n	80166c2 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80166b8:	6878      	ldr	r0, [r7, #4]
 80166ba:	f7f5 fe09 	bl	800c2d0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80166be:	2300      	movs	r3, #0
 80166c0:	e0f5      	b.n	80168ae <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80166c2:	69fb      	ldr	r3, [r7, #28]
 80166c4:	691b      	ldr	r3, [r3, #16]
 80166c6:	4a7c      	ldr	r2, [pc, #496]	; (80168b8 <ip4_input+0x278>)
 80166c8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80166ca:	69fb      	ldr	r3, [r7, #28]
 80166cc:	68db      	ldr	r3, [r3, #12]
 80166ce:	4a7a      	ldr	r2, [pc, #488]	; (80168b8 <ip4_input+0x278>)
 80166d0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80166d2:	4b79      	ldr	r3, [pc, #484]	; (80168b8 <ip4_input+0x278>)
 80166d4:	695b      	ldr	r3, [r3, #20]
 80166d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80166da:	2be0      	cmp	r3, #224	; 0xe0
 80166dc:	d112      	bne.n	8016704 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80166de:	683b      	ldr	r3, [r7, #0]
 80166e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80166e4:	f003 0301 	and.w	r3, r3, #1
 80166e8:	b2db      	uxtb	r3, r3
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d007      	beq.n	80166fe <ip4_input+0xbe>
 80166ee:	683b      	ldr	r3, [r7, #0]
 80166f0:	3304      	adds	r3, #4
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d002      	beq.n	80166fe <ip4_input+0xbe>
      netif = inp;
 80166f8:	683b      	ldr	r3, [r7, #0]
 80166fa:	61bb      	str	r3, [r7, #24]
 80166fc:	e02a      	b.n	8016754 <ip4_input+0x114>
    } else {
      netif = NULL;
 80166fe:	2300      	movs	r3, #0
 8016700:	61bb      	str	r3, [r7, #24]
 8016702:	e027      	b.n	8016754 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016704:	6838      	ldr	r0, [r7, #0]
 8016706:	f7ff ff71 	bl	80165ec <ip4_input_accept>
 801670a:	4603      	mov	r3, r0
 801670c:	2b00      	cmp	r3, #0
 801670e:	d002      	beq.n	8016716 <ip4_input+0xd6>
      netif = inp;
 8016710:	683b      	ldr	r3, [r7, #0]
 8016712:	61bb      	str	r3, [r7, #24]
 8016714:	e01e      	b.n	8016754 <ip4_input+0x114>
    } else {
      netif = NULL;
 8016716:	2300      	movs	r3, #0
 8016718:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801671a:	4b67      	ldr	r3, [pc, #412]	; (80168b8 <ip4_input+0x278>)
 801671c:	695b      	ldr	r3, [r3, #20]
 801671e:	b2db      	uxtb	r3, r3
 8016720:	2b7f      	cmp	r3, #127	; 0x7f
 8016722:	d017      	beq.n	8016754 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016724:	4b65      	ldr	r3, [pc, #404]	; (80168bc <ip4_input+0x27c>)
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	61bb      	str	r3, [r7, #24]
 801672a:	e00e      	b.n	801674a <ip4_input+0x10a>
          if (netif == inp) {
 801672c:	69ba      	ldr	r2, [r7, #24]
 801672e:	683b      	ldr	r3, [r7, #0]
 8016730:	429a      	cmp	r2, r3
 8016732:	d006      	beq.n	8016742 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016734:	69b8      	ldr	r0, [r7, #24]
 8016736:	f7ff ff59 	bl	80165ec <ip4_input_accept>
 801673a:	4603      	mov	r3, r0
 801673c:	2b00      	cmp	r3, #0
 801673e:	d108      	bne.n	8016752 <ip4_input+0x112>
 8016740:	e000      	b.n	8016744 <ip4_input+0x104>
            continue;
 8016742:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016744:	69bb      	ldr	r3, [r7, #24]
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	61bb      	str	r3, [r7, #24]
 801674a:	69bb      	ldr	r3, [r7, #24]
 801674c:	2b00      	cmp	r3, #0
 801674e:	d1ed      	bne.n	801672c <ip4_input+0xec>
 8016750:	e000      	b.n	8016754 <ip4_input+0x114>
            break;
 8016752:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8016754:	69bb      	ldr	r3, [r7, #24]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d111      	bne.n	801677e <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801675a:	69fb      	ldr	r3, [r7, #28]
 801675c:	7a5b      	ldrb	r3, [r3, #9]
 801675e:	2b11      	cmp	r3, #17
 8016760:	d10d      	bne.n	801677e <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8016762:	8a7b      	ldrh	r3, [r7, #18]
 8016764:	69fa      	ldr	r2, [r7, #28]
 8016766:	4413      	add	r3, r2
 8016768:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801676a:	68fb      	ldr	r3, [r7, #12]
 801676c:	885b      	ldrh	r3, [r3, #2]
 801676e:	b29b      	uxth	r3, r3
 8016770:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8016774:	d103      	bne.n	801677e <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8016776:	683b      	ldr	r3, [r7, #0]
 8016778:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801677a:	2300      	movs	r3, #0
 801677c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801677e:	697b      	ldr	r3, [r7, #20]
 8016780:	2b00      	cmp	r3, #0
 8016782:	d017      	beq.n	80167b4 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8016784:	4b4c      	ldr	r3, [pc, #304]	; (80168b8 <ip4_input+0x278>)
 8016786:	691b      	ldr	r3, [r3, #16]
 8016788:	2b00      	cmp	r3, #0
 801678a:	d013      	beq.n	80167b4 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801678c:	4b4a      	ldr	r3, [pc, #296]	; (80168b8 <ip4_input+0x278>)
 801678e:	691b      	ldr	r3, [r3, #16]
 8016790:	6839      	ldr	r1, [r7, #0]
 8016792:	4618      	mov	r0, r3
 8016794:	f000 f96c 	bl	8016a70 <ip4_addr_isbroadcast_u32>
 8016798:	4603      	mov	r3, r0
 801679a:	2b00      	cmp	r3, #0
 801679c:	d105      	bne.n	80167aa <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801679e:	4b46      	ldr	r3, [pc, #280]	; (80168b8 <ip4_input+0x278>)
 80167a0:	691b      	ldr	r3, [r3, #16]
 80167a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80167a6:	2be0      	cmp	r3, #224	; 0xe0
 80167a8:	d104      	bne.n	80167b4 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80167aa:	6878      	ldr	r0, [r7, #4]
 80167ac:	f7f5 fd90 	bl	800c2d0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80167b0:	2300      	movs	r3, #0
 80167b2:	e07c      	b.n	80168ae <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80167b4:	69bb      	ldr	r3, [r7, #24]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d104      	bne.n	80167c4 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80167ba:	6878      	ldr	r0, [r7, #4]
 80167bc:	f7f5 fd88 	bl	800c2d0 <pbuf_free>
    return ERR_OK;
 80167c0:	2300      	movs	r3, #0
 80167c2:	e074      	b.n	80168ae <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80167c4:	69fb      	ldr	r3, [r7, #28]
 80167c6:	88db      	ldrh	r3, [r3, #6]
 80167c8:	b29b      	uxth	r3, r3
 80167ca:	461a      	mov	r2, r3
 80167cc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80167d0:	4013      	ands	r3, r2
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d00b      	beq.n	80167ee <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80167d6:	6878      	ldr	r0, [r7, #4]
 80167d8:	f000 fc90 	bl	80170fc <ip4_reass>
 80167dc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d101      	bne.n	80167e8 <ip4_input+0x1a8>
      return ERR_OK;
 80167e4:	2300      	movs	r3, #0
 80167e6:	e062      	b.n	80168ae <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	685b      	ldr	r3, [r3, #4]
 80167ec:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80167ee:	4a32      	ldr	r2, [pc, #200]	; (80168b8 <ip4_input+0x278>)
 80167f0:	69bb      	ldr	r3, [r7, #24]
 80167f2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80167f4:	4a30      	ldr	r2, [pc, #192]	; (80168b8 <ip4_input+0x278>)
 80167f6:	683b      	ldr	r3, [r7, #0]
 80167f8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80167fa:	4a2f      	ldr	r2, [pc, #188]	; (80168b8 <ip4_input+0x278>)
 80167fc:	69fb      	ldr	r3, [r7, #28]
 80167fe:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016800:	69fb      	ldr	r3, [r7, #28]
 8016802:	781b      	ldrb	r3, [r3, #0]
 8016804:	f003 030f 	and.w	r3, r3, #15
 8016808:	b2db      	uxtb	r3, r3
 801680a:	009b      	lsls	r3, r3, #2
 801680c:	b2db      	uxtb	r3, r3
 801680e:	b29a      	uxth	r2, r3
 8016810:	4b29      	ldr	r3, [pc, #164]	; (80168b8 <ip4_input+0x278>)
 8016812:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016814:	8a7b      	ldrh	r3, [r7, #18]
 8016816:	4619      	mov	r1, r3
 8016818:	6878      	ldr	r0, [r7, #4]
 801681a:	f7f5 fcd3 	bl	800c1c4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801681e:	69fb      	ldr	r3, [r7, #28]
 8016820:	7a5b      	ldrb	r3, [r3, #9]
 8016822:	2b06      	cmp	r3, #6
 8016824:	d009      	beq.n	801683a <ip4_input+0x1fa>
 8016826:	2b11      	cmp	r3, #17
 8016828:	d002      	beq.n	8016830 <ip4_input+0x1f0>
 801682a:	2b01      	cmp	r3, #1
 801682c:	d00a      	beq.n	8016844 <ip4_input+0x204>
 801682e:	e00e      	b.n	801684e <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016830:	6839      	ldr	r1, [r7, #0]
 8016832:	6878      	ldr	r0, [r7, #4]
 8016834:	f7fc fad0 	bl	8012dd8 <udp_input>
        break;
 8016838:	e026      	b.n	8016888 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801683a:	6839      	ldr	r1, [r7, #0]
 801683c:	6878      	ldr	r0, [r7, #4]
 801683e:	f7f7 fe7f 	bl	800e540 <tcp_input>
        break;
 8016842:	e021      	b.n	8016888 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016844:	6839      	ldr	r1, [r7, #0]
 8016846:	6878      	ldr	r0, [r7, #4]
 8016848:	f7ff fcd2 	bl	80161f0 <icmp_input>
        break;
 801684c:	e01c      	b.n	8016888 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801684e:	4b1a      	ldr	r3, [pc, #104]	; (80168b8 <ip4_input+0x278>)
 8016850:	695b      	ldr	r3, [r3, #20]
 8016852:	69b9      	ldr	r1, [r7, #24]
 8016854:	4618      	mov	r0, r3
 8016856:	f000 f90b 	bl	8016a70 <ip4_addr_isbroadcast_u32>
 801685a:	4603      	mov	r3, r0
 801685c:	2b00      	cmp	r3, #0
 801685e:	d10f      	bne.n	8016880 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016860:	4b15      	ldr	r3, [pc, #84]	; (80168b8 <ip4_input+0x278>)
 8016862:	695b      	ldr	r3, [r3, #20]
 8016864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016868:	2be0      	cmp	r3, #224	; 0xe0
 801686a:	d009      	beq.n	8016880 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801686c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016870:	4619      	mov	r1, r3
 8016872:	6878      	ldr	r0, [r7, #4]
 8016874:	f7f5 fd19 	bl	800c2aa <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016878:	2102      	movs	r1, #2
 801687a:	6878      	ldr	r0, [r7, #4]
 801687c:	f7ff fdbc 	bl	80163f8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016880:	6878      	ldr	r0, [r7, #4]
 8016882:	f7f5 fd25 	bl	800c2d0 <pbuf_free>
        break;
 8016886:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016888:	4b0b      	ldr	r3, [pc, #44]	; (80168b8 <ip4_input+0x278>)
 801688a:	2200      	movs	r2, #0
 801688c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801688e:	4b0a      	ldr	r3, [pc, #40]	; (80168b8 <ip4_input+0x278>)
 8016890:	2200      	movs	r2, #0
 8016892:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016894:	4b08      	ldr	r3, [pc, #32]	; (80168b8 <ip4_input+0x278>)
 8016896:	2200      	movs	r2, #0
 8016898:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801689a:	4b07      	ldr	r3, [pc, #28]	; (80168b8 <ip4_input+0x278>)
 801689c:	2200      	movs	r2, #0
 801689e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80168a0:	4b05      	ldr	r3, [pc, #20]	; (80168b8 <ip4_input+0x278>)
 80168a2:	2200      	movs	r2, #0
 80168a4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80168a6:	4b04      	ldr	r3, [pc, #16]	; (80168b8 <ip4_input+0x278>)
 80168a8:	2200      	movs	r2, #0
 80168aa:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80168ac:	2300      	movs	r3, #0
}
 80168ae:	4618      	mov	r0, r3
 80168b0:	3720      	adds	r7, #32
 80168b2:	46bd      	mov	sp, r7
 80168b4:	bd80      	pop	{r7, pc}
 80168b6:	bf00      	nop
 80168b8:	2000bde0 	.word	0x2000bde0
 80168bc:	2000f504 	.word	0x2000f504

080168c0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b08a      	sub	sp, #40	; 0x28
 80168c4:	af04      	add	r7, sp, #16
 80168c6:	60f8      	str	r0, [r7, #12]
 80168c8:	60b9      	str	r1, [r7, #8]
 80168ca:	607a      	str	r2, [r7, #4]
 80168cc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80168ce:	68bb      	ldr	r3, [r7, #8]
 80168d0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d009      	beq.n	80168ec <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80168d8:	68bb      	ldr	r3, [r7, #8]
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d003      	beq.n	80168e6 <ip4_output_if+0x26>
 80168de:	68bb      	ldr	r3, [r7, #8]
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d102      	bne.n	80168ec <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80168e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168e8:	3304      	adds	r3, #4
 80168ea:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80168ec:	78fa      	ldrb	r2, [r7, #3]
 80168ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168f0:	9302      	str	r3, [sp, #8]
 80168f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80168f6:	9301      	str	r3, [sp, #4]
 80168f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80168fc:	9300      	str	r3, [sp, #0]
 80168fe:	4613      	mov	r3, r2
 8016900:	687a      	ldr	r2, [r7, #4]
 8016902:	6979      	ldr	r1, [r7, #20]
 8016904:	68f8      	ldr	r0, [r7, #12]
 8016906:	f000 f805 	bl	8016914 <ip4_output_if_src>
 801690a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801690c:	4618      	mov	r0, r3
 801690e:	3718      	adds	r7, #24
 8016910:	46bd      	mov	sp, r7
 8016912:	bd80      	pop	{r7, pc}

08016914 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016914:	b580      	push	{r7, lr}
 8016916:	b088      	sub	sp, #32
 8016918:	af00      	add	r7, sp, #0
 801691a:	60f8      	str	r0, [r7, #12]
 801691c:	60b9      	str	r1, [r7, #8]
 801691e:	607a      	str	r2, [r7, #4]
 8016920:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	7b9b      	ldrb	r3, [r3, #14]
 8016926:	2b01      	cmp	r3, #1
 8016928:	d006      	beq.n	8016938 <ip4_output_if_src+0x24>
 801692a:	4b4b      	ldr	r3, [pc, #300]	; (8016a58 <ip4_output_if_src+0x144>)
 801692c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016930:	494a      	ldr	r1, [pc, #296]	; (8016a5c <ip4_output_if_src+0x148>)
 8016932:	484b      	ldr	r0, [pc, #300]	; (8016a60 <ip4_output_if_src+0x14c>)
 8016934:	f001 fa4a 	bl	8017dcc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	2b00      	cmp	r3, #0
 801693c:	d060      	beq.n	8016a00 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801693e:	2314      	movs	r3, #20
 8016940:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016942:	2114      	movs	r1, #20
 8016944:	68f8      	ldr	r0, [r7, #12]
 8016946:	f7f5 fc2d 	bl	800c1a4 <pbuf_add_header>
 801694a:	4603      	mov	r3, r0
 801694c:	2b00      	cmp	r3, #0
 801694e:	d002      	beq.n	8016956 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016950:	f06f 0301 	mvn.w	r3, #1
 8016954:	e07c      	b.n	8016a50 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	685b      	ldr	r3, [r3, #4]
 801695a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	895b      	ldrh	r3, [r3, #10]
 8016960:	2b13      	cmp	r3, #19
 8016962:	d806      	bhi.n	8016972 <ip4_output_if_src+0x5e>
 8016964:	4b3c      	ldr	r3, [pc, #240]	; (8016a58 <ip4_output_if_src+0x144>)
 8016966:	f240 3289 	movw	r2, #905	; 0x389
 801696a:	493e      	ldr	r1, [pc, #248]	; (8016a64 <ip4_output_if_src+0x150>)
 801696c:	483c      	ldr	r0, [pc, #240]	; (8016a60 <ip4_output_if_src+0x14c>)
 801696e:	f001 fa2d 	bl	8017dcc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016972:	69fb      	ldr	r3, [r7, #28]
 8016974:	78fa      	ldrb	r2, [r7, #3]
 8016976:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016978:	69fb      	ldr	r3, [r7, #28]
 801697a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801697e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	681a      	ldr	r2, [r3, #0]
 8016984:	69fb      	ldr	r3, [r7, #28]
 8016986:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016988:	8b7b      	ldrh	r3, [r7, #26]
 801698a:	089b      	lsrs	r3, r3, #2
 801698c:	b29b      	uxth	r3, r3
 801698e:	b2db      	uxtb	r3, r3
 8016990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016994:	b2da      	uxtb	r2, r3
 8016996:	69fb      	ldr	r3, [r7, #28]
 8016998:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801699a:	69fb      	ldr	r3, [r7, #28]
 801699c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80169a0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	891b      	ldrh	r3, [r3, #8]
 80169a6:	4618      	mov	r0, r3
 80169a8:	f7f4 f8a8 	bl	800aafc <lwip_htons>
 80169ac:	4603      	mov	r3, r0
 80169ae:	461a      	mov	r2, r3
 80169b0:	69fb      	ldr	r3, [r7, #28]
 80169b2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80169b4:	69fb      	ldr	r3, [r7, #28]
 80169b6:	2200      	movs	r2, #0
 80169b8:	719a      	strb	r2, [r3, #6]
 80169ba:	2200      	movs	r2, #0
 80169bc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80169be:	4b2a      	ldr	r3, [pc, #168]	; (8016a68 <ip4_output_if_src+0x154>)
 80169c0:	881b      	ldrh	r3, [r3, #0]
 80169c2:	4618      	mov	r0, r3
 80169c4:	f7f4 f89a 	bl	800aafc <lwip_htons>
 80169c8:	4603      	mov	r3, r0
 80169ca:	461a      	mov	r2, r3
 80169cc:	69fb      	ldr	r3, [r7, #28]
 80169ce:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80169d0:	4b25      	ldr	r3, [pc, #148]	; (8016a68 <ip4_output_if_src+0x154>)
 80169d2:	881b      	ldrh	r3, [r3, #0]
 80169d4:	3301      	adds	r3, #1
 80169d6:	b29a      	uxth	r2, r3
 80169d8:	4b23      	ldr	r3, [pc, #140]	; (8016a68 <ip4_output_if_src+0x154>)
 80169da:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80169dc:	68bb      	ldr	r3, [r7, #8]
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d104      	bne.n	80169ec <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80169e2:	4b22      	ldr	r3, [pc, #136]	; (8016a6c <ip4_output_if_src+0x158>)
 80169e4:	681a      	ldr	r2, [r3, #0]
 80169e6:	69fb      	ldr	r3, [r7, #28]
 80169e8:	60da      	str	r2, [r3, #12]
 80169ea:	e003      	b.n	80169f4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80169ec:	68bb      	ldr	r3, [r7, #8]
 80169ee:	681a      	ldr	r2, [r3, #0]
 80169f0:	69fb      	ldr	r3, [r7, #28]
 80169f2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80169f4:	69fb      	ldr	r3, [r7, #28]
 80169f6:	2200      	movs	r2, #0
 80169f8:	729a      	strb	r2, [r3, #10]
 80169fa:	2200      	movs	r2, #0
 80169fc:	72da      	strb	r2, [r3, #11]
 80169fe:	e00f      	b.n	8016a20 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	895b      	ldrh	r3, [r3, #10]
 8016a04:	2b13      	cmp	r3, #19
 8016a06:	d802      	bhi.n	8016a0e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016a08:	f06f 0301 	mvn.w	r3, #1
 8016a0c:	e020      	b.n	8016a50 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	685b      	ldr	r3, [r3, #4]
 8016a12:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016a14:	69fb      	ldr	r3, [r7, #28]
 8016a16:	691b      	ldr	r3, [r3, #16]
 8016a18:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016a1a:	f107 0314 	add.w	r3, r7, #20
 8016a1e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d00c      	beq.n	8016a42 <ip4_output_if_src+0x12e>
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	891a      	ldrh	r2, [r3, #8]
 8016a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016a30:	429a      	cmp	r2, r3
 8016a32:	d906      	bls.n	8016a42 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016a34:	687a      	ldr	r2, [r7, #4]
 8016a36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016a38:	68f8      	ldr	r0, [r7, #12]
 8016a3a:	f000 fd4b 	bl	80174d4 <ip4_frag>
 8016a3e:	4603      	mov	r3, r0
 8016a40:	e006      	b.n	8016a50 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a44:	695b      	ldr	r3, [r3, #20]
 8016a46:	687a      	ldr	r2, [r7, #4]
 8016a48:	68f9      	ldr	r1, [r7, #12]
 8016a4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a4c:	4798      	blx	r3
 8016a4e:	4603      	mov	r3, r0
}
 8016a50:	4618      	mov	r0, r3
 8016a52:	3720      	adds	r7, #32
 8016a54:	46bd      	mov	sp, r7
 8016a56:	bd80      	pop	{r7, pc}
 8016a58:	0801c9cc 	.word	0x0801c9cc
 8016a5c:	0801ca00 	.word	0x0801ca00
 8016a60:	0801ca0c 	.word	0x0801ca0c
 8016a64:	0801ca34 	.word	0x0801ca34
 8016a68:	20008bce 	.word	0x20008bce
 8016a6c:	08026f94 	.word	0x08026f94

08016a70 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016a70:	b480      	push	{r7}
 8016a72:	b085      	sub	sp, #20
 8016a74:	af00      	add	r7, sp, #0
 8016a76:	6078      	str	r0, [r7, #4]
 8016a78:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a84:	d002      	beq.n	8016a8c <ip4_addr_isbroadcast_u32+0x1c>
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d101      	bne.n	8016a90 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016a8c:	2301      	movs	r3, #1
 8016a8e:	e02a      	b.n	8016ae6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016a90:	683b      	ldr	r3, [r7, #0]
 8016a92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016a96:	f003 0302 	and.w	r3, r3, #2
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d101      	bne.n	8016aa2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	e021      	b.n	8016ae6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016aa2:	683b      	ldr	r3, [r7, #0]
 8016aa4:	3304      	adds	r3, #4
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	687a      	ldr	r2, [r7, #4]
 8016aaa:	429a      	cmp	r2, r3
 8016aac:	d101      	bne.n	8016ab2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016aae:	2300      	movs	r3, #0
 8016ab0:	e019      	b.n	8016ae6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016ab2:	68fa      	ldr	r2, [r7, #12]
 8016ab4:	683b      	ldr	r3, [r7, #0]
 8016ab6:	3304      	adds	r3, #4
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	405a      	eors	r2, r3
 8016abc:	683b      	ldr	r3, [r7, #0]
 8016abe:	3308      	adds	r3, #8
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	4013      	ands	r3, r2
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d10d      	bne.n	8016ae4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016ac8:	683b      	ldr	r3, [r7, #0]
 8016aca:	3308      	adds	r3, #8
 8016acc:	681b      	ldr	r3, [r3, #0]
 8016ace:	43da      	mvns	r2, r3
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016ad4:	683b      	ldr	r3, [r7, #0]
 8016ad6:	3308      	adds	r3, #8
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016adc:	429a      	cmp	r2, r3
 8016ade:	d101      	bne.n	8016ae4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016ae0:	2301      	movs	r3, #1
 8016ae2:	e000      	b.n	8016ae6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016ae4:	2300      	movs	r3, #0
  }
}
 8016ae6:	4618      	mov	r0, r3
 8016ae8:	3714      	adds	r7, #20
 8016aea:	46bd      	mov	sp, r7
 8016aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016af0:	4770      	bx	lr
	...

08016af4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016af4:	b580      	push	{r7, lr}
 8016af6:	b084      	sub	sp, #16
 8016af8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016afa:	2300      	movs	r3, #0
 8016afc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016afe:	4b12      	ldr	r3, [pc, #72]	; (8016b48 <ip_reass_tmr+0x54>)
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016b04:	e018      	b.n	8016b38 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	7fdb      	ldrb	r3, [r3, #31]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d00b      	beq.n	8016b26 <ip_reass_tmr+0x32>
      r->timer--;
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	7fdb      	ldrb	r3, [r3, #31]
 8016b12:	3b01      	subs	r3, #1
 8016b14:	b2da      	uxtb	r2, r3
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	60fb      	str	r3, [r7, #12]
 8016b24:	e008      	b.n	8016b38 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016b2a:	68fb      	ldr	r3, [r7, #12]
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016b30:	68b9      	ldr	r1, [r7, #8]
 8016b32:	6878      	ldr	r0, [r7, #4]
 8016b34:	f000 f80a 	bl	8016b4c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d1e3      	bne.n	8016b06 <ip_reass_tmr+0x12>
    }
  }
}
 8016b3e:	bf00      	nop
 8016b40:	3710      	adds	r7, #16
 8016b42:	46bd      	mov	sp, r7
 8016b44:	bd80      	pop	{r7, pc}
 8016b46:	bf00      	nop
 8016b48:	20008bd0 	.word	0x20008bd0

08016b4c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016b4c:	b580      	push	{r7, lr}
 8016b4e:	b088      	sub	sp, #32
 8016b50:	af00      	add	r7, sp, #0
 8016b52:	6078      	str	r0, [r7, #4]
 8016b54:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016b56:	2300      	movs	r3, #0
 8016b58:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016b5a:	683a      	ldr	r2, [r7, #0]
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	429a      	cmp	r2, r3
 8016b60:	d105      	bne.n	8016b6e <ip_reass_free_complete_datagram+0x22>
 8016b62:	4b45      	ldr	r3, [pc, #276]	; (8016c78 <ip_reass_free_complete_datagram+0x12c>)
 8016b64:	22ab      	movs	r2, #171	; 0xab
 8016b66:	4945      	ldr	r1, [pc, #276]	; (8016c7c <ip_reass_free_complete_datagram+0x130>)
 8016b68:	4845      	ldr	r0, [pc, #276]	; (8016c80 <ip_reass_free_complete_datagram+0x134>)
 8016b6a:	f001 f92f 	bl	8017dcc <iprintf>
  if (prev != NULL) {
 8016b6e:	683b      	ldr	r3, [r7, #0]
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d00a      	beq.n	8016b8a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016b74:	683b      	ldr	r3, [r7, #0]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	687a      	ldr	r2, [r7, #4]
 8016b7a:	429a      	cmp	r2, r3
 8016b7c:	d005      	beq.n	8016b8a <ip_reass_free_complete_datagram+0x3e>
 8016b7e:	4b3e      	ldr	r3, [pc, #248]	; (8016c78 <ip_reass_free_complete_datagram+0x12c>)
 8016b80:	22ad      	movs	r2, #173	; 0xad
 8016b82:	4940      	ldr	r1, [pc, #256]	; (8016c84 <ip_reass_free_complete_datagram+0x138>)
 8016b84:	483e      	ldr	r0, [pc, #248]	; (8016c80 <ip_reass_free_complete_datagram+0x134>)
 8016b86:	f001 f921 	bl	8017dcc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	685b      	ldr	r3, [r3, #4]
 8016b8e:	685b      	ldr	r3, [r3, #4]
 8016b90:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016b92:	697b      	ldr	r3, [r7, #20]
 8016b94:	889b      	ldrh	r3, [r3, #4]
 8016b96:	b29b      	uxth	r3, r3
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d12a      	bne.n	8016bf2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	685b      	ldr	r3, [r3, #4]
 8016ba0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016ba2:	697b      	ldr	r3, [r7, #20]
 8016ba4:	681a      	ldr	r2, [r3, #0]
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016baa:	69bb      	ldr	r3, [r7, #24]
 8016bac:	6858      	ldr	r0, [r3, #4]
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	3308      	adds	r3, #8
 8016bb2:	2214      	movs	r2, #20
 8016bb4:	4619      	mov	r1, r3
 8016bb6:	f001 f8dc 	bl	8017d72 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016bba:	2101      	movs	r1, #1
 8016bbc:	69b8      	ldr	r0, [r7, #24]
 8016bbe:	f7ff fc2b 	bl	8016418 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016bc2:	69b8      	ldr	r0, [r7, #24]
 8016bc4:	f7f5 fc12 	bl	800c3ec <pbuf_clen>
 8016bc8:	4603      	mov	r3, r0
 8016bca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016bcc:	8bfa      	ldrh	r2, [r7, #30]
 8016bce:	8a7b      	ldrh	r3, [r7, #18]
 8016bd0:	4413      	add	r3, r2
 8016bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016bd6:	db05      	blt.n	8016be4 <ip_reass_free_complete_datagram+0x98>
 8016bd8:	4b27      	ldr	r3, [pc, #156]	; (8016c78 <ip_reass_free_complete_datagram+0x12c>)
 8016bda:	22bc      	movs	r2, #188	; 0xbc
 8016bdc:	492a      	ldr	r1, [pc, #168]	; (8016c88 <ip_reass_free_complete_datagram+0x13c>)
 8016bde:	4828      	ldr	r0, [pc, #160]	; (8016c80 <ip_reass_free_complete_datagram+0x134>)
 8016be0:	f001 f8f4 	bl	8017dcc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016be4:	8bfa      	ldrh	r2, [r7, #30]
 8016be6:	8a7b      	ldrh	r3, [r7, #18]
 8016be8:	4413      	add	r3, r2
 8016bea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016bec:	69b8      	ldr	r0, [r7, #24]
 8016bee:	f7f5 fb6f 	bl	800c2d0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	685b      	ldr	r3, [r3, #4]
 8016bf6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016bf8:	e01f      	b.n	8016c3a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016bfa:	69bb      	ldr	r3, [r7, #24]
 8016bfc:	685b      	ldr	r3, [r3, #4]
 8016bfe:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016c00:	69bb      	ldr	r3, [r7, #24]
 8016c02:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016c04:	697b      	ldr	r3, [r7, #20]
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016c0a:	68f8      	ldr	r0, [r7, #12]
 8016c0c:	f7f5 fbee 	bl	800c3ec <pbuf_clen>
 8016c10:	4603      	mov	r3, r0
 8016c12:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016c14:	8bfa      	ldrh	r2, [r7, #30]
 8016c16:	8a7b      	ldrh	r3, [r7, #18]
 8016c18:	4413      	add	r3, r2
 8016c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016c1e:	db05      	blt.n	8016c2c <ip_reass_free_complete_datagram+0xe0>
 8016c20:	4b15      	ldr	r3, [pc, #84]	; (8016c78 <ip_reass_free_complete_datagram+0x12c>)
 8016c22:	22cc      	movs	r2, #204	; 0xcc
 8016c24:	4918      	ldr	r1, [pc, #96]	; (8016c88 <ip_reass_free_complete_datagram+0x13c>)
 8016c26:	4816      	ldr	r0, [pc, #88]	; (8016c80 <ip_reass_free_complete_datagram+0x134>)
 8016c28:	f001 f8d0 	bl	8017dcc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016c2c:	8bfa      	ldrh	r2, [r7, #30]
 8016c2e:	8a7b      	ldrh	r3, [r7, #18]
 8016c30:	4413      	add	r3, r2
 8016c32:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016c34:	68f8      	ldr	r0, [r7, #12]
 8016c36:	f7f5 fb4b 	bl	800c2d0 <pbuf_free>
  while (p != NULL) {
 8016c3a:	69bb      	ldr	r3, [r7, #24]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d1dc      	bne.n	8016bfa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016c40:	6839      	ldr	r1, [r7, #0]
 8016c42:	6878      	ldr	r0, [r7, #4]
 8016c44:	f000 f8c2 	bl	8016dcc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016c48:	4b10      	ldr	r3, [pc, #64]	; (8016c8c <ip_reass_free_complete_datagram+0x140>)
 8016c4a:	881b      	ldrh	r3, [r3, #0]
 8016c4c:	8bfa      	ldrh	r2, [r7, #30]
 8016c4e:	429a      	cmp	r2, r3
 8016c50:	d905      	bls.n	8016c5e <ip_reass_free_complete_datagram+0x112>
 8016c52:	4b09      	ldr	r3, [pc, #36]	; (8016c78 <ip_reass_free_complete_datagram+0x12c>)
 8016c54:	22d2      	movs	r2, #210	; 0xd2
 8016c56:	490e      	ldr	r1, [pc, #56]	; (8016c90 <ip_reass_free_complete_datagram+0x144>)
 8016c58:	4809      	ldr	r0, [pc, #36]	; (8016c80 <ip_reass_free_complete_datagram+0x134>)
 8016c5a:	f001 f8b7 	bl	8017dcc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016c5e:	4b0b      	ldr	r3, [pc, #44]	; (8016c8c <ip_reass_free_complete_datagram+0x140>)
 8016c60:	881a      	ldrh	r2, [r3, #0]
 8016c62:	8bfb      	ldrh	r3, [r7, #30]
 8016c64:	1ad3      	subs	r3, r2, r3
 8016c66:	b29a      	uxth	r2, r3
 8016c68:	4b08      	ldr	r3, [pc, #32]	; (8016c8c <ip_reass_free_complete_datagram+0x140>)
 8016c6a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016c6c:	8bfb      	ldrh	r3, [r7, #30]
}
 8016c6e:	4618      	mov	r0, r3
 8016c70:	3720      	adds	r7, #32
 8016c72:	46bd      	mov	sp, r7
 8016c74:	bd80      	pop	{r7, pc}
 8016c76:	bf00      	nop
 8016c78:	0801ca64 	.word	0x0801ca64
 8016c7c:	0801caa0 	.word	0x0801caa0
 8016c80:	0801caac 	.word	0x0801caac
 8016c84:	0801cad4 	.word	0x0801cad4
 8016c88:	0801cae8 	.word	0x0801cae8
 8016c8c:	20008bd4 	.word	0x20008bd4
 8016c90:	0801cb08 	.word	0x0801cb08

08016c94 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016c94:	b580      	push	{r7, lr}
 8016c96:	b08a      	sub	sp, #40	; 0x28
 8016c98:	af00      	add	r7, sp, #0
 8016c9a:	6078      	str	r0, [r7, #4]
 8016c9c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016ca2:	2300      	movs	r3, #0
 8016ca4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016ca6:	2300      	movs	r3, #0
 8016ca8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016caa:	2300      	movs	r3, #0
 8016cac:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016cae:	2300      	movs	r3, #0
 8016cb0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016cb2:	4b28      	ldr	r3, [pc, #160]	; (8016d54 <ip_reass_remove_oldest_datagram+0xc0>)
 8016cb4:	681b      	ldr	r3, [r3, #0]
 8016cb6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016cb8:	e030      	b.n	8016d1c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cbc:	695a      	ldr	r2, [r3, #20]
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	68db      	ldr	r3, [r3, #12]
 8016cc2:	429a      	cmp	r2, r3
 8016cc4:	d10c      	bne.n	8016ce0 <ip_reass_remove_oldest_datagram+0x4c>
 8016cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cc8:	699a      	ldr	r2, [r3, #24]
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	691b      	ldr	r3, [r3, #16]
 8016cce:	429a      	cmp	r2, r3
 8016cd0:	d106      	bne.n	8016ce0 <ip_reass_remove_oldest_datagram+0x4c>
 8016cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cd4:	899a      	ldrh	r2, [r3, #12]
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	889b      	ldrh	r3, [r3, #4]
 8016cda:	b29b      	uxth	r3, r3
 8016cdc:	429a      	cmp	r2, r3
 8016cde:	d014      	beq.n	8016d0a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016ce0:	693b      	ldr	r3, [r7, #16]
 8016ce2:	3301      	adds	r3, #1
 8016ce4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016ce6:	6a3b      	ldr	r3, [r7, #32]
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d104      	bne.n	8016cf6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cee:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016cf0:	69fb      	ldr	r3, [r7, #28]
 8016cf2:	61bb      	str	r3, [r7, #24]
 8016cf4:	e009      	b.n	8016d0a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cf8:	7fda      	ldrb	r2, [r3, #31]
 8016cfa:	6a3b      	ldr	r3, [r7, #32]
 8016cfc:	7fdb      	ldrb	r3, [r3, #31]
 8016cfe:	429a      	cmp	r2, r3
 8016d00:	d803      	bhi.n	8016d0a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d04:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016d06:	69fb      	ldr	r3, [r7, #28]
 8016d08:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d001      	beq.n	8016d16 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d14:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d1cb      	bne.n	8016cba <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016d22:	6a3b      	ldr	r3, [r7, #32]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d008      	beq.n	8016d3a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016d28:	69b9      	ldr	r1, [r7, #24]
 8016d2a:	6a38      	ldr	r0, [r7, #32]
 8016d2c:	f7ff ff0e 	bl	8016b4c <ip_reass_free_complete_datagram>
 8016d30:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016d32:	697a      	ldr	r2, [r7, #20]
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	4413      	add	r3, r2
 8016d38:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016d3a:	697a      	ldr	r2, [r7, #20]
 8016d3c:	683b      	ldr	r3, [r7, #0]
 8016d3e:	429a      	cmp	r2, r3
 8016d40:	da02      	bge.n	8016d48 <ip_reass_remove_oldest_datagram+0xb4>
 8016d42:	693b      	ldr	r3, [r7, #16]
 8016d44:	2b01      	cmp	r3, #1
 8016d46:	dcac      	bgt.n	8016ca2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016d48:	697b      	ldr	r3, [r7, #20]
}
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	3728      	adds	r7, #40	; 0x28
 8016d4e:	46bd      	mov	sp, r7
 8016d50:	bd80      	pop	{r7, pc}
 8016d52:	bf00      	nop
 8016d54:	20008bd0 	.word	0x20008bd0

08016d58 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016d58:	b580      	push	{r7, lr}
 8016d5a:	b084      	sub	sp, #16
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	6078      	str	r0, [r7, #4]
 8016d60:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016d62:	2004      	movs	r0, #4
 8016d64:	f7f4 fbb6 	bl	800b4d4 <memp_malloc>
 8016d68:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016d6a:	68fb      	ldr	r3, [r7, #12]
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d110      	bne.n	8016d92 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016d70:	6839      	ldr	r1, [r7, #0]
 8016d72:	6878      	ldr	r0, [r7, #4]
 8016d74:	f7ff ff8e 	bl	8016c94 <ip_reass_remove_oldest_datagram>
 8016d78:	4602      	mov	r2, r0
 8016d7a:	683b      	ldr	r3, [r7, #0]
 8016d7c:	4293      	cmp	r3, r2
 8016d7e:	dc03      	bgt.n	8016d88 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016d80:	2004      	movs	r0, #4
 8016d82:	f7f4 fba7 	bl	800b4d4 <memp_malloc>
 8016d86:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d101      	bne.n	8016d92 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016d8e:	2300      	movs	r3, #0
 8016d90:	e016      	b.n	8016dc0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016d92:	2220      	movs	r2, #32
 8016d94:	2100      	movs	r1, #0
 8016d96:	68f8      	ldr	r0, [r7, #12]
 8016d98:	f001 f80f 	bl	8017dba <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	220f      	movs	r2, #15
 8016da0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016da2:	4b09      	ldr	r3, [pc, #36]	; (8016dc8 <ip_reass_enqueue_new_datagram+0x70>)
 8016da4:	681a      	ldr	r2, [r3, #0]
 8016da6:	68fb      	ldr	r3, [r7, #12]
 8016da8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016daa:	4a07      	ldr	r2, [pc, #28]	; (8016dc8 <ip_reass_enqueue_new_datagram+0x70>)
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	3308      	adds	r3, #8
 8016db4:	2214      	movs	r2, #20
 8016db6:	6879      	ldr	r1, [r7, #4]
 8016db8:	4618      	mov	r0, r3
 8016dba:	f000 ffda 	bl	8017d72 <memcpy>
  return ipr;
 8016dbe:	68fb      	ldr	r3, [r7, #12]
}
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	3710      	adds	r7, #16
 8016dc4:	46bd      	mov	sp, r7
 8016dc6:	bd80      	pop	{r7, pc}
 8016dc8:	20008bd0 	.word	0x20008bd0

08016dcc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016dcc:	b580      	push	{r7, lr}
 8016dce:	b082      	sub	sp, #8
 8016dd0:	af00      	add	r7, sp, #0
 8016dd2:	6078      	str	r0, [r7, #4]
 8016dd4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016dd6:	4b10      	ldr	r3, [pc, #64]	; (8016e18 <ip_reass_dequeue_datagram+0x4c>)
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	687a      	ldr	r2, [r7, #4]
 8016ddc:	429a      	cmp	r2, r3
 8016dde:	d104      	bne.n	8016dea <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	4a0c      	ldr	r2, [pc, #48]	; (8016e18 <ip_reass_dequeue_datagram+0x4c>)
 8016de6:	6013      	str	r3, [r2, #0]
 8016de8:	e00d      	b.n	8016e06 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016dea:	683b      	ldr	r3, [r7, #0]
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d106      	bne.n	8016dfe <ip_reass_dequeue_datagram+0x32>
 8016df0:	4b0a      	ldr	r3, [pc, #40]	; (8016e1c <ip_reass_dequeue_datagram+0x50>)
 8016df2:	f240 1245 	movw	r2, #325	; 0x145
 8016df6:	490a      	ldr	r1, [pc, #40]	; (8016e20 <ip_reass_dequeue_datagram+0x54>)
 8016df8:	480a      	ldr	r0, [pc, #40]	; (8016e24 <ip_reass_dequeue_datagram+0x58>)
 8016dfa:	f000 ffe7 	bl	8017dcc <iprintf>
    prev->next = ipr->next;
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	681a      	ldr	r2, [r3, #0]
 8016e02:	683b      	ldr	r3, [r7, #0]
 8016e04:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016e06:	6879      	ldr	r1, [r7, #4]
 8016e08:	2004      	movs	r0, #4
 8016e0a:	f7f4 fbb5 	bl	800b578 <memp_free>
}
 8016e0e:	bf00      	nop
 8016e10:	3708      	adds	r7, #8
 8016e12:	46bd      	mov	sp, r7
 8016e14:	bd80      	pop	{r7, pc}
 8016e16:	bf00      	nop
 8016e18:	20008bd0 	.word	0x20008bd0
 8016e1c:	0801ca64 	.word	0x0801ca64
 8016e20:	0801cb2c 	.word	0x0801cb2c
 8016e24:	0801caac 	.word	0x0801caac

08016e28 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b08c      	sub	sp, #48	; 0x30
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	60f8      	str	r0, [r7, #12]
 8016e30:	60b9      	str	r1, [r7, #8]
 8016e32:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016e34:	2300      	movs	r3, #0
 8016e36:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016e38:	2301      	movs	r3, #1
 8016e3a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016e3c:	68bb      	ldr	r3, [r7, #8]
 8016e3e:	685b      	ldr	r3, [r3, #4]
 8016e40:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016e42:	69fb      	ldr	r3, [r7, #28]
 8016e44:	885b      	ldrh	r3, [r3, #2]
 8016e46:	b29b      	uxth	r3, r3
 8016e48:	4618      	mov	r0, r3
 8016e4a:	f7f3 fe57 	bl	800aafc <lwip_htons>
 8016e4e:	4603      	mov	r3, r0
 8016e50:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016e52:	69fb      	ldr	r3, [r7, #28]
 8016e54:	781b      	ldrb	r3, [r3, #0]
 8016e56:	f003 030f 	and.w	r3, r3, #15
 8016e5a:	b2db      	uxtb	r3, r3
 8016e5c:	009b      	lsls	r3, r3, #2
 8016e5e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016e60:	7e7b      	ldrb	r3, [r7, #25]
 8016e62:	b29b      	uxth	r3, r3
 8016e64:	8b7a      	ldrh	r2, [r7, #26]
 8016e66:	429a      	cmp	r2, r3
 8016e68:	d202      	bcs.n	8016e70 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8016e6e:	e135      	b.n	80170dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016e70:	7e7b      	ldrb	r3, [r7, #25]
 8016e72:	b29b      	uxth	r3, r3
 8016e74:	8b7a      	ldrh	r2, [r7, #26]
 8016e76:	1ad3      	subs	r3, r2, r3
 8016e78:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016e7a:	69fb      	ldr	r3, [r7, #28]
 8016e7c:	88db      	ldrh	r3, [r3, #6]
 8016e7e:	b29b      	uxth	r3, r3
 8016e80:	4618      	mov	r0, r3
 8016e82:	f7f3 fe3b 	bl	800aafc <lwip_htons>
 8016e86:	4603      	mov	r3, r0
 8016e88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016e8c:	b29b      	uxth	r3, r3
 8016e8e:	00db      	lsls	r3, r3, #3
 8016e90:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016e92:	68bb      	ldr	r3, [r7, #8]
 8016e94:	685b      	ldr	r3, [r3, #4]
 8016e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	701a      	strb	r2, [r3, #0]
 8016e9e:	2200      	movs	r2, #0
 8016ea0:	705a      	strb	r2, [r3, #1]
 8016ea2:	2200      	movs	r2, #0
 8016ea4:	709a      	strb	r2, [r3, #2]
 8016ea6:	2200      	movs	r2, #0
 8016ea8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eac:	8afa      	ldrh	r2, [r7, #22]
 8016eae:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016eb0:	8afa      	ldrh	r2, [r7, #22]
 8016eb2:	8b7b      	ldrh	r3, [r7, #26]
 8016eb4:	4413      	add	r3, r2
 8016eb6:	b29a      	uxth	r2, r3
 8016eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eba:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ebe:	88db      	ldrh	r3, [r3, #6]
 8016ec0:	b29b      	uxth	r3, r3
 8016ec2:	8afa      	ldrh	r2, [r7, #22]
 8016ec4:	429a      	cmp	r2, r3
 8016ec6:	d902      	bls.n	8016ece <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8016ecc:	e106      	b.n	80170dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016ece:	68fb      	ldr	r3, [r7, #12]
 8016ed0:	685b      	ldr	r3, [r3, #4]
 8016ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8016ed4:	e068      	b.n	8016fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ed8:	685b      	ldr	r3, [r3, #4]
 8016eda:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ede:	889b      	ldrh	r3, [r3, #4]
 8016ee0:	b29a      	uxth	r2, r3
 8016ee2:	693b      	ldr	r3, [r7, #16]
 8016ee4:	889b      	ldrh	r3, [r3, #4]
 8016ee6:	b29b      	uxth	r3, r3
 8016ee8:	429a      	cmp	r2, r3
 8016eea:	d235      	bcs.n	8016f58 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ef0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d020      	beq.n	8016f3a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016efa:	889b      	ldrh	r3, [r3, #4]
 8016efc:	b29a      	uxth	r2, r3
 8016efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f00:	88db      	ldrh	r3, [r3, #6]
 8016f02:	b29b      	uxth	r3, r3
 8016f04:	429a      	cmp	r2, r3
 8016f06:	d307      	bcc.n	8016f18 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f0a:	88db      	ldrh	r3, [r3, #6]
 8016f0c:	b29a      	uxth	r2, r3
 8016f0e:	693b      	ldr	r3, [r7, #16]
 8016f10:	889b      	ldrh	r3, [r3, #4]
 8016f12:	b29b      	uxth	r3, r3
 8016f14:	429a      	cmp	r2, r3
 8016f16:	d902      	bls.n	8016f1e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016f18:	f04f 33ff 	mov.w	r3, #4294967295
 8016f1c:	e0de      	b.n	80170dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f20:	68ba      	ldr	r2, [r7, #8]
 8016f22:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f26:	88db      	ldrh	r3, [r3, #6]
 8016f28:	b29a      	uxth	r2, r3
 8016f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f2c:	889b      	ldrh	r3, [r3, #4]
 8016f2e:	b29b      	uxth	r3, r3
 8016f30:	429a      	cmp	r2, r3
 8016f32:	d03d      	beq.n	8016fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016f34:	2300      	movs	r3, #0
 8016f36:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016f38:	e03a      	b.n	8016fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f3c:	88db      	ldrh	r3, [r3, #6]
 8016f3e:	b29a      	uxth	r2, r3
 8016f40:	693b      	ldr	r3, [r7, #16]
 8016f42:	889b      	ldrh	r3, [r3, #4]
 8016f44:	b29b      	uxth	r3, r3
 8016f46:	429a      	cmp	r2, r3
 8016f48:	d902      	bls.n	8016f50 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8016f4e:	e0c5      	b.n	80170dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	68ba      	ldr	r2, [r7, #8]
 8016f54:	605a      	str	r2, [r3, #4]
      break;
 8016f56:	e02b      	b.n	8016fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f5a:	889b      	ldrh	r3, [r3, #4]
 8016f5c:	b29a      	uxth	r2, r3
 8016f5e:	693b      	ldr	r3, [r7, #16]
 8016f60:	889b      	ldrh	r3, [r3, #4]
 8016f62:	b29b      	uxth	r3, r3
 8016f64:	429a      	cmp	r2, r3
 8016f66:	d102      	bne.n	8016f6e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016f68:	f04f 33ff 	mov.w	r3, #4294967295
 8016f6c:	e0b6      	b.n	80170dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f70:	889b      	ldrh	r3, [r3, #4]
 8016f72:	b29a      	uxth	r2, r3
 8016f74:	693b      	ldr	r3, [r7, #16]
 8016f76:	88db      	ldrh	r3, [r3, #6]
 8016f78:	b29b      	uxth	r3, r3
 8016f7a:	429a      	cmp	r2, r3
 8016f7c:	d202      	bcs.n	8016f84 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8016f82:	e0ab      	b.n	80170dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d009      	beq.n	8016f9e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f8c:	88db      	ldrh	r3, [r3, #6]
 8016f8e:	b29a      	uxth	r2, r3
 8016f90:	693b      	ldr	r3, [r7, #16]
 8016f92:	889b      	ldrh	r3, [r3, #4]
 8016f94:	b29b      	uxth	r3, r3
 8016f96:	429a      	cmp	r2, r3
 8016f98:	d001      	beq.n	8016f9e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016f9a:	2300      	movs	r3, #0
 8016f9c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016f9e:	693b      	ldr	r3, [r7, #16]
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016fa4:	693b      	ldr	r3, [r7, #16]
 8016fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d193      	bne.n	8016ed6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016fae:	e000      	b.n	8016fb2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016fb0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d12d      	bne.n	8017014 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d01c      	beq.n	8016ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fc0:	88db      	ldrh	r3, [r3, #6]
 8016fc2:	b29a      	uxth	r2, r3
 8016fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fc6:	889b      	ldrh	r3, [r3, #4]
 8016fc8:	b29b      	uxth	r3, r3
 8016fca:	429a      	cmp	r2, r3
 8016fcc:	d906      	bls.n	8016fdc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016fce:	4b45      	ldr	r3, [pc, #276]	; (80170e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016fd0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016fd4:	4944      	ldr	r1, [pc, #272]	; (80170e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016fd6:	4845      	ldr	r0, [pc, #276]	; (80170ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016fd8:	f000 fef8 	bl	8017dcc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fde:	68ba      	ldr	r2, [r7, #8]
 8016fe0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fe4:	88db      	ldrh	r3, [r3, #6]
 8016fe6:	b29a      	uxth	r2, r3
 8016fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fea:	889b      	ldrh	r3, [r3, #4]
 8016fec:	b29b      	uxth	r3, r3
 8016fee:	429a      	cmp	r2, r3
 8016ff0:	d010      	beq.n	8017014 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016ff2:	2300      	movs	r3, #0
 8016ff4:	623b      	str	r3, [r7, #32]
 8016ff6:	e00d      	b.n	8017014 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	685b      	ldr	r3, [r3, #4]
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d006      	beq.n	801700e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017000:	4b38      	ldr	r3, [pc, #224]	; (80170e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017002:	f240 12bf 	movw	r2, #447	; 0x1bf
 8017006:	493a      	ldr	r1, [pc, #232]	; (80170f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017008:	4838      	ldr	r0, [pc, #224]	; (80170ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801700a:	f000 fedf 	bl	8017dcc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	68ba      	ldr	r2, [r7, #8]
 8017012:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	2b00      	cmp	r3, #0
 8017018:	d105      	bne.n	8017026 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	7f9b      	ldrb	r3, [r3, #30]
 801701e:	f003 0301 	and.w	r3, r3, #1
 8017022:	2b00      	cmp	r3, #0
 8017024:	d059      	beq.n	80170da <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017026:	6a3b      	ldr	r3, [r7, #32]
 8017028:	2b00      	cmp	r3, #0
 801702a:	d04f      	beq.n	80170cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801702c:	68fb      	ldr	r3, [r7, #12]
 801702e:	685b      	ldr	r3, [r3, #4]
 8017030:	2b00      	cmp	r3, #0
 8017032:	d006      	beq.n	8017042 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	685b      	ldr	r3, [r3, #4]
 8017038:	685b      	ldr	r3, [r3, #4]
 801703a:	889b      	ldrh	r3, [r3, #4]
 801703c:	b29b      	uxth	r3, r3
 801703e:	2b00      	cmp	r3, #0
 8017040:	d002      	beq.n	8017048 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017042:	2300      	movs	r3, #0
 8017044:	623b      	str	r3, [r7, #32]
 8017046:	e041      	b.n	80170cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801704a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801704c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017052:	e012      	b.n	801707a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017056:	685b      	ldr	r3, [r3, #4]
 8017058:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801705a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801705c:	88db      	ldrh	r3, [r3, #6]
 801705e:	b29a      	uxth	r2, r3
 8017060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017062:	889b      	ldrh	r3, [r3, #4]
 8017064:	b29b      	uxth	r3, r3
 8017066:	429a      	cmp	r2, r3
 8017068:	d002      	beq.n	8017070 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801706a:	2300      	movs	r3, #0
 801706c:	623b      	str	r3, [r7, #32]
            break;
 801706e:	e007      	b.n	8017080 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017072:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801707c:	2b00      	cmp	r3, #0
 801707e:	d1e9      	bne.n	8017054 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017080:	6a3b      	ldr	r3, [r7, #32]
 8017082:	2b00      	cmp	r3, #0
 8017084:	d022      	beq.n	80170cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	685b      	ldr	r3, [r3, #4]
 801708a:	2b00      	cmp	r3, #0
 801708c:	d106      	bne.n	801709c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801708e:	4b15      	ldr	r3, [pc, #84]	; (80170e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017090:	f240 12df 	movw	r2, #479	; 0x1df
 8017094:	4917      	ldr	r1, [pc, #92]	; (80170f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017096:	4815      	ldr	r0, [pc, #84]	; (80170ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017098:	f000 fe98 	bl	8017dcc <iprintf>
          LWIP_ASSERT("sanity check",
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	685b      	ldr	r3, [r3, #4]
 80170a0:	685b      	ldr	r3, [r3, #4]
 80170a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80170a4:	429a      	cmp	r2, r3
 80170a6:	d106      	bne.n	80170b6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80170a8:	4b0e      	ldr	r3, [pc, #56]	; (80170e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80170aa:	f240 12e1 	movw	r2, #481	; 0x1e1
 80170ae:	4911      	ldr	r1, [pc, #68]	; (80170f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80170b0:	480e      	ldr	r0, [pc, #56]	; (80170ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80170b2:	f000 fe8b 	bl	8017dcc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80170b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d006      	beq.n	80170cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80170be:	4b09      	ldr	r3, [pc, #36]	; (80170e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80170c0:	f240 12e3 	movw	r2, #483	; 0x1e3
 80170c4:	490c      	ldr	r1, [pc, #48]	; (80170f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80170c6:	4809      	ldr	r0, [pc, #36]	; (80170ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80170c8:	f000 fe80 	bl	8017dcc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80170cc:	6a3b      	ldr	r3, [r7, #32]
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	bf14      	ite	ne
 80170d2:	2301      	movne	r3, #1
 80170d4:	2300      	moveq	r3, #0
 80170d6:	b2db      	uxtb	r3, r3
 80170d8:	e000      	b.n	80170dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80170da:	2300      	movs	r3, #0
}
 80170dc:	4618      	mov	r0, r3
 80170de:	3730      	adds	r7, #48	; 0x30
 80170e0:	46bd      	mov	sp, r7
 80170e2:	bd80      	pop	{r7, pc}
 80170e4:	0801ca64 	.word	0x0801ca64
 80170e8:	0801cb48 	.word	0x0801cb48
 80170ec:	0801caac 	.word	0x0801caac
 80170f0:	0801cb68 	.word	0x0801cb68
 80170f4:	0801cba0 	.word	0x0801cba0
 80170f8:	0801cbb0 	.word	0x0801cbb0

080170fc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80170fc:	b580      	push	{r7, lr}
 80170fe:	b08e      	sub	sp, #56	; 0x38
 8017100:	af00      	add	r7, sp, #0
 8017102:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	685b      	ldr	r3, [r3, #4]
 8017108:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801710a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801710c:	781b      	ldrb	r3, [r3, #0]
 801710e:	f003 030f 	and.w	r3, r3, #15
 8017112:	b2db      	uxtb	r3, r3
 8017114:	009b      	lsls	r3, r3, #2
 8017116:	b2db      	uxtb	r3, r3
 8017118:	2b14      	cmp	r3, #20
 801711a:	f040 8167 	bne.w	80173ec <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801711e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017120:	88db      	ldrh	r3, [r3, #6]
 8017122:	b29b      	uxth	r3, r3
 8017124:	4618      	mov	r0, r3
 8017126:	f7f3 fce9 	bl	800aafc <lwip_htons>
 801712a:	4603      	mov	r3, r0
 801712c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017130:	b29b      	uxth	r3, r3
 8017132:	00db      	lsls	r3, r3, #3
 8017134:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017138:	885b      	ldrh	r3, [r3, #2]
 801713a:	b29b      	uxth	r3, r3
 801713c:	4618      	mov	r0, r3
 801713e:	f7f3 fcdd 	bl	800aafc <lwip_htons>
 8017142:	4603      	mov	r3, r0
 8017144:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017148:	781b      	ldrb	r3, [r3, #0]
 801714a:	f003 030f 	and.w	r3, r3, #15
 801714e:	b2db      	uxtb	r3, r3
 8017150:	009b      	lsls	r3, r3, #2
 8017152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017156:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801715a:	b29b      	uxth	r3, r3
 801715c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801715e:	429a      	cmp	r2, r3
 8017160:	f0c0 8146 	bcc.w	80173f0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017164:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017168:	b29b      	uxth	r3, r3
 801716a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801716c:	1ad3      	subs	r3, r2, r3
 801716e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017170:	6878      	ldr	r0, [r7, #4]
 8017172:	f7f5 f93b 	bl	800c3ec <pbuf_clen>
 8017176:	4603      	mov	r3, r0
 8017178:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801717a:	4ba3      	ldr	r3, [pc, #652]	; (8017408 <ip4_reass+0x30c>)
 801717c:	881b      	ldrh	r3, [r3, #0]
 801717e:	461a      	mov	r2, r3
 8017180:	8c3b      	ldrh	r3, [r7, #32]
 8017182:	4413      	add	r3, r2
 8017184:	2b0a      	cmp	r3, #10
 8017186:	dd10      	ble.n	80171aa <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017188:	8c3b      	ldrh	r3, [r7, #32]
 801718a:	4619      	mov	r1, r3
 801718c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801718e:	f7ff fd81 	bl	8016c94 <ip_reass_remove_oldest_datagram>
 8017192:	4603      	mov	r3, r0
 8017194:	2b00      	cmp	r3, #0
 8017196:	f000 812d 	beq.w	80173f4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801719a:	4b9b      	ldr	r3, [pc, #620]	; (8017408 <ip4_reass+0x30c>)
 801719c:	881b      	ldrh	r3, [r3, #0]
 801719e:	461a      	mov	r2, r3
 80171a0:	8c3b      	ldrh	r3, [r7, #32]
 80171a2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80171a4:	2b0a      	cmp	r3, #10
 80171a6:	f300 8125 	bgt.w	80173f4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80171aa:	4b98      	ldr	r3, [pc, #608]	; (801740c <ip4_reass+0x310>)
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	633b      	str	r3, [r7, #48]	; 0x30
 80171b0:	e015      	b.n	80171de <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80171b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171b4:	695a      	ldr	r2, [r3, #20]
 80171b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171b8:	68db      	ldr	r3, [r3, #12]
 80171ba:	429a      	cmp	r2, r3
 80171bc:	d10c      	bne.n	80171d8 <ip4_reass+0xdc>
 80171be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171c0:	699a      	ldr	r2, [r3, #24]
 80171c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171c4:	691b      	ldr	r3, [r3, #16]
 80171c6:	429a      	cmp	r2, r3
 80171c8:	d106      	bne.n	80171d8 <ip4_reass+0xdc>
 80171ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171cc:	899a      	ldrh	r2, [r3, #12]
 80171ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171d0:	889b      	ldrh	r3, [r3, #4]
 80171d2:	b29b      	uxth	r3, r3
 80171d4:	429a      	cmp	r2, r3
 80171d6:	d006      	beq.n	80171e6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80171d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	633b      	str	r3, [r7, #48]	; 0x30
 80171de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d1e6      	bne.n	80171b2 <ip4_reass+0xb6>
 80171e4:	e000      	b.n	80171e8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80171e6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80171e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d109      	bne.n	8017202 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80171ee:	8c3b      	ldrh	r3, [r7, #32]
 80171f0:	4619      	mov	r1, r3
 80171f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80171f4:	f7ff fdb0 	bl	8016d58 <ip_reass_enqueue_new_datagram>
 80171f8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80171fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d11c      	bne.n	801723a <ip4_reass+0x13e>
      goto nullreturn;
 8017200:	e0f9      	b.n	80173f6 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017204:	88db      	ldrh	r3, [r3, #6]
 8017206:	b29b      	uxth	r3, r3
 8017208:	4618      	mov	r0, r3
 801720a:	f7f3 fc77 	bl	800aafc <lwip_htons>
 801720e:	4603      	mov	r3, r0
 8017210:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017214:	2b00      	cmp	r3, #0
 8017216:	d110      	bne.n	801723a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801721a:	89db      	ldrh	r3, [r3, #14]
 801721c:	4618      	mov	r0, r3
 801721e:	f7f3 fc6d 	bl	800aafc <lwip_htons>
 8017222:	4603      	mov	r3, r0
 8017224:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017228:	2b00      	cmp	r3, #0
 801722a:	d006      	beq.n	801723a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801722c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801722e:	3308      	adds	r3, #8
 8017230:	2214      	movs	r2, #20
 8017232:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017234:	4618      	mov	r0, r3
 8017236:	f000 fd9c 	bl	8017d72 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801723a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801723c:	88db      	ldrh	r3, [r3, #6]
 801723e:	b29b      	uxth	r3, r3
 8017240:	f003 0320 	and.w	r3, r3, #32
 8017244:	2b00      	cmp	r3, #0
 8017246:	bf0c      	ite	eq
 8017248:	2301      	moveq	r3, #1
 801724a:	2300      	movne	r3, #0
 801724c:	b2db      	uxtb	r3, r3
 801724e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017250:	69fb      	ldr	r3, [r7, #28]
 8017252:	2b00      	cmp	r3, #0
 8017254:	d00e      	beq.n	8017274 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017256:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017258:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801725a:	4413      	add	r3, r2
 801725c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801725e:	8b7a      	ldrh	r2, [r7, #26]
 8017260:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017262:	429a      	cmp	r2, r3
 8017264:	f0c0 80a0 	bcc.w	80173a8 <ip4_reass+0x2ac>
 8017268:	8b7b      	ldrh	r3, [r7, #26]
 801726a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801726e:	4293      	cmp	r3, r2
 8017270:	f200 809a 	bhi.w	80173a8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017274:	69fa      	ldr	r2, [r7, #28]
 8017276:	6879      	ldr	r1, [r7, #4]
 8017278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801727a:	f7ff fdd5 	bl	8016e28 <ip_reass_chain_frag_into_datagram_and_validate>
 801727e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017280:	697b      	ldr	r3, [r7, #20]
 8017282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017286:	f000 8091 	beq.w	80173ac <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801728a:	4b5f      	ldr	r3, [pc, #380]	; (8017408 <ip4_reass+0x30c>)
 801728c:	881a      	ldrh	r2, [r3, #0]
 801728e:	8c3b      	ldrh	r3, [r7, #32]
 8017290:	4413      	add	r3, r2
 8017292:	b29a      	uxth	r2, r3
 8017294:	4b5c      	ldr	r3, [pc, #368]	; (8017408 <ip4_reass+0x30c>)
 8017296:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017298:	69fb      	ldr	r3, [r7, #28]
 801729a:	2b00      	cmp	r3, #0
 801729c:	d00d      	beq.n	80172ba <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801729e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80172a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80172a2:	4413      	add	r3, r2
 80172a4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80172a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172a8:	8a7a      	ldrh	r2, [r7, #18]
 80172aa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80172ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172ae:	7f9b      	ldrb	r3, [r3, #30]
 80172b0:	f043 0301 	orr.w	r3, r3, #1
 80172b4:	b2da      	uxtb	r2, r3
 80172b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172b8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80172ba:	697b      	ldr	r3, [r7, #20]
 80172bc:	2b01      	cmp	r3, #1
 80172be:	d171      	bne.n	80173a4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80172c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172c2:	8b9b      	ldrh	r3, [r3, #28]
 80172c4:	3314      	adds	r3, #20
 80172c6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80172c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172ca:	685b      	ldr	r3, [r3, #4]
 80172cc:	685b      	ldr	r3, [r3, #4]
 80172ce:	681b      	ldr	r3, [r3, #0]
 80172d0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80172d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172d4:	685b      	ldr	r3, [r3, #4]
 80172d6:	685b      	ldr	r3, [r3, #4]
 80172d8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80172da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172dc:	3308      	adds	r3, #8
 80172de:	2214      	movs	r2, #20
 80172e0:	4619      	mov	r1, r3
 80172e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80172e4:	f000 fd45 	bl	8017d72 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80172e8:	8a3b      	ldrh	r3, [r7, #16]
 80172ea:	4618      	mov	r0, r3
 80172ec:	f7f3 fc06 	bl	800aafc <lwip_htons>
 80172f0:	4603      	mov	r3, r0
 80172f2:	461a      	mov	r2, r3
 80172f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172f6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80172f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172fa:	2200      	movs	r2, #0
 80172fc:	719a      	strb	r2, [r3, #6]
 80172fe:	2200      	movs	r2, #0
 8017300:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017304:	2200      	movs	r2, #0
 8017306:	729a      	strb	r2, [r3, #10]
 8017308:	2200      	movs	r2, #0
 801730a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801730c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801730e:	685b      	ldr	r3, [r3, #4]
 8017310:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017312:	e00d      	b.n	8017330 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017316:	685b      	ldr	r3, [r3, #4]
 8017318:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801731a:	2114      	movs	r1, #20
 801731c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801731e:	f7f4 ff51 	bl	800c1c4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8017322:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017324:	6878      	ldr	r0, [r7, #4]
 8017326:	f7f5 f8a1 	bl	800c46c <pbuf_cat>
      r = iprh->next_pbuf;
 801732a:	68fb      	ldr	r3, [r7, #12]
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017332:	2b00      	cmp	r3, #0
 8017334:	d1ee      	bne.n	8017314 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017336:	4b35      	ldr	r3, [pc, #212]	; (801740c <ip4_reass+0x310>)
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801733c:	429a      	cmp	r2, r3
 801733e:	d102      	bne.n	8017346 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017340:	2300      	movs	r3, #0
 8017342:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017344:	e010      	b.n	8017368 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017346:	4b31      	ldr	r3, [pc, #196]	; (801740c <ip4_reass+0x310>)
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801734c:	e007      	b.n	801735e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801734e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017350:	681b      	ldr	r3, [r3, #0]
 8017352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017354:	429a      	cmp	r2, r3
 8017356:	d006      	beq.n	8017366 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801735a:	681b      	ldr	r3, [r3, #0]
 801735c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801735e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017360:	2b00      	cmp	r3, #0
 8017362:	d1f4      	bne.n	801734e <ip4_reass+0x252>
 8017364:	e000      	b.n	8017368 <ip4_reass+0x26c>
          break;
 8017366:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017368:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801736a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801736c:	f7ff fd2e 	bl	8016dcc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017370:	6878      	ldr	r0, [r7, #4]
 8017372:	f7f5 f83b 	bl	800c3ec <pbuf_clen>
 8017376:	4603      	mov	r3, r0
 8017378:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801737a:	4b23      	ldr	r3, [pc, #140]	; (8017408 <ip4_reass+0x30c>)
 801737c:	881b      	ldrh	r3, [r3, #0]
 801737e:	8c3a      	ldrh	r2, [r7, #32]
 8017380:	429a      	cmp	r2, r3
 8017382:	d906      	bls.n	8017392 <ip4_reass+0x296>
 8017384:	4b22      	ldr	r3, [pc, #136]	; (8017410 <ip4_reass+0x314>)
 8017386:	f240 229b 	movw	r2, #667	; 0x29b
 801738a:	4922      	ldr	r1, [pc, #136]	; (8017414 <ip4_reass+0x318>)
 801738c:	4822      	ldr	r0, [pc, #136]	; (8017418 <ip4_reass+0x31c>)
 801738e:	f000 fd1d 	bl	8017dcc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017392:	4b1d      	ldr	r3, [pc, #116]	; (8017408 <ip4_reass+0x30c>)
 8017394:	881a      	ldrh	r2, [r3, #0]
 8017396:	8c3b      	ldrh	r3, [r7, #32]
 8017398:	1ad3      	subs	r3, r2, r3
 801739a:	b29a      	uxth	r2, r3
 801739c:	4b1a      	ldr	r3, [pc, #104]	; (8017408 <ip4_reass+0x30c>)
 801739e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	e02c      	b.n	80173fe <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80173a4:	2300      	movs	r3, #0
 80173a6:	e02a      	b.n	80173fe <ip4_reass+0x302>

nullreturn_ipr:
 80173a8:	bf00      	nop
 80173aa:	e000      	b.n	80173ae <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80173ac:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80173ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d106      	bne.n	80173c2 <ip4_reass+0x2c6>
 80173b4:	4b16      	ldr	r3, [pc, #88]	; (8017410 <ip4_reass+0x314>)
 80173b6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80173ba:	4918      	ldr	r1, [pc, #96]	; (801741c <ip4_reass+0x320>)
 80173bc:	4816      	ldr	r0, [pc, #88]	; (8017418 <ip4_reass+0x31c>)
 80173be:	f000 fd05 	bl	8017dcc <iprintf>
  if (ipr->p == NULL) {
 80173c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173c4:	685b      	ldr	r3, [r3, #4]
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d114      	bne.n	80173f4 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80173ca:	4b10      	ldr	r3, [pc, #64]	; (801740c <ip4_reass+0x310>)
 80173cc:	681b      	ldr	r3, [r3, #0]
 80173ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80173d0:	429a      	cmp	r2, r3
 80173d2:	d006      	beq.n	80173e2 <ip4_reass+0x2e6>
 80173d4:	4b0e      	ldr	r3, [pc, #56]	; (8017410 <ip4_reass+0x314>)
 80173d6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80173da:	4911      	ldr	r1, [pc, #68]	; (8017420 <ip4_reass+0x324>)
 80173dc:	480e      	ldr	r0, [pc, #56]	; (8017418 <ip4_reass+0x31c>)
 80173de:	f000 fcf5 	bl	8017dcc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80173e2:	2100      	movs	r1, #0
 80173e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80173e6:	f7ff fcf1 	bl	8016dcc <ip_reass_dequeue_datagram>
 80173ea:	e004      	b.n	80173f6 <ip4_reass+0x2fa>
    goto nullreturn;
 80173ec:	bf00      	nop
 80173ee:	e002      	b.n	80173f6 <ip4_reass+0x2fa>
    goto nullreturn;
 80173f0:	bf00      	nop
 80173f2:	e000      	b.n	80173f6 <ip4_reass+0x2fa>
  }

nullreturn:
 80173f4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80173f6:	6878      	ldr	r0, [r7, #4]
 80173f8:	f7f4 ff6a 	bl	800c2d0 <pbuf_free>
  return NULL;
 80173fc:	2300      	movs	r3, #0
}
 80173fe:	4618      	mov	r0, r3
 8017400:	3738      	adds	r7, #56	; 0x38
 8017402:	46bd      	mov	sp, r7
 8017404:	bd80      	pop	{r7, pc}
 8017406:	bf00      	nop
 8017408:	20008bd4 	.word	0x20008bd4
 801740c:	20008bd0 	.word	0x20008bd0
 8017410:	0801ca64 	.word	0x0801ca64
 8017414:	0801cbd4 	.word	0x0801cbd4
 8017418:	0801caac 	.word	0x0801caac
 801741c:	0801cbf0 	.word	0x0801cbf0
 8017420:	0801cbfc 	.word	0x0801cbfc

08017424 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017424:	b580      	push	{r7, lr}
 8017426:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017428:	2005      	movs	r0, #5
 801742a:	f7f4 f853 	bl	800b4d4 <memp_malloc>
 801742e:	4603      	mov	r3, r0
}
 8017430:	4618      	mov	r0, r3
 8017432:	bd80      	pop	{r7, pc}

08017434 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017434:	b580      	push	{r7, lr}
 8017436:	b082      	sub	sp, #8
 8017438:	af00      	add	r7, sp, #0
 801743a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	2b00      	cmp	r3, #0
 8017440:	d106      	bne.n	8017450 <ip_frag_free_pbuf_custom_ref+0x1c>
 8017442:	4b07      	ldr	r3, [pc, #28]	; (8017460 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017444:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8017448:	4906      	ldr	r1, [pc, #24]	; (8017464 <ip_frag_free_pbuf_custom_ref+0x30>)
 801744a:	4807      	ldr	r0, [pc, #28]	; (8017468 <ip_frag_free_pbuf_custom_ref+0x34>)
 801744c:	f000 fcbe 	bl	8017dcc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017450:	6879      	ldr	r1, [r7, #4]
 8017452:	2005      	movs	r0, #5
 8017454:	f7f4 f890 	bl	800b578 <memp_free>
}
 8017458:	bf00      	nop
 801745a:	3708      	adds	r7, #8
 801745c:	46bd      	mov	sp, r7
 801745e:	bd80      	pop	{r7, pc}
 8017460:	0801ca64 	.word	0x0801ca64
 8017464:	0801cc1c 	.word	0x0801cc1c
 8017468:	0801caac 	.word	0x0801caac

0801746c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801746c:	b580      	push	{r7, lr}
 801746e:	b084      	sub	sp, #16
 8017470:	af00      	add	r7, sp, #0
 8017472:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	2b00      	cmp	r3, #0
 801747c:	d106      	bne.n	801748c <ipfrag_free_pbuf_custom+0x20>
 801747e:	4b11      	ldr	r3, [pc, #68]	; (80174c4 <ipfrag_free_pbuf_custom+0x58>)
 8017480:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017484:	4910      	ldr	r1, [pc, #64]	; (80174c8 <ipfrag_free_pbuf_custom+0x5c>)
 8017486:	4811      	ldr	r0, [pc, #68]	; (80174cc <ipfrag_free_pbuf_custom+0x60>)
 8017488:	f000 fca0 	bl	8017dcc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801748c:	68fa      	ldr	r2, [r7, #12]
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	429a      	cmp	r2, r3
 8017492:	d006      	beq.n	80174a2 <ipfrag_free_pbuf_custom+0x36>
 8017494:	4b0b      	ldr	r3, [pc, #44]	; (80174c4 <ipfrag_free_pbuf_custom+0x58>)
 8017496:	f240 22cf 	movw	r2, #719	; 0x2cf
 801749a:	490d      	ldr	r1, [pc, #52]	; (80174d0 <ipfrag_free_pbuf_custom+0x64>)
 801749c:	480b      	ldr	r0, [pc, #44]	; (80174cc <ipfrag_free_pbuf_custom+0x60>)
 801749e:	f000 fc95 	bl	8017dcc <iprintf>
  if (pcr->original != NULL) {
 80174a2:	68fb      	ldr	r3, [r7, #12]
 80174a4:	695b      	ldr	r3, [r3, #20]
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d004      	beq.n	80174b4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	695b      	ldr	r3, [r3, #20]
 80174ae:	4618      	mov	r0, r3
 80174b0:	f7f4 ff0e 	bl	800c2d0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80174b4:	68f8      	ldr	r0, [r7, #12]
 80174b6:	f7ff ffbd 	bl	8017434 <ip_frag_free_pbuf_custom_ref>
}
 80174ba:	bf00      	nop
 80174bc:	3710      	adds	r7, #16
 80174be:	46bd      	mov	sp, r7
 80174c0:	bd80      	pop	{r7, pc}
 80174c2:	bf00      	nop
 80174c4:	0801ca64 	.word	0x0801ca64
 80174c8:	0801cc28 	.word	0x0801cc28
 80174cc:	0801caac 	.word	0x0801caac
 80174d0:	0801cc34 	.word	0x0801cc34

080174d4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80174d4:	b580      	push	{r7, lr}
 80174d6:	b094      	sub	sp, #80	; 0x50
 80174d8:	af02      	add	r7, sp, #8
 80174da:	60f8      	str	r0, [r7, #12]
 80174dc:	60b9      	str	r1, [r7, #8]
 80174de:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80174e0:	2300      	movs	r3, #0
 80174e2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80174e6:	68bb      	ldr	r3, [r7, #8]
 80174e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80174ea:	3b14      	subs	r3, #20
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	da00      	bge.n	80174f2 <ip4_frag+0x1e>
 80174f0:	3307      	adds	r3, #7
 80174f2:	10db      	asrs	r3, r3, #3
 80174f4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80174f6:	2314      	movs	r3, #20
 80174f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80174fa:	68fb      	ldr	r3, [r7, #12]
 80174fc:	685b      	ldr	r3, [r3, #4]
 80174fe:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017502:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017506:	781b      	ldrb	r3, [r3, #0]
 8017508:	f003 030f 	and.w	r3, r3, #15
 801750c:	b2db      	uxtb	r3, r3
 801750e:	009b      	lsls	r3, r3, #2
 8017510:	b2db      	uxtb	r3, r3
 8017512:	2b14      	cmp	r3, #20
 8017514:	d002      	beq.n	801751c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017516:	f06f 0305 	mvn.w	r3, #5
 801751a:	e10f      	b.n	801773c <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	895b      	ldrh	r3, [r3, #10]
 8017520:	2b13      	cmp	r3, #19
 8017522:	d809      	bhi.n	8017538 <ip4_frag+0x64>
 8017524:	4b87      	ldr	r3, [pc, #540]	; (8017744 <ip4_frag+0x270>)
 8017526:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801752a:	4987      	ldr	r1, [pc, #540]	; (8017748 <ip4_frag+0x274>)
 801752c:	4887      	ldr	r0, [pc, #540]	; (801774c <ip4_frag+0x278>)
 801752e:	f000 fc4d 	bl	8017dcc <iprintf>
 8017532:	f06f 0305 	mvn.w	r3, #5
 8017536:	e101      	b.n	801773c <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801753a:	88db      	ldrh	r3, [r3, #6]
 801753c:	b29b      	uxth	r3, r3
 801753e:	4618      	mov	r0, r3
 8017540:	f7f3 fadc 	bl	800aafc <lwip_htons>
 8017544:	4603      	mov	r3, r0
 8017546:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017548:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801754a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801754e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017552:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017558:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	891b      	ldrh	r3, [r3, #8]
 801755e:	3b14      	subs	r3, #20
 8017560:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017564:	e0e0      	b.n	8017728 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017566:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017568:	00db      	lsls	r3, r3, #3
 801756a:	b29b      	uxth	r3, r3
 801756c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017570:	4293      	cmp	r3, r2
 8017572:	bf28      	it	cs
 8017574:	4613      	movcs	r3, r2
 8017576:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017578:	f44f 7220 	mov.w	r2, #640	; 0x280
 801757c:	2114      	movs	r1, #20
 801757e:	200e      	movs	r0, #14
 8017580:	f7f4 fbc6 	bl	800bd10 <pbuf_alloc>
 8017584:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8017586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017588:	2b00      	cmp	r3, #0
 801758a:	f000 80d4 	beq.w	8017736 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017590:	895b      	ldrh	r3, [r3, #10]
 8017592:	2b13      	cmp	r3, #19
 8017594:	d806      	bhi.n	80175a4 <ip4_frag+0xd0>
 8017596:	4b6b      	ldr	r3, [pc, #428]	; (8017744 <ip4_frag+0x270>)
 8017598:	f240 3225 	movw	r2, #805	; 0x325
 801759c:	496c      	ldr	r1, [pc, #432]	; (8017750 <ip4_frag+0x27c>)
 801759e:	486b      	ldr	r0, [pc, #428]	; (801774c <ip4_frag+0x278>)
 80175a0:	f000 fc14 	bl	8017dcc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80175a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175a6:	685b      	ldr	r3, [r3, #4]
 80175a8:	2214      	movs	r2, #20
 80175aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80175ac:	4618      	mov	r0, r3
 80175ae:	f000 fbe0 	bl	8017d72 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80175b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175b4:	685b      	ldr	r3, [r3, #4]
 80175b6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80175b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80175ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80175be:	e064      	b.n	801768a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	895a      	ldrh	r2, [r3, #10]
 80175c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80175c6:	1ad3      	subs	r3, r2, r3
 80175c8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80175ca:	68fb      	ldr	r3, [r7, #12]
 80175cc:	895b      	ldrh	r3, [r3, #10]
 80175ce:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80175d0:	429a      	cmp	r2, r3
 80175d2:	d906      	bls.n	80175e2 <ip4_frag+0x10e>
 80175d4:	4b5b      	ldr	r3, [pc, #364]	; (8017744 <ip4_frag+0x270>)
 80175d6:	f240 322d 	movw	r2, #813	; 0x32d
 80175da:	495e      	ldr	r1, [pc, #376]	; (8017754 <ip4_frag+0x280>)
 80175dc:	485b      	ldr	r0, [pc, #364]	; (801774c <ip4_frag+0x278>)
 80175de:	f000 fbf5 	bl	8017dcc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80175e2:	8bfa      	ldrh	r2, [r7, #30]
 80175e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80175e8:	4293      	cmp	r3, r2
 80175ea:	bf28      	it	cs
 80175ec:	4613      	movcs	r3, r2
 80175ee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80175f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d105      	bne.n	8017606 <ip4_frag+0x132>
        poff = 0;
 80175fa:	2300      	movs	r3, #0
 80175fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80175fe:	68fb      	ldr	r3, [r7, #12]
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	60fb      	str	r3, [r7, #12]
        continue;
 8017604:	e041      	b.n	801768a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017606:	f7ff ff0d 	bl	8017424 <ip_frag_alloc_pbuf_custom_ref>
 801760a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801760c:	69bb      	ldr	r3, [r7, #24]
 801760e:	2b00      	cmp	r3, #0
 8017610:	d103      	bne.n	801761a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017612:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017614:	f7f4 fe5c 	bl	800c2d0 <pbuf_free>
        goto memerr;
 8017618:	e08e      	b.n	8017738 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801761a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017620:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017622:	4413      	add	r3, r2
 8017624:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017628:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801762c:	9201      	str	r2, [sp, #4]
 801762e:	9300      	str	r3, [sp, #0]
 8017630:	4603      	mov	r3, r0
 8017632:	2241      	movs	r2, #65	; 0x41
 8017634:	2000      	movs	r0, #0
 8017636:	f7f4 fc91 	bl	800bf5c <pbuf_alloced_custom>
 801763a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801763c:	697b      	ldr	r3, [r7, #20]
 801763e:	2b00      	cmp	r3, #0
 8017640:	d106      	bne.n	8017650 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017642:	69b8      	ldr	r0, [r7, #24]
 8017644:	f7ff fef6 	bl	8017434 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017648:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801764a:	f7f4 fe41 	bl	800c2d0 <pbuf_free>
        goto memerr;
 801764e:	e073      	b.n	8017738 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8017650:	68f8      	ldr	r0, [r7, #12]
 8017652:	f7f4 fee3 	bl	800c41c <pbuf_ref>
      pcr->original = p;
 8017656:	69bb      	ldr	r3, [r7, #24]
 8017658:	68fa      	ldr	r2, [r7, #12]
 801765a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801765c:	69bb      	ldr	r3, [r7, #24]
 801765e:	4a3e      	ldr	r2, [pc, #248]	; (8017758 <ip4_frag+0x284>)
 8017660:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017662:	6979      	ldr	r1, [r7, #20]
 8017664:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017666:	f7f4 ff01 	bl	800c46c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801766a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801766e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017672:	1ad3      	subs	r3, r2, r3
 8017674:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017678:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801767c:	2b00      	cmp	r3, #0
 801767e:	d004      	beq.n	801768a <ip4_frag+0x1b6>
        poff = 0;
 8017680:	2300      	movs	r3, #0
 8017682:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017684:	68fb      	ldr	r3, [r7, #12]
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801768a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801768e:	2b00      	cmp	r3, #0
 8017690:	d196      	bne.n	80175c0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017692:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017694:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017698:	4413      	add	r3, r2
 801769a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801769c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80176a0:	68bb      	ldr	r3, [r7, #8]
 80176a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80176a4:	3b14      	subs	r3, #20
 80176a6:	429a      	cmp	r2, r3
 80176a8:	bfd4      	ite	le
 80176aa:	2301      	movle	r3, #1
 80176ac:	2300      	movgt	r3, #0
 80176ae:	b2db      	uxtb	r3, r3
 80176b0:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80176b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80176b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80176ba:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80176bc:	6a3b      	ldr	r3, [r7, #32]
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d002      	beq.n	80176c8 <ip4_frag+0x1f4>
 80176c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d003      	beq.n	80176d0 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80176c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80176ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80176ce:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80176d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80176d2:	4618      	mov	r0, r3
 80176d4:	f7f3 fa12 	bl	800aafc <lwip_htons>
 80176d8:	4603      	mov	r3, r0
 80176da:	461a      	mov	r2, r3
 80176dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176de:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80176e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80176e2:	3314      	adds	r3, #20
 80176e4:	b29b      	uxth	r3, r3
 80176e6:	4618      	mov	r0, r3
 80176e8:	f7f3 fa08 	bl	800aafc <lwip_htons>
 80176ec:	4603      	mov	r3, r0
 80176ee:	461a      	mov	r2, r3
 80176f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176f2:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80176f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176f6:	2200      	movs	r2, #0
 80176f8:	729a      	strb	r2, [r3, #10]
 80176fa:	2200      	movs	r2, #0
 80176fc:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80176fe:	68bb      	ldr	r3, [r7, #8]
 8017700:	695b      	ldr	r3, [r3, #20]
 8017702:	687a      	ldr	r2, [r7, #4]
 8017704:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017706:	68b8      	ldr	r0, [r7, #8]
 8017708:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801770a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801770c:	f7f4 fde0 	bl	800c2d0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017710:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017714:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017716:	1ad3      	subs	r3, r2, r3
 8017718:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801771c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017720:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017722:	4413      	add	r3, r2
 8017724:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017728:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801772c:	2b00      	cmp	r3, #0
 801772e:	f47f af1a 	bne.w	8017566 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017732:	2300      	movs	r3, #0
 8017734:	e002      	b.n	801773c <ip4_frag+0x268>
      goto memerr;
 8017736:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017738:	f04f 33ff 	mov.w	r3, #4294967295
}
 801773c:	4618      	mov	r0, r3
 801773e:	3748      	adds	r7, #72	; 0x48
 8017740:	46bd      	mov	sp, r7
 8017742:	bd80      	pop	{r7, pc}
 8017744:	0801ca64 	.word	0x0801ca64
 8017748:	0801cc40 	.word	0x0801cc40
 801774c:	0801caac 	.word	0x0801caac
 8017750:	0801cc5c 	.word	0x0801cc5c
 8017754:	0801cc7c 	.word	0x0801cc7c
 8017758:	0801746d 	.word	0x0801746d

0801775c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801775c:	b580      	push	{r7, lr}
 801775e:	b086      	sub	sp, #24
 8017760:	af00      	add	r7, sp, #0
 8017762:	6078      	str	r0, [r7, #4]
 8017764:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017766:	230e      	movs	r3, #14
 8017768:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	895b      	ldrh	r3, [r3, #10]
 801776e:	2b0e      	cmp	r3, #14
 8017770:	d96e      	bls.n	8017850 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	7bdb      	ldrb	r3, [r3, #15]
 8017776:	2b00      	cmp	r3, #0
 8017778:	d106      	bne.n	8017788 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801777a:	683b      	ldr	r3, [r7, #0]
 801777c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017780:	3301      	adds	r3, #1
 8017782:	b2da      	uxtb	r2, r3
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	685b      	ldr	r3, [r3, #4]
 801778c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801778e:	693b      	ldr	r3, [r7, #16]
 8017790:	7b1a      	ldrb	r2, [r3, #12]
 8017792:	7b5b      	ldrb	r3, [r3, #13]
 8017794:	021b      	lsls	r3, r3, #8
 8017796:	4313      	orrs	r3, r2
 8017798:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801779a:	693b      	ldr	r3, [r7, #16]
 801779c:	781b      	ldrb	r3, [r3, #0]
 801779e:	f003 0301 	and.w	r3, r3, #1
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d023      	beq.n	80177ee <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80177a6:	693b      	ldr	r3, [r7, #16]
 80177a8:	781b      	ldrb	r3, [r3, #0]
 80177aa:	2b01      	cmp	r3, #1
 80177ac:	d10f      	bne.n	80177ce <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80177ae:	693b      	ldr	r3, [r7, #16]
 80177b0:	785b      	ldrb	r3, [r3, #1]
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d11b      	bne.n	80177ee <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80177b6:	693b      	ldr	r3, [r7, #16]
 80177b8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80177ba:	2b5e      	cmp	r3, #94	; 0x5e
 80177bc:	d117      	bne.n	80177ee <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	7b5b      	ldrb	r3, [r3, #13]
 80177c2:	f043 0310 	orr.w	r3, r3, #16
 80177c6:	b2da      	uxtb	r2, r3
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	735a      	strb	r2, [r3, #13]
 80177cc:	e00f      	b.n	80177ee <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80177ce:	693b      	ldr	r3, [r7, #16]
 80177d0:	2206      	movs	r2, #6
 80177d2:	4928      	ldr	r1, [pc, #160]	; (8017874 <ethernet_input+0x118>)
 80177d4:	4618      	mov	r0, r3
 80177d6:	f000 fabd 	bl	8017d54 <memcmp>
 80177da:	4603      	mov	r3, r0
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d106      	bne.n	80177ee <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	7b5b      	ldrb	r3, [r3, #13]
 80177e4:	f043 0308 	orr.w	r3, r3, #8
 80177e8:	b2da      	uxtb	r2, r3
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80177ee:	89fb      	ldrh	r3, [r7, #14]
 80177f0:	2b08      	cmp	r3, #8
 80177f2:	d003      	beq.n	80177fc <ethernet_input+0xa0>
 80177f4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80177f8:	d014      	beq.n	8017824 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80177fa:	e032      	b.n	8017862 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80177fc:	683b      	ldr	r3, [r7, #0]
 80177fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017802:	f003 0308 	and.w	r3, r3, #8
 8017806:	2b00      	cmp	r3, #0
 8017808:	d024      	beq.n	8017854 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801780a:	8afb      	ldrh	r3, [r7, #22]
 801780c:	4619      	mov	r1, r3
 801780e:	6878      	ldr	r0, [r7, #4]
 8017810:	f7f4 fcd8 	bl	800c1c4 <pbuf_remove_header>
 8017814:	4603      	mov	r3, r0
 8017816:	2b00      	cmp	r3, #0
 8017818:	d11e      	bne.n	8017858 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801781a:	6839      	ldr	r1, [r7, #0]
 801781c:	6878      	ldr	r0, [r7, #4]
 801781e:	f7fe ff0f 	bl	8016640 <ip4_input>
      break;
 8017822:	e013      	b.n	801784c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017824:	683b      	ldr	r3, [r7, #0]
 8017826:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801782a:	f003 0308 	and.w	r3, r3, #8
 801782e:	2b00      	cmp	r3, #0
 8017830:	d014      	beq.n	801785c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017832:	8afb      	ldrh	r3, [r7, #22]
 8017834:	4619      	mov	r1, r3
 8017836:	6878      	ldr	r0, [r7, #4]
 8017838:	f7f4 fcc4 	bl	800c1c4 <pbuf_remove_header>
 801783c:	4603      	mov	r3, r0
 801783e:	2b00      	cmp	r3, #0
 8017840:	d10e      	bne.n	8017860 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017842:	6839      	ldr	r1, [r7, #0]
 8017844:	6878      	ldr	r0, [r7, #4]
 8017846:	f7fe f8ab 	bl	80159a0 <etharp_input>
      break;
 801784a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801784c:	2300      	movs	r3, #0
 801784e:	e00c      	b.n	801786a <ethernet_input+0x10e>
    goto free_and_return;
 8017850:	bf00      	nop
 8017852:	e006      	b.n	8017862 <ethernet_input+0x106>
        goto free_and_return;
 8017854:	bf00      	nop
 8017856:	e004      	b.n	8017862 <ethernet_input+0x106>
        goto free_and_return;
 8017858:	bf00      	nop
 801785a:	e002      	b.n	8017862 <ethernet_input+0x106>
        goto free_and_return;
 801785c:	bf00      	nop
 801785e:	e000      	b.n	8017862 <ethernet_input+0x106>
        goto free_and_return;
 8017860:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017862:	6878      	ldr	r0, [r7, #4]
 8017864:	f7f4 fd34 	bl	800c2d0 <pbuf_free>
  return ERR_OK;
 8017868:	2300      	movs	r3, #0
}
 801786a:	4618      	mov	r0, r3
 801786c:	3718      	adds	r7, #24
 801786e:	46bd      	mov	sp, r7
 8017870:	bd80      	pop	{r7, pc}
 8017872:	bf00      	nop
 8017874:	08026f9c 	.word	0x08026f9c

08017878 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017878:	b580      	push	{r7, lr}
 801787a:	b086      	sub	sp, #24
 801787c:	af00      	add	r7, sp, #0
 801787e:	60f8      	str	r0, [r7, #12]
 8017880:	60b9      	str	r1, [r7, #8]
 8017882:	607a      	str	r2, [r7, #4]
 8017884:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017886:	8c3b      	ldrh	r3, [r7, #32]
 8017888:	4618      	mov	r0, r3
 801788a:	f7f3 f937 	bl	800aafc <lwip_htons>
 801788e:	4603      	mov	r3, r0
 8017890:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017892:	210e      	movs	r1, #14
 8017894:	68b8      	ldr	r0, [r7, #8]
 8017896:	f7f4 fc85 	bl	800c1a4 <pbuf_add_header>
 801789a:	4603      	mov	r3, r0
 801789c:	2b00      	cmp	r3, #0
 801789e:	d125      	bne.n	80178ec <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80178a0:	68bb      	ldr	r3, [r7, #8]
 80178a2:	685b      	ldr	r3, [r3, #4]
 80178a4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80178a6:	693b      	ldr	r3, [r7, #16]
 80178a8:	8afa      	ldrh	r2, [r7, #22]
 80178aa:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80178ac:	693b      	ldr	r3, [r7, #16]
 80178ae:	2206      	movs	r2, #6
 80178b0:	6839      	ldr	r1, [r7, #0]
 80178b2:	4618      	mov	r0, r3
 80178b4:	f000 fa5d 	bl	8017d72 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80178b8:	693b      	ldr	r3, [r7, #16]
 80178ba:	3306      	adds	r3, #6
 80178bc:	2206      	movs	r2, #6
 80178be:	6879      	ldr	r1, [r7, #4]
 80178c0:	4618      	mov	r0, r3
 80178c2:	f000 fa56 	bl	8017d72 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80178cc:	2b06      	cmp	r3, #6
 80178ce:	d006      	beq.n	80178de <ethernet_output+0x66>
 80178d0:	4b0a      	ldr	r3, [pc, #40]	; (80178fc <ethernet_output+0x84>)
 80178d2:	f240 1233 	movw	r2, #307	; 0x133
 80178d6:	490a      	ldr	r1, [pc, #40]	; (8017900 <ethernet_output+0x88>)
 80178d8:	480a      	ldr	r0, [pc, #40]	; (8017904 <ethernet_output+0x8c>)
 80178da:	f000 fa77 	bl	8017dcc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	699b      	ldr	r3, [r3, #24]
 80178e2:	68b9      	ldr	r1, [r7, #8]
 80178e4:	68f8      	ldr	r0, [r7, #12]
 80178e6:	4798      	blx	r3
 80178e8:	4603      	mov	r3, r0
 80178ea:	e002      	b.n	80178f2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80178ec:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80178ee:	f06f 0301 	mvn.w	r3, #1
}
 80178f2:	4618      	mov	r0, r3
 80178f4:	3718      	adds	r7, #24
 80178f6:	46bd      	mov	sp, r7
 80178f8:	bd80      	pop	{r7, pc}
 80178fa:	bf00      	nop
 80178fc:	0801cc8c 	.word	0x0801cc8c
 8017900:	0801ccc4 	.word	0x0801ccc4
 8017904:	0801ccf8 	.word	0x0801ccf8

08017908 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017908:	b580      	push	{r7, lr}
 801790a:	b086      	sub	sp, #24
 801790c:	af00      	add	r7, sp, #0
 801790e:	6078      	str	r0, [r7, #4]
 8017910:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8017912:	683b      	ldr	r3, [r7, #0]
 8017914:	60bb      	str	r3, [r7, #8]
 8017916:	2304      	movs	r3, #4
 8017918:	60fb      	str	r3, [r7, #12]
 801791a:	2300      	movs	r3, #0
 801791c:	613b      	str	r3, [r7, #16]
 801791e:	2300      	movs	r3, #0
 8017920:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8017922:	f107 0308 	add.w	r3, r7, #8
 8017926:	2100      	movs	r1, #0
 8017928:	4618      	mov	r0, r3
 801792a:	f7ed fa38 	bl	8004d9e <osMessageCreate>
 801792e:	4602      	mov	r2, r0
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	2b00      	cmp	r3, #0
 801793a:	d102      	bne.n	8017942 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801793c:	f04f 33ff 	mov.w	r3, #4294967295
 8017940:	e000      	b.n	8017944 <sys_mbox_new+0x3c>

  return ERR_OK;
 8017942:	2300      	movs	r3, #0
}
 8017944:	4618      	mov	r0, r3
 8017946:	3718      	adds	r7, #24
 8017948:	46bd      	mov	sp, r7
 801794a:	bd80      	pop	{r7, pc}

0801794c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801794c:	b580      	push	{r7, lr}
 801794e:	b082      	sub	sp, #8
 8017950:	af00      	add	r7, sp, #0
 8017952:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	681b      	ldr	r3, [r3, #0]
 8017958:	4618      	mov	r0, r3
 801795a:	f7ed fafd 	bl	8004f58 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	4618      	mov	r0, r3
 8017964:	f7ed fb0e 	bl	8004f84 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8017968:	bf00      	nop
 801796a:	3708      	adds	r7, #8
 801796c:	46bd      	mov	sp, r7
 801796e:	bd80      	pop	{r7, pc}

08017970 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017970:	b580      	push	{r7, lr}
 8017972:	b084      	sub	sp, #16
 8017974:	af00      	add	r7, sp, #0
 8017976:	6078      	str	r0, [r7, #4]
 8017978:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	6839      	ldr	r1, [r7, #0]
 8017980:	2200      	movs	r2, #0
 8017982:	4618      	mov	r0, r3
 8017984:	f7ed fa34 	bl	8004df0 <osMessagePut>
 8017988:	4603      	mov	r3, r0
 801798a:	2b00      	cmp	r3, #0
 801798c:	d102      	bne.n	8017994 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801798e:	2300      	movs	r3, #0
 8017990:	73fb      	strb	r3, [r7, #15]
 8017992:	e001      	b.n	8017998 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017994:	23ff      	movs	r3, #255	; 0xff
 8017996:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017998:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801799c:	4618      	mov	r0, r3
 801799e:	3710      	adds	r7, #16
 80179a0:	46bd      	mov	sp, r7
 80179a2:	bd80      	pop	{r7, pc}

080179a4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80179a4:	b580      	push	{r7, lr}
 80179a6:	b08c      	sub	sp, #48	; 0x30
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	61f8      	str	r0, [r7, #28]
 80179ac:	61b9      	str	r1, [r7, #24]
 80179ae:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80179b0:	f7ed f81d 	bl	80049ee <osKernelSysTick>
 80179b4:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80179b6:	697b      	ldr	r3, [r7, #20]
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d017      	beq.n	80179ec <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80179bc:	69fb      	ldr	r3, [r7, #28]
 80179be:	6819      	ldr	r1, [r3, #0]
 80179c0:	f107 0320 	add.w	r3, r7, #32
 80179c4:	697a      	ldr	r2, [r7, #20]
 80179c6:	4618      	mov	r0, r3
 80179c8:	f7ed fa52 	bl	8004e70 <osMessageGet>

    if(event.status == osEventMessage)
 80179cc:	6a3b      	ldr	r3, [r7, #32]
 80179ce:	2b10      	cmp	r3, #16
 80179d0:	d109      	bne.n	80179e6 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80179d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179d4:	461a      	mov	r2, r3
 80179d6:	69bb      	ldr	r3, [r7, #24]
 80179d8:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80179da:	f7ed f808 	bl	80049ee <osKernelSysTick>
 80179de:	4602      	mov	r2, r0
 80179e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179e2:	1ad3      	subs	r3, r2, r3
 80179e4:	e019      	b.n	8017a1a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80179e6:	f04f 33ff 	mov.w	r3, #4294967295
 80179ea:	e016      	b.n	8017a1a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80179ec:	69fb      	ldr	r3, [r7, #28]
 80179ee:	6819      	ldr	r1, [r3, #0]
 80179f0:	463b      	mov	r3, r7
 80179f2:	f04f 32ff 	mov.w	r2, #4294967295
 80179f6:	4618      	mov	r0, r3
 80179f8:	f7ed fa3a 	bl	8004e70 <osMessageGet>
 80179fc:	f107 0320 	add.w	r3, r7, #32
 8017a00:	463a      	mov	r2, r7
 8017a02:	ca07      	ldmia	r2, {r0, r1, r2}
 8017a04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a0a:	461a      	mov	r2, r3
 8017a0c:	69bb      	ldr	r3, [r7, #24]
 8017a0e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8017a10:	f7ec ffed 	bl	80049ee <osKernelSysTick>
 8017a14:	4602      	mov	r2, r0
 8017a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a18:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017a1a:	4618      	mov	r0, r3
 8017a1c:	3730      	adds	r7, #48	; 0x30
 8017a1e:	46bd      	mov	sp, r7
 8017a20:	bd80      	pop	{r7, pc}

08017a22 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8017a22:	b580      	push	{r7, lr}
 8017a24:	b086      	sub	sp, #24
 8017a26:	af00      	add	r7, sp, #0
 8017a28:	6078      	str	r0, [r7, #4]
 8017a2a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	6819      	ldr	r1, [r3, #0]
 8017a30:	f107 030c 	add.w	r3, r7, #12
 8017a34:	2200      	movs	r2, #0
 8017a36:	4618      	mov	r0, r3
 8017a38:	f7ed fa1a 	bl	8004e70 <osMessageGet>

  if(event.status == osEventMessage)
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	2b10      	cmp	r3, #16
 8017a40:	d105      	bne.n	8017a4e <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8017a42:	693b      	ldr	r3, [r7, #16]
 8017a44:	461a      	mov	r2, r3
 8017a46:	683b      	ldr	r3, [r7, #0]
 8017a48:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8017a4a:	2300      	movs	r3, #0
 8017a4c:	e001      	b.n	8017a52 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8017a4e:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8017a52:	4618      	mov	r0, r3
 8017a54:	3718      	adds	r7, #24
 8017a56:	46bd      	mov	sp, r7
 8017a58:	bd80      	pop	{r7, pc}

08017a5a <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017a5a:	b480      	push	{r7}
 8017a5c:	b083      	sub	sp, #12
 8017a5e:	af00      	add	r7, sp, #0
 8017a60:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d101      	bne.n	8017a6e <sys_mbox_valid+0x14>
    return 0;
 8017a6a:	2300      	movs	r3, #0
 8017a6c:	e000      	b.n	8017a70 <sys_mbox_valid+0x16>
  else
    return 1;
 8017a6e:	2301      	movs	r3, #1
}
 8017a70:	4618      	mov	r0, r3
 8017a72:	370c      	adds	r7, #12
 8017a74:	46bd      	mov	sp, r7
 8017a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a7a:	4770      	bx	lr

08017a7c <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8017a7c:	b480      	push	{r7}
 8017a7e:	b083      	sub	sp, #12
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	2200      	movs	r2, #0
 8017a88:	601a      	str	r2, [r3, #0]
}
 8017a8a:	bf00      	nop
 8017a8c:	370c      	adds	r7, #12
 8017a8e:	46bd      	mov	sp, r7
 8017a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a94:	4770      	bx	lr

08017a96 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8017a96:	b580      	push	{r7, lr}
 8017a98:	b084      	sub	sp, #16
 8017a9a:	af00      	add	r7, sp, #0
 8017a9c:	6078      	str	r0, [r7, #4]
 8017a9e:	460b      	mov	r3, r1
 8017aa0:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8017aa2:	2300      	movs	r3, #0
 8017aa4:	60bb      	str	r3, [r7, #8]
 8017aa6:	2300      	movs	r3, #0
 8017aa8:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8017aaa:	f107 0308 	add.w	r3, r7, #8
 8017aae:	2101      	movs	r1, #1
 8017ab0:	4618      	mov	r0, r3
 8017ab2:	f7ed f8a9 	bl	8004c08 <osSemaphoreCreate>
 8017ab6:	4602      	mov	r2, r0
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d102      	bne.n	8017aca <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8017ac8:	e009      	b.n	8017ade <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8017aca:	78fb      	ldrb	r3, [r7, #3]
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d105      	bne.n	8017adc <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	681b      	ldr	r3, [r3, #0]
 8017ad4:	2100      	movs	r1, #0
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	f7ed f8ca 	bl	8004c70 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8017adc:	2300      	movs	r3, #0
}
 8017ade:	4618      	mov	r0, r3
 8017ae0:	3710      	adds	r7, #16
 8017ae2:	46bd      	mov	sp, r7
 8017ae4:	bd80      	pop	{r7, pc}

08017ae6 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8017ae6:	b580      	push	{r7, lr}
 8017ae8:	b084      	sub	sp, #16
 8017aea:	af00      	add	r7, sp, #0
 8017aec:	6078      	str	r0, [r7, #4]
 8017aee:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8017af0:	f7ec ff7d 	bl	80049ee <osKernelSysTick>
 8017af4:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017af6:	683b      	ldr	r3, [r7, #0]
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d011      	beq.n	8017b20 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	681b      	ldr	r3, [r3, #0]
 8017b00:	6839      	ldr	r1, [r7, #0]
 8017b02:	4618      	mov	r0, r3
 8017b04:	f7ed f8b4 	bl	8004c70 <osSemaphoreWait>
 8017b08:	4603      	mov	r3, r0
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d105      	bne.n	8017b1a <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8017b0e:	f7ec ff6e 	bl	80049ee <osKernelSysTick>
 8017b12:	4602      	mov	r2, r0
 8017b14:	68fb      	ldr	r3, [r7, #12]
 8017b16:	1ad3      	subs	r3, r2, r3
 8017b18:	e012      	b.n	8017b40 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8017b1e:	e00f      	b.n	8017b40 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8017b20:	bf00      	nop
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	f04f 31ff 	mov.w	r1, #4294967295
 8017b2a:	4618      	mov	r0, r3
 8017b2c:	f7ed f8a0 	bl	8004c70 <osSemaphoreWait>
 8017b30:	4603      	mov	r3, r0
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d1f5      	bne.n	8017b22 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8017b36:	f7ec ff5a 	bl	80049ee <osKernelSysTick>
 8017b3a:	4602      	mov	r2, r0
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017b40:	4618      	mov	r0, r3
 8017b42:	3710      	adds	r7, #16
 8017b44:	46bd      	mov	sp, r7
 8017b46:	bd80      	pop	{r7, pc}

08017b48 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8017b48:	b580      	push	{r7, lr}
 8017b4a:	b082      	sub	sp, #8
 8017b4c:	af00      	add	r7, sp, #0
 8017b4e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	4618      	mov	r0, r3
 8017b56:	f7ed f8d9 	bl	8004d0c <osSemaphoreRelease>
}
 8017b5a:	bf00      	nop
 8017b5c:	3708      	adds	r7, #8
 8017b5e:	46bd      	mov	sp, r7
 8017b60:	bd80      	pop	{r7, pc}

08017b62 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8017b62:	b580      	push	{r7, lr}
 8017b64:	b082      	sub	sp, #8
 8017b66:	af00      	add	r7, sp, #0
 8017b68:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	4618      	mov	r0, r3
 8017b70:	f7ed f902 	bl	8004d78 <osSemaphoreDelete>
}
 8017b74:	bf00      	nop
 8017b76:	3708      	adds	r7, #8
 8017b78:	46bd      	mov	sp, r7
 8017b7a:	bd80      	pop	{r7, pc}

08017b7c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8017b7c:	b480      	push	{r7}
 8017b7e:	b083      	sub	sp, #12
 8017b80:	af00      	add	r7, sp, #0
 8017b82:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	681b      	ldr	r3, [r3, #0]
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d101      	bne.n	8017b90 <sys_sem_valid+0x14>
    return 0;
 8017b8c:	2300      	movs	r3, #0
 8017b8e:	e000      	b.n	8017b92 <sys_sem_valid+0x16>
  else
    return 1;
 8017b90:	2301      	movs	r3, #1
}
 8017b92:	4618      	mov	r0, r3
 8017b94:	370c      	adds	r7, #12
 8017b96:	46bd      	mov	sp, r7
 8017b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b9c:	4770      	bx	lr

08017b9e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8017b9e:	b480      	push	{r7}
 8017ba0:	b083      	sub	sp, #12
 8017ba2:	af00      	add	r7, sp, #0
 8017ba4:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	2200      	movs	r2, #0
 8017baa:	601a      	str	r2, [r3, #0]
}
 8017bac:	bf00      	nop
 8017bae:	370c      	adds	r7, #12
 8017bb0:	46bd      	mov	sp, r7
 8017bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bb6:	4770      	bx	lr

08017bb8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8017bbc:	4803      	ldr	r0, [pc, #12]	; (8017bcc <sys_init+0x14>)
 8017bbe:	f7ec ff86 	bl	8004ace <osMutexCreate>
 8017bc2:	4602      	mov	r2, r0
 8017bc4:	4b02      	ldr	r3, [pc, #8]	; (8017bd0 <sys_init+0x18>)
 8017bc6:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8017bc8:	bf00      	nop
 8017bca:	bd80      	pop	{r7, pc}
 8017bcc:	08026fac 	.word	0x08026fac
 8017bd0:	2000f55c 	.word	0x2000f55c

08017bd4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017bd4:	b580      	push	{r7, lr}
 8017bd6:	b084      	sub	sp, #16
 8017bd8:	af00      	add	r7, sp, #0
 8017bda:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8017bdc:	2300      	movs	r3, #0
 8017bde:	60bb      	str	r3, [r7, #8]
 8017be0:	2300      	movs	r3, #0
 8017be2:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8017be4:	f107 0308 	add.w	r3, r7, #8
 8017be8:	4618      	mov	r0, r3
 8017bea:	f7ec ff70 	bl	8004ace <osMutexCreate>
 8017bee:	4602      	mov	r2, r0
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d102      	bne.n	8017c02 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8017c00:	e000      	b.n	8017c04 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017c02:	2300      	movs	r3, #0
}
 8017c04:	4618      	mov	r0, r3
 8017c06:	3710      	adds	r7, #16
 8017c08:	46bd      	mov	sp, r7
 8017c0a:	bd80      	pop	{r7, pc}

08017c0c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017c0c:	b580      	push	{r7, lr}
 8017c0e:	b082      	sub	sp, #8
 8017c10:	af00      	add	r7, sp, #0
 8017c12:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	f04f 31ff 	mov.w	r1, #4294967295
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	f7ec ff6f 	bl	8004b00 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8017c22:	bf00      	nop
 8017c24:	3708      	adds	r7, #8
 8017c26:	46bd      	mov	sp, r7
 8017c28:	bd80      	pop	{r7, pc}

08017c2a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017c2a:	b580      	push	{r7, lr}
 8017c2c:	b082      	sub	sp, #8
 8017c2e:	af00      	add	r7, sp, #0
 8017c30:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	681b      	ldr	r3, [r3, #0]
 8017c36:	4618      	mov	r0, r3
 8017c38:	f7ec ffb0 	bl	8004b9c <osMutexRelease>
}
 8017c3c:	bf00      	nop
 8017c3e:	3708      	adds	r7, #8
 8017c40:	46bd      	mov	sp, r7
 8017c42:	bd80      	pop	{r7, pc}

08017c44 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017c44:	b580      	push	{r7, lr}
 8017c46:	b08c      	sub	sp, #48	; 0x30
 8017c48:	af00      	add	r7, sp, #0
 8017c4a:	60f8      	str	r0, [r7, #12]
 8017c4c:	60b9      	str	r1, [r7, #8]
 8017c4e:	607a      	str	r2, [r7, #4]
 8017c50:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8017c52:	f107 0314 	add.w	r3, r7, #20
 8017c56:	2200      	movs	r2, #0
 8017c58:	601a      	str	r2, [r3, #0]
 8017c5a:	605a      	str	r2, [r3, #4]
 8017c5c:	609a      	str	r2, [r3, #8]
 8017c5e:	60da      	str	r2, [r3, #12]
 8017c60:	611a      	str	r2, [r3, #16]
 8017c62:	615a      	str	r2, [r3, #20]
 8017c64:	619a      	str	r2, [r3, #24]
 8017c66:	68fb      	ldr	r3, [r7, #12]
 8017c68:	617b      	str	r3, [r7, #20]
 8017c6a:	68bb      	ldr	r3, [r7, #8]
 8017c6c:	61bb      	str	r3, [r7, #24]
 8017c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c70:	b21b      	sxth	r3, r3
 8017c72:	83bb      	strh	r3, [r7, #28]
 8017c74:	683b      	ldr	r3, [r7, #0]
 8017c76:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8017c78:	f107 0314 	add.w	r3, r7, #20
 8017c7c:	6879      	ldr	r1, [r7, #4]
 8017c7e:	4618      	mov	r0, r3
 8017c80:	f7ec fec5 	bl	8004a0e <osThreadCreate>
 8017c84:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8017c86:	4618      	mov	r0, r3
 8017c88:	3730      	adds	r7, #48	; 0x30
 8017c8a:	46bd      	mov	sp, r7
 8017c8c:	bd80      	pop	{r7, pc}
	...

08017c90 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017c90:	b580      	push	{r7, lr}
 8017c92:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8017c94:	4b04      	ldr	r3, [pc, #16]	; (8017ca8 <sys_arch_protect+0x18>)
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	f04f 31ff 	mov.w	r1, #4294967295
 8017c9c:	4618      	mov	r0, r3
 8017c9e:	f7ec ff2f 	bl	8004b00 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8017ca2:	2301      	movs	r3, #1
}
 8017ca4:	4618      	mov	r0, r3
 8017ca6:	bd80      	pop	{r7, pc}
 8017ca8:	2000f55c 	.word	0x2000f55c

08017cac <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017cac:	b580      	push	{r7, lr}
 8017cae:	b082      	sub	sp, #8
 8017cb0:	af00      	add	r7, sp, #0
 8017cb2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017cb4:	4b04      	ldr	r3, [pc, #16]	; (8017cc8 <sys_arch_unprotect+0x1c>)
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	4618      	mov	r0, r3
 8017cba:	f7ec ff6f 	bl	8004b9c <osMutexRelease>
}
 8017cbe:	bf00      	nop
 8017cc0:	3708      	adds	r7, #8
 8017cc2:	46bd      	mov	sp, r7
 8017cc4:	bd80      	pop	{r7, pc}
 8017cc6:	bf00      	nop
 8017cc8:	2000f55c 	.word	0x2000f55c

08017ccc <__libc_init_array>:
 8017ccc:	b570      	push	{r4, r5, r6, lr}
 8017cce:	4e0d      	ldr	r6, [pc, #52]	; (8017d04 <__libc_init_array+0x38>)
 8017cd0:	4c0d      	ldr	r4, [pc, #52]	; (8017d08 <__libc_init_array+0x3c>)
 8017cd2:	1ba4      	subs	r4, r4, r6
 8017cd4:	10a4      	asrs	r4, r4, #2
 8017cd6:	2500      	movs	r5, #0
 8017cd8:	42a5      	cmp	r5, r4
 8017cda:	d109      	bne.n	8017cf0 <__libc_init_array+0x24>
 8017cdc:	4e0b      	ldr	r6, [pc, #44]	; (8017d0c <__libc_init_array+0x40>)
 8017cde:	4c0c      	ldr	r4, [pc, #48]	; (8017d10 <__libc_init_array+0x44>)
 8017ce0:	f001 fa10 	bl	8019104 <_init>
 8017ce4:	1ba4      	subs	r4, r4, r6
 8017ce6:	10a4      	asrs	r4, r4, #2
 8017ce8:	2500      	movs	r5, #0
 8017cea:	42a5      	cmp	r5, r4
 8017cec:	d105      	bne.n	8017cfa <__libc_init_array+0x2e>
 8017cee:	bd70      	pop	{r4, r5, r6, pc}
 8017cf0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017cf4:	4798      	blx	r3
 8017cf6:	3501      	adds	r5, #1
 8017cf8:	e7ee      	b.n	8017cd8 <__libc_init_array+0xc>
 8017cfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017cfe:	4798      	blx	r3
 8017d00:	3501      	adds	r5, #1
 8017d02:	e7f2      	b.n	8017cea <__libc_init_array+0x1e>
 8017d04:	08027160 	.word	0x08027160
 8017d08:	08027160 	.word	0x08027160
 8017d0c:	08027160 	.word	0x08027160
 8017d10:	08027164 	.word	0x08027164

08017d14 <__locale_ctype_ptr>:
 8017d14:	4b04      	ldr	r3, [pc, #16]	; (8017d28 <__locale_ctype_ptr+0x14>)
 8017d16:	4a05      	ldr	r2, [pc, #20]	; (8017d2c <__locale_ctype_ptr+0x18>)
 8017d18:	681b      	ldr	r3, [r3, #0]
 8017d1a:	6a1b      	ldr	r3, [r3, #32]
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	bf08      	it	eq
 8017d20:	4613      	moveq	r3, r2
 8017d22:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8017d26:	4770      	bx	lr
 8017d28:	20000020 	.word	0x20000020
 8017d2c:	20000084 	.word	0x20000084

08017d30 <__ascii_mbtowc>:
 8017d30:	b082      	sub	sp, #8
 8017d32:	b901      	cbnz	r1, 8017d36 <__ascii_mbtowc+0x6>
 8017d34:	a901      	add	r1, sp, #4
 8017d36:	b142      	cbz	r2, 8017d4a <__ascii_mbtowc+0x1a>
 8017d38:	b14b      	cbz	r3, 8017d4e <__ascii_mbtowc+0x1e>
 8017d3a:	7813      	ldrb	r3, [r2, #0]
 8017d3c:	600b      	str	r3, [r1, #0]
 8017d3e:	7812      	ldrb	r2, [r2, #0]
 8017d40:	1c10      	adds	r0, r2, #0
 8017d42:	bf18      	it	ne
 8017d44:	2001      	movne	r0, #1
 8017d46:	b002      	add	sp, #8
 8017d48:	4770      	bx	lr
 8017d4a:	4610      	mov	r0, r2
 8017d4c:	e7fb      	b.n	8017d46 <__ascii_mbtowc+0x16>
 8017d4e:	f06f 0001 	mvn.w	r0, #1
 8017d52:	e7f8      	b.n	8017d46 <__ascii_mbtowc+0x16>

08017d54 <memcmp>:
 8017d54:	b530      	push	{r4, r5, lr}
 8017d56:	2400      	movs	r4, #0
 8017d58:	42a2      	cmp	r2, r4
 8017d5a:	d101      	bne.n	8017d60 <memcmp+0xc>
 8017d5c:	2000      	movs	r0, #0
 8017d5e:	e007      	b.n	8017d70 <memcmp+0x1c>
 8017d60:	5d03      	ldrb	r3, [r0, r4]
 8017d62:	3401      	adds	r4, #1
 8017d64:	190d      	adds	r5, r1, r4
 8017d66:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8017d6a:	42ab      	cmp	r3, r5
 8017d6c:	d0f4      	beq.n	8017d58 <memcmp+0x4>
 8017d6e:	1b58      	subs	r0, r3, r5
 8017d70:	bd30      	pop	{r4, r5, pc}

08017d72 <memcpy>:
 8017d72:	b510      	push	{r4, lr}
 8017d74:	1e43      	subs	r3, r0, #1
 8017d76:	440a      	add	r2, r1
 8017d78:	4291      	cmp	r1, r2
 8017d7a:	d100      	bne.n	8017d7e <memcpy+0xc>
 8017d7c:	bd10      	pop	{r4, pc}
 8017d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017d86:	e7f7      	b.n	8017d78 <memcpy+0x6>

08017d88 <memmove>:
 8017d88:	4288      	cmp	r0, r1
 8017d8a:	b510      	push	{r4, lr}
 8017d8c:	eb01 0302 	add.w	r3, r1, r2
 8017d90:	d807      	bhi.n	8017da2 <memmove+0x1a>
 8017d92:	1e42      	subs	r2, r0, #1
 8017d94:	4299      	cmp	r1, r3
 8017d96:	d00a      	beq.n	8017dae <memmove+0x26>
 8017d98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d9c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017da0:	e7f8      	b.n	8017d94 <memmove+0xc>
 8017da2:	4283      	cmp	r3, r0
 8017da4:	d9f5      	bls.n	8017d92 <memmove+0xa>
 8017da6:	1881      	adds	r1, r0, r2
 8017da8:	1ad2      	subs	r2, r2, r3
 8017daa:	42d3      	cmn	r3, r2
 8017dac:	d100      	bne.n	8017db0 <memmove+0x28>
 8017dae:	bd10      	pop	{r4, pc}
 8017db0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017db4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017db8:	e7f7      	b.n	8017daa <memmove+0x22>

08017dba <memset>:
 8017dba:	4402      	add	r2, r0
 8017dbc:	4603      	mov	r3, r0
 8017dbe:	4293      	cmp	r3, r2
 8017dc0:	d100      	bne.n	8017dc4 <memset+0xa>
 8017dc2:	4770      	bx	lr
 8017dc4:	f803 1b01 	strb.w	r1, [r3], #1
 8017dc8:	e7f9      	b.n	8017dbe <memset+0x4>
	...

08017dcc <iprintf>:
 8017dcc:	b40f      	push	{r0, r1, r2, r3}
 8017dce:	4b0a      	ldr	r3, [pc, #40]	; (8017df8 <iprintf+0x2c>)
 8017dd0:	b513      	push	{r0, r1, r4, lr}
 8017dd2:	681c      	ldr	r4, [r3, #0]
 8017dd4:	b124      	cbz	r4, 8017de0 <iprintf+0x14>
 8017dd6:	69a3      	ldr	r3, [r4, #24]
 8017dd8:	b913      	cbnz	r3, 8017de0 <iprintf+0x14>
 8017dda:	4620      	mov	r0, r4
 8017ddc:	f000 faee 	bl	80183bc <__sinit>
 8017de0:	ab05      	add	r3, sp, #20
 8017de2:	9a04      	ldr	r2, [sp, #16]
 8017de4:	68a1      	ldr	r1, [r4, #8]
 8017de6:	9301      	str	r3, [sp, #4]
 8017de8:	4620      	mov	r0, r4
 8017dea:	f000 fe01 	bl	80189f0 <_vfiprintf_r>
 8017dee:	b002      	add	sp, #8
 8017df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017df4:	b004      	add	sp, #16
 8017df6:	4770      	bx	lr
 8017df8:	20000020 	.word	0x20000020

08017dfc <_puts_r>:
 8017dfc:	b570      	push	{r4, r5, r6, lr}
 8017dfe:	460e      	mov	r6, r1
 8017e00:	4605      	mov	r5, r0
 8017e02:	b118      	cbz	r0, 8017e0c <_puts_r+0x10>
 8017e04:	6983      	ldr	r3, [r0, #24]
 8017e06:	b90b      	cbnz	r3, 8017e0c <_puts_r+0x10>
 8017e08:	f000 fad8 	bl	80183bc <__sinit>
 8017e0c:	69ab      	ldr	r3, [r5, #24]
 8017e0e:	68ac      	ldr	r4, [r5, #8]
 8017e10:	b913      	cbnz	r3, 8017e18 <_puts_r+0x1c>
 8017e12:	4628      	mov	r0, r5
 8017e14:	f000 fad2 	bl	80183bc <__sinit>
 8017e18:	4b23      	ldr	r3, [pc, #140]	; (8017ea8 <_puts_r+0xac>)
 8017e1a:	429c      	cmp	r4, r3
 8017e1c:	d117      	bne.n	8017e4e <_puts_r+0x52>
 8017e1e:	686c      	ldr	r4, [r5, #4]
 8017e20:	89a3      	ldrh	r3, [r4, #12]
 8017e22:	071b      	lsls	r3, r3, #28
 8017e24:	d51d      	bpl.n	8017e62 <_puts_r+0x66>
 8017e26:	6923      	ldr	r3, [r4, #16]
 8017e28:	b1db      	cbz	r3, 8017e62 <_puts_r+0x66>
 8017e2a:	3e01      	subs	r6, #1
 8017e2c:	68a3      	ldr	r3, [r4, #8]
 8017e2e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017e32:	3b01      	subs	r3, #1
 8017e34:	60a3      	str	r3, [r4, #8]
 8017e36:	b9e9      	cbnz	r1, 8017e74 <_puts_r+0x78>
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	da2e      	bge.n	8017e9a <_puts_r+0x9e>
 8017e3c:	4622      	mov	r2, r4
 8017e3e:	210a      	movs	r1, #10
 8017e40:	4628      	mov	r0, r5
 8017e42:	f000 f8fd 	bl	8018040 <__swbuf_r>
 8017e46:	3001      	adds	r0, #1
 8017e48:	d011      	beq.n	8017e6e <_puts_r+0x72>
 8017e4a:	200a      	movs	r0, #10
 8017e4c:	e011      	b.n	8017e72 <_puts_r+0x76>
 8017e4e:	4b17      	ldr	r3, [pc, #92]	; (8017eac <_puts_r+0xb0>)
 8017e50:	429c      	cmp	r4, r3
 8017e52:	d101      	bne.n	8017e58 <_puts_r+0x5c>
 8017e54:	68ac      	ldr	r4, [r5, #8]
 8017e56:	e7e3      	b.n	8017e20 <_puts_r+0x24>
 8017e58:	4b15      	ldr	r3, [pc, #84]	; (8017eb0 <_puts_r+0xb4>)
 8017e5a:	429c      	cmp	r4, r3
 8017e5c:	bf08      	it	eq
 8017e5e:	68ec      	ldreq	r4, [r5, #12]
 8017e60:	e7de      	b.n	8017e20 <_puts_r+0x24>
 8017e62:	4621      	mov	r1, r4
 8017e64:	4628      	mov	r0, r5
 8017e66:	f000 f94b 	bl	8018100 <__swsetup_r>
 8017e6a:	2800      	cmp	r0, #0
 8017e6c:	d0dd      	beq.n	8017e2a <_puts_r+0x2e>
 8017e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8017e72:	bd70      	pop	{r4, r5, r6, pc}
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	da04      	bge.n	8017e82 <_puts_r+0x86>
 8017e78:	69a2      	ldr	r2, [r4, #24]
 8017e7a:	429a      	cmp	r2, r3
 8017e7c:	dc06      	bgt.n	8017e8c <_puts_r+0x90>
 8017e7e:	290a      	cmp	r1, #10
 8017e80:	d004      	beq.n	8017e8c <_puts_r+0x90>
 8017e82:	6823      	ldr	r3, [r4, #0]
 8017e84:	1c5a      	adds	r2, r3, #1
 8017e86:	6022      	str	r2, [r4, #0]
 8017e88:	7019      	strb	r1, [r3, #0]
 8017e8a:	e7cf      	b.n	8017e2c <_puts_r+0x30>
 8017e8c:	4622      	mov	r2, r4
 8017e8e:	4628      	mov	r0, r5
 8017e90:	f000 f8d6 	bl	8018040 <__swbuf_r>
 8017e94:	3001      	adds	r0, #1
 8017e96:	d1c9      	bne.n	8017e2c <_puts_r+0x30>
 8017e98:	e7e9      	b.n	8017e6e <_puts_r+0x72>
 8017e9a:	6823      	ldr	r3, [r4, #0]
 8017e9c:	200a      	movs	r0, #10
 8017e9e:	1c5a      	adds	r2, r3, #1
 8017ea0:	6022      	str	r2, [r4, #0]
 8017ea2:	7018      	strb	r0, [r3, #0]
 8017ea4:	e7e5      	b.n	8017e72 <_puts_r+0x76>
 8017ea6:	bf00      	nop
 8017ea8:	080270e4 	.word	0x080270e4
 8017eac:	08027104 	.word	0x08027104
 8017eb0:	080270c4 	.word	0x080270c4

08017eb4 <puts>:
 8017eb4:	4b02      	ldr	r3, [pc, #8]	; (8017ec0 <puts+0xc>)
 8017eb6:	4601      	mov	r1, r0
 8017eb8:	6818      	ldr	r0, [r3, #0]
 8017eba:	f7ff bf9f 	b.w	8017dfc <_puts_r>
 8017ebe:	bf00      	nop
 8017ec0:	20000020 	.word	0x20000020

08017ec4 <rand>:
 8017ec4:	b538      	push	{r3, r4, r5, lr}
 8017ec6:	4b13      	ldr	r3, [pc, #76]	; (8017f14 <rand+0x50>)
 8017ec8:	681c      	ldr	r4, [r3, #0]
 8017eca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017ecc:	b97b      	cbnz	r3, 8017eee <rand+0x2a>
 8017ece:	2018      	movs	r0, #24
 8017ed0:	f000 fb62 	bl	8018598 <malloc>
 8017ed4:	4a10      	ldr	r2, [pc, #64]	; (8017f18 <rand+0x54>)
 8017ed6:	4b11      	ldr	r3, [pc, #68]	; (8017f1c <rand+0x58>)
 8017ed8:	63a0      	str	r0, [r4, #56]	; 0x38
 8017eda:	e9c0 2300 	strd	r2, r3, [r0]
 8017ede:	4b10      	ldr	r3, [pc, #64]	; (8017f20 <rand+0x5c>)
 8017ee0:	6083      	str	r3, [r0, #8]
 8017ee2:	230b      	movs	r3, #11
 8017ee4:	8183      	strh	r3, [r0, #12]
 8017ee6:	2201      	movs	r2, #1
 8017ee8:	2300      	movs	r3, #0
 8017eea:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017eee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017ef0:	480c      	ldr	r0, [pc, #48]	; (8017f24 <rand+0x60>)
 8017ef2:	690a      	ldr	r2, [r1, #16]
 8017ef4:	694b      	ldr	r3, [r1, #20]
 8017ef6:	4c0c      	ldr	r4, [pc, #48]	; (8017f28 <rand+0x64>)
 8017ef8:	4350      	muls	r0, r2
 8017efa:	fb04 0003 	mla	r0, r4, r3, r0
 8017efe:	fba2 2304 	umull	r2, r3, r2, r4
 8017f02:	4403      	add	r3, r0
 8017f04:	1c54      	adds	r4, r2, #1
 8017f06:	f143 0500 	adc.w	r5, r3, #0
 8017f0a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8017f0e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8017f12:	bd38      	pop	{r3, r4, r5, pc}
 8017f14:	20000020 	.word	0x20000020
 8017f18:	abcd330e 	.word	0xabcd330e
 8017f1c:	e66d1234 	.word	0xe66d1234
 8017f20:	0005deec 	.word	0x0005deec
 8017f24:	5851f42d 	.word	0x5851f42d
 8017f28:	4c957f2d 	.word	0x4c957f2d

08017f2c <siprintf>:
 8017f2c:	b40e      	push	{r1, r2, r3}
 8017f2e:	b500      	push	{lr}
 8017f30:	b09c      	sub	sp, #112	; 0x70
 8017f32:	ab1d      	add	r3, sp, #116	; 0x74
 8017f34:	9002      	str	r0, [sp, #8]
 8017f36:	9006      	str	r0, [sp, #24]
 8017f38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017f3c:	4809      	ldr	r0, [pc, #36]	; (8017f64 <siprintf+0x38>)
 8017f3e:	9107      	str	r1, [sp, #28]
 8017f40:	9104      	str	r1, [sp, #16]
 8017f42:	4909      	ldr	r1, [pc, #36]	; (8017f68 <siprintf+0x3c>)
 8017f44:	f853 2b04 	ldr.w	r2, [r3], #4
 8017f48:	9105      	str	r1, [sp, #20]
 8017f4a:	6800      	ldr	r0, [r0, #0]
 8017f4c:	9301      	str	r3, [sp, #4]
 8017f4e:	a902      	add	r1, sp, #8
 8017f50:	f000 fc2c 	bl	80187ac <_svfiprintf_r>
 8017f54:	9b02      	ldr	r3, [sp, #8]
 8017f56:	2200      	movs	r2, #0
 8017f58:	701a      	strb	r2, [r3, #0]
 8017f5a:	b01c      	add	sp, #112	; 0x70
 8017f5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017f60:	b003      	add	sp, #12
 8017f62:	4770      	bx	lr
 8017f64:	20000020 	.word	0x20000020
 8017f68:	ffff0208 	.word	0xffff0208

08017f6c <strcasecmp>:
 8017f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f6e:	4606      	mov	r6, r0
 8017f70:	460f      	mov	r7, r1
 8017f72:	f816 4b01 	ldrb.w	r4, [r6], #1
 8017f76:	f7ff fecd 	bl	8017d14 <__locale_ctype_ptr>
 8017f7a:	4420      	add	r0, r4
 8017f7c:	f817 5b01 	ldrb.w	r5, [r7], #1
 8017f80:	7843      	ldrb	r3, [r0, #1]
 8017f82:	f003 0303 	and.w	r3, r3, #3
 8017f86:	2b01      	cmp	r3, #1
 8017f88:	bf08      	it	eq
 8017f8a:	3420      	addeq	r4, #32
 8017f8c:	f7ff fec2 	bl	8017d14 <__locale_ctype_ptr>
 8017f90:	4428      	add	r0, r5
 8017f92:	7842      	ldrb	r2, [r0, #1]
 8017f94:	f002 0203 	and.w	r2, r2, #3
 8017f98:	2a01      	cmp	r2, #1
 8017f9a:	bf08      	it	eq
 8017f9c:	3520      	addeq	r5, #32
 8017f9e:	1b60      	subs	r0, r4, r5
 8017fa0:	d101      	bne.n	8017fa6 <strcasecmp+0x3a>
 8017fa2:	2d00      	cmp	r5, #0
 8017fa4:	d1e5      	bne.n	8017f72 <strcasecmp+0x6>
 8017fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017fa8 <strchr>:
 8017fa8:	b2c9      	uxtb	r1, r1
 8017faa:	4603      	mov	r3, r0
 8017fac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017fb0:	b11a      	cbz	r2, 8017fba <strchr+0x12>
 8017fb2:	428a      	cmp	r2, r1
 8017fb4:	d1f9      	bne.n	8017faa <strchr+0x2>
 8017fb6:	4618      	mov	r0, r3
 8017fb8:	4770      	bx	lr
 8017fba:	2900      	cmp	r1, #0
 8017fbc:	bf18      	it	ne
 8017fbe:	2300      	movne	r3, #0
 8017fc0:	e7f9      	b.n	8017fb6 <strchr+0xe>

08017fc2 <strncmp>:
 8017fc2:	b510      	push	{r4, lr}
 8017fc4:	b16a      	cbz	r2, 8017fe2 <strncmp+0x20>
 8017fc6:	3901      	subs	r1, #1
 8017fc8:	1884      	adds	r4, r0, r2
 8017fca:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017fce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017fd2:	4293      	cmp	r3, r2
 8017fd4:	d103      	bne.n	8017fde <strncmp+0x1c>
 8017fd6:	42a0      	cmp	r0, r4
 8017fd8:	d001      	beq.n	8017fde <strncmp+0x1c>
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	d1f5      	bne.n	8017fca <strncmp+0x8>
 8017fde:	1a98      	subs	r0, r3, r2
 8017fe0:	bd10      	pop	{r4, pc}
 8017fe2:	4610      	mov	r0, r2
 8017fe4:	e7fc      	b.n	8017fe0 <strncmp+0x1e>

08017fe6 <__strtok_r>:
 8017fe6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017fe8:	b918      	cbnz	r0, 8017ff2 <__strtok_r+0xc>
 8017fea:	6810      	ldr	r0, [r2, #0]
 8017fec:	b908      	cbnz	r0, 8017ff2 <__strtok_r+0xc>
 8017fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ff0:	4620      	mov	r0, r4
 8017ff2:	4604      	mov	r4, r0
 8017ff4:	460f      	mov	r7, r1
 8017ff6:	f814 5b01 	ldrb.w	r5, [r4], #1
 8017ffa:	f817 6b01 	ldrb.w	r6, [r7], #1
 8017ffe:	b91e      	cbnz	r6, 8018008 <__strtok_r+0x22>
 8018000:	b96d      	cbnz	r5, 801801e <__strtok_r+0x38>
 8018002:	6015      	str	r5, [r2, #0]
 8018004:	4628      	mov	r0, r5
 8018006:	e7f2      	b.n	8017fee <__strtok_r+0x8>
 8018008:	42b5      	cmp	r5, r6
 801800a:	d1f6      	bne.n	8017ffa <__strtok_r+0x14>
 801800c:	2b00      	cmp	r3, #0
 801800e:	d1ef      	bne.n	8017ff0 <__strtok_r+0xa>
 8018010:	6014      	str	r4, [r2, #0]
 8018012:	7003      	strb	r3, [r0, #0]
 8018014:	e7eb      	b.n	8017fee <__strtok_r+0x8>
 8018016:	462b      	mov	r3, r5
 8018018:	e00d      	b.n	8018036 <__strtok_r+0x50>
 801801a:	b926      	cbnz	r6, 8018026 <__strtok_r+0x40>
 801801c:	461c      	mov	r4, r3
 801801e:	4623      	mov	r3, r4
 8018020:	460f      	mov	r7, r1
 8018022:	f813 5b01 	ldrb.w	r5, [r3], #1
 8018026:	f817 6b01 	ldrb.w	r6, [r7], #1
 801802a:	42b5      	cmp	r5, r6
 801802c:	d1f5      	bne.n	801801a <__strtok_r+0x34>
 801802e:	2d00      	cmp	r5, #0
 8018030:	d0f1      	beq.n	8018016 <__strtok_r+0x30>
 8018032:	2100      	movs	r1, #0
 8018034:	7021      	strb	r1, [r4, #0]
 8018036:	6013      	str	r3, [r2, #0]
 8018038:	e7d9      	b.n	8017fee <__strtok_r+0x8>

0801803a <strtok_r>:
 801803a:	2301      	movs	r3, #1
 801803c:	f7ff bfd3 	b.w	8017fe6 <__strtok_r>

08018040 <__swbuf_r>:
 8018040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018042:	460e      	mov	r6, r1
 8018044:	4614      	mov	r4, r2
 8018046:	4605      	mov	r5, r0
 8018048:	b118      	cbz	r0, 8018052 <__swbuf_r+0x12>
 801804a:	6983      	ldr	r3, [r0, #24]
 801804c:	b90b      	cbnz	r3, 8018052 <__swbuf_r+0x12>
 801804e:	f000 f9b5 	bl	80183bc <__sinit>
 8018052:	4b21      	ldr	r3, [pc, #132]	; (80180d8 <__swbuf_r+0x98>)
 8018054:	429c      	cmp	r4, r3
 8018056:	d12a      	bne.n	80180ae <__swbuf_r+0x6e>
 8018058:	686c      	ldr	r4, [r5, #4]
 801805a:	69a3      	ldr	r3, [r4, #24]
 801805c:	60a3      	str	r3, [r4, #8]
 801805e:	89a3      	ldrh	r3, [r4, #12]
 8018060:	071a      	lsls	r2, r3, #28
 8018062:	d52e      	bpl.n	80180c2 <__swbuf_r+0x82>
 8018064:	6923      	ldr	r3, [r4, #16]
 8018066:	b363      	cbz	r3, 80180c2 <__swbuf_r+0x82>
 8018068:	6923      	ldr	r3, [r4, #16]
 801806a:	6820      	ldr	r0, [r4, #0]
 801806c:	1ac0      	subs	r0, r0, r3
 801806e:	6963      	ldr	r3, [r4, #20]
 8018070:	b2f6      	uxtb	r6, r6
 8018072:	4283      	cmp	r3, r0
 8018074:	4637      	mov	r7, r6
 8018076:	dc04      	bgt.n	8018082 <__swbuf_r+0x42>
 8018078:	4621      	mov	r1, r4
 801807a:	4628      	mov	r0, r5
 801807c:	f000 f934 	bl	80182e8 <_fflush_r>
 8018080:	bb28      	cbnz	r0, 80180ce <__swbuf_r+0x8e>
 8018082:	68a3      	ldr	r3, [r4, #8]
 8018084:	3b01      	subs	r3, #1
 8018086:	60a3      	str	r3, [r4, #8]
 8018088:	6823      	ldr	r3, [r4, #0]
 801808a:	1c5a      	adds	r2, r3, #1
 801808c:	6022      	str	r2, [r4, #0]
 801808e:	701e      	strb	r6, [r3, #0]
 8018090:	6963      	ldr	r3, [r4, #20]
 8018092:	3001      	adds	r0, #1
 8018094:	4283      	cmp	r3, r0
 8018096:	d004      	beq.n	80180a2 <__swbuf_r+0x62>
 8018098:	89a3      	ldrh	r3, [r4, #12]
 801809a:	07db      	lsls	r3, r3, #31
 801809c:	d519      	bpl.n	80180d2 <__swbuf_r+0x92>
 801809e:	2e0a      	cmp	r6, #10
 80180a0:	d117      	bne.n	80180d2 <__swbuf_r+0x92>
 80180a2:	4621      	mov	r1, r4
 80180a4:	4628      	mov	r0, r5
 80180a6:	f000 f91f 	bl	80182e8 <_fflush_r>
 80180aa:	b190      	cbz	r0, 80180d2 <__swbuf_r+0x92>
 80180ac:	e00f      	b.n	80180ce <__swbuf_r+0x8e>
 80180ae:	4b0b      	ldr	r3, [pc, #44]	; (80180dc <__swbuf_r+0x9c>)
 80180b0:	429c      	cmp	r4, r3
 80180b2:	d101      	bne.n	80180b8 <__swbuf_r+0x78>
 80180b4:	68ac      	ldr	r4, [r5, #8]
 80180b6:	e7d0      	b.n	801805a <__swbuf_r+0x1a>
 80180b8:	4b09      	ldr	r3, [pc, #36]	; (80180e0 <__swbuf_r+0xa0>)
 80180ba:	429c      	cmp	r4, r3
 80180bc:	bf08      	it	eq
 80180be:	68ec      	ldreq	r4, [r5, #12]
 80180c0:	e7cb      	b.n	801805a <__swbuf_r+0x1a>
 80180c2:	4621      	mov	r1, r4
 80180c4:	4628      	mov	r0, r5
 80180c6:	f000 f81b 	bl	8018100 <__swsetup_r>
 80180ca:	2800      	cmp	r0, #0
 80180cc:	d0cc      	beq.n	8018068 <__swbuf_r+0x28>
 80180ce:	f04f 37ff 	mov.w	r7, #4294967295
 80180d2:	4638      	mov	r0, r7
 80180d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80180d6:	bf00      	nop
 80180d8:	080270e4 	.word	0x080270e4
 80180dc:	08027104 	.word	0x08027104
 80180e0:	080270c4 	.word	0x080270c4

080180e4 <__ascii_wctomb>:
 80180e4:	b149      	cbz	r1, 80180fa <__ascii_wctomb+0x16>
 80180e6:	2aff      	cmp	r2, #255	; 0xff
 80180e8:	bf85      	ittet	hi
 80180ea:	238a      	movhi	r3, #138	; 0x8a
 80180ec:	6003      	strhi	r3, [r0, #0]
 80180ee:	700a      	strbls	r2, [r1, #0]
 80180f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80180f4:	bf98      	it	ls
 80180f6:	2001      	movls	r0, #1
 80180f8:	4770      	bx	lr
 80180fa:	4608      	mov	r0, r1
 80180fc:	4770      	bx	lr
	...

08018100 <__swsetup_r>:
 8018100:	4b32      	ldr	r3, [pc, #200]	; (80181cc <__swsetup_r+0xcc>)
 8018102:	b570      	push	{r4, r5, r6, lr}
 8018104:	681d      	ldr	r5, [r3, #0]
 8018106:	4606      	mov	r6, r0
 8018108:	460c      	mov	r4, r1
 801810a:	b125      	cbz	r5, 8018116 <__swsetup_r+0x16>
 801810c:	69ab      	ldr	r3, [r5, #24]
 801810e:	b913      	cbnz	r3, 8018116 <__swsetup_r+0x16>
 8018110:	4628      	mov	r0, r5
 8018112:	f000 f953 	bl	80183bc <__sinit>
 8018116:	4b2e      	ldr	r3, [pc, #184]	; (80181d0 <__swsetup_r+0xd0>)
 8018118:	429c      	cmp	r4, r3
 801811a:	d10f      	bne.n	801813c <__swsetup_r+0x3c>
 801811c:	686c      	ldr	r4, [r5, #4]
 801811e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018122:	b29a      	uxth	r2, r3
 8018124:	0715      	lsls	r5, r2, #28
 8018126:	d42c      	bmi.n	8018182 <__swsetup_r+0x82>
 8018128:	06d0      	lsls	r0, r2, #27
 801812a:	d411      	bmi.n	8018150 <__swsetup_r+0x50>
 801812c:	2209      	movs	r2, #9
 801812e:	6032      	str	r2, [r6, #0]
 8018130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018134:	81a3      	strh	r3, [r4, #12]
 8018136:	f04f 30ff 	mov.w	r0, #4294967295
 801813a:	e03e      	b.n	80181ba <__swsetup_r+0xba>
 801813c:	4b25      	ldr	r3, [pc, #148]	; (80181d4 <__swsetup_r+0xd4>)
 801813e:	429c      	cmp	r4, r3
 8018140:	d101      	bne.n	8018146 <__swsetup_r+0x46>
 8018142:	68ac      	ldr	r4, [r5, #8]
 8018144:	e7eb      	b.n	801811e <__swsetup_r+0x1e>
 8018146:	4b24      	ldr	r3, [pc, #144]	; (80181d8 <__swsetup_r+0xd8>)
 8018148:	429c      	cmp	r4, r3
 801814a:	bf08      	it	eq
 801814c:	68ec      	ldreq	r4, [r5, #12]
 801814e:	e7e6      	b.n	801811e <__swsetup_r+0x1e>
 8018150:	0751      	lsls	r1, r2, #29
 8018152:	d512      	bpl.n	801817a <__swsetup_r+0x7a>
 8018154:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018156:	b141      	cbz	r1, 801816a <__swsetup_r+0x6a>
 8018158:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801815c:	4299      	cmp	r1, r3
 801815e:	d002      	beq.n	8018166 <__swsetup_r+0x66>
 8018160:	4630      	mov	r0, r6
 8018162:	f000 fa21 	bl	80185a8 <_free_r>
 8018166:	2300      	movs	r3, #0
 8018168:	6363      	str	r3, [r4, #52]	; 0x34
 801816a:	89a3      	ldrh	r3, [r4, #12]
 801816c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018170:	81a3      	strh	r3, [r4, #12]
 8018172:	2300      	movs	r3, #0
 8018174:	6063      	str	r3, [r4, #4]
 8018176:	6923      	ldr	r3, [r4, #16]
 8018178:	6023      	str	r3, [r4, #0]
 801817a:	89a3      	ldrh	r3, [r4, #12]
 801817c:	f043 0308 	orr.w	r3, r3, #8
 8018180:	81a3      	strh	r3, [r4, #12]
 8018182:	6923      	ldr	r3, [r4, #16]
 8018184:	b94b      	cbnz	r3, 801819a <__swsetup_r+0x9a>
 8018186:	89a3      	ldrh	r3, [r4, #12]
 8018188:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801818c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018190:	d003      	beq.n	801819a <__swsetup_r+0x9a>
 8018192:	4621      	mov	r1, r4
 8018194:	4630      	mov	r0, r6
 8018196:	f000 f9bf 	bl	8018518 <__smakebuf_r>
 801819a:	89a2      	ldrh	r2, [r4, #12]
 801819c:	f012 0301 	ands.w	r3, r2, #1
 80181a0:	d00c      	beq.n	80181bc <__swsetup_r+0xbc>
 80181a2:	2300      	movs	r3, #0
 80181a4:	60a3      	str	r3, [r4, #8]
 80181a6:	6963      	ldr	r3, [r4, #20]
 80181a8:	425b      	negs	r3, r3
 80181aa:	61a3      	str	r3, [r4, #24]
 80181ac:	6923      	ldr	r3, [r4, #16]
 80181ae:	b953      	cbnz	r3, 80181c6 <__swsetup_r+0xc6>
 80181b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80181b4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80181b8:	d1ba      	bne.n	8018130 <__swsetup_r+0x30>
 80181ba:	bd70      	pop	{r4, r5, r6, pc}
 80181bc:	0792      	lsls	r2, r2, #30
 80181be:	bf58      	it	pl
 80181c0:	6963      	ldrpl	r3, [r4, #20]
 80181c2:	60a3      	str	r3, [r4, #8]
 80181c4:	e7f2      	b.n	80181ac <__swsetup_r+0xac>
 80181c6:	2000      	movs	r0, #0
 80181c8:	e7f7      	b.n	80181ba <__swsetup_r+0xba>
 80181ca:	bf00      	nop
 80181cc:	20000020 	.word	0x20000020
 80181d0:	080270e4 	.word	0x080270e4
 80181d4:	08027104 	.word	0x08027104
 80181d8:	080270c4 	.word	0x080270c4

080181dc <__sflush_r>:
 80181dc:	898a      	ldrh	r2, [r1, #12]
 80181de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181e2:	4605      	mov	r5, r0
 80181e4:	0710      	lsls	r0, r2, #28
 80181e6:	460c      	mov	r4, r1
 80181e8:	d458      	bmi.n	801829c <__sflush_r+0xc0>
 80181ea:	684b      	ldr	r3, [r1, #4]
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	dc05      	bgt.n	80181fc <__sflush_r+0x20>
 80181f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	dc02      	bgt.n	80181fc <__sflush_r+0x20>
 80181f6:	2000      	movs	r0, #0
 80181f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80181fe:	2e00      	cmp	r6, #0
 8018200:	d0f9      	beq.n	80181f6 <__sflush_r+0x1a>
 8018202:	2300      	movs	r3, #0
 8018204:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018208:	682f      	ldr	r7, [r5, #0]
 801820a:	6a21      	ldr	r1, [r4, #32]
 801820c:	602b      	str	r3, [r5, #0]
 801820e:	d032      	beq.n	8018276 <__sflush_r+0x9a>
 8018210:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018212:	89a3      	ldrh	r3, [r4, #12]
 8018214:	075a      	lsls	r2, r3, #29
 8018216:	d505      	bpl.n	8018224 <__sflush_r+0x48>
 8018218:	6863      	ldr	r3, [r4, #4]
 801821a:	1ac0      	subs	r0, r0, r3
 801821c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801821e:	b10b      	cbz	r3, 8018224 <__sflush_r+0x48>
 8018220:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018222:	1ac0      	subs	r0, r0, r3
 8018224:	2300      	movs	r3, #0
 8018226:	4602      	mov	r2, r0
 8018228:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801822a:	6a21      	ldr	r1, [r4, #32]
 801822c:	4628      	mov	r0, r5
 801822e:	47b0      	blx	r6
 8018230:	1c43      	adds	r3, r0, #1
 8018232:	89a3      	ldrh	r3, [r4, #12]
 8018234:	d106      	bne.n	8018244 <__sflush_r+0x68>
 8018236:	6829      	ldr	r1, [r5, #0]
 8018238:	291d      	cmp	r1, #29
 801823a:	d848      	bhi.n	80182ce <__sflush_r+0xf2>
 801823c:	4a29      	ldr	r2, [pc, #164]	; (80182e4 <__sflush_r+0x108>)
 801823e:	40ca      	lsrs	r2, r1
 8018240:	07d6      	lsls	r6, r2, #31
 8018242:	d544      	bpl.n	80182ce <__sflush_r+0xf2>
 8018244:	2200      	movs	r2, #0
 8018246:	6062      	str	r2, [r4, #4]
 8018248:	04d9      	lsls	r1, r3, #19
 801824a:	6922      	ldr	r2, [r4, #16]
 801824c:	6022      	str	r2, [r4, #0]
 801824e:	d504      	bpl.n	801825a <__sflush_r+0x7e>
 8018250:	1c42      	adds	r2, r0, #1
 8018252:	d101      	bne.n	8018258 <__sflush_r+0x7c>
 8018254:	682b      	ldr	r3, [r5, #0]
 8018256:	b903      	cbnz	r3, 801825a <__sflush_r+0x7e>
 8018258:	6560      	str	r0, [r4, #84]	; 0x54
 801825a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801825c:	602f      	str	r7, [r5, #0]
 801825e:	2900      	cmp	r1, #0
 8018260:	d0c9      	beq.n	80181f6 <__sflush_r+0x1a>
 8018262:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018266:	4299      	cmp	r1, r3
 8018268:	d002      	beq.n	8018270 <__sflush_r+0x94>
 801826a:	4628      	mov	r0, r5
 801826c:	f000 f99c 	bl	80185a8 <_free_r>
 8018270:	2000      	movs	r0, #0
 8018272:	6360      	str	r0, [r4, #52]	; 0x34
 8018274:	e7c0      	b.n	80181f8 <__sflush_r+0x1c>
 8018276:	2301      	movs	r3, #1
 8018278:	4628      	mov	r0, r5
 801827a:	47b0      	blx	r6
 801827c:	1c41      	adds	r1, r0, #1
 801827e:	d1c8      	bne.n	8018212 <__sflush_r+0x36>
 8018280:	682b      	ldr	r3, [r5, #0]
 8018282:	2b00      	cmp	r3, #0
 8018284:	d0c5      	beq.n	8018212 <__sflush_r+0x36>
 8018286:	2b1d      	cmp	r3, #29
 8018288:	d001      	beq.n	801828e <__sflush_r+0xb2>
 801828a:	2b16      	cmp	r3, #22
 801828c:	d101      	bne.n	8018292 <__sflush_r+0xb6>
 801828e:	602f      	str	r7, [r5, #0]
 8018290:	e7b1      	b.n	80181f6 <__sflush_r+0x1a>
 8018292:	89a3      	ldrh	r3, [r4, #12]
 8018294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018298:	81a3      	strh	r3, [r4, #12]
 801829a:	e7ad      	b.n	80181f8 <__sflush_r+0x1c>
 801829c:	690f      	ldr	r7, [r1, #16]
 801829e:	2f00      	cmp	r7, #0
 80182a0:	d0a9      	beq.n	80181f6 <__sflush_r+0x1a>
 80182a2:	0793      	lsls	r3, r2, #30
 80182a4:	680e      	ldr	r6, [r1, #0]
 80182a6:	bf08      	it	eq
 80182a8:	694b      	ldreq	r3, [r1, #20]
 80182aa:	600f      	str	r7, [r1, #0]
 80182ac:	bf18      	it	ne
 80182ae:	2300      	movne	r3, #0
 80182b0:	eba6 0807 	sub.w	r8, r6, r7
 80182b4:	608b      	str	r3, [r1, #8]
 80182b6:	f1b8 0f00 	cmp.w	r8, #0
 80182ba:	dd9c      	ble.n	80181f6 <__sflush_r+0x1a>
 80182bc:	4643      	mov	r3, r8
 80182be:	463a      	mov	r2, r7
 80182c0:	6a21      	ldr	r1, [r4, #32]
 80182c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80182c4:	4628      	mov	r0, r5
 80182c6:	47b0      	blx	r6
 80182c8:	2800      	cmp	r0, #0
 80182ca:	dc06      	bgt.n	80182da <__sflush_r+0xfe>
 80182cc:	89a3      	ldrh	r3, [r4, #12]
 80182ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80182d2:	81a3      	strh	r3, [r4, #12]
 80182d4:	f04f 30ff 	mov.w	r0, #4294967295
 80182d8:	e78e      	b.n	80181f8 <__sflush_r+0x1c>
 80182da:	4407      	add	r7, r0
 80182dc:	eba8 0800 	sub.w	r8, r8, r0
 80182e0:	e7e9      	b.n	80182b6 <__sflush_r+0xda>
 80182e2:	bf00      	nop
 80182e4:	20400001 	.word	0x20400001

080182e8 <_fflush_r>:
 80182e8:	b538      	push	{r3, r4, r5, lr}
 80182ea:	690b      	ldr	r3, [r1, #16]
 80182ec:	4605      	mov	r5, r0
 80182ee:	460c      	mov	r4, r1
 80182f0:	b1db      	cbz	r3, 801832a <_fflush_r+0x42>
 80182f2:	b118      	cbz	r0, 80182fc <_fflush_r+0x14>
 80182f4:	6983      	ldr	r3, [r0, #24]
 80182f6:	b90b      	cbnz	r3, 80182fc <_fflush_r+0x14>
 80182f8:	f000 f860 	bl	80183bc <__sinit>
 80182fc:	4b0c      	ldr	r3, [pc, #48]	; (8018330 <_fflush_r+0x48>)
 80182fe:	429c      	cmp	r4, r3
 8018300:	d109      	bne.n	8018316 <_fflush_r+0x2e>
 8018302:	686c      	ldr	r4, [r5, #4]
 8018304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018308:	b17b      	cbz	r3, 801832a <_fflush_r+0x42>
 801830a:	4621      	mov	r1, r4
 801830c:	4628      	mov	r0, r5
 801830e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018312:	f7ff bf63 	b.w	80181dc <__sflush_r>
 8018316:	4b07      	ldr	r3, [pc, #28]	; (8018334 <_fflush_r+0x4c>)
 8018318:	429c      	cmp	r4, r3
 801831a:	d101      	bne.n	8018320 <_fflush_r+0x38>
 801831c:	68ac      	ldr	r4, [r5, #8]
 801831e:	e7f1      	b.n	8018304 <_fflush_r+0x1c>
 8018320:	4b05      	ldr	r3, [pc, #20]	; (8018338 <_fflush_r+0x50>)
 8018322:	429c      	cmp	r4, r3
 8018324:	bf08      	it	eq
 8018326:	68ec      	ldreq	r4, [r5, #12]
 8018328:	e7ec      	b.n	8018304 <_fflush_r+0x1c>
 801832a:	2000      	movs	r0, #0
 801832c:	bd38      	pop	{r3, r4, r5, pc}
 801832e:	bf00      	nop
 8018330:	080270e4 	.word	0x080270e4
 8018334:	08027104 	.word	0x08027104
 8018338:	080270c4 	.word	0x080270c4

0801833c <std>:
 801833c:	2300      	movs	r3, #0
 801833e:	b510      	push	{r4, lr}
 8018340:	4604      	mov	r4, r0
 8018342:	e9c0 3300 	strd	r3, r3, [r0]
 8018346:	6083      	str	r3, [r0, #8]
 8018348:	8181      	strh	r1, [r0, #12]
 801834a:	6643      	str	r3, [r0, #100]	; 0x64
 801834c:	81c2      	strh	r2, [r0, #14]
 801834e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018352:	6183      	str	r3, [r0, #24]
 8018354:	4619      	mov	r1, r3
 8018356:	2208      	movs	r2, #8
 8018358:	305c      	adds	r0, #92	; 0x5c
 801835a:	f7ff fd2e 	bl	8017dba <memset>
 801835e:	4b05      	ldr	r3, [pc, #20]	; (8018374 <std+0x38>)
 8018360:	6263      	str	r3, [r4, #36]	; 0x24
 8018362:	4b05      	ldr	r3, [pc, #20]	; (8018378 <std+0x3c>)
 8018364:	62a3      	str	r3, [r4, #40]	; 0x28
 8018366:	4b05      	ldr	r3, [pc, #20]	; (801837c <std+0x40>)
 8018368:	62e3      	str	r3, [r4, #44]	; 0x2c
 801836a:	4b05      	ldr	r3, [pc, #20]	; (8018380 <std+0x44>)
 801836c:	6224      	str	r4, [r4, #32]
 801836e:	6323      	str	r3, [r4, #48]	; 0x30
 8018370:	bd10      	pop	{r4, pc}
 8018372:	bf00      	nop
 8018374:	08018f4d 	.word	0x08018f4d
 8018378:	08018f6f 	.word	0x08018f6f
 801837c:	08018fa7 	.word	0x08018fa7
 8018380:	08018fcb 	.word	0x08018fcb

08018384 <_cleanup_r>:
 8018384:	4901      	ldr	r1, [pc, #4]	; (801838c <_cleanup_r+0x8>)
 8018386:	f000 b885 	b.w	8018494 <_fwalk_reent>
 801838a:	bf00      	nop
 801838c:	080182e9 	.word	0x080182e9

08018390 <__sfmoreglue>:
 8018390:	b570      	push	{r4, r5, r6, lr}
 8018392:	1e4a      	subs	r2, r1, #1
 8018394:	2568      	movs	r5, #104	; 0x68
 8018396:	4355      	muls	r5, r2
 8018398:	460e      	mov	r6, r1
 801839a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801839e:	f000 f951 	bl	8018644 <_malloc_r>
 80183a2:	4604      	mov	r4, r0
 80183a4:	b140      	cbz	r0, 80183b8 <__sfmoreglue+0x28>
 80183a6:	2100      	movs	r1, #0
 80183a8:	e9c0 1600 	strd	r1, r6, [r0]
 80183ac:	300c      	adds	r0, #12
 80183ae:	60a0      	str	r0, [r4, #8]
 80183b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80183b4:	f7ff fd01 	bl	8017dba <memset>
 80183b8:	4620      	mov	r0, r4
 80183ba:	bd70      	pop	{r4, r5, r6, pc}

080183bc <__sinit>:
 80183bc:	6983      	ldr	r3, [r0, #24]
 80183be:	b510      	push	{r4, lr}
 80183c0:	4604      	mov	r4, r0
 80183c2:	bb33      	cbnz	r3, 8018412 <__sinit+0x56>
 80183c4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80183c8:	6503      	str	r3, [r0, #80]	; 0x50
 80183ca:	4b12      	ldr	r3, [pc, #72]	; (8018414 <__sinit+0x58>)
 80183cc:	4a12      	ldr	r2, [pc, #72]	; (8018418 <__sinit+0x5c>)
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	6282      	str	r2, [r0, #40]	; 0x28
 80183d2:	4298      	cmp	r0, r3
 80183d4:	bf04      	itt	eq
 80183d6:	2301      	moveq	r3, #1
 80183d8:	6183      	streq	r3, [r0, #24]
 80183da:	f000 f81f 	bl	801841c <__sfp>
 80183de:	6060      	str	r0, [r4, #4]
 80183e0:	4620      	mov	r0, r4
 80183e2:	f000 f81b 	bl	801841c <__sfp>
 80183e6:	60a0      	str	r0, [r4, #8]
 80183e8:	4620      	mov	r0, r4
 80183ea:	f000 f817 	bl	801841c <__sfp>
 80183ee:	2200      	movs	r2, #0
 80183f0:	60e0      	str	r0, [r4, #12]
 80183f2:	2104      	movs	r1, #4
 80183f4:	6860      	ldr	r0, [r4, #4]
 80183f6:	f7ff ffa1 	bl	801833c <std>
 80183fa:	2201      	movs	r2, #1
 80183fc:	2109      	movs	r1, #9
 80183fe:	68a0      	ldr	r0, [r4, #8]
 8018400:	f7ff ff9c 	bl	801833c <std>
 8018404:	2202      	movs	r2, #2
 8018406:	2112      	movs	r1, #18
 8018408:	68e0      	ldr	r0, [r4, #12]
 801840a:	f7ff ff97 	bl	801833c <std>
 801840e:	2301      	movs	r3, #1
 8018410:	61a3      	str	r3, [r4, #24]
 8018412:	bd10      	pop	{r4, pc}
 8018414:	08026fb4 	.word	0x08026fb4
 8018418:	08018385 	.word	0x08018385

0801841c <__sfp>:
 801841c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801841e:	4b1b      	ldr	r3, [pc, #108]	; (801848c <__sfp+0x70>)
 8018420:	681e      	ldr	r6, [r3, #0]
 8018422:	69b3      	ldr	r3, [r6, #24]
 8018424:	4607      	mov	r7, r0
 8018426:	b913      	cbnz	r3, 801842e <__sfp+0x12>
 8018428:	4630      	mov	r0, r6
 801842a:	f7ff ffc7 	bl	80183bc <__sinit>
 801842e:	3648      	adds	r6, #72	; 0x48
 8018430:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018434:	3b01      	subs	r3, #1
 8018436:	d503      	bpl.n	8018440 <__sfp+0x24>
 8018438:	6833      	ldr	r3, [r6, #0]
 801843a:	b133      	cbz	r3, 801844a <__sfp+0x2e>
 801843c:	6836      	ldr	r6, [r6, #0]
 801843e:	e7f7      	b.n	8018430 <__sfp+0x14>
 8018440:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018444:	b16d      	cbz	r5, 8018462 <__sfp+0x46>
 8018446:	3468      	adds	r4, #104	; 0x68
 8018448:	e7f4      	b.n	8018434 <__sfp+0x18>
 801844a:	2104      	movs	r1, #4
 801844c:	4638      	mov	r0, r7
 801844e:	f7ff ff9f 	bl	8018390 <__sfmoreglue>
 8018452:	6030      	str	r0, [r6, #0]
 8018454:	2800      	cmp	r0, #0
 8018456:	d1f1      	bne.n	801843c <__sfp+0x20>
 8018458:	230c      	movs	r3, #12
 801845a:	603b      	str	r3, [r7, #0]
 801845c:	4604      	mov	r4, r0
 801845e:	4620      	mov	r0, r4
 8018460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018462:	4b0b      	ldr	r3, [pc, #44]	; (8018490 <__sfp+0x74>)
 8018464:	6665      	str	r5, [r4, #100]	; 0x64
 8018466:	e9c4 5500 	strd	r5, r5, [r4]
 801846a:	60a5      	str	r5, [r4, #8]
 801846c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8018470:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8018474:	2208      	movs	r2, #8
 8018476:	4629      	mov	r1, r5
 8018478:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801847c:	f7ff fc9d 	bl	8017dba <memset>
 8018480:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018484:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018488:	e7e9      	b.n	801845e <__sfp+0x42>
 801848a:	bf00      	nop
 801848c:	08026fb4 	.word	0x08026fb4
 8018490:	ffff0001 	.word	0xffff0001

08018494 <_fwalk_reent>:
 8018494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018498:	4680      	mov	r8, r0
 801849a:	4689      	mov	r9, r1
 801849c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80184a0:	2600      	movs	r6, #0
 80184a2:	b914      	cbnz	r4, 80184aa <_fwalk_reent+0x16>
 80184a4:	4630      	mov	r0, r6
 80184a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80184aa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80184ae:	3f01      	subs	r7, #1
 80184b0:	d501      	bpl.n	80184b6 <_fwalk_reent+0x22>
 80184b2:	6824      	ldr	r4, [r4, #0]
 80184b4:	e7f5      	b.n	80184a2 <_fwalk_reent+0xe>
 80184b6:	89ab      	ldrh	r3, [r5, #12]
 80184b8:	2b01      	cmp	r3, #1
 80184ba:	d907      	bls.n	80184cc <_fwalk_reent+0x38>
 80184bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80184c0:	3301      	adds	r3, #1
 80184c2:	d003      	beq.n	80184cc <_fwalk_reent+0x38>
 80184c4:	4629      	mov	r1, r5
 80184c6:	4640      	mov	r0, r8
 80184c8:	47c8      	blx	r9
 80184ca:	4306      	orrs	r6, r0
 80184cc:	3568      	adds	r5, #104	; 0x68
 80184ce:	e7ee      	b.n	80184ae <_fwalk_reent+0x1a>

080184d0 <__swhatbuf_r>:
 80184d0:	b570      	push	{r4, r5, r6, lr}
 80184d2:	460e      	mov	r6, r1
 80184d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80184d8:	2900      	cmp	r1, #0
 80184da:	b096      	sub	sp, #88	; 0x58
 80184dc:	4614      	mov	r4, r2
 80184de:	461d      	mov	r5, r3
 80184e0:	da07      	bge.n	80184f2 <__swhatbuf_r+0x22>
 80184e2:	2300      	movs	r3, #0
 80184e4:	602b      	str	r3, [r5, #0]
 80184e6:	89b3      	ldrh	r3, [r6, #12]
 80184e8:	061a      	lsls	r2, r3, #24
 80184ea:	d410      	bmi.n	801850e <__swhatbuf_r+0x3e>
 80184ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80184f0:	e00e      	b.n	8018510 <__swhatbuf_r+0x40>
 80184f2:	466a      	mov	r2, sp
 80184f4:	f000 fd90 	bl	8019018 <_fstat_r>
 80184f8:	2800      	cmp	r0, #0
 80184fa:	dbf2      	blt.n	80184e2 <__swhatbuf_r+0x12>
 80184fc:	9a01      	ldr	r2, [sp, #4]
 80184fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018502:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018506:	425a      	negs	r2, r3
 8018508:	415a      	adcs	r2, r3
 801850a:	602a      	str	r2, [r5, #0]
 801850c:	e7ee      	b.n	80184ec <__swhatbuf_r+0x1c>
 801850e:	2340      	movs	r3, #64	; 0x40
 8018510:	2000      	movs	r0, #0
 8018512:	6023      	str	r3, [r4, #0]
 8018514:	b016      	add	sp, #88	; 0x58
 8018516:	bd70      	pop	{r4, r5, r6, pc}

08018518 <__smakebuf_r>:
 8018518:	898b      	ldrh	r3, [r1, #12]
 801851a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801851c:	079d      	lsls	r5, r3, #30
 801851e:	4606      	mov	r6, r0
 8018520:	460c      	mov	r4, r1
 8018522:	d507      	bpl.n	8018534 <__smakebuf_r+0x1c>
 8018524:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018528:	6023      	str	r3, [r4, #0]
 801852a:	6123      	str	r3, [r4, #16]
 801852c:	2301      	movs	r3, #1
 801852e:	6163      	str	r3, [r4, #20]
 8018530:	b002      	add	sp, #8
 8018532:	bd70      	pop	{r4, r5, r6, pc}
 8018534:	ab01      	add	r3, sp, #4
 8018536:	466a      	mov	r2, sp
 8018538:	f7ff ffca 	bl	80184d0 <__swhatbuf_r>
 801853c:	9900      	ldr	r1, [sp, #0]
 801853e:	4605      	mov	r5, r0
 8018540:	4630      	mov	r0, r6
 8018542:	f000 f87f 	bl	8018644 <_malloc_r>
 8018546:	b948      	cbnz	r0, 801855c <__smakebuf_r+0x44>
 8018548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801854c:	059a      	lsls	r2, r3, #22
 801854e:	d4ef      	bmi.n	8018530 <__smakebuf_r+0x18>
 8018550:	f023 0303 	bic.w	r3, r3, #3
 8018554:	f043 0302 	orr.w	r3, r3, #2
 8018558:	81a3      	strh	r3, [r4, #12]
 801855a:	e7e3      	b.n	8018524 <__smakebuf_r+0xc>
 801855c:	4b0d      	ldr	r3, [pc, #52]	; (8018594 <__smakebuf_r+0x7c>)
 801855e:	62b3      	str	r3, [r6, #40]	; 0x28
 8018560:	89a3      	ldrh	r3, [r4, #12]
 8018562:	6020      	str	r0, [r4, #0]
 8018564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018568:	81a3      	strh	r3, [r4, #12]
 801856a:	9b00      	ldr	r3, [sp, #0]
 801856c:	6163      	str	r3, [r4, #20]
 801856e:	9b01      	ldr	r3, [sp, #4]
 8018570:	6120      	str	r0, [r4, #16]
 8018572:	b15b      	cbz	r3, 801858c <__smakebuf_r+0x74>
 8018574:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018578:	4630      	mov	r0, r6
 801857a:	f000 fd5f 	bl	801903c <_isatty_r>
 801857e:	b128      	cbz	r0, 801858c <__smakebuf_r+0x74>
 8018580:	89a3      	ldrh	r3, [r4, #12]
 8018582:	f023 0303 	bic.w	r3, r3, #3
 8018586:	f043 0301 	orr.w	r3, r3, #1
 801858a:	81a3      	strh	r3, [r4, #12]
 801858c:	89a3      	ldrh	r3, [r4, #12]
 801858e:	431d      	orrs	r5, r3
 8018590:	81a5      	strh	r5, [r4, #12]
 8018592:	e7cd      	b.n	8018530 <__smakebuf_r+0x18>
 8018594:	08018385 	.word	0x08018385

08018598 <malloc>:
 8018598:	4b02      	ldr	r3, [pc, #8]	; (80185a4 <malloc+0xc>)
 801859a:	4601      	mov	r1, r0
 801859c:	6818      	ldr	r0, [r3, #0]
 801859e:	f000 b851 	b.w	8018644 <_malloc_r>
 80185a2:	bf00      	nop
 80185a4:	20000020 	.word	0x20000020

080185a8 <_free_r>:
 80185a8:	b538      	push	{r3, r4, r5, lr}
 80185aa:	4605      	mov	r5, r0
 80185ac:	2900      	cmp	r1, #0
 80185ae:	d045      	beq.n	801863c <_free_r+0x94>
 80185b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80185b4:	1f0c      	subs	r4, r1, #4
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	bfb8      	it	lt
 80185ba:	18e4      	addlt	r4, r4, r3
 80185bc:	f000 fd60 	bl	8019080 <__malloc_lock>
 80185c0:	4a1f      	ldr	r2, [pc, #124]	; (8018640 <_free_r+0x98>)
 80185c2:	6813      	ldr	r3, [r2, #0]
 80185c4:	4610      	mov	r0, r2
 80185c6:	b933      	cbnz	r3, 80185d6 <_free_r+0x2e>
 80185c8:	6063      	str	r3, [r4, #4]
 80185ca:	6014      	str	r4, [r2, #0]
 80185cc:	4628      	mov	r0, r5
 80185ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80185d2:	f000 bd56 	b.w	8019082 <__malloc_unlock>
 80185d6:	42a3      	cmp	r3, r4
 80185d8:	d90c      	bls.n	80185f4 <_free_r+0x4c>
 80185da:	6821      	ldr	r1, [r4, #0]
 80185dc:	1862      	adds	r2, r4, r1
 80185de:	4293      	cmp	r3, r2
 80185e0:	bf04      	itt	eq
 80185e2:	681a      	ldreq	r2, [r3, #0]
 80185e4:	685b      	ldreq	r3, [r3, #4]
 80185e6:	6063      	str	r3, [r4, #4]
 80185e8:	bf04      	itt	eq
 80185ea:	1852      	addeq	r2, r2, r1
 80185ec:	6022      	streq	r2, [r4, #0]
 80185ee:	6004      	str	r4, [r0, #0]
 80185f0:	e7ec      	b.n	80185cc <_free_r+0x24>
 80185f2:	4613      	mov	r3, r2
 80185f4:	685a      	ldr	r2, [r3, #4]
 80185f6:	b10a      	cbz	r2, 80185fc <_free_r+0x54>
 80185f8:	42a2      	cmp	r2, r4
 80185fa:	d9fa      	bls.n	80185f2 <_free_r+0x4a>
 80185fc:	6819      	ldr	r1, [r3, #0]
 80185fe:	1858      	adds	r0, r3, r1
 8018600:	42a0      	cmp	r0, r4
 8018602:	d10b      	bne.n	801861c <_free_r+0x74>
 8018604:	6820      	ldr	r0, [r4, #0]
 8018606:	4401      	add	r1, r0
 8018608:	1858      	adds	r0, r3, r1
 801860a:	4282      	cmp	r2, r0
 801860c:	6019      	str	r1, [r3, #0]
 801860e:	d1dd      	bne.n	80185cc <_free_r+0x24>
 8018610:	6810      	ldr	r0, [r2, #0]
 8018612:	6852      	ldr	r2, [r2, #4]
 8018614:	605a      	str	r2, [r3, #4]
 8018616:	4401      	add	r1, r0
 8018618:	6019      	str	r1, [r3, #0]
 801861a:	e7d7      	b.n	80185cc <_free_r+0x24>
 801861c:	d902      	bls.n	8018624 <_free_r+0x7c>
 801861e:	230c      	movs	r3, #12
 8018620:	602b      	str	r3, [r5, #0]
 8018622:	e7d3      	b.n	80185cc <_free_r+0x24>
 8018624:	6820      	ldr	r0, [r4, #0]
 8018626:	1821      	adds	r1, r4, r0
 8018628:	428a      	cmp	r2, r1
 801862a:	bf04      	itt	eq
 801862c:	6811      	ldreq	r1, [r2, #0]
 801862e:	6852      	ldreq	r2, [r2, #4]
 8018630:	6062      	str	r2, [r4, #4]
 8018632:	bf04      	itt	eq
 8018634:	1809      	addeq	r1, r1, r0
 8018636:	6021      	streq	r1, [r4, #0]
 8018638:	605c      	str	r4, [r3, #4]
 801863a:	e7c7      	b.n	80185cc <_free_r+0x24>
 801863c:	bd38      	pop	{r3, r4, r5, pc}
 801863e:	bf00      	nop
 8018640:	20008bd8 	.word	0x20008bd8

08018644 <_malloc_r>:
 8018644:	b570      	push	{r4, r5, r6, lr}
 8018646:	1ccd      	adds	r5, r1, #3
 8018648:	f025 0503 	bic.w	r5, r5, #3
 801864c:	3508      	adds	r5, #8
 801864e:	2d0c      	cmp	r5, #12
 8018650:	bf38      	it	cc
 8018652:	250c      	movcc	r5, #12
 8018654:	2d00      	cmp	r5, #0
 8018656:	4606      	mov	r6, r0
 8018658:	db01      	blt.n	801865e <_malloc_r+0x1a>
 801865a:	42a9      	cmp	r1, r5
 801865c:	d903      	bls.n	8018666 <_malloc_r+0x22>
 801865e:	230c      	movs	r3, #12
 8018660:	6033      	str	r3, [r6, #0]
 8018662:	2000      	movs	r0, #0
 8018664:	bd70      	pop	{r4, r5, r6, pc}
 8018666:	f000 fd0b 	bl	8019080 <__malloc_lock>
 801866a:	4a21      	ldr	r2, [pc, #132]	; (80186f0 <_malloc_r+0xac>)
 801866c:	6814      	ldr	r4, [r2, #0]
 801866e:	4621      	mov	r1, r4
 8018670:	b991      	cbnz	r1, 8018698 <_malloc_r+0x54>
 8018672:	4c20      	ldr	r4, [pc, #128]	; (80186f4 <_malloc_r+0xb0>)
 8018674:	6823      	ldr	r3, [r4, #0]
 8018676:	b91b      	cbnz	r3, 8018680 <_malloc_r+0x3c>
 8018678:	4630      	mov	r0, r6
 801867a:	f000 fc57 	bl	8018f2c <_sbrk_r>
 801867e:	6020      	str	r0, [r4, #0]
 8018680:	4629      	mov	r1, r5
 8018682:	4630      	mov	r0, r6
 8018684:	f000 fc52 	bl	8018f2c <_sbrk_r>
 8018688:	1c43      	adds	r3, r0, #1
 801868a:	d124      	bne.n	80186d6 <_malloc_r+0x92>
 801868c:	230c      	movs	r3, #12
 801868e:	6033      	str	r3, [r6, #0]
 8018690:	4630      	mov	r0, r6
 8018692:	f000 fcf6 	bl	8019082 <__malloc_unlock>
 8018696:	e7e4      	b.n	8018662 <_malloc_r+0x1e>
 8018698:	680b      	ldr	r3, [r1, #0]
 801869a:	1b5b      	subs	r3, r3, r5
 801869c:	d418      	bmi.n	80186d0 <_malloc_r+0x8c>
 801869e:	2b0b      	cmp	r3, #11
 80186a0:	d90f      	bls.n	80186c2 <_malloc_r+0x7e>
 80186a2:	600b      	str	r3, [r1, #0]
 80186a4:	50cd      	str	r5, [r1, r3]
 80186a6:	18cc      	adds	r4, r1, r3
 80186a8:	4630      	mov	r0, r6
 80186aa:	f000 fcea 	bl	8019082 <__malloc_unlock>
 80186ae:	f104 000b 	add.w	r0, r4, #11
 80186b2:	1d23      	adds	r3, r4, #4
 80186b4:	f020 0007 	bic.w	r0, r0, #7
 80186b8:	1ac3      	subs	r3, r0, r3
 80186ba:	d0d3      	beq.n	8018664 <_malloc_r+0x20>
 80186bc:	425a      	negs	r2, r3
 80186be:	50e2      	str	r2, [r4, r3]
 80186c0:	e7d0      	b.n	8018664 <_malloc_r+0x20>
 80186c2:	428c      	cmp	r4, r1
 80186c4:	684b      	ldr	r3, [r1, #4]
 80186c6:	bf16      	itet	ne
 80186c8:	6063      	strne	r3, [r4, #4]
 80186ca:	6013      	streq	r3, [r2, #0]
 80186cc:	460c      	movne	r4, r1
 80186ce:	e7eb      	b.n	80186a8 <_malloc_r+0x64>
 80186d0:	460c      	mov	r4, r1
 80186d2:	6849      	ldr	r1, [r1, #4]
 80186d4:	e7cc      	b.n	8018670 <_malloc_r+0x2c>
 80186d6:	1cc4      	adds	r4, r0, #3
 80186d8:	f024 0403 	bic.w	r4, r4, #3
 80186dc:	42a0      	cmp	r0, r4
 80186de:	d005      	beq.n	80186ec <_malloc_r+0xa8>
 80186e0:	1a21      	subs	r1, r4, r0
 80186e2:	4630      	mov	r0, r6
 80186e4:	f000 fc22 	bl	8018f2c <_sbrk_r>
 80186e8:	3001      	adds	r0, #1
 80186ea:	d0cf      	beq.n	801868c <_malloc_r+0x48>
 80186ec:	6025      	str	r5, [r4, #0]
 80186ee:	e7db      	b.n	80186a8 <_malloc_r+0x64>
 80186f0:	20008bd8 	.word	0x20008bd8
 80186f4:	20008bdc 	.word	0x20008bdc

080186f8 <__ssputs_r>:
 80186f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186fc:	688e      	ldr	r6, [r1, #8]
 80186fe:	429e      	cmp	r6, r3
 8018700:	4682      	mov	sl, r0
 8018702:	460c      	mov	r4, r1
 8018704:	4690      	mov	r8, r2
 8018706:	4699      	mov	r9, r3
 8018708:	d837      	bhi.n	801877a <__ssputs_r+0x82>
 801870a:	898a      	ldrh	r2, [r1, #12]
 801870c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018710:	d031      	beq.n	8018776 <__ssputs_r+0x7e>
 8018712:	6825      	ldr	r5, [r4, #0]
 8018714:	6909      	ldr	r1, [r1, #16]
 8018716:	1a6f      	subs	r7, r5, r1
 8018718:	6965      	ldr	r5, [r4, #20]
 801871a:	2302      	movs	r3, #2
 801871c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018720:	fb95 f5f3 	sdiv	r5, r5, r3
 8018724:	f109 0301 	add.w	r3, r9, #1
 8018728:	443b      	add	r3, r7
 801872a:	429d      	cmp	r5, r3
 801872c:	bf38      	it	cc
 801872e:	461d      	movcc	r5, r3
 8018730:	0553      	lsls	r3, r2, #21
 8018732:	d530      	bpl.n	8018796 <__ssputs_r+0x9e>
 8018734:	4629      	mov	r1, r5
 8018736:	f7ff ff85 	bl	8018644 <_malloc_r>
 801873a:	4606      	mov	r6, r0
 801873c:	b950      	cbnz	r0, 8018754 <__ssputs_r+0x5c>
 801873e:	230c      	movs	r3, #12
 8018740:	f8ca 3000 	str.w	r3, [sl]
 8018744:	89a3      	ldrh	r3, [r4, #12]
 8018746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801874a:	81a3      	strh	r3, [r4, #12]
 801874c:	f04f 30ff 	mov.w	r0, #4294967295
 8018750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018754:	463a      	mov	r2, r7
 8018756:	6921      	ldr	r1, [r4, #16]
 8018758:	f7ff fb0b 	bl	8017d72 <memcpy>
 801875c:	89a3      	ldrh	r3, [r4, #12]
 801875e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018766:	81a3      	strh	r3, [r4, #12]
 8018768:	6126      	str	r6, [r4, #16]
 801876a:	6165      	str	r5, [r4, #20]
 801876c:	443e      	add	r6, r7
 801876e:	1bed      	subs	r5, r5, r7
 8018770:	6026      	str	r6, [r4, #0]
 8018772:	60a5      	str	r5, [r4, #8]
 8018774:	464e      	mov	r6, r9
 8018776:	454e      	cmp	r6, r9
 8018778:	d900      	bls.n	801877c <__ssputs_r+0x84>
 801877a:	464e      	mov	r6, r9
 801877c:	4632      	mov	r2, r6
 801877e:	4641      	mov	r1, r8
 8018780:	6820      	ldr	r0, [r4, #0]
 8018782:	f7ff fb01 	bl	8017d88 <memmove>
 8018786:	68a3      	ldr	r3, [r4, #8]
 8018788:	1b9b      	subs	r3, r3, r6
 801878a:	60a3      	str	r3, [r4, #8]
 801878c:	6823      	ldr	r3, [r4, #0]
 801878e:	441e      	add	r6, r3
 8018790:	6026      	str	r6, [r4, #0]
 8018792:	2000      	movs	r0, #0
 8018794:	e7dc      	b.n	8018750 <__ssputs_r+0x58>
 8018796:	462a      	mov	r2, r5
 8018798:	f000 fc74 	bl	8019084 <_realloc_r>
 801879c:	4606      	mov	r6, r0
 801879e:	2800      	cmp	r0, #0
 80187a0:	d1e2      	bne.n	8018768 <__ssputs_r+0x70>
 80187a2:	6921      	ldr	r1, [r4, #16]
 80187a4:	4650      	mov	r0, sl
 80187a6:	f7ff feff 	bl	80185a8 <_free_r>
 80187aa:	e7c8      	b.n	801873e <__ssputs_r+0x46>

080187ac <_svfiprintf_r>:
 80187ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187b0:	461d      	mov	r5, r3
 80187b2:	898b      	ldrh	r3, [r1, #12]
 80187b4:	061f      	lsls	r7, r3, #24
 80187b6:	b09d      	sub	sp, #116	; 0x74
 80187b8:	4680      	mov	r8, r0
 80187ba:	460c      	mov	r4, r1
 80187bc:	4616      	mov	r6, r2
 80187be:	d50f      	bpl.n	80187e0 <_svfiprintf_r+0x34>
 80187c0:	690b      	ldr	r3, [r1, #16]
 80187c2:	b96b      	cbnz	r3, 80187e0 <_svfiprintf_r+0x34>
 80187c4:	2140      	movs	r1, #64	; 0x40
 80187c6:	f7ff ff3d 	bl	8018644 <_malloc_r>
 80187ca:	6020      	str	r0, [r4, #0]
 80187cc:	6120      	str	r0, [r4, #16]
 80187ce:	b928      	cbnz	r0, 80187dc <_svfiprintf_r+0x30>
 80187d0:	230c      	movs	r3, #12
 80187d2:	f8c8 3000 	str.w	r3, [r8]
 80187d6:	f04f 30ff 	mov.w	r0, #4294967295
 80187da:	e0c8      	b.n	801896e <_svfiprintf_r+0x1c2>
 80187dc:	2340      	movs	r3, #64	; 0x40
 80187de:	6163      	str	r3, [r4, #20]
 80187e0:	2300      	movs	r3, #0
 80187e2:	9309      	str	r3, [sp, #36]	; 0x24
 80187e4:	2320      	movs	r3, #32
 80187e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80187ea:	2330      	movs	r3, #48	; 0x30
 80187ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80187f0:	9503      	str	r5, [sp, #12]
 80187f2:	f04f 0b01 	mov.w	fp, #1
 80187f6:	4637      	mov	r7, r6
 80187f8:	463d      	mov	r5, r7
 80187fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80187fe:	b10b      	cbz	r3, 8018804 <_svfiprintf_r+0x58>
 8018800:	2b25      	cmp	r3, #37	; 0x25
 8018802:	d13e      	bne.n	8018882 <_svfiprintf_r+0xd6>
 8018804:	ebb7 0a06 	subs.w	sl, r7, r6
 8018808:	d00b      	beq.n	8018822 <_svfiprintf_r+0x76>
 801880a:	4653      	mov	r3, sl
 801880c:	4632      	mov	r2, r6
 801880e:	4621      	mov	r1, r4
 8018810:	4640      	mov	r0, r8
 8018812:	f7ff ff71 	bl	80186f8 <__ssputs_r>
 8018816:	3001      	adds	r0, #1
 8018818:	f000 80a4 	beq.w	8018964 <_svfiprintf_r+0x1b8>
 801881c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801881e:	4453      	add	r3, sl
 8018820:	9309      	str	r3, [sp, #36]	; 0x24
 8018822:	783b      	ldrb	r3, [r7, #0]
 8018824:	2b00      	cmp	r3, #0
 8018826:	f000 809d 	beq.w	8018964 <_svfiprintf_r+0x1b8>
 801882a:	2300      	movs	r3, #0
 801882c:	f04f 32ff 	mov.w	r2, #4294967295
 8018830:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018834:	9304      	str	r3, [sp, #16]
 8018836:	9307      	str	r3, [sp, #28]
 8018838:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801883c:	931a      	str	r3, [sp, #104]	; 0x68
 801883e:	462f      	mov	r7, r5
 8018840:	2205      	movs	r2, #5
 8018842:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018846:	4850      	ldr	r0, [pc, #320]	; (8018988 <_svfiprintf_r+0x1dc>)
 8018848:	f7e7 fcea 	bl	8000220 <memchr>
 801884c:	9b04      	ldr	r3, [sp, #16]
 801884e:	b9d0      	cbnz	r0, 8018886 <_svfiprintf_r+0xda>
 8018850:	06d9      	lsls	r1, r3, #27
 8018852:	bf44      	itt	mi
 8018854:	2220      	movmi	r2, #32
 8018856:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801885a:	071a      	lsls	r2, r3, #28
 801885c:	bf44      	itt	mi
 801885e:	222b      	movmi	r2, #43	; 0x2b
 8018860:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018864:	782a      	ldrb	r2, [r5, #0]
 8018866:	2a2a      	cmp	r2, #42	; 0x2a
 8018868:	d015      	beq.n	8018896 <_svfiprintf_r+0xea>
 801886a:	9a07      	ldr	r2, [sp, #28]
 801886c:	462f      	mov	r7, r5
 801886e:	2000      	movs	r0, #0
 8018870:	250a      	movs	r5, #10
 8018872:	4639      	mov	r1, r7
 8018874:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018878:	3b30      	subs	r3, #48	; 0x30
 801887a:	2b09      	cmp	r3, #9
 801887c:	d94d      	bls.n	801891a <_svfiprintf_r+0x16e>
 801887e:	b1b8      	cbz	r0, 80188b0 <_svfiprintf_r+0x104>
 8018880:	e00f      	b.n	80188a2 <_svfiprintf_r+0xf6>
 8018882:	462f      	mov	r7, r5
 8018884:	e7b8      	b.n	80187f8 <_svfiprintf_r+0x4c>
 8018886:	4a40      	ldr	r2, [pc, #256]	; (8018988 <_svfiprintf_r+0x1dc>)
 8018888:	1a80      	subs	r0, r0, r2
 801888a:	fa0b f000 	lsl.w	r0, fp, r0
 801888e:	4318      	orrs	r0, r3
 8018890:	9004      	str	r0, [sp, #16]
 8018892:	463d      	mov	r5, r7
 8018894:	e7d3      	b.n	801883e <_svfiprintf_r+0x92>
 8018896:	9a03      	ldr	r2, [sp, #12]
 8018898:	1d11      	adds	r1, r2, #4
 801889a:	6812      	ldr	r2, [r2, #0]
 801889c:	9103      	str	r1, [sp, #12]
 801889e:	2a00      	cmp	r2, #0
 80188a0:	db01      	blt.n	80188a6 <_svfiprintf_r+0xfa>
 80188a2:	9207      	str	r2, [sp, #28]
 80188a4:	e004      	b.n	80188b0 <_svfiprintf_r+0x104>
 80188a6:	4252      	negs	r2, r2
 80188a8:	f043 0302 	orr.w	r3, r3, #2
 80188ac:	9207      	str	r2, [sp, #28]
 80188ae:	9304      	str	r3, [sp, #16]
 80188b0:	783b      	ldrb	r3, [r7, #0]
 80188b2:	2b2e      	cmp	r3, #46	; 0x2e
 80188b4:	d10c      	bne.n	80188d0 <_svfiprintf_r+0x124>
 80188b6:	787b      	ldrb	r3, [r7, #1]
 80188b8:	2b2a      	cmp	r3, #42	; 0x2a
 80188ba:	d133      	bne.n	8018924 <_svfiprintf_r+0x178>
 80188bc:	9b03      	ldr	r3, [sp, #12]
 80188be:	1d1a      	adds	r2, r3, #4
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	9203      	str	r2, [sp, #12]
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	bfb8      	it	lt
 80188c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80188cc:	3702      	adds	r7, #2
 80188ce:	9305      	str	r3, [sp, #20]
 80188d0:	4d2e      	ldr	r5, [pc, #184]	; (801898c <_svfiprintf_r+0x1e0>)
 80188d2:	7839      	ldrb	r1, [r7, #0]
 80188d4:	2203      	movs	r2, #3
 80188d6:	4628      	mov	r0, r5
 80188d8:	f7e7 fca2 	bl	8000220 <memchr>
 80188dc:	b138      	cbz	r0, 80188ee <_svfiprintf_r+0x142>
 80188de:	2340      	movs	r3, #64	; 0x40
 80188e0:	1b40      	subs	r0, r0, r5
 80188e2:	fa03 f000 	lsl.w	r0, r3, r0
 80188e6:	9b04      	ldr	r3, [sp, #16]
 80188e8:	4303      	orrs	r3, r0
 80188ea:	3701      	adds	r7, #1
 80188ec:	9304      	str	r3, [sp, #16]
 80188ee:	7839      	ldrb	r1, [r7, #0]
 80188f0:	4827      	ldr	r0, [pc, #156]	; (8018990 <_svfiprintf_r+0x1e4>)
 80188f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80188f6:	2206      	movs	r2, #6
 80188f8:	1c7e      	adds	r6, r7, #1
 80188fa:	f7e7 fc91 	bl	8000220 <memchr>
 80188fe:	2800      	cmp	r0, #0
 8018900:	d038      	beq.n	8018974 <_svfiprintf_r+0x1c8>
 8018902:	4b24      	ldr	r3, [pc, #144]	; (8018994 <_svfiprintf_r+0x1e8>)
 8018904:	bb13      	cbnz	r3, 801894c <_svfiprintf_r+0x1a0>
 8018906:	9b03      	ldr	r3, [sp, #12]
 8018908:	3307      	adds	r3, #7
 801890a:	f023 0307 	bic.w	r3, r3, #7
 801890e:	3308      	adds	r3, #8
 8018910:	9303      	str	r3, [sp, #12]
 8018912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018914:	444b      	add	r3, r9
 8018916:	9309      	str	r3, [sp, #36]	; 0x24
 8018918:	e76d      	b.n	80187f6 <_svfiprintf_r+0x4a>
 801891a:	fb05 3202 	mla	r2, r5, r2, r3
 801891e:	2001      	movs	r0, #1
 8018920:	460f      	mov	r7, r1
 8018922:	e7a6      	b.n	8018872 <_svfiprintf_r+0xc6>
 8018924:	2300      	movs	r3, #0
 8018926:	3701      	adds	r7, #1
 8018928:	9305      	str	r3, [sp, #20]
 801892a:	4619      	mov	r1, r3
 801892c:	250a      	movs	r5, #10
 801892e:	4638      	mov	r0, r7
 8018930:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018934:	3a30      	subs	r2, #48	; 0x30
 8018936:	2a09      	cmp	r2, #9
 8018938:	d903      	bls.n	8018942 <_svfiprintf_r+0x196>
 801893a:	2b00      	cmp	r3, #0
 801893c:	d0c8      	beq.n	80188d0 <_svfiprintf_r+0x124>
 801893e:	9105      	str	r1, [sp, #20]
 8018940:	e7c6      	b.n	80188d0 <_svfiprintf_r+0x124>
 8018942:	fb05 2101 	mla	r1, r5, r1, r2
 8018946:	2301      	movs	r3, #1
 8018948:	4607      	mov	r7, r0
 801894a:	e7f0      	b.n	801892e <_svfiprintf_r+0x182>
 801894c:	ab03      	add	r3, sp, #12
 801894e:	9300      	str	r3, [sp, #0]
 8018950:	4622      	mov	r2, r4
 8018952:	4b11      	ldr	r3, [pc, #68]	; (8018998 <_svfiprintf_r+0x1ec>)
 8018954:	a904      	add	r1, sp, #16
 8018956:	4640      	mov	r0, r8
 8018958:	f3af 8000 	nop.w
 801895c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018960:	4681      	mov	r9, r0
 8018962:	d1d6      	bne.n	8018912 <_svfiprintf_r+0x166>
 8018964:	89a3      	ldrh	r3, [r4, #12]
 8018966:	065b      	lsls	r3, r3, #25
 8018968:	f53f af35 	bmi.w	80187d6 <_svfiprintf_r+0x2a>
 801896c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801896e:	b01d      	add	sp, #116	; 0x74
 8018970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018974:	ab03      	add	r3, sp, #12
 8018976:	9300      	str	r3, [sp, #0]
 8018978:	4622      	mov	r2, r4
 801897a:	4b07      	ldr	r3, [pc, #28]	; (8018998 <_svfiprintf_r+0x1ec>)
 801897c:	a904      	add	r1, sp, #16
 801897e:	4640      	mov	r0, r8
 8018980:	f000 f9c2 	bl	8018d08 <_printf_i>
 8018984:	e7ea      	b.n	801895c <_svfiprintf_r+0x1b0>
 8018986:	bf00      	nop
 8018988:	08027124 	.word	0x08027124
 801898c:	0802712a 	.word	0x0802712a
 8018990:	0802712e 	.word	0x0802712e
 8018994:	00000000 	.word	0x00000000
 8018998:	080186f9 	.word	0x080186f9

0801899c <__sfputc_r>:
 801899c:	6893      	ldr	r3, [r2, #8]
 801899e:	3b01      	subs	r3, #1
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	b410      	push	{r4}
 80189a4:	6093      	str	r3, [r2, #8]
 80189a6:	da08      	bge.n	80189ba <__sfputc_r+0x1e>
 80189a8:	6994      	ldr	r4, [r2, #24]
 80189aa:	42a3      	cmp	r3, r4
 80189ac:	db01      	blt.n	80189b2 <__sfputc_r+0x16>
 80189ae:	290a      	cmp	r1, #10
 80189b0:	d103      	bne.n	80189ba <__sfputc_r+0x1e>
 80189b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80189b6:	f7ff bb43 	b.w	8018040 <__swbuf_r>
 80189ba:	6813      	ldr	r3, [r2, #0]
 80189bc:	1c58      	adds	r0, r3, #1
 80189be:	6010      	str	r0, [r2, #0]
 80189c0:	7019      	strb	r1, [r3, #0]
 80189c2:	4608      	mov	r0, r1
 80189c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80189c8:	4770      	bx	lr

080189ca <__sfputs_r>:
 80189ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189cc:	4606      	mov	r6, r0
 80189ce:	460f      	mov	r7, r1
 80189d0:	4614      	mov	r4, r2
 80189d2:	18d5      	adds	r5, r2, r3
 80189d4:	42ac      	cmp	r4, r5
 80189d6:	d101      	bne.n	80189dc <__sfputs_r+0x12>
 80189d8:	2000      	movs	r0, #0
 80189da:	e007      	b.n	80189ec <__sfputs_r+0x22>
 80189dc:	463a      	mov	r2, r7
 80189de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80189e2:	4630      	mov	r0, r6
 80189e4:	f7ff ffda 	bl	801899c <__sfputc_r>
 80189e8:	1c43      	adds	r3, r0, #1
 80189ea:	d1f3      	bne.n	80189d4 <__sfputs_r+0xa>
 80189ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080189f0 <_vfiprintf_r>:
 80189f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189f4:	460c      	mov	r4, r1
 80189f6:	b09d      	sub	sp, #116	; 0x74
 80189f8:	4617      	mov	r7, r2
 80189fa:	461d      	mov	r5, r3
 80189fc:	4606      	mov	r6, r0
 80189fe:	b118      	cbz	r0, 8018a08 <_vfiprintf_r+0x18>
 8018a00:	6983      	ldr	r3, [r0, #24]
 8018a02:	b90b      	cbnz	r3, 8018a08 <_vfiprintf_r+0x18>
 8018a04:	f7ff fcda 	bl	80183bc <__sinit>
 8018a08:	4b7c      	ldr	r3, [pc, #496]	; (8018bfc <_vfiprintf_r+0x20c>)
 8018a0a:	429c      	cmp	r4, r3
 8018a0c:	d158      	bne.n	8018ac0 <_vfiprintf_r+0xd0>
 8018a0e:	6874      	ldr	r4, [r6, #4]
 8018a10:	89a3      	ldrh	r3, [r4, #12]
 8018a12:	0718      	lsls	r0, r3, #28
 8018a14:	d55e      	bpl.n	8018ad4 <_vfiprintf_r+0xe4>
 8018a16:	6923      	ldr	r3, [r4, #16]
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d05b      	beq.n	8018ad4 <_vfiprintf_r+0xe4>
 8018a1c:	2300      	movs	r3, #0
 8018a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8018a20:	2320      	movs	r3, #32
 8018a22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018a26:	2330      	movs	r3, #48	; 0x30
 8018a28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018a2c:	9503      	str	r5, [sp, #12]
 8018a2e:	f04f 0b01 	mov.w	fp, #1
 8018a32:	46b8      	mov	r8, r7
 8018a34:	4645      	mov	r5, r8
 8018a36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018a3a:	b10b      	cbz	r3, 8018a40 <_vfiprintf_r+0x50>
 8018a3c:	2b25      	cmp	r3, #37	; 0x25
 8018a3e:	d154      	bne.n	8018aea <_vfiprintf_r+0xfa>
 8018a40:	ebb8 0a07 	subs.w	sl, r8, r7
 8018a44:	d00b      	beq.n	8018a5e <_vfiprintf_r+0x6e>
 8018a46:	4653      	mov	r3, sl
 8018a48:	463a      	mov	r2, r7
 8018a4a:	4621      	mov	r1, r4
 8018a4c:	4630      	mov	r0, r6
 8018a4e:	f7ff ffbc 	bl	80189ca <__sfputs_r>
 8018a52:	3001      	adds	r0, #1
 8018a54:	f000 80c2 	beq.w	8018bdc <_vfiprintf_r+0x1ec>
 8018a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a5a:	4453      	add	r3, sl
 8018a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8018a5e:	f898 3000 	ldrb.w	r3, [r8]
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	f000 80ba 	beq.w	8018bdc <_vfiprintf_r+0x1ec>
 8018a68:	2300      	movs	r3, #0
 8018a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8018a6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018a72:	9304      	str	r3, [sp, #16]
 8018a74:	9307      	str	r3, [sp, #28]
 8018a76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018a7a:	931a      	str	r3, [sp, #104]	; 0x68
 8018a7c:	46a8      	mov	r8, r5
 8018a7e:	2205      	movs	r2, #5
 8018a80:	f818 1b01 	ldrb.w	r1, [r8], #1
 8018a84:	485e      	ldr	r0, [pc, #376]	; (8018c00 <_vfiprintf_r+0x210>)
 8018a86:	f7e7 fbcb 	bl	8000220 <memchr>
 8018a8a:	9b04      	ldr	r3, [sp, #16]
 8018a8c:	bb78      	cbnz	r0, 8018aee <_vfiprintf_r+0xfe>
 8018a8e:	06d9      	lsls	r1, r3, #27
 8018a90:	bf44      	itt	mi
 8018a92:	2220      	movmi	r2, #32
 8018a94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018a98:	071a      	lsls	r2, r3, #28
 8018a9a:	bf44      	itt	mi
 8018a9c:	222b      	movmi	r2, #43	; 0x2b
 8018a9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018aa2:	782a      	ldrb	r2, [r5, #0]
 8018aa4:	2a2a      	cmp	r2, #42	; 0x2a
 8018aa6:	d02a      	beq.n	8018afe <_vfiprintf_r+0x10e>
 8018aa8:	9a07      	ldr	r2, [sp, #28]
 8018aaa:	46a8      	mov	r8, r5
 8018aac:	2000      	movs	r0, #0
 8018aae:	250a      	movs	r5, #10
 8018ab0:	4641      	mov	r1, r8
 8018ab2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018ab6:	3b30      	subs	r3, #48	; 0x30
 8018ab8:	2b09      	cmp	r3, #9
 8018aba:	d969      	bls.n	8018b90 <_vfiprintf_r+0x1a0>
 8018abc:	b360      	cbz	r0, 8018b18 <_vfiprintf_r+0x128>
 8018abe:	e024      	b.n	8018b0a <_vfiprintf_r+0x11a>
 8018ac0:	4b50      	ldr	r3, [pc, #320]	; (8018c04 <_vfiprintf_r+0x214>)
 8018ac2:	429c      	cmp	r4, r3
 8018ac4:	d101      	bne.n	8018aca <_vfiprintf_r+0xda>
 8018ac6:	68b4      	ldr	r4, [r6, #8]
 8018ac8:	e7a2      	b.n	8018a10 <_vfiprintf_r+0x20>
 8018aca:	4b4f      	ldr	r3, [pc, #316]	; (8018c08 <_vfiprintf_r+0x218>)
 8018acc:	429c      	cmp	r4, r3
 8018ace:	bf08      	it	eq
 8018ad0:	68f4      	ldreq	r4, [r6, #12]
 8018ad2:	e79d      	b.n	8018a10 <_vfiprintf_r+0x20>
 8018ad4:	4621      	mov	r1, r4
 8018ad6:	4630      	mov	r0, r6
 8018ad8:	f7ff fb12 	bl	8018100 <__swsetup_r>
 8018adc:	2800      	cmp	r0, #0
 8018ade:	d09d      	beq.n	8018a1c <_vfiprintf_r+0x2c>
 8018ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8018ae4:	b01d      	add	sp, #116	; 0x74
 8018ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018aea:	46a8      	mov	r8, r5
 8018aec:	e7a2      	b.n	8018a34 <_vfiprintf_r+0x44>
 8018aee:	4a44      	ldr	r2, [pc, #272]	; (8018c00 <_vfiprintf_r+0x210>)
 8018af0:	1a80      	subs	r0, r0, r2
 8018af2:	fa0b f000 	lsl.w	r0, fp, r0
 8018af6:	4318      	orrs	r0, r3
 8018af8:	9004      	str	r0, [sp, #16]
 8018afa:	4645      	mov	r5, r8
 8018afc:	e7be      	b.n	8018a7c <_vfiprintf_r+0x8c>
 8018afe:	9a03      	ldr	r2, [sp, #12]
 8018b00:	1d11      	adds	r1, r2, #4
 8018b02:	6812      	ldr	r2, [r2, #0]
 8018b04:	9103      	str	r1, [sp, #12]
 8018b06:	2a00      	cmp	r2, #0
 8018b08:	db01      	blt.n	8018b0e <_vfiprintf_r+0x11e>
 8018b0a:	9207      	str	r2, [sp, #28]
 8018b0c:	e004      	b.n	8018b18 <_vfiprintf_r+0x128>
 8018b0e:	4252      	negs	r2, r2
 8018b10:	f043 0302 	orr.w	r3, r3, #2
 8018b14:	9207      	str	r2, [sp, #28]
 8018b16:	9304      	str	r3, [sp, #16]
 8018b18:	f898 3000 	ldrb.w	r3, [r8]
 8018b1c:	2b2e      	cmp	r3, #46	; 0x2e
 8018b1e:	d10e      	bne.n	8018b3e <_vfiprintf_r+0x14e>
 8018b20:	f898 3001 	ldrb.w	r3, [r8, #1]
 8018b24:	2b2a      	cmp	r3, #42	; 0x2a
 8018b26:	d138      	bne.n	8018b9a <_vfiprintf_r+0x1aa>
 8018b28:	9b03      	ldr	r3, [sp, #12]
 8018b2a:	1d1a      	adds	r2, r3, #4
 8018b2c:	681b      	ldr	r3, [r3, #0]
 8018b2e:	9203      	str	r2, [sp, #12]
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	bfb8      	it	lt
 8018b34:	f04f 33ff 	movlt.w	r3, #4294967295
 8018b38:	f108 0802 	add.w	r8, r8, #2
 8018b3c:	9305      	str	r3, [sp, #20]
 8018b3e:	4d33      	ldr	r5, [pc, #204]	; (8018c0c <_vfiprintf_r+0x21c>)
 8018b40:	f898 1000 	ldrb.w	r1, [r8]
 8018b44:	2203      	movs	r2, #3
 8018b46:	4628      	mov	r0, r5
 8018b48:	f7e7 fb6a 	bl	8000220 <memchr>
 8018b4c:	b140      	cbz	r0, 8018b60 <_vfiprintf_r+0x170>
 8018b4e:	2340      	movs	r3, #64	; 0x40
 8018b50:	1b40      	subs	r0, r0, r5
 8018b52:	fa03 f000 	lsl.w	r0, r3, r0
 8018b56:	9b04      	ldr	r3, [sp, #16]
 8018b58:	4303      	orrs	r3, r0
 8018b5a:	f108 0801 	add.w	r8, r8, #1
 8018b5e:	9304      	str	r3, [sp, #16]
 8018b60:	f898 1000 	ldrb.w	r1, [r8]
 8018b64:	482a      	ldr	r0, [pc, #168]	; (8018c10 <_vfiprintf_r+0x220>)
 8018b66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018b6a:	2206      	movs	r2, #6
 8018b6c:	f108 0701 	add.w	r7, r8, #1
 8018b70:	f7e7 fb56 	bl	8000220 <memchr>
 8018b74:	2800      	cmp	r0, #0
 8018b76:	d037      	beq.n	8018be8 <_vfiprintf_r+0x1f8>
 8018b78:	4b26      	ldr	r3, [pc, #152]	; (8018c14 <_vfiprintf_r+0x224>)
 8018b7a:	bb1b      	cbnz	r3, 8018bc4 <_vfiprintf_r+0x1d4>
 8018b7c:	9b03      	ldr	r3, [sp, #12]
 8018b7e:	3307      	adds	r3, #7
 8018b80:	f023 0307 	bic.w	r3, r3, #7
 8018b84:	3308      	adds	r3, #8
 8018b86:	9303      	str	r3, [sp, #12]
 8018b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b8a:	444b      	add	r3, r9
 8018b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8018b8e:	e750      	b.n	8018a32 <_vfiprintf_r+0x42>
 8018b90:	fb05 3202 	mla	r2, r5, r2, r3
 8018b94:	2001      	movs	r0, #1
 8018b96:	4688      	mov	r8, r1
 8018b98:	e78a      	b.n	8018ab0 <_vfiprintf_r+0xc0>
 8018b9a:	2300      	movs	r3, #0
 8018b9c:	f108 0801 	add.w	r8, r8, #1
 8018ba0:	9305      	str	r3, [sp, #20]
 8018ba2:	4619      	mov	r1, r3
 8018ba4:	250a      	movs	r5, #10
 8018ba6:	4640      	mov	r0, r8
 8018ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018bac:	3a30      	subs	r2, #48	; 0x30
 8018bae:	2a09      	cmp	r2, #9
 8018bb0:	d903      	bls.n	8018bba <_vfiprintf_r+0x1ca>
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d0c3      	beq.n	8018b3e <_vfiprintf_r+0x14e>
 8018bb6:	9105      	str	r1, [sp, #20]
 8018bb8:	e7c1      	b.n	8018b3e <_vfiprintf_r+0x14e>
 8018bba:	fb05 2101 	mla	r1, r5, r1, r2
 8018bbe:	2301      	movs	r3, #1
 8018bc0:	4680      	mov	r8, r0
 8018bc2:	e7f0      	b.n	8018ba6 <_vfiprintf_r+0x1b6>
 8018bc4:	ab03      	add	r3, sp, #12
 8018bc6:	9300      	str	r3, [sp, #0]
 8018bc8:	4622      	mov	r2, r4
 8018bca:	4b13      	ldr	r3, [pc, #76]	; (8018c18 <_vfiprintf_r+0x228>)
 8018bcc:	a904      	add	r1, sp, #16
 8018bce:	4630      	mov	r0, r6
 8018bd0:	f3af 8000 	nop.w
 8018bd4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018bd8:	4681      	mov	r9, r0
 8018bda:	d1d5      	bne.n	8018b88 <_vfiprintf_r+0x198>
 8018bdc:	89a3      	ldrh	r3, [r4, #12]
 8018bde:	065b      	lsls	r3, r3, #25
 8018be0:	f53f af7e 	bmi.w	8018ae0 <_vfiprintf_r+0xf0>
 8018be4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018be6:	e77d      	b.n	8018ae4 <_vfiprintf_r+0xf4>
 8018be8:	ab03      	add	r3, sp, #12
 8018bea:	9300      	str	r3, [sp, #0]
 8018bec:	4622      	mov	r2, r4
 8018bee:	4b0a      	ldr	r3, [pc, #40]	; (8018c18 <_vfiprintf_r+0x228>)
 8018bf0:	a904      	add	r1, sp, #16
 8018bf2:	4630      	mov	r0, r6
 8018bf4:	f000 f888 	bl	8018d08 <_printf_i>
 8018bf8:	e7ec      	b.n	8018bd4 <_vfiprintf_r+0x1e4>
 8018bfa:	bf00      	nop
 8018bfc:	080270e4 	.word	0x080270e4
 8018c00:	08027124 	.word	0x08027124
 8018c04:	08027104 	.word	0x08027104
 8018c08:	080270c4 	.word	0x080270c4
 8018c0c:	0802712a 	.word	0x0802712a
 8018c10:	0802712e 	.word	0x0802712e
 8018c14:	00000000 	.word	0x00000000
 8018c18:	080189cb 	.word	0x080189cb

08018c1c <_printf_common>:
 8018c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c20:	4691      	mov	r9, r2
 8018c22:	461f      	mov	r7, r3
 8018c24:	688a      	ldr	r2, [r1, #8]
 8018c26:	690b      	ldr	r3, [r1, #16]
 8018c28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018c2c:	4293      	cmp	r3, r2
 8018c2e:	bfb8      	it	lt
 8018c30:	4613      	movlt	r3, r2
 8018c32:	f8c9 3000 	str.w	r3, [r9]
 8018c36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018c3a:	4606      	mov	r6, r0
 8018c3c:	460c      	mov	r4, r1
 8018c3e:	b112      	cbz	r2, 8018c46 <_printf_common+0x2a>
 8018c40:	3301      	adds	r3, #1
 8018c42:	f8c9 3000 	str.w	r3, [r9]
 8018c46:	6823      	ldr	r3, [r4, #0]
 8018c48:	0699      	lsls	r1, r3, #26
 8018c4a:	bf42      	ittt	mi
 8018c4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8018c50:	3302      	addmi	r3, #2
 8018c52:	f8c9 3000 	strmi.w	r3, [r9]
 8018c56:	6825      	ldr	r5, [r4, #0]
 8018c58:	f015 0506 	ands.w	r5, r5, #6
 8018c5c:	d107      	bne.n	8018c6e <_printf_common+0x52>
 8018c5e:	f104 0a19 	add.w	sl, r4, #25
 8018c62:	68e3      	ldr	r3, [r4, #12]
 8018c64:	f8d9 2000 	ldr.w	r2, [r9]
 8018c68:	1a9b      	subs	r3, r3, r2
 8018c6a:	42ab      	cmp	r3, r5
 8018c6c:	dc28      	bgt.n	8018cc0 <_printf_common+0xa4>
 8018c6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8018c72:	6822      	ldr	r2, [r4, #0]
 8018c74:	3300      	adds	r3, #0
 8018c76:	bf18      	it	ne
 8018c78:	2301      	movne	r3, #1
 8018c7a:	0692      	lsls	r2, r2, #26
 8018c7c:	d42d      	bmi.n	8018cda <_printf_common+0xbe>
 8018c7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018c82:	4639      	mov	r1, r7
 8018c84:	4630      	mov	r0, r6
 8018c86:	47c0      	blx	r8
 8018c88:	3001      	adds	r0, #1
 8018c8a:	d020      	beq.n	8018cce <_printf_common+0xb2>
 8018c8c:	6823      	ldr	r3, [r4, #0]
 8018c8e:	68e5      	ldr	r5, [r4, #12]
 8018c90:	f8d9 2000 	ldr.w	r2, [r9]
 8018c94:	f003 0306 	and.w	r3, r3, #6
 8018c98:	2b04      	cmp	r3, #4
 8018c9a:	bf08      	it	eq
 8018c9c:	1aad      	subeq	r5, r5, r2
 8018c9e:	68a3      	ldr	r3, [r4, #8]
 8018ca0:	6922      	ldr	r2, [r4, #16]
 8018ca2:	bf0c      	ite	eq
 8018ca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018ca8:	2500      	movne	r5, #0
 8018caa:	4293      	cmp	r3, r2
 8018cac:	bfc4      	itt	gt
 8018cae:	1a9b      	subgt	r3, r3, r2
 8018cb0:	18ed      	addgt	r5, r5, r3
 8018cb2:	f04f 0900 	mov.w	r9, #0
 8018cb6:	341a      	adds	r4, #26
 8018cb8:	454d      	cmp	r5, r9
 8018cba:	d11a      	bne.n	8018cf2 <_printf_common+0xd6>
 8018cbc:	2000      	movs	r0, #0
 8018cbe:	e008      	b.n	8018cd2 <_printf_common+0xb6>
 8018cc0:	2301      	movs	r3, #1
 8018cc2:	4652      	mov	r2, sl
 8018cc4:	4639      	mov	r1, r7
 8018cc6:	4630      	mov	r0, r6
 8018cc8:	47c0      	blx	r8
 8018cca:	3001      	adds	r0, #1
 8018ccc:	d103      	bne.n	8018cd6 <_printf_common+0xba>
 8018cce:	f04f 30ff 	mov.w	r0, #4294967295
 8018cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018cd6:	3501      	adds	r5, #1
 8018cd8:	e7c3      	b.n	8018c62 <_printf_common+0x46>
 8018cda:	18e1      	adds	r1, r4, r3
 8018cdc:	1c5a      	adds	r2, r3, #1
 8018cde:	2030      	movs	r0, #48	; 0x30
 8018ce0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018ce4:	4422      	add	r2, r4
 8018ce6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018cea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018cee:	3302      	adds	r3, #2
 8018cf0:	e7c5      	b.n	8018c7e <_printf_common+0x62>
 8018cf2:	2301      	movs	r3, #1
 8018cf4:	4622      	mov	r2, r4
 8018cf6:	4639      	mov	r1, r7
 8018cf8:	4630      	mov	r0, r6
 8018cfa:	47c0      	blx	r8
 8018cfc:	3001      	adds	r0, #1
 8018cfe:	d0e6      	beq.n	8018cce <_printf_common+0xb2>
 8018d00:	f109 0901 	add.w	r9, r9, #1
 8018d04:	e7d8      	b.n	8018cb8 <_printf_common+0x9c>
	...

08018d08 <_printf_i>:
 8018d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018d0c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8018d10:	460c      	mov	r4, r1
 8018d12:	7e09      	ldrb	r1, [r1, #24]
 8018d14:	b085      	sub	sp, #20
 8018d16:	296e      	cmp	r1, #110	; 0x6e
 8018d18:	4617      	mov	r7, r2
 8018d1a:	4606      	mov	r6, r0
 8018d1c:	4698      	mov	r8, r3
 8018d1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018d20:	f000 80b3 	beq.w	8018e8a <_printf_i+0x182>
 8018d24:	d822      	bhi.n	8018d6c <_printf_i+0x64>
 8018d26:	2963      	cmp	r1, #99	; 0x63
 8018d28:	d036      	beq.n	8018d98 <_printf_i+0x90>
 8018d2a:	d80a      	bhi.n	8018d42 <_printf_i+0x3a>
 8018d2c:	2900      	cmp	r1, #0
 8018d2e:	f000 80b9 	beq.w	8018ea4 <_printf_i+0x19c>
 8018d32:	2958      	cmp	r1, #88	; 0x58
 8018d34:	f000 8083 	beq.w	8018e3e <_printf_i+0x136>
 8018d38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018d3c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8018d40:	e032      	b.n	8018da8 <_printf_i+0xa0>
 8018d42:	2964      	cmp	r1, #100	; 0x64
 8018d44:	d001      	beq.n	8018d4a <_printf_i+0x42>
 8018d46:	2969      	cmp	r1, #105	; 0x69
 8018d48:	d1f6      	bne.n	8018d38 <_printf_i+0x30>
 8018d4a:	6820      	ldr	r0, [r4, #0]
 8018d4c:	6813      	ldr	r3, [r2, #0]
 8018d4e:	0605      	lsls	r5, r0, #24
 8018d50:	f103 0104 	add.w	r1, r3, #4
 8018d54:	d52a      	bpl.n	8018dac <_printf_i+0xa4>
 8018d56:	681b      	ldr	r3, [r3, #0]
 8018d58:	6011      	str	r1, [r2, #0]
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	da03      	bge.n	8018d66 <_printf_i+0x5e>
 8018d5e:	222d      	movs	r2, #45	; 0x2d
 8018d60:	425b      	negs	r3, r3
 8018d62:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8018d66:	486f      	ldr	r0, [pc, #444]	; (8018f24 <_printf_i+0x21c>)
 8018d68:	220a      	movs	r2, #10
 8018d6a:	e039      	b.n	8018de0 <_printf_i+0xd8>
 8018d6c:	2973      	cmp	r1, #115	; 0x73
 8018d6e:	f000 809d 	beq.w	8018eac <_printf_i+0x1a4>
 8018d72:	d808      	bhi.n	8018d86 <_printf_i+0x7e>
 8018d74:	296f      	cmp	r1, #111	; 0x6f
 8018d76:	d020      	beq.n	8018dba <_printf_i+0xb2>
 8018d78:	2970      	cmp	r1, #112	; 0x70
 8018d7a:	d1dd      	bne.n	8018d38 <_printf_i+0x30>
 8018d7c:	6823      	ldr	r3, [r4, #0]
 8018d7e:	f043 0320 	orr.w	r3, r3, #32
 8018d82:	6023      	str	r3, [r4, #0]
 8018d84:	e003      	b.n	8018d8e <_printf_i+0x86>
 8018d86:	2975      	cmp	r1, #117	; 0x75
 8018d88:	d017      	beq.n	8018dba <_printf_i+0xb2>
 8018d8a:	2978      	cmp	r1, #120	; 0x78
 8018d8c:	d1d4      	bne.n	8018d38 <_printf_i+0x30>
 8018d8e:	2378      	movs	r3, #120	; 0x78
 8018d90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018d94:	4864      	ldr	r0, [pc, #400]	; (8018f28 <_printf_i+0x220>)
 8018d96:	e055      	b.n	8018e44 <_printf_i+0x13c>
 8018d98:	6813      	ldr	r3, [r2, #0]
 8018d9a:	1d19      	adds	r1, r3, #4
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	6011      	str	r1, [r2, #0]
 8018da0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018da4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018da8:	2301      	movs	r3, #1
 8018daa:	e08c      	b.n	8018ec6 <_printf_i+0x1be>
 8018dac:	681b      	ldr	r3, [r3, #0]
 8018dae:	6011      	str	r1, [r2, #0]
 8018db0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018db4:	bf18      	it	ne
 8018db6:	b21b      	sxthne	r3, r3
 8018db8:	e7cf      	b.n	8018d5a <_printf_i+0x52>
 8018dba:	6813      	ldr	r3, [r2, #0]
 8018dbc:	6825      	ldr	r5, [r4, #0]
 8018dbe:	1d18      	adds	r0, r3, #4
 8018dc0:	6010      	str	r0, [r2, #0]
 8018dc2:	0628      	lsls	r0, r5, #24
 8018dc4:	d501      	bpl.n	8018dca <_printf_i+0xc2>
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	e002      	b.n	8018dd0 <_printf_i+0xc8>
 8018dca:	0668      	lsls	r0, r5, #25
 8018dcc:	d5fb      	bpl.n	8018dc6 <_printf_i+0xbe>
 8018dce:	881b      	ldrh	r3, [r3, #0]
 8018dd0:	4854      	ldr	r0, [pc, #336]	; (8018f24 <_printf_i+0x21c>)
 8018dd2:	296f      	cmp	r1, #111	; 0x6f
 8018dd4:	bf14      	ite	ne
 8018dd6:	220a      	movne	r2, #10
 8018dd8:	2208      	moveq	r2, #8
 8018dda:	2100      	movs	r1, #0
 8018ddc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018de0:	6865      	ldr	r5, [r4, #4]
 8018de2:	60a5      	str	r5, [r4, #8]
 8018de4:	2d00      	cmp	r5, #0
 8018de6:	f2c0 8095 	blt.w	8018f14 <_printf_i+0x20c>
 8018dea:	6821      	ldr	r1, [r4, #0]
 8018dec:	f021 0104 	bic.w	r1, r1, #4
 8018df0:	6021      	str	r1, [r4, #0]
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	d13d      	bne.n	8018e72 <_printf_i+0x16a>
 8018df6:	2d00      	cmp	r5, #0
 8018df8:	f040 808e 	bne.w	8018f18 <_printf_i+0x210>
 8018dfc:	4665      	mov	r5, ip
 8018dfe:	2a08      	cmp	r2, #8
 8018e00:	d10b      	bne.n	8018e1a <_printf_i+0x112>
 8018e02:	6823      	ldr	r3, [r4, #0]
 8018e04:	07db      	lsls	r3, r3, #31
 8018e06:	d508      	bpl.n	8018e1a <_printf_i+0x112>
 8018e08:	6923      	ldr	r3, [r4, #16]
 8018e0a:	6862      	ldr	r2, [r4, #4]
 8018e0c:	429a      	cmp	r2, r3
 8018e0e:	bfde      	ittt	le
 8018e10:	2330      	movle	r3, #48	; 0x30
 8018e12:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018e16:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018e1a:	ebac 0305 	sub.w	r3, ip, r5
 8018e1e:	6123      	str	r3, [r4, #16]
 8018e20:	f8cd 8000 	str.w	r8, [sp]
 8018e24:	463b      	mov	r3, r7
 8018e26:	aa03      	add	r2, sp, #12
 8018e28:	4621      	mov	r1, r4
 8018e2a:	4630      	mov	r0, r6
 8018e2c:	f7ff fef6 	bl	8018c1c <_printf_common>
 8018e30:	3001      	adds	r0, #1
 8018e32:	d14d      	bne.n	8018ed0 <_printf_i+0x1c8>
 8018e34:	f04f 30ff 	mov.w	r0, #4294967295
 8018e38:	b005      	add	sp, #20
 8018e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e3e:	4839      	ldr	r0, [pc, #228]	; (8018f24 <_printf_i+0x21c>)
 8018e40:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8018e44:	6813      	ldr	r3, [r2, #0]
 8018e46:	6821      	ldr	r1, [r4, #0]
 8018e48:	1d1d      	adds	r5, r3, #4
 8018e4a:	681b      	ldr	r3, [r3, #0]
 8018e4c:	6015      	str	r5, [r2, #0]
 8018e4e:	060a      	lsls	r2, r1, #24
 8018e50:	d50b      	bpl.n	8018e6a <_printf_i+0x162>
 8018e52:	07ca      	lsls	r2, r1, #31
 8018e54:	bf44      	itt	mi
 8018e56:	f041 0120 	orrmi.w	r1, r1, #32
 8018e5a:	6021      	strmi	r1, [r4, #0]
 8018e5c:	b91b      	cbnz	r3, 8018e66 <_printf_i+0x15e>
 8018e5e:	6822      	ldr	r2, [r4, #0]
 8018e60:	f022 0220 	bic.w	r2, r2, #32
 8018e64:	6022      	str	r2, [r4, #0]
 8018e66:	2210      	movs	r2, #16
 8018e68:	e7b7      	b.n	8018dda <_printf_i+0xd2>
 8018e6a:	064d      	lsls	r5, r1, #25
 8018e6c:	bf48      	it	mi
 8018e6e:	b29b      	uxthmi	r3, r3
 8018e70:	e7ef      	b.n	8018e52 <_printf_i+0x14a>
 8018e72:	4665      	mov	r5, ip
 8018e74:	fbb3 f1f2 	udiv	r1, r3, r2
 8018e78:	fb02 3311 	mls	r3, r2, r1, r3
 8018e7c:	5cc3      	ldrb	r3, [r0, r3]
 8018e7e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8018e82:	460b      	mov	r3, r1
 8018e84:	2900      	cmp	r1, #0
 8018e86:	d1f5      	bne.n	8018e74 <_printf_i+0x16c>
 8018e88:	e7b9      	b.n	8018dfe <_printf_i+0xf6>
 8018e8a:	6813      	ldr	r3, [r2, #0]
 8018e8c:	6825      	ldr	r5, [r4, #0]
 8018e8e:	6961      	ldr	r1, [r4, #20]
 8018e90:	1d18      	adds	r0, r3, #4
 8018e92:	6010      	str	r0, [r2, #0]
 8018e94:	0628      	lsls	r0, r5, #24
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	d501      	bpl.n	8018e9e <_printf_i+0x196>
 8018e9a:	6019      	str	r1, [r3, #0]
 8018e9c:	e002      	b.n	8018ea4 <_printf_i+0x19c>
 8018e9e:	066a      	lsls	r2, r5, #25
 8018ea0:	d5fb      	bpl.n	8018e9a <_printf_i+0x192>
 8018ea2:	8019      	strh	r1, [r3, #0]
 8018ea4:	2300      	movs	r3, #0
 8018ea6:	6123      	str	r3, [r4, #16]
 8018ea8:	4665      	mov	r5, ip
 8018eaa:	e7b9      	b.n	8018e20 <_printf_i+0x118>
 8018eac:	6813      	ldr	r3, [r2, #0]
 8018eae:	1d19      	adds	r1, r3, #4
 8018eb0:	6011      	str	r1, [r2, #0]
 8018eb2:	681d      	ldr	r5, [r3, #0]
 8018eb4:	6862      	ldr	r2, [r4, #4]
 8018eb6:	2100      	movs	r1, #0
 8018eb8:	4628      	mov	r0, r5
 8018eba:	f7e7 f9b1 	bl	8000220 <memchr>
 8018ebe:	b108      	cbz	r0, 8018ec4 <_printf_i+0x1bc>
 8018ec0:	1b40      	subs	r0, r0, r5
 8018ec2:	6060      	str	r0, [r4, #4]
 8018ec4:	6863      	ldr	r3, [r4, #4]
 8018ec6:	6123      	str	r3, [r4, #16]
 8018ec8:	2300      	movs	r3, #0
 8018eca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018ece:	e7a7      	b.n	8018e20 <_printf_i+0x118>
 8018ed0:	6923      	ldr	r3, [r4, #16]
 8018ed2:	462a      	mov	r2, r5
 8018ed4:	4639      	mov	r1, r7
 8018ed6:	4630      	mov	r0, r6
 8018ed8:	47c0      	blx	r8
 8018eda:	3001      	adds	r0, #1
 8018edc:	d0aa      	beq.n	8018e34 <_printf_i+0x12c>
 8018ede:	6823      	ldr	r3, [r4, #0]
 8018ee0:	079b      	lsls	r3, r3, #30
 8018ee2:	d413      	bmi.n	8018f0c <_printf_i+0x204>
 8018ee4:	68e0      	ldr	r0, [r4, #12]
 8018ee6:	9b03      	ldr	r3, [sp, #12]
 8018ee8:	4298      	cmp	r0, r3
 8018eea:	bfb8      	it	lt
 8018eec:	4618      	movlt	r0, r3
 8018eee:	e7a3      	b.n	8018e38 <_printf_i+0x130>
 8018ef0:	2301      	movs	r3, #1
 8018ef2:	464a      	mov	r2, r9
 8018ef4:	4639      	mov	r1, r7
 8018ef6:	4630      	mov	r0, r6
 8018ef8:	47c0      	blx	r8
 8018efa:	3001      	adds	r0, #1
 8018efc:	d09a      	beq.n	8018e34 <_printf_i+0x12c>
 8018efe:	3501      	adds	r5, #1
 8018f00:	68e3      	ldr	r3, [r4, #12]
 8018f02:	9a03      	ldr	r2, [sp, #12]
 8018f04:	1a9b      	subs	r3, r3, r2
 8018f06:	42ab      	cmp	r3, r5
 8018f08:	dcf2      	bgt.n	8018ef0 <_printf_i+0x1e8>
 8018f0a:	e7eb      	b.n	8018ee4 <_printf_i+0x1dc>
 8018f0c:	2500      	movs	r5, #0
 8018f0e:	f104 0919 	add.w	r9, r4, #25
 8018f12:	e7f5      	b.n	8018f00 <_printf_i+0x1f8>
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d1ac      	bne.n	8018e72 <_printf_i+0x16a>
 8018f18:	7803      	ldrb	r3, [r0, #0]
 8018f1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018f1e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018f22:	e76c      	b.n	8018dfe <_printf_i+0xf6>
 8018f24:	08027135 	.word	0x08027135
 8018f28:	08027146 	.word	0x08027146

08018f2c <_sbrk_r>:
 8018f2c:	b538      	push	{r3, r4, r5, lr}
 8018f2e:	4c06      	ldr	r4, [pc, #24]	; (8018f48 <_sbrk_r+0x1c>)
 8018f30:	2300      	movs	r3, #0
 8018f32:	4605      	mov	r5, r0
 8018f34:	4608      	mov	r0, r1
 8018f36:	6023      	str	r3, [r4, #0]
 8018f38:	f7e7 fe72 	bl	8000c20 <_sbrk>
 8018f3c:	1c43      	adds	r3, r0, #1
 8018f3e:	d102      	bne.n	8018f46 <_sbrk_r+0x1a>
 8018f40:	6823      	ldr	r3, [r4, #0]
 8018f42:	b103      	cbz	r3, 8018f46 <_sbrk_r+0x1a>
 8018f44:	602b      	str	r3, [r5, #0]
 8018f46:	bd38      	pop	{r3, r4, r5, pc}
 8018f48:	2000f558 	.word	0x2000f558

08018f4c <__sread>:
 8018f4c:	b510      	push	{r4, lr}
 8018f4e:	460c      	mov	r4, r1
 8018f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f54:	f000 f8bc 	bl	80190d0 <_read_r>
 8018f58:	2800      	cmp	r0, #0
 8018f5a:	bfab      	itete	ge
 8018f5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018f5e:	89a3      	ldrhlt	r3, [r4, #12]
 8018f60:	181b      	addge	r3, r3, r0
 8018f62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018f66:	bfac      	ite	ge
 8018f68:	6563      	strge	r3, [r4, #84]	; 0x54
 8018f6a:	81a3      	strhlt	r3, [r4, #12]
 8018f6c:	bd10      	pop	{r4, pc}

08018f6e <__swrite>:
 8018f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f72:	461f      	mov	r7, r3
 8018f74:	898b      	ldrh	r3, [r1, #12]
 8018f76:	05db      	lsls	r3, r3, #23
 8018f78:	4605      	mov	r5, r0
 8018f7a:	460c      	mov	r4, r1
 8018f7c:	4616      	mov	r6, r2
 8018f7e:	d505      	bpl.n	8018f8c <__swrite+0x1e>
 8018f80:	2302      	movs	r3, #2
 8018f82:	2200      	movs	r2, #0
 8018f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f88:	f000 f868 	bl	801905c <_lseek_r>
 8018f8c:	89a3      	ldrh	r3, [r4, #12]
 8018f8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018f92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018f96:	81a3      	strh	r3, [r4, #12]
 8018f98:	4632      	mov	r2, r6
 8018f9a:	463b      	mov	r3, r7
 8018f9c:	4628      	mov	r0, r5
 8018f9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018fa2:	f000 b817 	b.w	8018fd4 <_write_r>

08018fa6 <__sseek>:
 8018fa6:	b510      	push	{r4, lr}
 8018fa8:	460c      	mov	r4, r1
 8018faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018fae:	f000 f855 	bl	801905c <_lseek_r>
 8018fb2:	1c43      	adds	r3, r0, #1
 8018fb4:	89a3      	ldrh	r3, [r4, #12]
 8018fb6:	bf15      	itete	ne
 8018fb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8018fba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018fbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018fc2:	81a3      	strheq	r3, [r4, #12]
 8018fc4:	bf18      	it	ne
 8018fc6:	81a3      	strhne	r3, [r4, #12]
 8018fc8:	bd10      	pop	{r4, pc}

08018fca <__sclose>:
 8018fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018fce:	f000 b813 	b.w	8018ff8 <_close_r>
	...

08018fd4 <_write_r>:
 8018fd4:	b538      	push	{r3, r4, r5, lr}
 8018fd6:	4c07      	ldr	r4, [pc, #28]	; (8018ff4 <_write_r+0x20>)
 8018fd8:	4605      	mov	r5, r0
 8018fda:	4608      	mov	r0, r1
 8018fdc:	4611      	mov	r1, r2
 8018fde:	2200      	movs	r2, #0
 8018fe0:	6022      	str	r2, [r4, #0]
 8018fe2:	461a      	mov	r2, r3
 8018fe4:	f7e7 fdcb 	bl	8000b7e <_write>
 8018fe8:	1c43      	adds	r3, r0, #1
 8018fea:	d102      	bne.n	8018ff2 <_write_r+0x1e>
 8018fec:	6823      	ldr	r3, [r4, #0]
 8018fee:	b103      	cbz	r3, 8018ff2 <_write_r+0x1e>
 8018ff0:	602b      	str	r3, [r5, #0]
 8018ff2:	bd38      	pop	{r3, r4, r5, pc}
 8018ff4:	2000f558 	.word	0x2000f558

08018ff8 <_close_r>:
 8018ff8:	b538      	push	{r3, r4, r5, lr}
 8018ffa:	4c06      	ldr	r4, [pc, #24]	; (8019014 <_close_r+0x1c>)
 8018ffc:	2300      	movs	r3, #0
 8018ffe:	4605      	mov	r5, r0
 8019000:	4608      	mov	r0, r1
 8019002:	6023      	str	r3, [r4, #0]
 8019004:	f7e7 fdd7 	bl	8000bb6 <_close>
 8019008:	1c43      	adds	r3, r0, #1
 801900a:	d102      	bne.n	8019012 <_close_r+0x1a>
 801900c:	6823      	ldr	r3, [r4, #0]
 801900e:	b103      	cbz	r3, 8019012 <_close_r+0x1a>
 8019010:	602b      	str	r3, [r5, #0]
 8019012:	bd38      	pop	{r3, r4, r5, pc}
 8019014:	2000f558 	.word	0x2000f558

08019018 <_fstat_r>:
 8019018:	b538      	push	{r3, r4, r5, lr}
 801901a:	4c07      	ldr	r4, [pc, #28]	; (8019038 <_fstat_r+0x20>)
 801901c:	2300      	movs	r3, #0
 801901e:	4605      	mov	r5, r0
 8019020:	4608      	mov	r0, r1
 8019022:	4611      	mov	r1, r2
 8019024:	6023      	str	r3, [r4, #0]
 8019026:	f7e7 fdd2 	bl	8000bce <_fstat>
 801902a:	1c43      	adds	r3, r0, #1
 801902c:	d102      	bne.n	8019034 <_fstat_r+0x1c>
 801902e:	6823      	ldr	r3, [r4, #0]
 8019030:	b103      	cbz	r3, 8019034 <_fstat_r+0x1c>
 8019032:	602b      	str	r3, [r5, #0]
 8019034:	bd38      	pop	{r3, r4, r5, pc}
 8019036:	bf00      	nop
 8019038:	2000f558 	.word	0x2000f558

0801903c <_isatty_r>:
 801903c:	b538      	push	{r3, r4, r5, lr}
 801903e:	4c06      	ldr	r4, [pc, #24]	; (8019058 <_isatty_r+0x1c>)
 8019040:	2300      	movs	r3, #0
 8019042:	4605      	mov	r5, r0
 8019044:	4608      	mov	r0, r1
 8019046:	6023      	str	r3, [r4, #0]
 8019048:	f7e7 fdd1 	bl	8000bee <_isatty>
 801904c:	1c43      	adds	r3, r0, #1
 801904e:	d102      	bne.n	8019056 <_isatty_r+0x1a>
 8019050:	6823      	ldr	r3, [r4, #0]
 8019052:	b103      	cbz	r3, 8019056 <_isatty_r+0x1a>
 8019054:	602b      	str	r3, [r5, #0]
 8019056:	bd38      	pop	{r3, r4, r5, pc}
 8019058:	2000f558 	.word	0x2000f558

0801905c <_lseek_r>:
 801905c:	b538      	push	{r3, r4, r5, lr}
 801905e:	4c07      	ldr	r4, [pc, #28]	; (801907c <_lseek_r+0x20>)
 8019060:	4605      	mov	r5, r0
 8019062:	4608      	mov	r0, r1
 8019064:	4611      	mov	r1, r2
 8019066:	2200      	movs	r2, #0
 8019068:	6022      	str	r2, [r4, #0]
 801906a:	461a      	mov	r2, r3
 801906c:	f7e7 fdca 	bl	8000c04 <_lseek>
 8019070:	1c43      	adds	r3, r0, #1
 8019072:	d102      	bne.n	801907a <_lseek_r+0x1e>
 8019074:	6823      	ldr	r3, [r4, #0]
 8019076:	b103      	cbz	r3, 801907a <_lseek_r+0x1e>
 8019078:	602b      	str	r3, [r5, #0]
 801907a:	bd38      	pop	{r3, r4, r5, pc}
 801907c:	2000f558 	.word	0x2000f558

08019080 <__malloc_lock>:
 8019080:	4770      	bx	lr

08019082 <__malloc_unlock>:
 8019082:	4770      	bx	lr

08019084 <_realloc_r>:
 8019084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019086:	4607      	mov	r7, r0
 8019088:	4614      	mov	r4, r2
 801908a:	460e      	mov	r6, r1
 801908c:	b921      	cbnz	r1, 8019098 <_realloc_r+0x14>
 801908e:	4611      	mov	r1, r2
 8019090:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019094:	f7ff bad6 	b.w	8018644 <_malloc_r>
 8019098:	b922      	cbnz	r2, 80190a4 <_realloc_r+0x20>
 801909a:	f7ff fa85 	bl	80185a8 <_free_r>
 801909e:	4625      	mov	r5, r4
 80190a0:	4628      	mov	r0, r5
 80190a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80190a4:	f000 f826 	bl	80190f4 <_malloc_usable_size_r>
 80190a8:	42a0      	cmp	r0, r4
 80190aa:	d20f      	bcs.n	80190cc <_realloc_r+0x48>
 80190ac:	4621      	mov	r1, r4
 80190ae:	4638      	mov	r0, r7
 80190b0:	f7ff fac8 	bl	8018644 <_malloc_r>
 80190b4:	4605      	mov	r5, r0
 80190b6:	2800      	cmp	r0, #0
 80190b8:	d0f2      	beq.n	80190a0 <_realloc_r+0x1c>
 80190ba:	4631      	mov	r1, r6
 80190bc:	4622      	mov	r2, r4
 80190be:	f7fe fe58 	bl	8017d72 <memcpy>
 80190c2:	4631      	mov	r1, r6
 80190c4:	4638      	mov	r0, r7
 80190c6:	f7ff fa6f 	bl	80185a8 <_free_r>
 80190ca:	e7e9      	b.n	80190a0 <_realloc_r+0x1c>
 80190cc:	4635      	mov	r5, r6
 80190ce:	e7e7      	b.n	80190a0 <_realloc_r+0x1c>

080190d0 <_read_r>:
 80190d0:	b538      	push	{r3, r4, r5, lr}
 80190d2:	4c07      	ldr	r4, [pc, #28]	; (80190f0 <_read_r+0x20>)
 80190d4:	4605      	mov	r5, r0
 80190d6:	4608      	mov	r0, r1
 80190d8:	4611      	mov	r1, r2
 80190da:	2200      	movs	r2, #0
 80190dc:	6022      	str	r2, [r4, #0]
 80190de:	461a      	mov	r2, r3
 80190e0:	f7e7 fd30 	bl	8000b44 <_read>
 80190e4:	1c43      	adds	r3, r0, #1
 80190e6:	d102      	bne.n	80190ee <_read_r+0x1e>
 80190e8:	6823      	ldr	r3, [r4, #0]
 80190ea:	b103      	cbz	r3, 80190ee <_read_r+0x1e>
 80190ec:	602b      	str	r3, [r5, #0]
 80190ee:	bd38      	pop	{r3, r4, r5, pc}
 80190f0:	2000f558 	.word	0x2000f558

080190f4 <_malloc_usable_size_r>:
 80190f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80190f8:	1f18      	subs	r0, r3, #4
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	bfbc      	itt	lt
 80190fe:	580b      	ldrlt	r3, [r1, r0]
 8019100:	18c0      	addlt	r0, r0, r3
 8019102:	4770      	bx	lr

08019104 <_init>:
 8019104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019106:	bf00      	nop
 8019108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801910a:	bc08      	pop	{r3}
 801910c:	469e      	mov	lr, r3
 801910e:	4770      	bx	lr

08019110 <_fini>:
 8019110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019112:	bf00      	nop
 8019114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019116:	bc08      	pop	{r3}
 8019118:	469e      	mov	lr, r3
 801911a:	4770      	bx	lr
