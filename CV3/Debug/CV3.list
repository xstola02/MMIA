
CV3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000244  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000304  0800030c  0001030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000304  08000304  0001030c  2**0
                  CONTENTS
  4 .ARM          00000000  08000304  08000304  0001030c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000304  0800030c  0001030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000304  08000304  00010304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000308  08000308  00010308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800030c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800030c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001030c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000055c  00000000  00000000  00010334  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000002ad  00000000  00000000  00010890  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000098  00000000  00000000  00010b40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000060  00000000  00000000  00010bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004818  00000000  00000000  00010c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001255  00000000  00000000  00015450  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00018298  00000000  00000000  000166a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002e93d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000f0  00000000  00000000  0002e9b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080002ec 	.word	0x080002ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080002ec 	.word	0x080002ec

08000108 <main>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


int main(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
	sct_init();
 800010c:	f000 f83c 	bl	8000188 <sct_init>
	sct_led(0x7A5C36DE);
 8000110:	4b02      	ldr	r3, [pc, #8]	; (800011c <main+0x14>)
 8000112:	0018      	movs	r0, r3
 8000114:	f000 f804 	bl	8000120 <sct_led>


    /* Loop forever */
	for(;;)
 8000118:	e7fe      	b.n	8000118 <main+0x10>
 800011a:	46c0      	nop			; (mov r8, r8)
 800011c:	7a5c36de 	.word	0x7a5c36de

08000120 <sct_led>:
#define sct_sdi(x) do { if (x) GPIOB->BSRR = (1 << 4); else GPIOB->BRR = (1 << 4); } while (0)
#define sct_clk(x) do { if (x) GPIOB->BSRR = (1 << 3); else GPIOB->BRR = (1 << 3); } while (0)
#define  sct_noe(x) do { if (x) GPIOB->BSRR = (1 << 10); else GPIOB->BRR = (1 << 10); } while (0)

void sct_led(uint32_t value)
{
 8000120:	b580      	push	{r7, lr}
 8000122:	b084      	sub	sp, #16
 8000124:	af00      	add	r7, sp, #0
 8000126:	6078      	str	r0, [r7, #4]
	for (uint8_t j = 0; j<32; j++)
 8000128:	230f      	movs	r3, #15
 800012a:	18fb      	adds	r3, r7, r3
 800012c:	2200      	movs	r2, #0
 800012e:	701a      	strb	r2, [r3, #0]
 8000130:	e019      	b.n	8000166 <sct_led+0x46>
	{
		sct_sdi(value & 1);
 8000132:	687b      	ldr	r3, [r7, #4]
 8000134:	2201      	movs	r2, #1
 8000136:	4013      	ands	r3, r2
 8000138:	d003      	beq.n	8000142 <sct_led+0x22>
 800013a:	4b12      	ldr	r3, [pc, #72]	; (8000184 <sct_led+0x64>)
 800013c:	2210      	movs	r2, #16
 800013e:	619a      	str	r2, [r3, #24]
 8000140:	e002      	b.n	8000148 <sct_led+0x28>
 8000142:	4b10      	ldr	r3, [pc, #64]	; (8000184 <sct_led+0x64>)
 8000144:	2210      	movs	r2, #16
 8000146:	629a      	str	r2, [r3, #40]	; 0x28
		value >>=1;
 8000148:	687b      	ldr	r3, [r7, #4]
 800014a:	085b      	lsrs	r3, r3, #1
 800014c:	607b      	str	r3, [r7, #4]
		sct_clk(1);
 800014e:	4b0d      	ldr	r3, [pc, #52]	; (8000184 <sct_led+0x64>)
 8000150:	2208      	movs	r2, #8
 8000152:	619a      	str	r2, [r3, #24]
		sct_clk(0);
 8000154:	4b0b      	ldr	r3, [pc, #44]	; (8000184 <sct_led+0x64>)
 8000156:	2208      	movs	r2, #8
 8000158:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint8_t j = 0; j<32; j++)
 800015a:	210f      	movs	r1, #15
 800015c:	187b      	adds	r3, r7, r1
 800015e:	781a      	ldrb	r2, [r3, #0]
 8000160:	187b      	adds	r3, r7, r1
 8000162:	3201      	adds	r2, #1
 8000164:	701a      	strb	r2, [r3, #0]
 8000166:	230f      	movs	r3, #15
 8000168:	18fb      	adds	r3, r7, r3
 800016a:	781b      	ldrb	r3, [r3, #0]
 800016c:	2b1f      	cmp	r3, #31
 800016e:	d9e0      	bls.n	8000132 <sct_led+0x12>
	}

	sct_nla(1);
 8000170:	4b04      	ldr	r3, [pc, #16]	; (8000184 <sct_led+0x64>)
 8000172:	2220      	movs	r2, #32
 8000174:	619a      	str	r2, [r3, #24]
	sct_nla(0);
 8000176:	4b03      	ldr	r3, [pc, #12]	; (8000184 <sct_led+0x64>)
 8000178:	2220      	movs	r2, #32
 800017a:	629a      	str	r2, [r3, #40]	; 0x28

}
 800017c:	46c0      	nop			; (mov r8, r8)
 800017e:	46bd      	mov	sp, r7
 8000180:	b004      	add	sp, #16
 8000182:	bd80      	pop	{r7, pc}
 8000184:	48000400 	.word	0x48000400

08000188 <sct_init>:


void sct_init(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN; //enable clock
 800018c:	4b0b      	ldr	r3, [pc, #44]	; (80001bc <sct_init+0x34>)
 800018e:	695a      	ldr	r2, [r3, #20]
 8000190:	4b0a      	ldr	r3, [pc, #40]	; (80001bc <sct_init+0x34>)
 8000192:	2180      	movs	r1, #128	; 0x80
 8000194:	02c9      	lsls	r1, r1, #11
 8000196:	430a      	orrs	r2, r1
 8000198:	615a      	str	r2, [r3, #20]
	GPIOB->MODER |= GPIO_MODER_MODER3_0 |GPIO_MODER_MODER4_0 |GPIO_MODER_MODER5_0|GPIO_MODER_MODER10_0; //set output pins (D3,D4,D5,D6)
 800019a:	4b09      	ldr	r3, [pc, #36]	; (80001c0 <sct_init+0x38>)
 800019c:	681a      	ldr	r2, [r3, #0]
 800019e:	4b08      	ldr	r3, [pc, #32]	; (80001c0 <sct_init+0x38>)
 80001a0:	4908      	ldr	r1, [pc, #32]	; (80001c4 <sct_init+0x3c>)
 80001a2:	430a      	orrs	r2, r1
 80001a4:	601a      	str	r2, [r3, #0]
	sct_noe(0); 		//zeros into registers
 80001a6:	4b06      	ldr	r3, [pc, #24]	; (80001c0 <sct_init+0x38>)
 80001a8:	2280      	movs	r2, #128	; 0x80
 80001aa:	00d2      	lsls	r2, r2, #3
 80001ac:	629a      	str	r2, [r3, #40]	; 0x28
	sct_led(0);			//output activation using neg.OE
 80001ae:	2000      	movs	r0, #0
 80001b0:	f7ff ffb6 	bl	8000120 <sct_led>

}
 80001b4:	46c0      	nop			; (mov r8, r8)
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	46c0      	nop			; (mov r8, r8)
 80001bc:	40021000 	.word	0x40021000
 80001c0:	48000400 	.word	0x48000400
 80001c4:	00100540 	.word	0x00100540

080001c8 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001cc:	4b1a      	ldr	r3, [pc, #104]	; (8000238 <SystemInit+0x70>)
 80001ce:	681a      	ldr	r2, [r3, #0]
 80001d0:	4b19      	ldr	r3, [pc, #100]	; (8000238 <SystemInit+0x70>)
 80001d2:	2101      	movs	r1, #1
 80001d4:	430a      	orrs	r2, r1
 80001d6:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 80001d8:	4b17      	ldr	r3, [pc, #92]	; (8000238 <SystemInit+0x70>)
 80001da:	685a      	ldr	r2, [r3, #4]
 80001dc:	4b16      	ldr	r3, [pc, #88]	; (8000238 <SystemInit+0x70>)
 80001de:	4917      	ldr	r1, [pc, #92]	; (800023c <SystemInit+0x74>)
 80001e0:	400a      	ands	r2, r1
 80001e2:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001e4:	4b14      	ldr	r3, [pc, #80]	; (8000238 <SystemInit+0x70>)
 80001e6:	681a      	ldr	r2, [r3, #0]
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <SystemInit+0x70>)
 80001ea:	4915      	ldr	r1, [pc, #84]	; (8000240 <SystemInit+0x78>)
 80001ec:	400a      	ands	r2, r1
 80001ee:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80001f0:	4b11      	ldr	r3, [pc, #68]	; (8000238 <SystemInit+0x70>)
 80001f2:	681a      	ldr	r2, [r3, #0]
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <SystemInit+0x70>)
 80001f6:	4913      	ldr	r1, [pc, #76]	; (8000244 <SystemInit+0x7c>)
 80001f8:	400a      	ands	r2, r1
 80001fa:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 80001fc:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <SystemInit+0x70>)
 80001fe:	685a      	ldr	r2, [r3, #4]
 8000200:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <SystemInit+0x70>)
 8000202:	4911      	ldr	r1, [pc, #68]	; (8000248 <SystemInit+0x80>)
 8000204:	400a      	ands	r2, r1
 8000206:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000208:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <SystemInit+0x70>)
 800020a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800020c:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <SystemInit+0x70>)
 800020e:	210f      	movs	r1, #15
 8000210:	438a      	bics	r2, r1
 8000212:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEEC;
 8000214:	4b08      	ldr	r3, [pc, #32]	; (8000238 <SystemInit+0x70>)
 8000216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000218:	4b07      	ldr	r3, [pc, #28]	; (8000238 <SystemInit+0x70>)
 800021a:	490c      	ldr	r1, [pc, #48]	; (800024c <SystemInit+0x84>)
 800021c:	400a      	ands	r2, r1
 800021e:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8000220:	4b05      	ldr	r3, [pc, #20]	; (8000238 <SystemInit+0x70>)
 8000222:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000224:	4b04      	ldr	r3, [pc, #16]	; (8000238 <SystemInit+0x70>)
 8000226:	2101      	movs	r1, #1
 8000228:	438a      	bics	r2, r1
 800022a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800022c:	4b02      	ldr	r3, [pc, #8]	; (8000238 <SystemInit+0x70>)
 800022e:	2200      	movs	r2, #0
 8000230:	609a      	str	r2, [r3, #8]

}
 8000232:	46c0      	nop			; (mov r8, r8)
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	40021000 	.word	0x40021000
 800023c:	08ffb80c 	.word	0x08ffb80c
 8000240:	fef6ffff 	.word	0xfef6ffff
 8000244:	fffbffff 	.word	0xfffbffff
 8000248:	ffc0ffff 	.word	0xffc0ffff
 800024c:	fffffeec 	.word	0xfffffeec

08000250 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000250:	480d      	ldr	r0, [pc, #52]	; (8000288 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000252:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000254:	f7ff ffb8 	bl	80001c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000258:	480c      	ldr	r0, [pc, #48]	; (800028c <LoopForever+0x6>)
  ldr r1, =_edata
 800025a:	490d      	ldr	r1, [pc, #52]	; (8000290 <LoopForever+0xa>)
  ldr r2, =_sidata
 800025c:	4a0d      	ldr	r2, [pc, #52]	; (8000294 <LoopForever+0xe>)
  movs r3, #0
 800025e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000260:	e002      	b.n	8000268 <LoopCopyDataInit>

08000262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000266:	3304      	adds	r3, #4

08000268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800026a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800026c:	d3f9      	bcc.n	8000262 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800026e:	4a0a      	ldr	r2, [pc, #40]	; (8000298 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000270:	4c0a      	ldr	r4, [pc, #40]	; (800029c <LoopForever+0x16>)
  movs r3, #0
 8000272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000274:	e001      	b.n	800027a <LoopFillZerobss>

08000276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000278:	3204      	adds	r2, #4

0800027a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800027a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800027c:	d3fb      	bcc.n	8000276 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800027e:	f000 f811 	bl	80002a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000282:	f7ff ff41 	bl	8000108 <main>

08000286 <LoopForever>:

LoopForever:
    b LoopForever
 8000286:	e7fe      	b.n	8000286 <LoopForever>
  ldr   r0, =_estack
 8000288:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800028c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000290:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000294:	0800030c 	.word	0x0800030c
  ldr r2, =_sbss
 8000298:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800029c:	2000001c 	.word	0x2000001c

080002a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a0:	e7fe      	b.n	80002a0 <ADC_IRQHandler>
	...

080002a4 <__libc_init_array>:
 80002a4:	b570      	push	{r4, r5, r6, lr}
 80002a6:	2600      	movs	r6, #0
 80002a8:	4d0c      	ldr	r5, [pc, #48]	; (80002dc <__libc_init_array+0x38>)
 80002aa:	4c0d      	ldr	r4, [pc, #52]	; (80002e0 <__libc_init_array+0x3c>)
 80002ac:	1b64      	subs	r4, r4, r5
 80002ae:	10a4      	asrs	r4, r4, #2
 80002b0:	42a6      	cmp	r6, r4
 80002b2:	d109      	bne.n	80002c8 <__libc_init_array+0x24>
 80002b4:	2600      	movs	r6, #0
 80002b6:	f000 f819 	bl	80002ec <_init>
 80002ba:	4d0a      	ldr	r5, [pc, #40]	; (80002e4 <__libc_init_array+0x40>)
 80002bc:	4c0a      	ldr	r4, [pc, #40]	; (80002e8 <__libc_init_array+0x44>)
 80002be:	1b64      	subs	r4, r4, r5
 80002c0:	10a4      	asrs	r4, r4, #2
 80002c2:	42a6      	cmp	r6, r4
 80002c4:	d105      	bne.n	80002d2 <__libc_init_array+0x2e>
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
 80002c8:	00b3      	lsls	r3, r6, #2
 80002ca:	58eb      	ldr	r3, [r5, r3]
 80002cc:	4798      	blx	r3
 80002ce:	3601      	adds	r6, #1
 80002d0:	e7ee      	b.n	80002b0 <__libc_init_array+0xc>
 80002d2:	00b3      	lsls	r3, r6, #2
 80002d4:	58eb      	ldr	r3, [r5, r3]
 80002d6:	4798      	blx	r3
 80002d8:	3601      	adds	r6, #1
 80002da:	e7f2      	b.n	80002c2 <__libc_init_array+0x1e>
 80002dc:	08000304 	.word	0x08000304
 80002e0:	08000304 	.word	0x08000304
 80002e4:	08000304 	.word	0x08000304
 80002e8:	08000308 	.word	0x08000308

080002ec <_init>:
 80002ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ee:	46c0      	nop			; (mov r8, r8)
 80002f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002f2:	bc08      	pop	{r3}
 80002f4:	469e      	mov	lr, r3
 80002f6:	4770      	bx	lr

080002f8 <_fini>:
 80002f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002fe:	bc08      	pop	{r3}
 8000300:	469e      	mov	lr, r3
 8000302:	4770      	bx	lr
